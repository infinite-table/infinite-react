// Generated by dts-bundle-generator v5.9.0

export interface Event {
}
export interface AnimationEvent extends Event {
}
export interface ClipboardEvent extends Event {
}
export interface CompositionEvent extends Event {
}
export interface DragEvent extends Event {
}
export interface FocusEvent extends Event {
}
export interface KeyboardEvent extends Event {
}
export interface MouseEvent extends Event {
}
export interface TouchEvent extends Event {
}
export interface PointerEvent extends Event {
}
export interface TransitionEvent extends Event {
}
export interface UIEvent extends Event {
}
export interface WheelEvent extends Event {
}
export interface EventTarget {
}
export interface Document {
}
export interface DataTransfer {
}
export interface StyleMedia {
}
export interface Element {
}
export interface HTMLElement extends Element {
}
export interface HTMLAnchorElement extends HTMLElement {
}
export interface HTMLAreaElement extends HTMLElement {
}
export interface HTMLAudioElement extends HTMLElement {
}
export interface HTMLBaseElement extends HTMLElement {
}
export interface HTMLBodyElement extends HTMLElement {
}
export interface HTMLBRElement extends HTMLElement {
}
export interface HTMLButtonElement extends HTMLElement {
}
export interface HTMLCanvasElement extends HTMLElement {
}
export interface HTMLDataElement extends HTMLElement {
}
export interface HTMLDataListElement extends HTMLElement {
}
export interface HTMLDialogElement extends HTMLElement {
}
export interface HTMLDivElement extends HTMLElement {
}
export interface HTMLDListElement extends HTMLElement {
}
export interface HTMLEmbedElement extends HTMLElement {
}
export interface HTMLFieldSetElement extends HTMLElement {
}
export interface HTMLFormElement extends HTMLElement {
}
export interface HTMLHeadingElement extends HTMLElement {
}
export interface HTMLHeadElement extends HTMLElement {
}
export interface HTMLHRElement extends HTMLElement {
}
export interface HTMLHtmlElement extends HTMLElement {
}
export interface HTMLIFrameElement extends HTMLElement {
}
export interface HTMLImageElement extends HTMLElement {
}
export interface HTMLInputElement extends HTMLElement {
}
export interface HTMLModElement extends HTMLElement {
}
export interface HTMLLabelElement extends HTMLElement {
}
export interface HTMLLegendElement extends HTMLElement {
}
export interface HTMLLIElement extends HTMLElement {
}
export interface HTMLLinkElement extends HTMLElement {
}
export interface HTMLMapElement extends HTMLElement {
}
export interface HTMLMetaElement extends HTMLElement {
}
export interface HTMLObjectElement extends HTMLElement {
}
export interface HTMLOListElement extends HTMLElement {
}
export interface HTMLOptGroupElement extends HTMLElement {
}
export interface HTMLOptionElement extends HTMLElement {
}
export interface HTMLParagraphElement extends HTMLElement {
}
export interface HTMLParamElement extends HTMLElement {
}
export interface HTMLPreElement extends HTMLElement {
}
export interface HTMLProgressElement extends HTMLElement {
}
export interface HTMLQuoteElement extends HTMLElement {
}
export interface HTMLScriptElement extends HTMLElement {
}
export interface HTMLSelectElement extends HTMLElement {
}
export interface HTMLSourceElement extends HTMLElement {
}
export interface HTMLSpanElement extends HTMLElement {
}
export interface HTMLStyleElement extends HTMLElement {
}
export interface HTMLTableElement extends HTMLElement {
}
export interface HTMLTableColElement extends HTMLElement {
}
export interface HTMLTableDataCellElement extends HTMLElement {
}
export interface HTMLTableHeaderCellElement extends HTMLElement {
}
export interface HTMLTableRowElement extends HTMLElement {
}
export interface HTMLTableSectionElement extends HTMLElement {
}
export interface HTMLTemplateElement extends HTMLElement {
}
export interface HTMLTextAreaElement extends HTMLElement {
}
export interface HTMLTitleElement extends HTMLElement {
}
export interface HTMLTrackElement extends HTMLElement {
}
export interface HTMLUListElement extends HTMLElement {
}
export interface HTMLVideoElement extends HTMLElement {
}
export interface HTMLWebViewElement extends HTMLElement {
}
export interface SVGElement extends Element {
}
export interface StandardLonghandProperties<TLength = string | 0> {
	/**
	 * The CSS **`align-content`** property sets how the browser distributes space between and around content items along the cross-axis of a flexbox container, and the main-axis of a grid container.
	 *
	 * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`
	 *
	 * **Initial value**: `normal`
	 *
	 * ---
	 *
	 * _Supported in Flex Layout_
	 *
	 * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |
	 * | :------: | :-----: | :-------: | :----: | :----: |
	 * |  **29**  | **28**  |   **9**   | **12** | **11** |
	 * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |
	 *
	 * ---
	 *
	 * _Supported in Grid Layout_
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **52**  | **10.1** | **16** | No  |
	 *
	 * ---
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/align-content
	 */
	alignContent?: AlignContentProperty;
	/**
	 * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. The align-self property sets the alignment of an item within its containing block. In Flexbox it controls the alignment of items on the Cross Axis, in Grid Layout it controls the alignment of items on the Block Axis within their grid area.
	 *
	 * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`
	 *
	 * **Initial value**: `normal`
	 *
	 * ---
	 *
	 * _Supported in Flex Layout_
	 *
	 * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :------: | :-----: | :-----: | :----: | :----: |
	 * |  **52**  | **20**  |  **9**  | **12** | **11** |
	 * | 21 _-x-_ |         | 7 _-x-_ |        |        |
	 *
	 * ---
	 *
	 * _Supported in Grid Layout_
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **52**  | **10.1** | **16** | No  |
	 *
	 * ---
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/align-items
	 */
	alignItems?: AlignItemsProperty;
	/**
	 * The **`align-self`** CSS property aligns flex items of the current flex line overriding the `align-items` value. If any of the item's cross-axis margin is set to `auto`, then `align-self` is ignored. In Grid layout `align-self` aligns the item inside the grid area.
	 *
	 * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`
	 *
	 * **Initial value**: `auto`
	 *
	 * ---
	 *
	 * _Supported in Flex Layout_
	 *
	 * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |
	 * | :------: | :-----: | :-------: | :----: | :----: |
	 * |  **36**  | **20**  |   **9**   | **12** | **11** |
	 * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |
	 *
	 * ---
	 *
	 * _Supported in Grid Layout_
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  |      IE      |
	 * | :----: | :-----: | :------: | :----: | :----------: |
	 * | **57** | **52**  | **10.1** | **16** | **10** _-x-_ |
	 *
	 * ---
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/align-self
	 */
	alignSelf?: AlignSelfProperty;
	/**
	 * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **43**  | **16**  |  **9**  | **12** | **10** |
	 * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/animation-delay
	 */
	animationDelay?: GlobalsString;
	/**
	 * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.
	 *
	 * **Syntax**: `<single-animation-direction>#`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **43**  | **16**  |  **9**  | **12** | **10** |
	 * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/animation-direction
	 */
	animationDirection?: AnimationDirectionProperty;
	/**
	 * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **43**  | **16**  |  **9**  | **12** | **10** |
	 * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/animation-duration
	 */
	animationDuration?: GlobalsString;
	/**
	 * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.
	 *
	 * **Syntax**: `<single-animation-fill-mode>#`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **43**  | **16**  |  **9**  | **12** | **10** |
	 * | 3 _-x-_ | 5 _-x-_ | 5 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode
	 */
	animationFillMode?: AnimationFillModeProperty;
	/**
	 * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.
	 *
	 * **Syntax**: `<single-animation-iteration-count>#`
	 *
	 * **Initial value**: `1`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **43**  | **16**  |  **9**  | **12** | **10** |
	 * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count
	 */
	animationIterationCount?: AnimationIterationCountProperty;
	/**
	 * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.
	 *
	 * **Syntax**: `[ none | <keyframes-name> ]#`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **43**  | **16**  |  **9**  | **12** | **10** |
	 * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/animation-name
	 */
	animationName?: AnimationNameProperty;
	/**
	 * The **`animation-play-state`** CSS property sets whether an animation is running or paused.
	 *
	 * **Syntax**: `<single-animation-play-state>#`
	 *
	 * **Initial value**: `running`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **43**  | **16**  |  **9**  | **12** | **10** |
	 * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state
	 */
	animationPlayState?: AnimationPlayStateProperty;
	/**
	 * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.
	 *
	 * **Syntax**: `<timing-function>#`
	 *
	 * **Initial value**: `ease`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **43**  | **16**  |  **9**  | **12** | **10** |
	 * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function
	 */
	animationTimingFunction?: AnimationTimingFunctionProperty;
	/**
	 * The **`-moz-appearance`** CSS property is used in Gecko (Firefox) to display an element using platform-native styling based on the operating system's theme.
	 *
	 * **Syntax**: `none | auto | button | textfield | <compat>`
	 *
	 * **Initial value**: `auto`
	 *
	 * |   Chrome    |   Firefox   |   Safari    |     Edge     | IE  |
	 * | :---------: | :---------: | :---------: | :----------: | :-: |
	 * | **1** _-x-_ | **1** _-x-_ | **3** _-x-_ | **12** _-x-_ | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/appearance
	 */
	appearance?: AppearanceProperty;
	/**
	 * The **`aspect-ratio`**    CSS property sets a _**preferred aspect ratio**_ for the box, which will be used in the calculation of auto sizes and some other layout functions.
	 *
	 * **Syntax**: `auto | <ratio>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **79** | **71**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio
	 */
	aspectRatio?: AspectRatioProperty;
	/**
	 * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.
	 *
	 * **Syntax**: `none | <filter-function-list>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox |   Safari    |  Edge  | IE  |
	 * | :----: | :-----: | :---------: | :----: | :-: |
	 * | **76** |   n/a   | **9** _-x-_ | **17** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter
	 */
	backdropFilter?: BackdropFilterProperty;
	/**
	 * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.
	 *
	 * **Syntax**: `visible | hidden`
	 *
	 * **Initial value**: `visible`
	 *
	 * |  Chrome  | Firefox  |    Safari     |  Edge  |   IE   |
	 * | :------: | :------: | :-----------: | :----: | :----: |
	 * |  **36**  |  **16**  | **5.1** _-x-_ | **12** | **10** |
	 * | 12 _-x-_ | 10 _-x-_ |               |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility
	 */
	backfaceVisibility?: BackfaceVisibilityProperty;
	/**
	 * The **`background-attachment`** CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.
	 *
	 * **Syntax**: `<attachment>#`
	 *
	 * **Initial value**: `scroll`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/background-attachment
	 */
	backgroundAttachment?: BackgroundAttachmentProperty;
	/**
	 * The **`background-blend-mode`** CSS property sets how an element's background images should blend with each other and with the element's background color.
	 *
	 * **Syntax**: `<blend-mode>#`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **35** | **30**  | **8**  | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode
	 */
	backgroundBlendMode?: BackgroundBlendModeProperty;
	/**
	 * The **`background-clip`** CSS property sets whether an element's background `<color>` or `<image>` extends underneath its border.
	 *
	 * **Syntax**: `<box>#`
	 *
	 * **Initial value**: `border-box`
	 *
	 * | Chrome | Firefox |   Safari    |  Edge  |  IE   |
	 * | :----: | :-----: | :---------: | :----: | :---: |
	 * | **1**  |  **4**  | **3** _-x-_ | **12** | **9** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/background-clip
	 */
	backgroundClip?: BackgroundClipProperty;
	/**
	 * The **`background-color`** CSS property sets the background color of an element.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `transparent`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/background-color
	 */
	backgroundColor?: BackgroundColorProperty;
	/**
	 * The **`background-image`** CSS property sets one or more background images on an element.
	 *
	 * **Syntax**: `<bg-image>#`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/background-image
	 */
	backgroundImage?: BackgroundImageProperty;
	/**
	 * The **`background-origin`** CSS property sets the _background positioning area_. In other words, it sets the origin position of an image set with the `background-image` property.
	 *
	 * **Syntax**: `<box>#`
	 *
	 * **Initial value**: `padding-box`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **4**  | **3**  | **12** | **9** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/background-origin
	 */
	backgroundOrigin?: BackgroundOriginProperty;
	/**
	 * The **`background-position`** CSS property sets the initial position for each background image. The position is relative to the position layer set by `background-origin`.
	 *
	 * **Syntax**: `<bg-position>#`
	 *
	 * **Initial value**: `0% 0%`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/background-position
	 */
	backgroundPosition?: BackgroundPositionProperty<TLength>;
	/**
	 * The **`background-position-x`** CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by `background-origin`.
	 *
	 * **Syntax**: `[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#`
	 *
	 * **Initial value**: `left`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  | **49**  | **1**  | **12** | **6** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/background-position-x
	 */
	backgroundPositionX?: BackgroundPositionXProperty<TLength>;
	/**
	 * The **`background-position-y`** CSS property sets the initial vertical position, relative to the background position layer defined by `background-origin`, for each defined background image.
	 *
	 * **Syntax**: `[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#`
	 *
	 * **Initial value**: `top`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  | **49**  | **1**  | **12** | **6** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/background-position-y
	 */
	backgroundPositionY?: BackgroundPositionYProperty<TLength>;
	/**
	 * The **`background-repeat`** CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.
	 *
	 * **Syntax**: `<repeat-style>#`
	 *
	 * **Initial value**: `repeat`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/background-repeat
	 */
	backgroundRepeat?: BackgroundRepeatProperty;
	/**
	 * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.
	 *
	 * **Syntax**: `<bg-size>#`
	 *
	 * **Initial value**: `auto auto`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
	 * | :-----: | :-----: | :-----: | :----: | :---: |
	 * |  **3**  |  **4**  |  **5**  | **12** | **9** |
	 * | 1 _-x-_ |         | 3 _-x-_ |        |       |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/background-size
	 */
	backgroundSize?: BackgroundSizeProperty<TLength>;
	/**
	 * **Syntax**: `clip | ellipsis | <string>`
	 *
	 * **Initial value**: `clip`
	 */
	blockOverflow?: BlockOverflowProperty;
	/**
	 * The **`block-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.
	 *
	 * **Syntax**: `<'width'>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/block-size
	 */
	blockSize?: BlockSizeProperty<TLength>;
	/**
	 * The **`border-block-color`** CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-color'>{1,2}`
	 *
	 * **Initial value**: `currentcolor`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |  n/a   | **66**  |   No   | n/a  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-block-color
	 */
	borderBlockColor?: BorderBlockColorProperty;
	/**
	 * The **`border-block-end-color`** CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-color'>`
	 *
	 * **Initial value**: `currentcolor`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **69** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color
	 */
	borderBlockEndColor?: BorderBlockEndColorProperty;
	/**
	 * The **`border-block-end-style`** CSS property defines the style of the logical block end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-style'>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **69** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style
	 */
	borderBlockEndStyle?: BorderBlockEndStyleProperty;
	/**
	 * The **`border-block-end-width`** CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-width'>`
	 *
	 * **Initial value**: `medium`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **69** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width
	 */
	borderBlockEndWidth?: BorderBlockEndWidthProperty<TLength>;
	/**
	 * The **`border-block-start-color`** CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-color'>`
	 *
	 * **Initial value**: `currentcolor`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **69** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color
	 */
	borderBlockStartColor?: BorderBlockStartColorProperty;
	/**
	 * The **`border-block-start-style`** CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-style'>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **69** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style
	 */
	borderBlockStartStyle?: BorderBlockStartStyleProperty;
	/**
	 * The **`border-block-start-width`** CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-width'>`
	 *
	 * **Initial value**: `medium`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **69** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width
	 */
	borderBlockStartWidth?: BorderBlockStartWidthProperty<TLength>;
	/**
	 * The **`border-block-style`** CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-style'>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **66**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-block-style
	 */
	borderBlockStyle?: BorderBlockStyleProperty;
	/**
	 * The **`border-block-width`** CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-width'>`
	 *
	 * **Initial value**: `medium`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **66**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-block-width
	 */
	borderBlockWidth?: BorderBlockWidthProperty<TLength>;
	/**
	 * The **`border-bottom-color`** CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties `border-color` or `border-bottom`.
	 *
	 * **Syntax**: `<'border-top-color'>`
	 *
	 * **Initial value**: `currentcolor`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color
	 */
	borderBottomColor?: BorderBottomColorProperty;
	/**
	 * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element.
	 *
	 * **Syntax**: `<length-percentage>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
	 * | :-----: | :-----: | :-----: | :----: | :---: |
	 * |  **4**  |  **4**  |  **5**  | **12** | **9** |
	 * | 1 _-x-_ |         | 3 _-x-_ |        |       |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius
	 */
	borderBottomLeftRadius?: BorderBottomLeftRadiusProperty<TLength>;
	/**
	 * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element.
	 *
	 * **Syntax**: `<length-percentage>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
	 * | :-----: | :-----: | :-----: | :----: | :---: |
	 * |  **4**  |  **4**  |  **5**  | **12** | **9** |
	 * | 1 _-x-_ |         | 3 _-x-_ |        |       |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius
	 */
	borderBottomRightRadius?: BorderBottomRightRadiusProperty<TLength>;
	/**
	 * The **`border-bottom-style`** CSS property sets the line style of an element's bottom `border`.
	 *
	 * **Syntax**: `<line-style>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE    |
	 * | :----: | :-----: | :----: | :----: | :-----: |
	 * | **1**  |  **1**  | **1**  | **12** | **5.5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style
	 */
	borderBottomStyle?: BorderBottomStyleProperty;
	/**
	 * The **`border-bottom-width`** CSS property sets the width of the bottom border of a box.
	 *
	 * **Syntax**: `<line-width>`
	 *
	 * **Initial value**: `medium`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width
	 */
	borderBottomWidth?: BorderBottomWidthProperty<TLength>;
	/**
	 * The **`border-collapse`** CSS property sets whether cells inside a `<table>` have shared or separate borders.
	 *
	 * **Syntax**: `collapse | separate`
	 *
	 * **Initial value**: `separate`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |  IE   |
	 * | :----: | :-----: | :-----: | :----: | :---: |
	 * | **1**  |  **1**  | **1.2** | **12** | **5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-collapse
	 */
	borderCollapse?: BorderCollapseProperty;
	/**
	 * The **`border-end-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on on the element's `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<length-percentage>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **66**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius
	 */
	borderEndEndRadius?: BorderEndEndRadiusProperty<TLength>;
	/**
	 * The **`border-end-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<length-percentage>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **66**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius
	 */
	borderEndStartRadius?: BorderEndStartRadiusProperty<TLength>;
	/**
	 * The **`border-image-outset`** CSS property sets the distance by which an element's border image is set out from its border box.
	 *
	 * **Syntax**: `[ <length> | <number> ]{1,4}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE   |
	 * | :----: | :-----: | :----: | :----: | :----: |
	 * | **15** | **15**  | **6**  | **12** | **11** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset
	 */
	borderImageOutset?: BorderImageOutsetProperty<TLength>;
	/**
	 * The **`border-image-repeat`** CSS property defines how the edge regions of a source image are adjusted to fit the dimensions of an element's border image.
	 *
	 * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`
	 *
	 * **Initial value**: `stretch`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE   |
	 * | :----: | :-----: | :----: | :----: | :----: |
	 * | **15** | **15**  | **6**  | **12** | **11** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat
	 */
	borderImageRepeat?: BorderImageRepeatProperty;
	/**
	 * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.
	 *
	 * **Syntax**: `<number-percentage>{1,4} && fill?`
	 *
	 * **Initial value**: `100%`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE   |
	 * | :----: | :-----: | :----: | :----: | :----: |
	 * | **15** | **15**  | **6**  | **12** | **11** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice
	 */
	borderImageSlice?: BorderImageSliceProperty;
	/**
	 * The **`border-image-source`** CSS property sets the source image used to create an element's border image.
	 *
	 * **Syntax**: `none | <image>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE   |
	 * | :----: | :-----: | :----: | :----: | :----: |
	 * | **15** | **15**  | **6**  | **12** | **11** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-image-source
	 */
	borderImageSource?: BorderImageSourceProperty;
	/**
	 * The **`border-image-width`** CSS property sets the width of an element's border image.
	 *
	 * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`
	 *
	 * **Initial value**: `1`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE   |
	 * | :----: | :-----: | :----: | :----: | :----: |
	 * | **15** | **13**  | **6**  | **12** | **11** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-image-width
	 */
	borderImageWidth?: BorderImageWidthProperty<TLength>;
	/**
	 * The **`border-inline-color`** CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-color'>{1,2}`
	 *
	 * **Initial value**: `currentcolor`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **66**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color
	 */
	borderInlineColor?: BorderInlineColorProperty;
	/**
	 * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-color'>`
	 *
	 * **Initial value**: `currentcolor`
	 *
	 * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |
	 * | :----: | :-------------------------: | :------: | :----: | :-: |
	 * | **69** |           **41**            | **12.1** | **79** | No  |
	 * |        | 3 _(-moz-border-end-color)_ |          |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color
	 */
	borderInlineEndColor?: BorderInlineEndColorProperty;
	/**
	 * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-style'>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |
	 * | :----: | :-------------------------: | :------: | :----: | :-: |
	 * | **69** |           **41**            | **12.1** | **79** | No  |
	 * |        | 3 _(-moz-border-end-style)_ |          |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style
	 */
	borderInlineEndStyle?: BorderInlineEndStyleProperty;
	/**
	 * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-width'>`
	 *
	 * **Initial value**: `medium`
	 *
	 * | Chrome |           Firefox           |  Safari  |  Edge  | IE  |
	 * | :----: | :-------------------------: | :------: | :----: | :-: |
	 * | **69** |           **41**            | **12.1** | **79** | No  |
	 * |        | 3 _(-moz-border-end-width)_ |          |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width
	 */
	borderInlineEndWidth?: BorderInlineEndWidthProperty<TLength>;
	/**
	 * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-color'>`
	 *
	 * **Initial value**: `currentcolor`
	 *
	 * | Chrome |            Firefox            |  Safari  |  Edge  | IE  |
	 * | :----: | :---------------------------: | :------: | :----: | :-: |
	 * | **69** |            **41**             | **12.1** | **79** | No  |
	 * |        | 3 _(-moz-border-start-color)_ |          |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color
	 */
	borderInlineStartColor?: BorderInlineStartColorProperty;
	/**
	 * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-style'>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome |            Firefox            |  Safari  |  Edge  | IE  |
	 * | :----: | :---------------------------: | :------: | :----: | :-: |
	 * | **69** |            **41**             | **12.1** | **79** | No  |
	 * |        | 3 _(-moz-border-start-style)_ |          |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style
	 */
	borderInlineStartStyle?: BorderInlineStartStyleProperty;
	/**
	 * The **`border-inline-start-width`** CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-width'>`
	 *
	 * **Initial value**: `medium`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **69** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width
	 */
	borderInlineStartWidth?: BorderInlineStartWidthProperty<TLength>;
	/**
	 * The **`border-inline-style`** CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-style'>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **66**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style
	 */
	borderInlineStyle?: BorderInlineStyleProperty;
	/**
	 * The **`border-inline-width`** CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-width'>`
	 *
	 * **Initial value**: `medium`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **66**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width
	 */
	borderInlineWidth?: BorderInlineWidthProperty<TLength>;
	/**
	 * The **`border-left-color`** CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties `border-color` or `border-left`.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `currentcolor`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-left-color
	 */
	borderLeftColor?: BorderLeftColorProperty;
	/**
	 * The **`border-left-style`** CSS property sets the line style of an element's left `border`.
	 *
	 * **Syntax**: `<line-style>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE    |
	 * | :----: | :-----: | :----: | :----: | :-----: |
	 * | **1**  |  **1**  | **1**  | **12** | **5.5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-left-style
	 */
	borderLeftStyle?: BorderLeftStyleProperty;
	/**
	 * The **`border-left-width`** CSS property sets the width of the left border of an element.
	 *
	 * **Syntax**: `<line-width>`
	 *
	 * **Initial value**: `medium`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-left-width
	 */
	borderLeftWidth?: BorderLeftWidthProperty<TLength>;
	/**
	 * The **`border-right-color`** CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties `border-color` or `border-right`.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `currentcolor`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-right-color
	 */
	borderRightColor?: BorderRightColorProperty;
	/**
	 * The **`border-right-style`** CSS property sets the line style of an element's right `border`.
	 *
	 * **Syntax**: `<line-style>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE    |
	 * | :----: | :-----: | :----: | :----: | :-----: |
	 * | **1**  |  **1**  | **1**  | **12** | **5.5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-right-style
	 */
	borderRightStyle?: BorderRightStyleProperty;
	/**
	 * The **`border-right-width`** CSS property sets the width of the right border of an element.
	 *
	 * **Syntax**: `<line-width>`
	 *
	 * **Initial value**: `medium`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-right-width
	 */
	borderRightWidth?: BorderRightWidthProperty<TLength>;
	/**
	 * The **`border-spacing`** CSS property sets the distance between the borders of adjacent `<table>` cells. This property applies only when `border-collapse` is `separate`.
	 *
	 * **Syntax**: `<length> <length>?`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **8** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-spacing
	 */
	borderSpacing?: BorderSpacingProperty<TLength>;
	/**
	 * The **`border-start-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<length-percentage>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **66**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius
	 */
	borderStartEndRadius?: BorderStartEndRadiusProperty<TLength>;
	/**
	 * The **`border-start-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<length-percentage>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **66**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius
	 */
	borderStartStartRadius?: BorderStartStartRadiusProperty<TLength>;
	/**
	 * The **`border-top-color`** CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties `border-color` or `border-top`.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `currentcolor`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-top-color
	 */
	borderTopColor?: BorderTopColorProperty;
	/**
	 * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element.
	 *
	 * **Syntax**: `<length-percentage>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
	 * | :-----: | :-----: | :-----: | :----: | :---: |
	 * |  **4**  |  **4**  |  **5**  | **12** | **9** |
	 * | 1 _-x-_ |         | 3 _-x-_ |        |       |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius
	 */
	borderTopLeftRadius?: BorderTopLeftRadiusProperty<TLength>;
	/**
	 * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element.
	 *
	 * **Syntax**: `<length-percentage>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
	 * | :-----: | :-----: | :-----: | :----: | :---: |
	 * |  **4**  |  **4**  |  **5**  | **12** | **9** |
	 * | 1 _-x-_ |         | 3 _-x-_ |        |       |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius
	 */
	borderTopRightRadius?: BorderTopRightRadiusProperty<TLength>;
	/**
	 * The **`border-top-style`** CSS property sets the line style of an element's top `border`.
	 *
	 * **Syntax**: `<line-style>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE    |
	 * | :----: | :-----: | :----: | :----: | :-----: |
	 * | **1**  |  **1**  | **1**  | **12** | **5.5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-top-style
	 */
	borderTopStyle?: BorderTopStyleProperty;
	/**
	 * The **`border-top-width`** CSS property sets the width of the top border of an element.
	 *
	 * **Syntax**: `<line-width>`
	 *
	 * **Initial value**: `medium`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-top-width
	 */
	borderTopWidth?: BorderTopWidthProperty<TLength>;
	/**
	 * The **`bottom`** CSS property participates in specifying the vertical position of a _positioned element_. It has no effect on non-positioned elements.
	 *
	 * **Syntax**: `<length> | <percentage> | auto`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/bottom
	 */
	bottom?: BottomProperty<TLength>;
	/**
	 * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.
	 *
	 * **Syntax**: `slice | clone`
	 *
	 * **Initial value**: `slice`
	 *
	 * |    Chrome    | Firefox |    Safari     |     Edge     | IE  |
	 * | :----------: | :-----: | :-----------: | :----------: | :-: |
	 * | **22** _-x-_ | **32**  | **6.1** _-x-_ | **79** _-x-_ | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break
	 */
	boxDecorationBreak?: BoxDecorationBreakProperty;
	/**
	 * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color.
	 *
	 * **Syntax**: `none | <shadow>#`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
	 * | :-----: | :-----: | :-----: | :----: | :---: |
	 * | **10**  |  **4**  | **5.1** | **12** | **9** |
	 * | 1 _-x-_ |         | 3 _-x-_ |        |       |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/box-shadow
	 */
	boxShadow?: BoxShadowProperty;
	/**
	 * The **`box-sizing`** CSS property defines how the user agent should calculate the total width and height of an element.
	 *
	 * **Syntax**: `content-box | border-box`
	 *
	 * **Initial value**: `content-box`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
	 * | :-----: | :-----: | :-----: | :----: | :---: |
	 * | **10**  | **29**  | **5.1** | **12** | **8** |
	 * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_ |        |       |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/box-sizing
	 */
	boxSizing?: BoxSizingProperty;
	/**
	 * The **`break-after`** CSS property defines how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.
	 *
	 * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`
	 *
	 * **Initial value**: `auto`
	 *
	 * ---
	 *
	 * _Supported in Multi-column Layout_
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE   |
	 * | :----: | :-----: | :----: | :----: | :----: |
	 * | **50** |   No    |   No   | **12** | **10** |
	 *
	 * ---
	 *
	 * _Supported in Paged Media_
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE   |
	 * | :----: | :-----: | :----: | :----: | :----: |
	 * | **50** | **65**  | **10** | **12** | **10** |
	 *
	 * ---
	 *
	 * _Supported in CSS Regions_
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   |   No    |   No   |  No  | No  |
	 *
	 * ---
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/break-after
	 */
	breakAfter?: BreakAfterProperty;
	/**
	 * The **`break-before`** CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.
	 *
	 * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`
	 *
	 * **Initial value**: `auto`
	 *
	 * ---
	 *
	 * _Supported in Multi-column Layout_
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE   |
	 * | :----: | :-----: | :----: | :----: | :----: |
	 * | **50** | **65**  |   No   | **12** | **10** |
	 *
	 * ---
	 *
	 * _Supported in Paged Media_
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE   |
	 * | :----: | :-----: | :----: | :----: | :----: |
	 * | **50** | **65**  | **10** | **12** | **10** |
	 *
	 * ---
	 *
	 * _Supported in CSS Regions_
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   |   No    |   No   |  No  | No  |
	 *
	 * ---
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/break-before
	 */
	breakBefore?: BreakBeforeProperty;
	/**
	 * The **`break-inside`** CSS property defines how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.
	 *
	 * **Syntax**: `auto | avoid | avoid-page | avoid-column | avoid-region`
	 *
	 * **Initial value**: `auto`
	 *
	 * ---
	 *
	 * _Supported in Multi-column Layout_
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE   |
	 * | :----: | :-----: | :----: | :----: | :----: |
	 * | **50** | **65**  | **10** | **12** | **10** |
	 *
	 * ---
	 *
	 * _Supported in Paged Media_
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE   |
	 * | :----: | :-----: | :----: | :----: | :----: |
	 * | **50** | **65**  | **10** | **12** | **10** |
	 *
	 * ---
	 *
	 * _Supported in CSS Regions_
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   |   No    |   No   |  No  | No  |
	 *
	 * ---
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/break-inside
	 */
	breakInside?: BreakInsideProperty;
	/**
	 * The **`caption-side`** CSS property puts the content of a table's `<caption>` on the specified side. The values are relative to the `writing-mode` of the table.
	 *
	 * **Syntax**: `top | bottom | block-start | block-end | inline-start | inline-end`
	 *
	 * **Initial value**: `top`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **8** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/caption-side
	 */
	captionSide?: CaptionSideProperty;
	/**
	 * The **`caret-color`** CSS property sets the color of the insertion caret, the visible marker where the next character typed will be inserted. The caret appears in elements such as `<input>` or those with the `contenteditable` attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.
	 *
	 * **Syntax**: `auto | <color>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **53**  | **11.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/caret-color
	 */
	caretColor?: CaretColorProperty;
	/**
	 * The **`clear`** CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The `clear` property applies to floating and non-floating elements.
	 *
	 * **Syntax**: `none | left | right | both | inline-start | inline-end`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/clear
	 */
	clear?: ClearProperty;
	/**
	 * The `**clip-path**` CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.
	 *
	 * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`
	 *
	 * **Initial value**: `none`
	 *
	 * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |
	 * | :------: | :-----: | :-------: | :----: | :----: |
	 * |  **55**  | **3.5** |  **9.1**  | **12** | **10** |
	 * | 23 _-x-_ |         | 6.1 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/clip-path
	 */
	clipPath?: ClipPathProperty;
	/**
	 * The **`color`** CSS property sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value. `currentcolor` may be used as an indirect value on _other_ properties and is the default for other color properties, such as `border-color`.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: Varies from one browser to another
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **3** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/color
	 */
	color?: ColorProperty;
	/**
	 * The **`color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.
	 *
	 * **Syntax**: `economy | exact`
	 *
	 * **Initial value**: `economy`
	 *
	 * |    Chrome    | Firefox |   Safari    |     Edge     | IE  |
	 * | :----------: | :-----: | :---------: | :----------: | :-: |
	 * | **49** _-x-_ | **48**  | **6** _-x-_ | **79** _-x-_ | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/color-adjust
	 */
	colorAdjust?: ColorAdjustProperty;
	/**
	 * The **`column-count`** CSS property breaks an element's content into the specified number of columns.
	 *
	 * **Syntax**: `<integer> | auto`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **50**  | **52**  |  **9**  | **12** | **10** |
	 * | 1 _-x-_ |         | 3 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/column-count
	 */
	columnCount?: ColumnCountProperty;
	/**
	 * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.
	 *
	 * **Syntax**: `auto | balance | balance-all`
	 *
	 * **Initial value**: `balance`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |   IE   |
	 * | :----: | :-----: | :-----: | :----: | :----: |
	 * | **50** | **52**  |  **9**  | **12** | **10** |
	 * |        |         | 8 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/column-fill
	 */
	columnFill?: ColumnFillProperty;
	/**
	 * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.
	 *
	 * **Syntax**: `normal | <length-percentage>`
	 *
	 * **Initial value**: `normal`
	 *
	 * ---
	 *
	 * _Supported in Flex Layout_
	 *
	 * | Chrome | Firefox |   Safari    | Edge | IE  |
	 * | :----: | :-----: | :---------: | :--: | :-: |
	 * |   No   | **63**  | **3** _-x-_ |  No  | No  |
	 *
	 * ---
	 *
	 * _Supported in Grid Layout_
	 *
	 * |     Chrome      |     Firefox     |        Safari         |  Edge  | IE  |
	 * | :-------------: | :-------------: | :-------------------: | :----: | :-: |
	 * |     **66**      |     **61**      | **10.1** _(grid-gap)_ | **16** | No  |
	 * | 57 _(grid-gap)_ | 52 _(grid-gap)_ |                       |        |     |
	 *
	 * ---
	 *
	 * _Supported in Multi-column Layout_
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **50**  | **52**  | **10**  | **12** | **10** |
	 * | 1 _-x-_ |         | 3 _-x-_ |        |        |
	 *
	 * ---
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/column-gap
	 */
	columnGap?: ColumnGapProperty<TLength>;
	/**
	 * The **`column-rule-color`** CSS property sets the color of the rule (line) drawn between columns in a multi-column layout.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `currentcolor`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **50**  | **52**  |  **9**  | **12** | **10** |
	 * | 1 _-x-_ |         | 3 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color
	 */
	columnRuleColor?: ColumnRuleColorProperty;
	/**
	 * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.
	 *
	 * **Syntax**: `<'border-style'>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **50**  | **52**  |  **9**  | **12** | **10** |
	 * | 1 _-x-_ |         | 3 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style
	 */
	columnRuleStyle?: ColumnRuleStyleProperty;
	/**
	 * The **`column-rule-width`** CSS property sets the width of the rule (line) drawn between columns in a multi-column layout.
	 *
	 * **Syntax**: `<'border-width'>`
	 *
	 * **Initial value**: `medium`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **50**  | **52**  |  **9**  | **12** | **10** |
	 * | 1 _-x-_ |         | 3 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width
	 */
	columnRuleWidth?: ColumnRuleWidthProperty<TLength>;
	/**
	 * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.
	 *
	 * **Syntax**: `none | all`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |
	 * | :-----: | :-----: | :-------: | :----: | :----: |
	 * | **50**  | **71**  |   **9**   | **12** | **10** |
	 * | 6 _-x-_ |         | 5.1 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/column-span
	 */
	columnSpan?: ColumnSpanProperty;
	/**
	 * The **`column-width`** CSS property specifies the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.
	 *
	 * **Syntax**: `<length> | auto`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **50**  | **50**  |  **9**  | **12** | **10** |
	 * | 1 _-x-_ |         | 3 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/column-width
	 */
	columnWidth?: ColumnWidthProperty<TLength>;
	/**
	 * The **`contain`** CSS property allows an author to indicate that an element and its contents are, as much as possible, _independent_ of the rest of the document tree. This allows the browser to recalculate layout, style, paint, size, or any combination of them for a limited area of the DOM and not the entire page.
	 *
	 * **Syntax**: `none | strict | content | [ size || layout || style || paint ]`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **52** | **69**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/contain
	 */
	contain?: ContainProperty;
	/**
	 * The **`content`** CSS property replaces an element with a generated value. Objects inserted using the `content` property are _anonymous replaced elements._
	 *
	 * **Syntax**: `normal | none | [ <content-replacement> | <content-list> ] [/ <string> ]?`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **8** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/content
	 */
	content?: ContentProperty;
	/**
	 * The **`counter-increment`** CSS property increases or decreases the value of a CSS counter by a given value.
	 *
	 * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **2**  |  **1**  | **3**  | **12** | **8** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/counter-increment
	 */
	counterIncrement?: CounterIncrementProperty;
	/**
	 * The **`counter-reset`** CSS property resets a CSS counter to a given value.
	 *
	 * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **2**  |  **1**  | **3**  | **12** | **8** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/counter-reset
	 */
	counterReset?: CounterResetProperty;
	/**
	 * The **`counter-set`** CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.
	 *
	 * **Syntax**: `[ <custom-ident> <integer>? ]+ | none`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **68**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/counter-set
	 */
	counterSet?: CounterSetProperty;
	/**
	 * The **`cursor`** CSS property sets mouse cursor to display when the mouse pointer is over an element.
	 *
	 * **Syntax**: `[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |  IE   |
	 * | :----: | :-----: | :-----: | :----: | :---: |
	 * | **1**  |  **1**  | **1.2** | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/cursor
	 */
	cursor?: CursorProperty;
	/**
	 * The **`direction`** CSS property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).
	 *
	 * **Syntax**: `ltr | rtl`
	 *
	 * **Initial value**: `ltr`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE    |
	 * | :----: | :-----: | :----: | :----: | :-----: |
	 * | **2**  |  **1**  | **1**  | **12** | **5.5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/direction
	 */
	direction?: DirectionProperty;
	/**
	 * The **`display`** CSS property defines the _display type_ of an element, which consists of the two basic qualities of how an element generates boxes — the **outer display type** defining how the box participates in flow layout, and the **inner display type** defining how the children of the box are laid out.
	 *
	 * **Syntax**: `[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>`
	 *
	 * **Initial value**: `inline`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/display
	 */
	display?: DisplayProperty;
	/**
	 * The **`empty-cells`** CSS property sets whether borders and backgrounds appear around `<table>` cells that have no visible content.
	 *
	 * **Syntax**: `show | hide`
	 *
	 * **Initial value**: `show`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |  IE   |
	 * | :----: | :-----: | :-----: | :----: | :---: |
	 * | **1**  |  **1**  | **1.2** | **12** | **8** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/empty-cells
	 */
	emptyCells?: EmptyCellsProperty;
	/**
	 * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.
	 *
	 * **Syntax**: `none | <filter-function-list>`
	 *
	 * **Initial value**: `none`
	 *
	 * |  Chrome  | Firefox | Safari  |  Edge  | IE  |
	 * | :------: | :-----: | :-----: | :----: | :-: |
	 * |  **53**  | **35**  | **9.1** | **12** | No  |
	 * | 18 _-x-_ |         | 6 _-x-_ |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/filter
	 */
	filter?: FilterProperty;
	/**
	 * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.
	 *
	 * **Syntax**: `content | <'width'>`
	 *
	 * **Initial value**: `auto`
	 *
	 * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :------: | :-----: | :-----: | :----: | :----: |
	 * |  **29**  | **22**  |  **9**  | **12** | **11** |
	 * | 22 _-x-_ |         | 7 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/flex-basis
	 */
	flexBasis?: FlexBasisProperty<TLength>;
	/**
	 * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).
	 *
	 * **Syntax**: `row | row-reverse | column | column-reverse`
	 *
	 * **Initial value**: `row`
	 *
	 * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |
	 * | :------: | :-----: | :-----: | :----: | :------: |
	 * |  **29**  | **20**  |  **9**  | **12** |  **11**  |
	 * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/flex-direction
	 */
	flexDirection?: FlexDirectionProperty;
	/**
	 * The **`flex-grow`** CSS property sets how much of the available space in the flex container should be assigned to that item (the flex grow factor). If all sibling items have the same flex grow factor, then all items will receive the same share of available space, otherwise it is distributed according to the ratio defined by the different flex grow factors.
	 *
	 * **Syntax**: `<number>`
	 *
	 * **Initial value**: `0`
	 *
	 * |  Chrome  | Firefox |  Safari   |  Edge  |            IE            |
	 * | :------: | :-----: | :-------: | :----: | :----------------------: |
	 * |  **29**  | **20**  |   **9**   | **12** |          **11**          |
	 * | 22 _-x-_ |         | 6.1 _-x-_ |        | 10 _(-ms-flex-positive)_ |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/flex-grow
	 */
	flexGrow?: GlobalsNumber;
	/**
	 * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.
	 *
	 * **Syntax**: `<number>`
	 *
	 * **Initial value**: `1`
	 *
	 * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :------: | :-----: | :-----: | :----: | :----: |
	 * |  **29**  | **20**  |  **9**  | **12** | **10** |
	 * | 22 _-x-_ |         | 8 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink
	 */
	flexShrink?: GlobalsNumber;
	/**
	 * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.
	 *
	 * **Syntax**: `nowrap | wrap | wrap-reverse`
	 *
	 * **Initial value**: `nowrap`
	 *
	 * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |
	 * | :------: | :-----: | :-------: | :----: | :----: |
	 * |  **29**  | **28**  |   **9**   | **12** | **11** |
	 * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap
	 */
	flexWrap?: FlexWrapProperty;
	/**
	 * The **`float`** CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).
	 *
	 * **Syntax**: `left | right | none | inline-start | inline-end`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/float
	 */
	float?: FloatProperty;
	/**
	 * The **`font-family`** CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.
	 *
	 * **Syntax**: `[ <family-name> | <generic-family> ]#`
	 *
	 * **Initial value**: depends on user agent
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **3** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-family
	 */
	fontFamily?: FontFamilyProperty;
	/**
	 * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.
	 *
	 * **Syntax**: `normal | <feature-tag-value>#`
	 *
	 * **Initial value**: `normal`
	 *
	 * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |
	 * | :------: | :------: | :-----: | :----: | :----: |
	 * |  **48**  |  **34**  | **9.1** | **15** | **10** |
	 * | 16 _-x-_ | 15 _-x-_ |         |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings
	 */
	fontFeatureSettings?: FontFeatureSettingsProperty;
	/**
	 * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.
	 *
	 * **Syntax**: `auto | normal | none`
	 *
	 * **Initial value**: `auto`
	 *
	 * |    Chrome    | Firefox | Safari |     Edge     | IE  |
	 * | :----------: | :-----: | :----: | :----------: | :-: |
	 * | **32** _-x-_ | **32**  | **7**  | **79** _-x-_ | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-kerning
	 */
	fontKerning?: FontKerningProperty;
	/**
	 * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.
	 *
	 * **Syntax**: `normal | <string>`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **34**  |   No   |  No  | No  |
	 * |        | 4 _-x-_ |        |      |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-language-override
	 */
	fontLanguageOverride?: FontLanguageOverrideProperty;
	/**
	 * The **`font-optical-sizing`** CSS property sets whether text rendering is optimized for viewing at different sizes. This only works for fonts that have an optical size variation axis.
	 *
	 * **Syntax**: `auto | none`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **79** | **62**  | **11** | **17** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing
	 */
	fontOpticalSizing?: FontOpticalSizingProperty;
	/**
	 * The **`font-size`** CSS property sets the size of the font. This property is also used to compute the size of `em`, `ex`, and other relative `<length>` units.
	 *
	 * **Syntax**: `<absolute-size> | <relative-size> | <length-percentage>`
	 *
	 * **Initial value**: `medium`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE    |
	 * | :----: | :-----: | :----: | :----: | :-----: |
	 * | **1**  |  **1**  | **1**  | **12** | **5.5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-size
	 */
	fontSize?: FontSizeProperty<TLength>;
	/**
	 * The **`font-size-adjust`** CSS property sets how the font size should be chosen based on the height of lowercase rather than capital letters.
	 *
	 * **Syntax**: `none | <number>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |  n/a   |  **1**  |   No   | n/a  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust
	 */
	fontSizeAdjust?: FontSizeAdjustProperty;
	/**
	 * The **`font-stretch`** CSS property selects a normal, condensed, or expanded face from a font.
	 *
	 * **Syntax**: `<font-stretch-absolute>`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **60** |  **9**  | **11** | **12** | **9** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-stretch
	 */
	fontStretch?: FontStretchProperty;
	/**
	 * The **`font-style`** CSS property sets whether a font should be styled with a normal, italic, or oblique face from its `font-family`.
	 *
	 * **Syntax**: `normal | italic | oblique <angle>?`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-style
	 */
	fontStyle?: FontStyleProperty;
	/**
	 * The **`font-synthesis`** CSS property controls which missing typefaces, bold or italic, may be synthesized by the browser.
	 *
	 * **Syntax**: `none | [ weight || style ]`
	 *
	 * **Initial value**: `weight style`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **34**  | **9**  |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis
	 */
	fontSynthesis?: FontSynthesisProperty;
	/**
	 * The **font-variant** CSS property is a shorthand for the longhand properties `font-variant-caps`, `font-variant-numeric`, `font-variant-alternates`, `font-variant-ligatures`, and `font-variant-east-asian`. You can also set the CSS Level 2 (Revision 1) values of `font-variant`, (that is, `normal` or `small-caps`), by using the `font` shorthand.
	 *
	 * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-variant
	 */
	fontVariant?: FontVariantProperty;
	/**
	 * The **`font-variant-caps`** CSS property controls the use of alternate glyphs for capital letters.
	 *
	 * **Syntax**: `normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **52** | **34**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps
	 */
	fontVariantCaps?: FontVariantCapsProperty;
	/**
	 * The **`font-variant-east-asian`** CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.
	 *
	 * **Syntax**: `normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **63** | **34**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian
	 */
	fontVariantEastAsian?: FontVariantEastAsianProperty;
	/**
	 * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.
	 *
	 * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`
	 *
	 * **Initial value**: `normal`
	 *
	 * |  Chrome  | Firefox | Safari  |  Edge  | IE  |
	 * | :------: | :-----: | :-----: | :----: | :-: |
	 * |  **34**  | **34**  | **9.1** | **79** | No  |
	 * | 31 _-x-_ |         | 7 _-x-_ |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures
	 */
	fontVariantLigatures?: FontVariantLigaturesProperty;
	/**
	 * The **`font-variant-numeric`** CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.
	 *
	 * **Syntax**: `normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :-----: | :----: | :-: |
	 * | **52** | **34**  | **9.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric
	 */
	fontVariantNumeric?: FontVariantNumericProperty;
	/**
	 * The **`font-variant-position`** CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.
	 *
	 * **Syntax**: `normal | sub | super`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **34**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position
	 */
	fontVariantPosition?: FontVariantPositionProperty;
	/**
	 * The **`font-variation-settings`** CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.
	 *
	 * **Syntax**: `normal | [ <string> <number> ]#`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **62** | **62**  | **11** | **17** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings
	 */
	fontVariationSettings?: FontVariationSettingsProperty;
	/**
	 * The **`font-weight`** CSS property specifies the weight (or boldness) of the font. The font weights available to you will depend on the `font-family` you are using. Some fonts are only available in `normal` and `bold`.
	 *
	 * **Syntax**: `<font-weight-absolute> | bolder | lighter`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **2**  |  **1**  | **1**  | **12** | **3** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font-weight
	 */
	fontWeight?: FontWeightProperty;
	/**
	 * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track.
	 *
	 * **Syntax**: `<track-size>+`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox |  Safari  |          Edge           |             IE              |
	 * | :----: | :-----: | :------: | :---------------------: | :-------------------------: |
	 * | **57** | **70**  | **10.1** |         **16**          | **10** _(-ms-grid-columns)_ |
	 * |        |         |          | 12 _(-ms-grid-columns)_ |                             |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns
	 */
	gridAutoColumns?: GridAutoColumnsProperty<TLength>;
	/**
	 * The **`grid-auto-flow`** CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.
	 *
	 * **Syntax**: `[ row | column ] || dense`
	 *
	 * **Initial value**: `row`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **52**  | **10.1** | **16** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow
	 */
	gridAutoFlow?: GridAutoFlowProperty;
	/**
	 * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track.
	 *
	 * **Syntax**: `<track-size>+`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox |  Safari  |         Edge         |            IE            |
	 * | :----: | :-----: | :------: | :------------------: | :----------------------: |
	 * | **57** | **70**  | **10.1** |        **16**        | **10** _(-ms-grid-rows)_ |
	 * |        |         |          | 12 _(-ms-grid-rows)_ |                          |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows
	 */
	gridAutoRows?: GridAutoRowsProperty<TLength>;
	/**
	 * The **`grid-column-end`** CSS property specifies a grid item’s end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.
	 *
	 * **Syntax**: `<grid-line>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **52**  | **10.1** | **16** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end
	 */
	gridColumnEnd?: GridColumnEndProperty;
	/**
	 * The **`grid-column-start`** CSS property specifies a grid item’s start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.
	 *
	 * **Syntax**: `<grid-line>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **52**  | **10.1** | **16** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start
	 */
	gridColumnStart?: GridColumnStartProperty;
	/**
	 * The **`grid-row-end`** CSS property specifies a grid item’s end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.
	 *
	 * **Syntax**: `<grid-line>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **52**  | **10.1** | **16** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end
	 */
	gridRowEnd?: GridRowEndProperty;
	/**
	 * The **`grid-row-start`** CSS property specifies a grid item’s start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.
	 *
	 * **Syntax**: `<grid-line>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **52**  | **10.1** | **16** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start
	 */
	gridRowStart?: GridRowStartProperty;
	/**
	 * The **`grid-template-areas`** CSS property specifies named grid areas.
	 *
	 * **Syntax**: `none | <string>+`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **52**  | **10.1** | **16** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas
	 */
	gridTemplateAreas?: GridTemplateAreasProperty;
	/**
	 * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.
	 *
	 * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **52**  | **10.1** | **16** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns
	 */
	gridTemplateColumns?: GridTemplateColumnsProperty<TLength>;
	/**
	 * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.
	 *
	 * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **52**  | **10.1** | **16** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows
	 */
	gridTemplateRows?: GridTemplateRowsProperty<TLength>;
	/**
	 * The **`hanging-punctuation`** CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.
	 *
	 * **Syntax**: `none | [ first || [ force-end | allow-end ] || last ]`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   |   No    | **10** |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation
	 */
	hangingPunctuation?: HangingPunctuationProperty;
	/**
	 * The **`height`** CSS property specifies the height of an element. By default, the property defines the height of the content area. If `box-sizing` is set to `border-box`, however, it instead determines the height of the border area.
	 *
	 * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/height
	 */
	height?: HeightProperty<TLength>;
	/**
	 * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.
	 *
	 * **Syntax**: `none | manual | auto`
	 *
	 * **Initial value**: `manual`
	 *
	 * |  Chrome  | Firefox |    Safari     |     Edge     |      IE      |
	 * | :------: | :-----: | :-----------: | :----------: | :----------: |
	 * |  **55**  | **43**  | **5.1** _-x-_ | **12** _-x-_ | **10** _-x-_ |
	 * | 13 _-x-_ | 6 _-x-_ |               |              |              |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/hyphens
	 */
	hyphens?: HyphensProperty;
	/**
	 * The **`image-orientation`** CSS property specifies a layout-independent correction to the orientation of an image. It should _not_ be used for any other orientation adjustments; instead, the `transform` property should be used with the `rotate` `<transform-function>`.
	 *
	 * **Syntax**: `from-image | <angle> | [ <angle>? flip ]`
	 *
	 * **Initial value**: `0deg`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **26**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/image-orientation
	 */
	imageOrientation?: ImageOrientationProperty;
	/**
	 * The **`image-rendering`** CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.
	 *
	 * **Syntax**: `auto | crisp-edges | pixelated`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **13** | **3.6** | **6**  | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/image-rendering
	 */
	imageRendering?: ImageRenderingProperty;
	/**
	 * **Syntax**: `[ from-image || <resolution> ] && snap?`
	 *
	 * **Initial value**: `1dppx`
	 */
	imageResolution?: ImageResolutionProperty;
	/**
	 * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.
	 *
	 * **Syntax**: `normal | [ <number> <integer>? ]`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   |   No    | **9**  |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/initial-letter
	 */
	initialLetter?: InitialLetterProperty;
	/**
	 * The **`inline-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.
	 *
	 * **Syntax**: `<'width'>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/inline-size
	 */
	inlineSize?: InlineSizeProperty<TLength>;
	/**
	 * The **`inset`** CSS property defines the logical block and inline start and end offsets of an element, which map to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'top'>{1,4}`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **66**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/inset
	 */
	inset?: InsetProperty<TLength>;
	/**
	 * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'top'>{1,2}`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |  n/a   | **63**  |   No   | n/a  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/inset-block
	 */
	insetBlock?: InsetBlockProperty<TLength>;
	/**
	 * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'top'>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |  n/a   | **63**  |   No   | n/a  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end
	 */
	insetBlockEnd?: InsetBlockEndProperty<TLength>;
	/**
	 * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'top'>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |  n/a   | **63**  |   No   | n/a  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start
	 */
	insetBlockStart?: InsetBlockStartProperty<TLength>;
	/**
	 * The **`inset-inline`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'top'>{1,2}`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |  n/a   | **63**  |   No   | n/a  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline
	 */
	insetInline?: InsetInlineProperty<TLength>;
	/**
	 * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'top'>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |  n/a   | **63**  |   No   | n/a  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end
	 */
	insetInlineEnd?: InsetInlineEndProperty<TLength>;
	/**
	 * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'top'>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |  n/a   | **63**  |   No   | n/a  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start
	 */
	insetInlineStart?: InsetInlineStartProperty<TLength>;
	/**
	 * The **`isolation`** CSS property determines whether an element must create a new stacking context.
	 *
	 * **Syntax**: `auto | isolate`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **41** | **36**  | **8**  | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/isolation
	 */
	isolation?: IsolationProperty;
	/**
	 * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.
	 *
	 * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`
	 *
	 * **Initial value**: `normal`
	 *
	 * ---
	 *
	 * _Supported in Flex Layout_
	 *
	 * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |
	 * | :------: | :-----: | :-------: | :----: | :----: |
	 * |  **52**  | **20**  |   **9**   | **12** | **11** |
	 * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |
	 *
	 * ---
	 *
	 * _Supported in Grid Layout_
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **52**  | **10.1** | **16** | No  |
	 *
	 * ---
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/justify-content
	 */
	justifyContent?: JustifyContentProperty;
	/**
	 * The CSS **`justify-items`** property defines the default `justify-self` for all items of the box, giving them all a default way of justifying each box along the appropriate axis.
	 *
	 * **Syntax**: `normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]`
	 *
	 * **Initial value**: `legacy`
	 *
	 * ---
	 *
	 * _Supported in Flex Layout_
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE   |
	 * | :----: | :-----: | :----: | :----: | :----: |
	 * | **52** | **20**  | **9**  | **12** | **11** |
	 *
	 * ---
	 *
	 * _Supported in Grid Layout_
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **45**  | **10.1** | **16** | No  |
	 *
	 * ---
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/justify-items
	 */
	justifyItems?: JustifyItemsProperty;
	/**
	 * The CSS **`justify-self`** property set the way a box is justified inside its alignment container along the appropriate axis.
	 *
	 * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`
	 *
	 * **Initial value**: `auto`
	 *
	 * ---
	 *
	 * _Supported in Flex Layout_
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **45**  | **10.1** | **16** | No  |
	 *
	 * ---
	 *
	 * _Supported in Grid Layout_
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **45**  | **10.1** | **16** | No  |
	 *
	 * ---
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/justify-self
	 */
	justifySelf?: JustifySelfProperty;
	/**
	 * The **`left`** CSS property participates in specifying the horizontal position of a _positioned element_. It has no effect on non-positioned elements.
	 *
	 * **Syntax**: `<length> | <percentage> | auto`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE    |
	 * | :----: | :-----: | :----: | :----: | :-----: |
	 * | **1**  |  **1**  | **1**  | **12** | **5.5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/left
	 */
	left?: LeftProperty<TLength>;
	/**
	 * The **`letter-spacing`** CSS property sets the spacing behavior between text characters.
	 *
	 * **Syntax**: `normal | <length>`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing
	 */
	letterSpacing?: LetterSpacingProperty<TLength>;
	/**
	 * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.
	 *
	 * **Syntax**: `auto | loose | normal | strict | anywhere`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome  | Firefox |   Safari    |  Edge  |   IE    |
	 * | :-----: | :-----: | :---------: | :----: | :-----: |
	 * | **58**  | **69**  | **3** _-x-_ | **14** | **5.5** |
	 * | 1 _-x-_ |         |             |        |         |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/line-break
	 */
	lineBreak?: LineBreakProperty;
	/**
	 * The **`line-height`** CSS property sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.
	 *
	 * **Syntax**: `normal | <number> | <length> | <percentage>`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/line-height
	 */
	lineHeight?: LineHeightProperty<TLength>;
	/**
	 * The **`line-height-step`** CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |  n/a   |   No    |   No   | n/a  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/line-height-step
	 */
	lineHeightStep?: LineHeightStepProperty<TLength>;
	/**
	 * The **`list-style-image`** CSS property sets an image to be used as the list item marker.
	 *
	 * **Syntax**: `<url> | none`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/list-style-image
	 */
	listStyleImage?: ListStyleImageProperty;
	/**
	 * The **`list-style-position`** CSS property sets the position of the `::marker` relative to a list item.
	 *
	 * **Syntax**: `inside | outside`
	 *
	 * **Initial value**: `outside`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/list-style-position
	 */
	listStylePosition?: ListStylePositionProperty;
	/**
	 * The **`list-style-type`** CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.
	 *
	 * **Syntax**: `<counter-style> | <string> | none`
	 *
	 * **Initial value**: `disc`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/list-style-type
	 */
	listStyleType?: ListStyleTypeProperty;
	/**
	 * The **`margin-block`** CSS property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.
	 *
	 * **Syntax**: `<'margin-left'>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **66**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/margin-block
	 */
	marginBlock?: MarginBlockProperty<TLength>;
	/**
	 * The **`margin-block-end`** CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.
	 *
	 * **Syntax**: `<'margin-left'>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **69** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end
	 */
	marginBlockEnd?: MarginBlockEndProperty<TLength>;
	/**
	 * The **`margin-block-start`** CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.
	 *
	 * **Syntax**: `<'margin-left'>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **69** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start
	 */
	marginBlockStart?: MarginBlockStartProperty<TLength>;
	/**
	 * The **`margin-bottom`** CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.
	 *
	 * **Syntax**: `<length> | <percentage> | auto`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **3** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom
	 */
	marginBottom?: MarginBottomProperty<TLength>;
	/**
	 * The **`margin-inline`** CSS property defines the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.
	 *
	 * **Syntax**: `<'margin-left'>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **66**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline
	 */
	marginInline?: MarginInlineProperty<TLength>;
	/**
	 * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'margin-left'>`
	 *
	 * **Initial value**: `0`
	 *
	 * |          Chrome          |        Firefox        |          Safari          |  Edge  | IE  |
	 * | :----------------------: | :-------------------: | :----------------------: | :----: | :-: |
	 * |          **69**          |        **41**         |         **12.1**         | **79** | No  |
	 * | 2 _(-webkit-margin-end)_ | 3 _(-moz-margin-end)_ | 3 _(-webkit-margin-end)_ |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end
	 */
	marginInlineEnd?: MarginInlineEndProperty<TLength>;
	/**
	 * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'margin-left'>`
	 *
	 * **Initial value**: `0`
	 *
	 * |           Chrome           |         Firefox         |           Safari           |  Edge  | IE  |
	 * | :------------------------: | :---------------------: | :------------------------: | :----: | :-: |
	 * |           **69**           |         **41**          |          **12.1**          | **79** | No  |
	 * | 2 _(-webkit-margin-start)_ | 3 _(-moz-margin-start)_ | 3 _(-webkit-margin-start)_ |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start
	 */
	marginInlineStart?: MarginInlineStartProperty<TLength>;
	/**
	 * The **`margin-left`** CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.
	 *
	 * **Syntax**: `<length> | <percentage> | auto`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **3** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/margin-left
	 */
	marginLeft?: MarginLeftProperty<TLength>;
	/**
	 * The **`margin-right`** CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.
	 *
	 * **Syntax**: `<length> | <percentage> | auto`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **3** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/margin-right
	 */
	marginRight?: MarginRightProperty<TLength>;
	/**
	 * The **`margin-top`** CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.
	 *
	 * **Syntax**: `<length> | <percentage> | auto`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **3** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/margin-top
	 */
	marginTop?: MarginTopProperty<TLength>;
	/**
	 * The **`mask-border-mode`** CSS property specifies the blending mode used in a mask border.
	 *
	 * **Syntax**: `luminance | alpha`
	 *
	 * **Initial value**: `alpha`
	 */
	maskBorderMode?: MaskBorderModeProperty;
	/**
	 * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.
	 *
	 * **Syntax**: `[ <length> | <number> ]{1,4}`
	 *
	 * **Initial value**: `0`
	 */
	maskBorderOutset?: MaskBorderOutsetProperty<TLength>;
	/**
	 * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.
	 *
	 * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`
	 *
	 * **Initial value**: `stretch`
	 */
	maskBorderRepeat?: MaskBorderRepeatProperty;
	/**
	 * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.
	 *
	 * **Syntax**: `<number-percentage>{1,4} fill?`
	 *
	 * **Initial value**: `0`
	 */
	maskBorderSlice?: MaskBorderSliceProperty;
	/**
	 * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.
	 *
	 * **Syntax**: `none | <image>`
	 *
	 * **Initial value**: `none`
	 */
	maskBorderSource?: MaskBorderSourceProperty;
	/**
	 * The **`mask-border-width`** CSS property sets the width of an element's mask border.
	 *
	 * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`
	 *
	 * **Initial value**: `auto`
	 */
	maskBorderWidth?: MaskBorderWidthProperty<TLength>;
	/**
	 * The **`mask-clip`** CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area.
	 *
	 * **Syntax**: `[ <geometry-box> | no-clip ]#`
	 *
	 * **Initial value**: `border-box`
	 *
	 * |   Chrome    | Firefox |   Safari    |     Edge     | IE  |
	 * | :---------: | :-----: | :---------: | :----------: | :-: |
	 * | **1** _-x-_ | **53**  | **4** _-x-_ | **79** _-x-_ | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/mask-clip
	 */
	maskClip?: MaskClipProperty;
	/**
	 * The **`mask-composite`** CSS property represents a compositing operation used on the current mask layer with the mask layers below it.
	 *
	 * **Syntax**: `<compositing-operator>#`
	 *
	 * **Initial value**: `add`
	 *
	 * | Chrome | Firefox | Safari | Edge  | IE  |
	 * | :----: | :-----: | :----: | :---: | :-: |
	 * |   No   | **53**  |   No   | 18-79 | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/mask-composite
	 */
	maskComposite?: MaskCompositeProperty;
	/**
	 * The **`mask-image`** CSS property sets the image that is used as mask layer for an element.
	 *
	 * **Syntax**: `<mask-reference>#`
	 *
	 * **Initial value**: `none`
	 *
	 * |   Chrome    | Firefox |   Safari    |  Edge  | IE  |
	 * | :---------: | :-----: | :---------: | :----: | :-: |
	 * | **1** _-x-_ | **53**  | **4** _-x-_ | **16** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/mask-image
	 */
	maskImage?: MaskImageProperty;
	/**
	 * The **`mask-mode`** CSS property sets whether the mask reference defined by `mask-image` is treated as a luminance or alpha mask.
	 *
	 * **Syntax**: `<masking-mode>#`
	 *
	 * **Initial value**: `match-source`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **53**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/mask-mode
	 */
	maskMode?: MaskModeProperty;
	/**
	 * The **`mask-origin`** CSS property sets the origin of a mask.
	 *
	 * **Syntax**: `<geometry-box>#`
	 *
	 * **Initial value**: `border-box`
	 *
	 * |   Chrome    | Firefox |   Safari    |     Edge     | IE  |
	 * | :---------: | :-----: | :---------: | :----------: | :-: |
	 * | **1** _-x-_ | **53**  | **4** _-x-_ | **79** _-x-_ | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/mask-origin
	 */
	maskOrigin?: MaskOriginProperty;
	/**
	 * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.
	 *
	 * **Syntax**: `<position>#`
	 *
	 * **Initial value**: `center`
	 *
	 * |   Chrome    | Firefox |    Safari     |  Edge  | IE  |
	 * | :---------: | :-----: | :-----------: | :----: | :-: |
	 * | **1** _-x-_ | **53**  | **3.2** _-x-_ | **18** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/mask-position
	 */
	maskPosition?: MaskPositionProperty<TLength>;
	/**
	 * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.
	 *
	 * **Syntax**: `<repeat-style>#`
	 *
	 * **Initial value**: `no-repeat`
	 *
	 * |   Chrome    | Firefox |    Safari     |  Edge  | IE  |
	 * | :---------: | :-----: | :-----------: | :----: | :-: |
	 * | **1** _-x-_ | **53**  | **3.2** _-x-_ | **18** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat
	 */
	maskRepeat?: MaskRepeatProperty;
	/**
	 * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.
	 *
	 * **Syntax**: `<bg-size>#`
	 *
	 * **Initial value**: `auto`
	 *
	 * |   Chrome    | Firefox |   Safari    |  Edge  | IE  |
	 * | :---------: | :-----: | :---------: | :----: | :-: |
	 * | **4** _-x-_ | **53**  | **4** _-x-_ | **18** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/mask-size
	 */
	maskSize?: MaskSizeProperty<TLength>;
	/**
	 * The **`mask-type`** CSS property sets whether an SVG `<mask>` element is used as a _luminance_ or an _alpha_ mask. It applies to the `<mask>` element itself.
	 *
	 * **Syntax**: `luminance | alpha`
	 *
	 * **Initial value**: `luminance`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :-----: | :----: | :-: |
	 * | **24** | **35**  | **6.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/mask-type
	 */
	maskType?: MaskTypeProperty;
	/**
	 * The `**max-block-size**` CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by `writing-mode`. That is, if the writing direction is horizontal, then `max-block-size` is equivalent to `max-height`; if the writing direction is vertical, `max-block-size` is the same as `max-width`.
	 *
	 * **Syntax**: `<'max-width'>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/max-block-size
	 */
	maxBlockSize?: MaxBlockSizeProperty<TLength>;
	/**
	 * The **`max-height`** CSS property sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `max-height`.
	 *
	 * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |  IE   |
	 * | :----: | :-----: | :-----: | :----: | :---: |
	 * | **18** |  **1**  | **1.3** | **12** | **7** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/max-height
	 */
	maxHeight?: MaxHeightProperty<TLength>;
	/**
	 * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block depending on its writing mode. It corresponds to the `max-width` or the `max-height` property depending on the value defined for `writing-mode`. If the writing mode is vertically oriented, the value of `max-inline-size` relates to the maximal height of the element, otherwise it relates to the maximal width of the element. It relates to `max-block-size`, which defines the other dimension of the element.
	 *
	 * **Syntax**: `<'max-width'>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |   Safari   |  Edge  | IE  |
	 * | :----: | :-----: | :--------: | :----: | :-: |
	 * | **57** | **41**  |  **12.1**  | **79** | No  |
	 * |        |         | 10.1 _-x-_ |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size
	 */
	maxInlineSize?: MaxInlineSizeProperty<TLength>;
	/**
	 * **Syntax**: `none | <integer>`
	 *
	 * **Initial value**: `none`
	 */
	maxLines?: MaxLinesProperty;
	/**
	 * The **`max-width`** CSS property sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `max-width`.
	 *
	 * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **7** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/max-width
	 */
	maxWidth?: MaxWidthProperty<TLength>;
	/**
	 * The **`min-block-size`** CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.
	 *
	 * **Syntax**: `<'min-width'>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/min-block-size
	 */
	minBlockSize?: MinBlockSizeProperty<TLength>;
	/**
	 * The **`min-height`** CSS property sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `min-height`.
	 *
	 * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |  IE   |
	 * | :----: | :-----: | :-----: | :----: | :---: |
	 * | **1**  |  **3**  | **1.3** | **12** | **7** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/min-height
	 */
	minHeight?: MinHeightProperty<TLength>;
	/**
	 * The **`min-inline-size`** CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.
	 *
	 * **Syntax**: `<'min-width'>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size
	 */
	minInlineSize?: MinInlineSizeProperty<TLength>;
	/**
	 * The **`min-width`** CSS property sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `min-width`.
	 *
	 * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **7** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/min-width
	 */
	minWidth?: MinWidthProperty<TLength>;
	/**
	 * The **`mix-blend-mode`** CSS property sets how an element's content should blend with the content of the element's parent and the element's background.
	 *
	 * **Syntax**: `<blend-mode>`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **41** | **32**  | **8**  | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode
	 */
	mixBlendMode?: MixBlendModeProperty;
	/**
	 * The **`offset-distance`** CSS property specifies a position along an `offset-path`.
	 *
	 * **Syntax**: `<length-percentage>`
	 *
	 * **Initial value**: `0`
	 *
	 * |         Chrome         | Firefox | Safari |  Edge  | IE  |
	 * | :--------------------: | :-----: | :----: | :----: | :-: |
	 * |         **55**         | **72**  |   No   | **79** | No  |
	 * | 46 _(motion-distance)_ |         |        |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance
	 */
	motionDistance?: OffsetDistanceProperty<TLength>;
	/**
	 * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.
	 *
	 * **Syntax**: `none | ray( [ <angle> && <size>? && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`
	 *
	 * **Initial value**: `none`
	 *
	 * |       Chrome       | Firefox | Safari |  Edge  | IE  |
	 * | :----------------: | :-----: | :----: | :----: | :-: |
	 * |       **55**       | **72**  |   No   | **79** | No  |
	 * | 46 _(motion-path)_ |         |        |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/offset-path
	 */
	motionPath?: OffsetPathProperty;
	/**
	 * The **`offset-rotate`** CSS property defines the direction of the element while positioning along the offset path.
	 *
	 * **Syntax**: `[ auto | reverse ] || <angle>`
	 *
	 * **Initial value**: `auto`
	 *
	 * |         Chrome         | Firefox | Safari |  Edge  | IE  |
	 * | :--------------------: | :-----: | :----: | :----: | :-: |
	 * |         **56**         | **72**  |   No   | **79** | No  |
	 * | 46 _(motion-rotation)_ |         |        |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate
	 */
	motionRotation?: OffsetRotateProperty;
	/**
	 * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.
	 *
	 * **Syntax**: `fill | contain | cover | none | scale-down`
	 *
	 * **Initial value**: `fill`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **31** | **36**  | **10** | **16** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/object-fit
	 */
	objectFit?: ObjectFitProperty;
	/**
	 * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.
	 *
	 * **Syntax**: `<position>`
	 *
	 * **Initial value**: `50% 50%`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **31** | **36**  | **10** | **16** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/object-position
	 */
	objectPosition?: ObjectPositionProperty<TLength>;
	/**
	 * **Syntax**: `auto | <position>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **79** | **72**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor
	 */
	offsetAnchor?: OffsetAnchorProperty<TLength>;
	/**
	 * The **`offset-distance`** CSS property specifies a position along an `offset-path`.
	 *
	 * **Syntax**: `<length-percentage>`
	 *
	 * **Initial value**: `0`
	 *
	 * |         Chrome         | Firefox | Safari |  Edge  | IE  |
	 * | :--------------------: | :-----: | :----: | :----: | :-: |
	 * |         **55**         | **72**  |   No   | **79** | No  |
	 * | 46 _(motion-distance)_ |         |        |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance
	 */
	offsetDistance?: OffsetDistanceProperty<TLength>;
	/**
	 * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.
	 *
	 * **Syntax**: `none | ray( [ <angle> && <size>? && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`
	 *
	 * **Initial value**: `none`
	 *
	 * |       Chrome       | Firefox | Safari |  Edge  | IE  |
	 * | :----------------: | :-----: | :----: | :----: | :-: |
	 * |       **55**       | **72**  |   No   | **79** | No  |
	 * | 46 _(motion-path)_ |         |        |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/offset-path
	 */
	offsetPath?: OffsetPathProperty;
	/**
	 * The **`offset-rotate`** CSS property defines the direction of the element while positioning along the offset path.
	 *
	 * **Syntax**: `[ auto | reverse ] || <angle>`
	 *
	 * **Initial value**: `auto`
	 *
	 * |         Chrome         | Firefox | Safari |  Edge  | IE  |
	 * | :--------------------: | :-----: | :----: | :----: | :-: |
	 * |         **56**         | **72**  |   No   | **79** | No  |
	 * | 46 _(motion-rotation)_ |         |        |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate
	 */
	offsetRotate?: OffsetRotateProperty;
	/**
	 * The **`offset-rotate`** CSS property defines the direction of the element while positioning along the offset path.
	 *
	 * **Syntax**: `[ auto | reverse ] || <angle>`
	 *
	 * **Initial value**: `auto`
	 *
	 * |         Chrome         | Firefox | Safari |  Edge  | IE  |
	 * | :--------------------: | :-----: | :----: | :----: | :-: |
	 * |         **56**         | **72**  |   No   | **79** | No  |
	 * | 46 _(motion-rotation)_ |         |        |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate
	 */
	offsetRotation?: OffsetRotateProperty;
	/**
	 * The **`opacity`** CSS property sets the transparency of an element or the degree to which content behind an element is visible.
	 *
	 * **Syntax**: `<alpha-value>`
	 *
	 * **Initial value**: `1.0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **2**  | **12** | **9** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/opacity
	 */
	opacity?: OpacityProperty;
	/**
	 * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.
	 *
	 * **Syntax**: `<integer>`
	 *
	 * **Initial value**: `0`
	 *
	 * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |
	 * | :------: | :-----: | :-----: | :----: | :------: |
	 * |  **29**  | **20**  |  **9**  | **12** |  **11**  |
	 * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/order
	 */
	order?: GlobalsNumber;
	/**
	 * The **`orphans`** CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column.
	 *
	 * **Syntax**: `<integer>`
	 *
	 * **Initial value**: `2`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |  IE   |
	 * | :----: | :-----: | :-----: | :----: | :---: |
	 * | **25** |   No    | **1.3** | **12** | **8** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/orphans
	 */
	orphans?: GlobalsNumber;
	/**
	 * The **`outline-color`** CSS property sets the color of an element's outline.
	 *
	 * **Syntax**: `<color> | invert`
	 *
	 * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |  IE   |
	 * | :----: | :-----: | :-----: | :----: | :---: |
	 * | **1**  | **1.5** | **1.2** | **12** | **8** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/outline-color
	 */
	outlineColor?: OutlineColorProperty;
	/**
	 * The **`outline-offset`** CSS property sets the amount of space between an outline and the edge or border of an element.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :-----: | :----: | :-: |
	 * | **1**  | **1.5** | **1.2** | **15** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/outline-offset
	 */
	outlineOffset?: OutlineOffsetProperty<TLength>;
	/**
	 * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.
	 *
	 * **Syntax**: `auto | <'border-style'>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |  IE   |
	 * | :----: | :-----: | :-----: | :----: | :---: |
	 * | **1**  | **1.5** | **1.2** | **12** | **8** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/outline-style
	 */
	outlineStyle?: OutlineStyleProperty;
	/**
	 * The **`outline-width`** CSS property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.
	 *
	 * **Syntax**: `<line-width>`
	 *
	 * **Initial value**: `medium`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |  IE   |
	 * | :----: | :-----: | :-----: | :----: | :---: |
	 * | **1**  | **1.5** | **1.2** | **12** | **8** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/outline-width
	 */
	outlineWidth?: OutlineWidthProperty<TLength>;
	/**
	 * **Syntax**: `auto | none`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **56** | **66**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor
	 */
	overflowAnchor?: OverflowAnchorProperty;
	/**
	 * **Syntax**: `visible | hidden | clip | scroll | auto`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **69**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/overflow-block
	 */
	overflowBlock?: OverflowBlockProperty;
	/**
	 * The **`overflow-clip-box`** CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the `overflow-clip-box-inline` and `overflow-clip-box-block` properties.
	 *
	 * **Syntax**: `padding-box | content-box`
	 *
	 * **Initial value**: `padding-box`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **29**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Mozilla/CSS/overflow-clip-box
	 */
	overflowClipBox?: OverflowClipBoxProperty;
	/**
	 * **Syntax**: `visible | hidden | clip | scroll | auto`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **69**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline
	 */
	overflowInline?: OverflowInlineProperty;
	/**
	 * The `**overflow-wrap**` CSS property sets whether the browser should insert line breaks within words to prevent text from overflowing its content box.
	 *
	 * **Syntax**: `normal | break-word | anywhere`
	 *
	 * **Initial value**: `normal`
	 *
	 * |     Chrome      |      Firefox      |     Safari      |       Edge       |          IE           |
	 * | :-------------: | :---------------: | :-------------: | :--------------: | :-------------------: |
	 * |     **23**      |      **49**       |     **6.1**     |      **18**      | **5.5** _(word-wrap)_ |
	 * | 1 _(word-wrap)_ | 3.5 _(word-wrap)_ | 1 _(word-wrap)_ | 12 _(word-wrap)_ |                       |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap
	 */
	overflowWrap?: OverflowWrapProperty;
	/**
	 * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.
	 *
	 * **Syntax**: `visible | hidden | clip | scroll | auto`
	 *
	 * **Initial value**: `visible`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  | **3.5** | **3**  | **12** | **5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/overflow-x
	 */
	overflowX?: OverflowXProperty;
	/**
	 * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.
	 *
	 * **Syntax**: `visible | hidden | clip | scroll | auto`
	 *
	 * **Initial value**: `visible`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  | **1.5** | **3**  | **12** | **5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/overflow-y
	 */
	overflowY?: OverflowYProperty;
	/**
	 * The **`overscroll-behavior`** CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for `overscroll-behavior-x` and `overscroll-behavior-y`.
	 *
	 * **Syntax**: `[ contain | none | auto ]{1,2}`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **63** | **59**  |   No   | **18** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior
	 */
	overscrollBehavior?: OverscrollBehaviorProperty;
	/**
	 * The **`overscroll-behavior-block`** CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.
	 *
	 * **Syntax**: `contain | none | auto`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **77** | **73**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block
	 */
	overscrollBehaviorBlock?: OverscrollBehaviorBlockProperty;
	/**
	 * The **`overscroll-behavior-inline`** CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.
	 *
	 * **Syntax**: `contain | none | auto`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **77** | **73**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline
	 */
	overscrollBehaviorInline?: OverscrollBehaviorInlineProperty;
	/**
	 * The **`overscroll-behavior-x`** CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.
	 *
	 * **Syntax**: `contain | none | auto`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **63** | **59**  |   No   | **18** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x
	 */
	overscrollBehaviorX?: OverscrollBehaviorXProperty;
	/**
	 * The **`overscroll-behavior-y`** CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.
	 *
	 * **Syntax**: `contain | none | auto`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **63** | **59**  |   No   | **18** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y
	 */
	overscrollBehaviorY?: OverscrollBehaviorYProperty;
	/**
	 * The **`padding-block`** CSS property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.
	 *
	 * **Syntax**: `<'padding-left'>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **66**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/padding-block
	 */
	paddingBlock?: PaddingBlockProperty<TLength>;
	/**
	 * The **`padding-block-end`** CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'padding-left'>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **69** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end
	 */
	paddingBlockEnd?: PaddingBlockEndProperty<TLength>;
	/**
	 * The **`padding-block-start`** CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'padding-left'>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **69** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start
	 */
	paddingBlockStart?: PaddingBlockStartProperty<TLength>;
	/**
	 * The **`padding-bottom`** CSS property sets the height of the padding area on the bottom of an element.
	 *
	 * **Syntax**: `<length> | <percentage>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom
	 */
	paddingBottom?: PaddingBottomProperty<TLength>;
	/**
	 * The **`padding-inline`** CSS property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.
	 *
	 * **Syntax**: `<'padding-left'>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **66**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline
	 */
	paddingInline?: PaddingInlineProperty<TLength>;
	/**
	 * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'padding-left'>`
	 *
	 * **Initial value**: `0`
	 *
	 * |          Chrome           |        Firefox         |          Safari           |  Edge  | IE  |
	 * | :-----------------------: | :--------------------: | :-----------------------: | :----: | :-: |
	 * |          **69**           |         **41**         |         **12.1**          | **79** | No  |
	 * | 2 _(-webkit-padding-end)_ | 3 _(-moz-padding-end)_ | 3 _(-webkit-padding-end)_ |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end
	 */
	paddingInlineEnd?: PaddingInlineEndProperty<TLength>;
	/**
	 * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'padding-left'>`
	 *
	 * **Initial value**: `0`
	 *
	 * |           Chrome            |         Firefox          |           Safari            |  Edge  | IE  |
	 * | :-------------------------: | :----------------------: | :-------------------------: | :----: | :-: |
	 * |           **69**            |          **41**          |          **12.1**           | **79** | No  |
	 * | 2 _(-webkit-padding-start)_ | 3 _(-moz-padding-start)_ | 3 _(-webkit-padding-start)_ |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start
	 */
	paddingInlineStart?: PaddingInlineStartProperty<TLength>;
	/**
	 * The **`padding-left`** CSS property sets the width of the padding area on the left side of an element.
	 *
	 * **Syntax**: `<length> | <percentage>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/padding-left
	 */
	paddingLeft?: PaddingLeftProperty<TLength>;
	/**
	 * The **`padding-right`** CSS property sets the width of the padding area on the right side of an element.
	 *
	 * **Syntax**: `<length> | <percentage>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/padding-right
	 */
	paddingRight?: PaddingRightProperty<TLength>;
	/**
	 * The **`padding-top`** padding area on the top of an element.
	 *
	 * **Syntax**: `<length> | <percentage>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/padding-top
	 */
	paddingTop?: PaddingTopProperty<TLength>;
	/**
	 * The **`page-break-after`** CSS property adjusts page breaks _after_ the current element.
	 *
	 * **Syntax**: `auto | always | avoid | left | right | recto | verso`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |  IE   |
	 * | :----: | :-----: | :-----: | :----: | :---: |
	 * | **1**  |  **1**  | **1.2** | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/page-break-after
	 */
	pageBreakAfter?: PageBreakAfterProperty;
	/**
	 * The **`page-break-before`** CSS property adjusts page breaks _before_ the current element.
	 *
	 * **Syntax**: `auto | always | avoid | left | right | recto | verso`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |  IE   |
	 * | :----: | :-----: | :-----: | :----: | :---: |
	 * | **1**  |  **1**  | **1.2** | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/page-break-before
	 */
	pageBreakBefore?: PageBreakBeforeProperty;
	/**
	 * The **`page-break-inside`** CSS property adjusts page breaks _inside_ the current element.
	 *
	 * **Syntax**: `auto | avoid`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |  IE   |
	 * | :----: | :-----: | :-----: | :----: | :---: |
	 * | **1**  | **19**  | **1.3** | **12** | **8** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside
	 */
	pageBreakInside?: PageBreakInsideProperty;
	/**
	 * The **`paint-order`** CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn.
	 *
	 * **Syntax**: `normal | [ fill || stroke || markers ]`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **35** | **60**  | **8**  | **17** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/paint-order
	 */
	paintOrder?: PaintOrderProperty;
	/**
	 * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with z>0 becomes larger; each 3D-element with z<0 becomes smaller. The strength of the effect is determined by the value of this property.
	 *
	 * **Syntax**: `none | <length>`
	 *
	 * **Initial value**: `none`
	 *
	 * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |
	 * | :------: | :------: | :-----: | :----: | :----: |
	 * |  **36**  |  **16**  |  **9**  | **12** | **10** |
	 * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/perspective
	 */
	perspective?: PerspectiveProperty<TLength>;
	/**
	 * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.
	 *
	 * **Syntax**: `<position>`
	 *
	 * **Initial value**: `50% 50%`
	 *
	 * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |
	 * | :------: | :------: | :-----: | :----: | :----: |
	 * |  **36**  |  **16**  |  **9**  | **12** | **10** |
	 * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin
	 */
	perspectiveOrigin?: PerspectiveOriginProperty<TLength>;
	/**
	 * The `**place-content**` CSS property is a shorthand for `align-content` and `justify-content`. It can be used in any layout method which utilizes both of these alignment values.
	 *
	 * **Syntax**: `<'align-content'> <'justify-content'>?`
	 *
	 * **Initial value**: `normal`
	 *
	 * ---
	 *
	 * _Supported in Flex Layout_
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **59** | **45**  | **9**  | **79** | No  |
	 *
	 * ---
	 *
	 * _Supported in Grid Layout_
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **59** | **53**  | **11** | **79** | No  |
	 *
	 * ---
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/place-content
	 */
	placeContent?: PlaceContentProperty;
	/**
	 * The **`pointer-events`** CSS property sets under what circumstances (if any) a particular graphic element can become the target of mouse events.
	 *
	 * **Syntax**: `auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE   |
	 * | :----: | :-----: | :----: | :----: | :----: |
	 * | **1**  | **1.5** | **4**  | **12** | **11** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/pointer-events
	 */
	pointerEvents?: PointerEventsProperty;
	/**
	 * The **`position`** CSS property sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements.
	 *
	 * **Syntax**: `static | relative | absolute | sticky | fixed`
	 *
	 * **Initial value**: `static`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/position
	 */
	position?: PositionProperty;
	/**
	 * The **`quotes`** CSS property sets how quotation marks appear.
	 *
	 * **Syntax**: `none | auto | [ <string> <string> ]+`
	 *
	 * **Initial value**: depends on user agent
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **11** | **1.5** | **9**  | **12** | **8** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/quotes
	 */
	quotes?: QuotesProperty;
	/**
	 * The **`resize`** CSS property sets whether an element is resizable, and if so, in which directions.
	 *
	 * **Syntax**: `none | both | horizontal | vertical | block | inline`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **1**  |  **4**  | **3**  | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/resize
	 */
	resize?: ResizeProperty;
	/**
	 * The **`right`** CSS property participates in specifying the horizontal position of a _positioned element_. It has no effect on non-positioned elements.
	 *
	 * **Syntax**: `<length> | <percentage> | auto`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE    |
	 * | :----: | :-----: | :----: | :----: | :-----: |
	 * | **1**  |  **1**  | **1**  | **12** | **5.5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/right
	 */
	right?: RightProperty<TLength>;
	/**
	 * The **`rotate`** CSS property allows you to specify rotation transforms individually and independantly of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.
	 *
	 * **Syntax**: `none | <angle> | [ x | y | z | <number>{3} ] && <angle>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **72**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/rotate
	 */
	rotate?: RotateProperty;
	/**
	 * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's grid rows.
	 *
	 * **Syntax**: `normal | <length-percentage>`
	 *
	 * **Initial value**: `normal`
	 *
	 * ---
	 *
	 * _Supported in Flex Layout_
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **63**  |   No   |  No  | No  |
	 *
	 * ---
	 *
	 * _Supported in Grid Layout_
	 *
	 * |       Chrome        |       Firefox       |          Safari           |  Edge  | IE  |
	 * | :-----------------: | :-----------------: | :-----------------------: | :----: | :-: |
	 * |       **66**        |       **61**        | **10.1** _(grid-row-gap)_ | **16** | No  |
	 * | 57 _(grid-row-gap)_ | 52 _(grid-row-gap)_ |                           |        |     |
	 *
	 * ---
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/row-gap
	 */
	rowGap?: RowGapProperty<TLength>;
	/**
	 * The `**ruby-align**` CSS property defines the distribution of the different ruby elements over the base.
	 *
	 * **Syntax**: `start | center | space-between | space-around`
	 *
	 * **Initial value**: `space-around`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **38**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/ruby-align
	 */
	rubyAlign?: RubyAlignProperty;
	/**
	 * **Syntax**: `separate | collapse | auto`
	 *
	 * **Initial value**: `separate`
	 */
	rubyMerge?: RubyMergeProperty;
	/**
	 * The `**ruby-position**` CSS property defines the position of a ruby element relatives to its base element. It can be position over the element (`over`), under it (`under`), or between the characters, on their right side (`inter-character`).
	 *
	 * **Syntax**: `over | under | inter-character`
	 *
	 * **Initial value**: `over`
	 *
	 * | Chrome | Firefox | Safari | Edge  | IE  |
	 * | :----: | :-----: | :----: | :---: | :-: |
	 * |   No   | **38**  |   No   | 12-79 | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/ruby-position
	 */
	rubyPosition?: RubyPositionProperty;
	/**
	 * The **`scale`** CSS property allows you to specify scale transforms individually and independantly of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.
	 *
	 * **Syntax**: `none | <number>{1,3}`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **72**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scale
	 */
	scale?: ScaleProperty;
	/**
	 * The **`scroll-behavior`** CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.
	 *
	 * **Syntax**: `auto | smooth`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **61** | **36**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior
	 */
	scrollBehavior?: ScrollBehaviorProperty;
	/**
	 * The **`scroll-margin`** property is a shorthand property which sets all of the `scroll-margin` longhands, assigning values much like the `margin` property does for the `margin-*` longhands.
	 *
	 * **Syntax**: `<length>{1,4}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |            Safari             |  Edge  | IE  |
	 * | :----: | :-----: | :---------------------------: | :----: | :-: |
	 * | **69** | **68**  | **11** _(scroll-snap-margin)_ | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin
	 */
	scrollMargin?: ScrollMarginProperty<TLength>;
	/**
	 * The `scroll-margin-block` property is a shorthand property which sets the scroll-margin longhands in the block dimension.
	 *
	 * **Syntax**: `<length>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **68**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block
	 */
	scrollMarginBlock?: ScrollMarginBlockProperty<TLength>;
	/**
	 * The `scroll-margin-block-end` property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **68**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end
	 */
	scrollMarginBlockEnd?: ScrollMarginBlockEndProperty<TLength>;
	/**
	 * The `scroll-margin-block-start` property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **68**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start
	 */
	scrollMarginBlockStart?: ScrollMarginBlockStartProperty<TLength>;
	/**
	 * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |                Safari                |  Edge  | IE  |
	 * | :----: | :-----: | :----------------------------------: | :----: | :-: |
	 * | **69** | **68**  | **11** _(scroll-snap-margin-bottom)_ | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom
	 */
	scrollMarginBottom?: ScrollMarginBottomProperty<TLength>;
	/**
	 * The `scroll-margin-inline` property is a shorthand property which sets the scroll-margin longhands in the inline dimension.
	 *
	 * **Syntax**: `<length>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **68**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline
	 */
	scrollMarginInline?: ScrollMarginInlineProperty<TLength>;
	/**
	 * The `scroll-margin-inline-end` property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **68**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end
	 */
	scrollMarginInlineEnd?: ScrollMarginInlineEndProperty<TLength>;
	/**
	 * The `scroll-margin-inline-start` property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **68**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start
	 */
	scrollMarginInlineStart?: ScrollMarginInlineStartProperty<TLength>;
	/**
	 * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |               Safari               |  Edge  | IE  |
	 * | :----: | :-----: | :--------------------------------: | :----: | :-: |
	 * | **69** | **68**  | **11** _(scroll-snap-margin-left)_ | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left
	 */
	scrollMarginLeft?: ScrollMarginLeftProperty<TLength>;
	/**
	 * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |               Safari                |  Edge  | IE  |
	 * | :----: | :-----: | :---------------------------------: | :----: | :-: |
	 * | **69** | **68**  | **11** _(scroll-snap-margin-right)_ | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right
	 */
	scrollMarginRight?: ScrollMarginRightProperty<TLength>;
	/**
	 * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |              Safari               |  Edge  | IE  |
	 * | :----: | :-----: | :-------------------------------: | :----: | :-: |
	 * | **69** | **68**  | **11** _(scroll-snap-margin-top)_ | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top
	 */
	scrollMarginTop?: ScrollMarginTopProperty<TLength>;
	/**
   * The scroll-padding property is a shorthand property which sets all of the scroll-padding longhands, assigning values much like the padding property does for the padding-\* longhands.
	
  The scroll-padding properties define offsets for the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
   *
   * **Syntax**: `[ auto | <length-percentage> ]{1,4}`
   *
   * **Initial value**: `auto`
   *
   * | Chrome | Firefox | Safari |  Edge  | IE  |
   * | :----: | :-----: | :----: | :----: | :-: |
   * | **69** | **68**  | **11** | **79** | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding
   */
	scrollPadding?: ScrollPaddingProperty<TLength>;
	/**
   * The `scroll-padding-block` property is a shorthand property which sets the scroll-padding longhands for the block dimension.
	
  The scroll-padding properties define offsets for the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
   *
   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`
   *
   * **Initial value**: `auto`
   *
   * | Chrome | Firefox | Safari |  Edge  | IE  |
   * | :----: | :-----: | :----: | :----: | :-: |
   * | **69** | **68**  |   No   | **79** | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block
   */
	scrollPaddingBlock?: ScrollPaddingBlockProperty<TLength>;
	/**
	 * The `scroll-padding-block-end` property defines offsets for the end edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
	 *
	 * **Syntax**: `auto | <length-percentage>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **68**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end
	 */
	scrollPaddingBlockEnd?: ScrollPaddingBlockEndProperty<TLength>;
	/**
	 * The `scroll-padding-block-start` property defines offsets for the start edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
	 *
	 * **Syntax**: `auto | <length-percentage>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **68**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start
	 */
	scrollPaddingBlockStart?: ScrollPaddingBlockStartProperty<TLength>;
	/**
	 * The `scroll-padding-bottom` property defines offsets for the bottom of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
	 *
	 * **Syntax**: `auto | <length-percentage>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **68**  | **11** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom
	 */
	scrollPaddingBottom?: ScrollPaddingBottomProperty<TLength>;
	/**
   * The `scroll-padding-inline` property is a shorthand property which sets the scroll-padding longhands for the inline dimension.
	
  The scroll-padding properties define offsets for the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
   *
   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`
   *
   * **Initial value**: `auto`
   *
   * | Chrome | Firefox | Safari |  Edge  | IE  |
   * | :----: | :-----: | :----: | :----: | :-: |
   * | **69** | **68**  |   No   | **79** | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline
   */
	scrollPaddingInline?: ScrollPaddingInlineProperty<TLength>;
	/**
	 * The `scroll-padding-inline-end` property defines offsets for the end edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
	 *
	 * **Syntax**: `auto | <length-percentage>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **68**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end
	 */
	scrollPaddingInlineEnd?: ScrollPaddingInlineEndProperty<TLength>;
	/**
	 * The `scroll-padding-inline-start` property defines offsets for the start edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
	 *
	 * **Syntax**: `auto | <length-percentage>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **68**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start
	 */
	scrollPaddingInlineStart?: ScrollPaddingInlineStartProperty<TLength>;
	/**
	 * The `scroll-padding-left` property defines offsets for the left of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
	 *
	 * **Syntax**: `auto | <length-percentage>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **68**  | **11** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left
	 */
	scrollPaddingLeft?: ScrollPaddingLeftProperty<TLength>;
	/**
	 * The `scroll-padding-right` property defines offsets for the right of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
	 *
	 * **Syntax**: `auto | <length-percentage>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **68**  | **11** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right
	 */
	scrollPaddingRight?: ScrollPaddingRightProperty<TLength>;
	/**
	 * The `scroll-padding-top` property defines offsets for the top of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targetted element and the edges of the scrollport.
	 *
	 * **Syntax**: `auto | <length-percentage>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **68**  | **11** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top
	 */
	scrollPaddingTop?: ScrollPaddingTopProperty<TLength>;
	/**
	 * The `scroll-snap-align` property specifies the box’s snap position as an alignment of its snap area (as the alignment subject) within its snap container’s snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.
	 *
	 * **Syntax**: `[ none | start | end | center ]{1,2}`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **68**  | **11** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align
	 */
	scrollSnapAlign?: ScrollSnapAlignProperty;
	/**
	 * The **`scroll-margin`** property is a shorthand property which sets all of the `scroll-margin` longhands, assigning values much like the `margin` property does for the `margin-*` longhands.
	 *
	 * **Syntax**: `<length>{1,4}`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |            Safari             |  Edge  | IE  |
	 * | :----: | :-----: | :---------------------------: | :----: | :-: |
	 * | **69** | **68**  | **11** _(scroll-snap-margin)_ | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin
	 */
	scrollSnapMargin?: ScrollMarginProperty<TLength>;
	/**
	 * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |                Safari                |  Edge  | IE  |
	 * | :----: | :-----: | :----------------------------------: | :----: | :-: |
	 * | **69** | **68**  | **11** _(scroll-snap-margin-bottom)_ | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom
	 */
	scrollSnapMarginBottom?: ScrollMarginBottomProperty<TLength>;
	/**
	 * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |               Safari               |  Edge  | IE  |
	 * | :----: | :-----: | :--------------------------------: | :----: | :-: |
	 * | **69** | **68**  | **11** _(scroll-snap-margin-left)_ | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left
	 */
	scrollSnapMarginLeft?: ScrollMarginLeftProperty<TLength>;
	/**
	 * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |               Safari                |  Edge  | IE  |
	 * | :----: | :-----: | :---------------------------------: | :----: | :-: |
	 * | **69** | **68**  | **11** _(scroll-snap-margin-right)_ | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right
	 */
	scrollSnapMarginRight?: ScrollMarginRightProperty<TLength>;
	/**
	 * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |              Safari               |  Edge  | IE  |
	 * | :----: | :-----: | :-------------------------------: | :----: | :-: |
	 * | **69** | **68**  | **11** _(scroll-snap-margin-top)_ | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top
	 */
	scrollSnapMarginTop?: ScrollMarginTopProperty<TLength>;
	/**
	 * The **`scroll-snap-stop`** CSS property defines whether the scroll container is allowed to "pass over" possible snap positions.
	 *
	 * **Syntax**: `normal | always`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **75** |   No    |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop
	 */
	scrollSnapStop?: ScrollSnapStopProperty;
	/**
	 * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.
	 *
	 * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari  |     Edge     |      IE      |
	 * | :----: | :-----: | :-----: | :----------: | :----------: |
	 * | **69** |  39-68  | **11**  | **12** _-x-_ | **10** _-x-_ |
	 * |        |         | 9 _-x-_ |              |              |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type
	 */
	scrollSnapType?: ScrollSnapTypeProperty;
	/**
	 * The **`scrollbar-color`** CSS property sets the color of the scrollbar track and thumb.
	 *
	 * **Syntax**: `auto | dark | light | <color>{2}`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **64**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color
	 */
	scrollbarColor?: ScrollbarColorProperty;
	/**
	 * The `scrollbar-width` property allows the author to set the maximum thickness of an element’s scrollbars when they are shown.
	 *
	 * **Syntax**: `auto | thin | none`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **64**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width
	 */
	scrollbarWidth?: ScrollbarWidthProperty;
	/**
	 * The **`shape-image-threshold`** CSS property sets the alpha channel threshold used to extract the shape using an image as the value for `shape-outside`.
	 *
	 * **Syntax**: `<alpha-value>`
	 *
	 * **Initial value**: `0.0`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **37** | **62**  | **10.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold
	 */
	shapeImageThreshold?: ShapeImageThresholdProperty;
	/**
	 * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.
	 *
	 * **Syntax**: `<length-percentage>`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox |     Safari     |  Edge  | IE  |
	 * | :----: | :-----: | :------------: | :----: | :-: |
	 * | **37** | **62**  | **10.1** _-x-_ | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/shape-margin
	 */
	shapeMargin?: ShapeMarginProperty<TLength>;
	/**
	 * The **`shape-outside`** CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; `shape-outside` provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.
	 *
	 * **Syntax**: `none | <shape-box> || <basic-shape> | <image>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **37** | **62**  | **10.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/shape-outside
	 */
	shapeOutside?: ShapeOutsideProperty;
	/**
	 * The **`tab-size`** CSS property is used to customize the width of a tab (`U+0009`) character.
	 *
	 * **Syntax**: `<integer> | <length>`
	 *
	 * **Initial value**: `8`
	 *
	 * | Chrome |   Firefox   | Safari  |  Edge  | IE  |
	 * | :----: | :---------: | :-----: | :----: | :-: |
	 * | **21** | **4** _-x-_ | **6.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/tab-size
	 */
	tabSize?: TabSizeProperty<TLength>;
	/**
	 * The **`table-layout`** CSS property sets the algorithm used to lay out `<table>` cells, rows, and columns.
	 *
	 * **Syntax**: `auto | fixed`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **14** |  **1**  | **1**  | **12** | **5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/table-layout
	 */
	tableLayout?: TableLayoutProperty;
	/**
	 * The **`text-align`** CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like `vertical-align` but in the horizontal direction.
	 *
	 * **Syntax**: `start | end | left | right | center | justify | match-parent`
	 *
	 * **Initial value**: `start`, or a nameless value that acts as `left` if _direction_ is `ltr`, `right` if _direction_ is `rtl` if `start` is not supported by the browser.
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **3** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-align
	 */
	textAlign?: TextAlignProperty;
	/**
	 * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.
	 *
	 * **Syntax**: `auto | start | end | left | right | center | justify`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE    |
	 * | :----: | :-----: | :----: | :----: | :-----: |
	 * | **47** | **49**  |   No   | **12** | **5.5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-align-last
	 */
	textAlignLast?: TextAlignLastProperty;
	/**
	 * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.
	 *
	 * **Syntax**: `none | all | [ digits <integer>? ]`
	 *
	 * **Initial value**: `none`
	 *
	 * |           Chrome           | Firefox |              Safari              |                  Edge                  |                   IE                   |
	 * | :------------------------: | :-----: | :------------------------------: | :------------------------------------: | :------------------------------------: |
	 * |           **48**           | **48**  | **5.1** _(-webkit-text-combine)_ | **12** _(-ms-text-combine-horizontal)_ | **11** _(-ms-text-combine-horizontal)_ |
	 * | 9 _(-webkit-text-combine)_ |         |                                  |                                        |                                        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright
	 */
	textCombineUpright?: TextCombineUprightProperty;
	/**
	 * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `currentcolor`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **36**  | **12.1** | **79** | No  |
	 * |        |         | 8 _-x-_  |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color
	 */
	textDecorationColor?: TextDecorationColorProperty;
	/**
	 * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.
	 *
	 * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **36**  | **12.1** | **79** | No  |
	 * |        |         | 8 _-x-_  |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line
	 */
	textDecorationLine?: TextDecorationLineProperty;
	/**
	 * The **`text-decoration-skip`** CSS property sets what parts of an element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.
	 *
	 * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`
	 *
	 * **Initial value**: `objects`
	 *
	 * | Chrome | Firefox |  Safari  | Edge | IE  |
	 * | :----: | :-----: | :------: | :--: | :-: |
	 * | 57-64  |   No    | **12.1** |  No  | No  |
	 * |        |         | 8 _-x-_  |      |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip
	 */
	textDecorationSkip?: TextDecorationSkipProperty;
	/**
	 * The **`text-decoration-skip-ink`** CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.
	 *
	 * **Syntax**: `auto | all | none`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **64** | **70**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink
	 */
	textDecorationSkipInk?: TextDecorationSkipInkProperty;
	/**
	 * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.
	 *
	 * **Syntax**: `solid | double | dotted | dashed | wavy`
	 *
	 * **Initial value**: `solid`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **36**  | **12.1** | **79** | No  |
	 * |        |         | 8 _-x-_  |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style
	 */
	textDecorationStyle?: TextDecorationStyleProperty;
	/**
	 * The **`text-decoration-thickness`** CSS property sets the thickness, or width, of the decoration line that is used on text in an element, such as a line-through, underline, or overline.
	 *
	 * **Syntax**: `auto | from-font | <length> | <percentage> `
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox |  Safari  | Edge | IE  |
	 * | :----: | :-----: | :------: | :--: | :-: |
	 * |   No   | **70**  | **12.1** |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness
	 */
	textDecorationThickness?: TextDecorationThicknessProperty<TLength>;
	/**
	 * The **`text-decoration-thickness`** CSS property sets the thickness, or width, of the decoration line that is used on text in an element, such as a line-through, underline, or overline.
	 *
	 * **Syntax**: `auto | from-font | <length> | <percentage> `
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox |  Safari  | Edge | IE  |
	 * | :----: | :-----: | :------: | :--: | :-: |
	 * |   No   | **70**  | **12.1** |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness
	 */
	textDecorationWidth?: TextDecorationThicknessProperty<TLength>;
	/**
	 * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `currentcolor`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :-----: | :----: | :-: |
	 * | **25** | **46**  | **6.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color
	 */
	textEmphasisColor?: TextEmphasisColorProperty;
	/**
	 * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.
	 *
	 * **Syntax**: `[ over | under ] && [ right | left ]`
	 *
	 * **Initial value**: `over right`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :-----: | :----: | :-: |
	 * | **25** | **46**  | **6.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position
	 */
	textEmphasisPosition?: GlobalsString;
	/**
	 * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.
	 *
	 * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :-----: | :----: | :-: |
	 * | **25** | **46**  | **6.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style
	 */
	textEmphasisStyle?: TextEmphasisStyleProperty;
	/**
	 * The **`text-indent`** CSS property sets the length of empty space (indentation) that is put before lines of text in a block.
	 *
	 * **Syntax**: `<length-percentage> && hanging? && each-line?`
	 *
	 * **Initial value**: `0`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **3** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-indent
	 */
	textIndent?: TextIndentProperty<TLength>;
	/**
	 * The **`text-justify`** CSS property sets what type of justification should be applied to text when `text-align``: justify;` is set on an element.
	 *
	 * **Syntax**: `auto | inter-character | inter-word | none`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE   |
	 * | :----: | :-----: | :----: | :----: | :----: |
	 * |  n/a   | **55**  |   No   | **12** | **11** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-justify
	 */
	textJustify?: TextJustifyProperty;
	/**
	 * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.
	 *
	 * **Syntax**: `mixed | upright | sideways`
	 *
	 * **Initial value**: `mixed`
	 *
	 * |  Chrome  | Firefox |    Safari     |  Edge  | IE  |
	 * | :------: | :-----: | :-----------: | :----: | :-: |
	 * |  **48**  | **41**  | **5.1** _-x-_ | **79** | No  |
	 * | 11 _-x-_ |         |               |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-orientation
	 */
	textOrientation?: TextOrientationProperty;
	/**
	 * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.
	 *
	 * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`
	 *
	 * **Initial value**: `clip`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |  IE   |
	 * | :----: | :-----: | :-----: | :----: | :---: |
	 * | **1**  |  **7**  | **1.3** | **12** | **6** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-overflow
	 */
	textOverflow?: TextOverflowProperty;
	/**
	 * The **`text-rendering`** CSS property provides information to the rendering engine about what to optimize for when rendering text.
	 *
	 * **Syntax**: `auto | optimizeSpeed | optimizeLegibility | geometricPrecision`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **4**  |  **1**  | **5**  | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-rendering
	 */
	textRendering?: TextRenderingProperty;
	/**
	 * The **`text-shadow`** CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.
	 *
	 * **Syntax**: `none | <shadow-t>#`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |   IE   |
	 * | :----: | :-----: | :-----: | :----: | :----: |
	 * | **2**  | **3.5** | **1.1** | **12** | **10** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-shadow
	 */
	textShadow?: TextShadowProperty;
	/**
	 * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.
	 *
	 * **Syntax**: `none | auto | <percentage>`
	 *
	 * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **54** |   No    |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust
	 */
	textSizeAdjust?: TextSizeAdjustProperty;
	/**
	 * The **`text-transform`** CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby
	 *
	 * **Syntax**: `none | capitalize | uppercase | lowercase | full-width | full-size-kana`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-transform
	 */
	textTransform?: TextTransformProperty;
	/**
	 * The **`text-underline-offset`** CSS property sets the offset distance of an underline text decoration line (applied using `text-decoration`) from its original position.
	 *
	 * **Syntax**: `auto | from-font | <length> | <percentage> `
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox |  Safari  | Edge | IE  |
	 * | :----: | :-----: | :------: | :--: | :-: |
	 * |   No   | **70**  | **12.1** |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset
	 */
	textUnderlineOffset?: TextUnderlineOffsetProperty<TLength>;
	/**
	 * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.
	 *
	 * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  |  IE   |
	 * | :----: | :-----: | :------: | :----: | :---: |
	 * | **33** | **74**  | **12.1** | **12** | **6** |
	 * |        |         | 9 _-x-_  |        |       |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position
	 */
	textUnderlinePosition?: TextUnderlinePositionProperty;
	/**
	 * The **`top`** CSS property participates in specifying the vertical position of a _positioned element_. It has no effect on non-positioned elements.
	 *
	 * **Syntax**: `<length> | <percentage> | auto`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/top
	 */
	top?: TopProperty<TLength>;
	/**
	 * The **`touch-action`** CSS property sets how a region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).
	 *
	 * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |    IE    |
	 * | :----: | :-----: | :----: | :----: | :------: |
	 * | **36** | **52**  | **13** | **12** |  **11**  |
	 * |        |         |        |        | 10 _-x-_ |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/touch-action
	 */
	touchAction?: TouchActionProperty;
	/**
	 * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.
	 *
	 * **Syntax**: `none | <transform-list>`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome  | Firefox |  Safari   |  Edge  |   IE    |
	 * | :-----: | :-----: | :-------: | :----: | :-----: |
	 * | **36**  | **16**  |   **9**   | **12** | **10**  |
	 * | 1 _-x-_ |         | 3.1 _-x-_ |        | 9 _-x-_ |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/transform
	 */
	transform?: TransformProperty;
	/**
	 * The **`transform-box`** CSS property defines the layout box to which the `transform` and `transform-origin` properties relate.
	 *
	 * **Syntax**: `border-box | fill-box | view-box`
	 *
	 * **Initial value**: `border-box `
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **64** | **55**  | **11** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/transform-box
	 */
	transformBox?: TransformBoxProperty;
	/**
	 * The **`transform-origin`** CSS property sets the origin for an element's transformations.
	 *
	 * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`
	 *
	 * **Initial value**: `50% 50% 0`
	 *
	 * | Chrome  |  Firefox  | Safari  |  Edge  |   IE    |
	 * | :-----: | :-------: | :-----: | :----: | :-----: |
	 * | **36**  |  **16**   |  **9**  | **12** | **10**  |
	 * | 1 _-x-_ | 3.5 _-x-_ | 2 _-x-_ |        | 9 _-x-_ |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/transform-origin
	 */
	transformOrigin?: TransformOriginProperty<TLength>;
	/**
	 * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.
	 *
	 * **Syntax**: `flat | preserve-3d`
	 *
	 * **Initial value**: `flat`
	 *
	 * |  Chrome  | Firefox  | Safari  |  Edge  | IE  |
	 * | :------: | :------: | :-----: | :----: | :-: |
	 * |  **36**  |  **16**  |  **9**  | **12** | No  |
	 * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/transform-style
	 */
	transformStyle?: TransformStyleProperty;
	/**
	 * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **26**  | **16**  |  **9**  | **12** | **10** |
	 * | 1 _-x-_ | 4 _-x-_ | 4 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/transition-delay
	 */
	transitionDelay?: GlobalsString;
	/**
	 * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 *
	 * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |
	 * | :-----: | :-----: | :-------: | :----: | :----: |
	 * | **26**  | **16**  |   **9**   | **12** | **10** |
	 * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/transition-duration
	 */
	transitionDuration?: GlobalsString;
	/**
	 * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.
	 *
	 * **Syntax**: `none | <single-transition-property>#`
	 *
	 * **Initial value**: all
	 *
	 * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |
	 * | :-----: | :-----: | :-------: | :----: | :----: |
	 * | **26**  | **16**  |   **9**   | **12** | **10** |
	 * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/transition-property
	 */
	transitionProperty?: TransitionPropertyProperty;
	/**
	 * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.
	 *
	 * **Syntax**: `<timing-function>#`
	 *
	 * **Initial value**: `ease`
	 *
	 * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |
	 * | :-----: | :-----: | :-------: | :----: | :----: |
	 * | **26**  | **16**  |   **9**   | **12** | **10** |
	 * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function
	 */
	transitionTimingFunction?: TransitionTimingFunctionProperty;
	/**
	 * The **`translate`** CSS property allows you to specify translation transforms individually and independantly of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.
	 *
	 * **Syntax**: `none | <length-percentage> [ <length-percentage> <length>? ]?`
	 *
	 * **Initial value**: `none`
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **72**  |   No   |  No  | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/translate
	 */
	translate?: TranslateProperty<TLength>;
	/**
	 * The **`unicode-bidi`** CSS property, together with the `direction` property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The `unicode-bidi` property overrides this algorithm and allows the developer to control the text embedding.
	 *
	 * **Syntax**: `normal | embed | isolate | bidi-override | isolate-override | plaintext`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |   IE    |
	 * | :----: | :-----: | :-----: | :----: | :-----: |
	 * | **2**  |  **1**  | **1.3** | **12** | **5.5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi
	 */
	unicodeBidi?: UnicodeBidiProperty;
	/**
	 * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.
	 *
	 * **Syntax**: `auto | text | none | contain | all`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome  | Firefox |   Safari    |     Edge     |      IE      |
	 * | :-----: | :-----: | :---------: | :----------: | :----------: |
	 * | **54**  | **69**  | **3** _-x-_ | **12** _-x-_ | **10** _-x-_ |
	 * | 1 _-x-_ | 1 _-x-_ |             |              |              |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/user-select
	 */
	userSelect?: UserSelectProperty;
	/**
	 * The **`vertical-align`** CSS property sets vertical alignment of an inline or table-cell box.
	 *
	 * **Syntax**: `baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>`
	 *
	 * **Initial value**: `baseline`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/vertical-align
	 */
	verticalAlign?: VerticalAlignProperty<TLength>;
	/**
	 * The **`visibility`** CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a `<table>`.
	 *
	 * **Syntax**: `visible | hidden | collapse`
	 *
	 * **Initial value**: `visible`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/visibility
	 */
	visibility?: VisibilityProperty;
	/**
	 * The **`white-space`** CSS property sets how white space inside an element is handled.
	 *
	 * **Syntax**: `normal | pre | nowrap | pre-wrap | pre-line | break-spaces`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE    |
	 * | :----: | :-----: | :----: | :----: | :-----: |
	 * | **1**  |  **1**  | **1**  | **12** | **5.5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/white-space
	 */
	whiteSpace?: WhiteSpaceProperty;
	/**
	 * The **`widows`** CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column.
	 *
	 * **Syntax**: `<integer>`
	 *
	 * **Initial value**: `2`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |  IE   |
	 * | :----: | :-----: | :-----: | :----: | :---: |
	 * | **25** |   No    | **1.3** | **12** | **8** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/widows
	 */
	widows?: GlobalsNumber;
	/**
	 * The **`width`** CSS property sets an element's width. By default it sets the width of the content area, but if `box-sizing` is set to `border-box`, it sets the width of the border area.
	 *
	 * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/width
	 */
	width?: WidthProperty<TLength>;
	/**
	 * The **`will-change`** CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required.
	 *
	 * **Syntax**: `auto | <animateable-feature>#`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :-----: | :----: | :-: |
	 * | **36** | **36**  | **9.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/will-change
	 */
	willChange?: WillChangeProperty;
	/**
	 * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.
	 *
	 * **Syntax**: `normal | break-all | keep-all | break-word`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE    |
	 * | :----: | :-----: | :----: | :----: | :-----: |
	 * | **1**  | **15**  | **3**  | **12** | **5.5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/word-break
	 */
	wordBreak?: WordBreakProperty;
	/**
	 * The **`word-spacing`** CSS property sets the length of space between words and between tags.
	 *
	 * **Syntax**: `normal | <length-percentage>`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **6** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/word-spacing
	 */
	wordSpacing?: WordSpacingProperty<TLength>;
	/**
	 * The `**overflow-wrap**` CSS property sets whether the browser should insert line breaks within words to prevent text from overflowing its content box.
	 *
	 * **Syntax**: `normal | break-word`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE    |
	 * | :----: | :-----: | :----: | :----: | :-----: |
	 * | **1**  | **3.5** | **2**  | **12** | **5.5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap
	 */
	wordWrap?: WordWrapProperty;
	/**
	 * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress.
	 *
	 * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`
	 *
	 * **Initial value**: `horizontal-tb`
	 *
	 * | Chrome  | Firefox |  Safari   |  Edge  |     IE      |
	 * | :-----: | :-----: | :-------: | :----: | :---------: |
	 * | **48**  | **41**  | **10.1**  | **12** | **9** _-x-_ |
	 * | 8 _-x-_ |         | 5.1 _-x-_ |        |             |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/writing-mode
	 */
	writingMode?: WritingModeProperty;
	/**
	 * The **`z-index`** CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.
	 *
	 * **Syntax**: `auto | <integer>`
	 *
	 * **Initial value**: `auto`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/z-index
	 */
	zIndex?: ZIndexProperty;
	/**
	 * The non-standard **`zoom`** CSS property can be used to control the magnification level of an element. `transform: scale()` should be used instead of this property, if possible. However, unlike CSS Transforms, `zoom` affects the layout size of the element.
	 *
	 * **Syntax**: `normal | reset | <number> | <percentage>`
	 *
	 * **Initial value**: `normal`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |   IE    |
	 * | :----: | :-----: | :-----: | :----: | :-----: |
	 * | **1**  |   No    | **3.1** | **12** | **5.5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/zoom
	 */
	zoom?: ZoomProperty;
}
export interface StandardShorthandProperties<TLength = string | 0> {
	/**
	 * The `**all**` CSS shorthand property sets all of an element's properties (other than `unicode-bidi` and `direction`) to their initial or inherited values, or to the values specified in another stylesheet origin.
	 *
	 * **Syntax**: `initial | inherit | unset | revert`
	 *
	 * **Initial value**: There is no practical initial value for it.
	 *
	 * | Chrome | Firefox | Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :-----: | :----: | :-: |
	 * | **37** | **27**  | **9.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/all
	 */
	all?: Globals;
	/**
	 * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.
	 *
	 * **Syntax**: `<single-animation>#`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **43**  | **16**  |  **9**  | **12** | **10** |
	 * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/animation
	 */
	animation?: AnimationProperty;
	/**
	 * The **`background`** shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.
	 *
	 * **Syntax**: `[ <bg-layer> , ]* <final-bg-layer>`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/background
	 */
	background?: BackgroundProperty<TLength>;
	/**
	 * The **`border`** CSS property sets an element's border. It's a shorthand for `border-width`, `border-style`, and `border-color`.
	 *
	 * **Syntax**: `<line-width> || <line-style> || <color>`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border
	 */
	border?: BorderProperty<TLength>;
	/**
	 * The **`border-block`** CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.
	 *
	 * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **66**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-block
	 */
	borderBlock?: BorderBlockProperty<TLength>;
	/**
	 * The **`border-block-end`** CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.
	 *
	 * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **69** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end
	 */
	borderBlockEnd?: BorderBlockEndProperty<TLength>;
	/**
	 * The **`border-block-start`** CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.
	 *
	 * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **69** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start
	 */
	borderBlockStart?: BorderBlockStartProperty<TLength>;
	/**
	 * The **`border-bottom`** CSS property is a shorthand that sets the values of `border-bottom-width`, `border-bottom-style` and `border-bottom-color`. These properties set an element's bottom border.
	 *
	 * **Syntax**: `<line-width> || <line-style> || <color>`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom
	 */
	borderBottom?: BorderBottomProperty<TLength>;
	/**
	 * The **`border-color`** shorthand CSS property sets the color of all sides of an element's border.
	 *
	 * **Syntax**: `<color>{1,4}`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-color
	 */
	borderColor?: BorderColorProperty;
	/**
	 * The **`border-image`** CSS property draws an image in place of an element's `border-style`.
	 *
	 * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`
	 *
	 * | Chrome  |  Firefox  | Safari  |  Edge  |   IE   |
	 * | :-----: | :-------: | :-----: | :----: | :----: |
	 * | **16**  |  **15**   |  **6**  | **12** | **11** |
	 * | 7 _-x-_ | 3.5 _-x-_ | 3 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-image
	 */
	borderImage?: BorderImageProperty;
	/**
	 * The **`border-inline`** CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.
	 *
	 * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **69** | **66**  |   No   | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-inline
	 */
	borderInline?: BorderInlineProperty<TLength>;
	/**
	 * The **`border-inline-end`** CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.
	 *
	 * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **69** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end
	 */
	borderInlineEnd?: BorderInlineEndProperty<TLength>;
	/**
	 * The **`border-inline-start`** CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.
	 *
	 * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <'color'>`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **69** | **41**  | **12.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start
	 */
	borderInlineStart?: BorderInlineStartProperty<TLength>;
	/**
	 * The **`border-left`** CSS property is a shorthand that sets the values of `border-left-width`, `border-left-style` and `border-left-color`. These properties set an element's left border.
	 *
	 * **Syntax**: `<line-width> || <line-style> || <color>`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-left
	 */
	borderLeft?: BorderLeftProperty<TLength>;
	/**
	 * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.
	 *
	 * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
	 * | :-----: | :-----: | :-----: | :----: | :---: |
	 * |  **4**  |  **4**  |  **5**  | **12** | **9** |
	 * | 1 _-x-_ |         | 3 _-x-_ |        |       |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-radius
	 */
	borderRadius?: BorderRadiusProperty<TLength>;
	/**
	 * The **`border-right`** CSS property is a shorthand that sets the values of `border-right-width`, `border-right-style` and `border-right-color`. These properties set an element's right border.
	 *
	 * **Syntax**: `<line-width> || <line-style> || <color>`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |   IE    |
	 * | :----: | :-----: | :----: | :----: | :-----: |
	 * | **1**  |  **1**  | **1**  | **12** | **5.5** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-right
	 */
	borderRight?: BorderRightProperty<TLength>;
	/**
	 * The **`border-style`** CSS property is a shorthand property that sets the line style for all four sides of an element's border.
	 *
	 * **Syntax**: `<line-style>{1,4}`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-style
	 */
	borderStyle?: BorderStyleProperty;
	/**
	 * The **`border-top`** CSS property is a shorthand that sets the values of `border-top-width`, `border-top-style` and `border-top-color`. These properties set an element's top border.
	 *
	 * **Syntax**: `<line-width> || <line-style> || <color>`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-top
	 */
	borderTop?: BorderTopProperty<TLength>;
	/**
	 * The **`border-width`** shorthand CSS property sets the widths of all four sides of an element's border.
	 *
	 * **Syntax**: `<line-width>{1,4}`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/border-width
	 */
	borderWidth?: BorderWidthProperty<TLength>;
	/**
	 * The **`column-rule`** CSS property sets the width, style, and color of the rule (line) drawn between columns in a multi-column layout.
	 *
	 * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`
	 *
	 * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
	 * | :-----: | :-----: | :-----: | :----: | :----: |
	 * | **50**  | **52**  |  **9**  | **12** | **10** |
	 * | 1 _-x-_ |         | 3 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/column-rule
	 */
	columnRule?: ColumnRuleProperty<TLength>;
	/**
	 * The **`columns`** CSS property sets the column width and column count of an element.
	 *
	 * **Syntax**: `<'column-width'> || <'column-count'>`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |   IE   |
	 * | :----: | :-----: | :-----: | :----: | :----: |
	 * | **50** | **52**  |  **9**  | **12** | **10** |
	 * |        |         | 3 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/columns
	 */
	columns?: ColumnsProperty<TLength>;
	/**
	 * The **`flex`** CSS property sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.
	 *
	 * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`
	 *
	 * |  Chrome  | Firefox |  Safari   |  Edge  |    IE    |
	 * | :------: | :-----: | :-------: | :----: | :------: |
	 * |  **29**  | **20**  |   **9**   | **12** |  **11**  |
	 * | 21 _-x-_ |         | 6.1 _-x-_ |        | 10 _-x-_ |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/flex
	 */
	flex?: FlexProperty<TLength>;
	/**
	 * The **`flex-flow`** CSS property is a shorthand property for `flex-direction` and `flex-wrap` properties.
	 *
	 * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`
	 *
	 * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |
	 * | :------: | :-----: | :-------: | :----: | :----: |
	 * |  **29**  | **28**  |   **9**   | **12** | **11** |
	 * | 21 _-x-_ |         | 6.1 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/flex-flow
	 */
	flexFlow?: FlexFlowProperty;
	/**
	 * The **`font`** CSS property is a shorthand for `font-style`, `font-variant`, `font-weight`, `font-size`, `line-height`, and `font-family`. Alternatively, it sets an element's font to a system font.
	 *
	 * **Syntax**: `[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **3** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/font
	 */
	font?: FontProperty;
	/**
	 * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.
	 *
	 * **Syntax**: `<'row-gap'> <'column-gap'>?`
	 *
	 * ---
	 *
	 * _Supported in Flex Layout_
	 *
	 * | Chrome | Firefox | Safari | Edge | IE  |
	 * | :----: | :-----: | :----: | :--: | :-: |
	 * |   No   | **63**  |   No   |  No  | No  |
	 *
	 * ---
	 *
	 * _Supported in Grid Layout_
	 *
	 * |     Chrome      |     Firefox     |        Safari         |  Edge  | IE  |
	 * | :-------------: | :-------------: | :-------------------: | :----: | :-: |
	 * |     **66**      |     **61**      | **10.1** _(grid-gap)_ | **16** | No  |
	 * | 57 _(grid-gap)_ | 52 _(grid-gap)_ |                       |        |     |
	 *
	 * ---
	 *
	 * _Supported in Multi-column Layout_
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **66** | **61**  |   No   | **16** | No  |
	 *
	 * ---
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/gap
	 */
	gap?: GapProperty<TLength>;
	/**
	 * The **`grid`** CSS property is a shorthand property that sets all of the explicit grid properties (`grid-template-rows`, `grid-template-columns`, and `grid-template-areas`), and all the implicit grid properties (`grid-auto-rows`, `grid-auto-columns`, and `grid-auto-flow`), in a single declaration.
	 *
	 * **Syntax**: `<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **52**  | **10.1** | **16** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/grid
	 */
	grid?: GridProperty;
	/**
	 * The **`grid-area`** CSS property is a shorthand property for `grid-row-start`, `grid-column-start`, `grid-row-end` and `grid-column-end`, specifying a grid item’s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.
	 *
	 * **Syntax**: `<grid-line> [ / <grid-line> ]{0,3}`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **52**  | **10.1** | **16** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/grid-area
	 */
	gridArea?: GridAreaProperty;
	/**
	 * The **`grid-column`** CSS property is a shorthand property for `grid-column-start` and `grid-column-end` specifying a grid item's size and location within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.
	 *
	 * **Syntax**: `<grid-line> [ / <grid-line> ]?`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **52**  | **10.1** | **16** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/grid-column
	 */
	gridColumn?: GridColumnProperty;
	/**
	 * The **`grid-row`** CSS property is a shorthand property for `grid-row-start` and `grid-row-end` specifying a grid item’s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.
	 *
	 * **Syntax**: `<grid-line> [ / <grid-line> ]?`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **52**  | **10.1** | **16** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/grid-row
	 */
	gridRow?: GridRowProperty;
	/**
	 * The **`grid-template`** CSS property is a shorthand property for defining grid columns, rows, and areas.
	 *
	 * **Syntax**: `none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?`
	 *
	 * | Chrome | Firefox |  Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :------: | :----: | :-: |
	 * | **57** | **52**  | **10.1** | **16** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/grid-template
	 */
	gridTemplate?: GridTemplateProperty;
	/**
	 * **Syntax**: `none | <integer>`
	 *
	 * **Initial value**: `none`
	 */
	lineClamp?: LineClampProperty;
	/**
	 * The **`list-style`** CSS property is a shorthand to set list style properties `list-style-type`, `list-style-image`, and `list-style-position`.
	 *
	 * **Syntax**: `<'list-style-type'> || <'list-style-position'> || <'list-style-image'>`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/list-style
	 */
	listStyle?: ListStyleProperty;
	/**
	 * The **`margin`** CSS property sets the margin area on all four sides of an element. It is a shorthand for `margin-top`, `margin-right`, `margin-bottom`, and `margin-left`.
	 *
	 * **Syntax**: `[ <length> | <percentage> | auto ]{1,4}`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **3** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/margin
	 */
	margin?: MarginProperty<TLength>;
	/**
	 * The **`mask`** CSS property hides an element (partially or fully) by masking or clipping the image at specific points.
	 *
	 * **Syntax**: `<mask-layer>#`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :-----: | :----: | :-: |
	 * | **1**  |  **2**  | **3.2** | **12** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/mask
	 */
	mask?: MaskProperty<TLength>;
	/**
	 * The **`mask-border`** CSS property lets you create a mask along the edge of an element's border.
	 *
	 * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`
	 */
	maskBorder?: MaskBorderProperty;
	/**
	 * The **`offset`** CSS property is a shorthand property for animating an element along a defined path.
	 *
	 * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`
	 *
	 * |    Chrome     | Firefox | Safari |  Edge  | IE  |
	 * | :-----------: | :-----: | :----: | :----: | :-: |
	 * |    **55**     | **72**  |   No   | **79** | No  |
	 * | 46 _(motion)_ |         |        |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/offset
	 */
	motion?: OffsetProperty<TLength>;
	/**
	 * The **`offset`** CSS property is a shorthand property for animating an element along a defined path.
	 *
	 * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`
	 *
	 * |    Chrome     | Firefox | Safari |  Edge  | IE  |
	 * | :-----------: | :-----: | :----: | :----: | :-: |
	 * |    **55**     | **72**  |   No   | **79** | No  |
	 * | 46 _(motion)_ |         |        |        |     |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/offset
	 */
	offset?: OffsetProperty<TLength>;
	/**
	 * The **`outline`** CSS property is a shorthand to set various outline properties in a single declaration: `outline-style`, `outline-width`, and `outline-color`.
	 *
	 * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  |  IE   |
	 * | :----: | :-----: | :-----: | :----: | :---: |
	 * | **1**  | **1.5** | **1.2** | **12** | **8** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/outline
	 */
	outline?: OutlineProperty<TLength>;
	/**
	 * The **`overflow`** CSS property sets what to do when an element's content is too big to fit in its block formatting context. It is a shorthand for `overflow-x` and `overflow-y`.
	 *
	 * **Syntax**: `[ visible | hidden | clip | scroll | auto ]{1,2}`
	 *
	 * **Initial value**: `visible`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/overflow
	 */
	overflow?: OverflowProperty;
	/**
	 * The **`padding`** CSS property sets the padding area on all four sides of an element. It is a shorthand for `padding-top`, `padding-right`, `padding-bottom`, and `padding-left`.
	 *
	 * **Syntax**: `[ <length> | <percentage> ]{1,4}`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **4** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/padding
	 */
	padding?: PaddingProperty<TLength>;
	/**
	 * The CSS **`place-items`** shorthand property sets the `align-items` and `justify-items` properties, respectively. If the second value is not set, the first value is also used for it.
	 *
	 * **Syntax**: `<'align-items'> <'justify-items'>?`
	 *
	 * ---
	 *
	 * _Supported in Flex Layout_
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **59** | **45**  | **11** | **79** | No  |
	 *
	 * ---
	 *
	 * _Supported in Grid Layout_
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **59** | **45**  | **11** | **79** | No  |
	 *
	 * ---
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/place-items
	 */
	placeItems?: PlaceItemsProperty;
	/**
	 * The **`place-self`** CSS property is a shorthand property sets both the `align-self` and `justify-self` properties. The first value is the `align-self` property value, the second the `justify-self` one. If the second value is not present, the first value is also used for it.
	 *
	 * **Syntax**: `<'align-self'> <'justify-self'>?`
	 *
	 * ---
	 *
	 * _Supported in Flex Layout_
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **59** | **45**  |   No   | **79** | No  |
	 *
	 * ---
	 *
	 * _Supported in Grid Layout_
	 *
	 * | Chrome | Firefox | Safari |  Edge  | IE  |
	 * | :----: | :-----: | :----: | :----: | :-: |
	 * | **59** | **45**  |   No   | **79** | No  |
	 *
	 * ---
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/place-self
	 */
	placeSelf?: PlaceSelfProperty;
	/**
	 * The **`text-decoration`** CSS property sets the appearance of decorative lines on text. It is a shorthand for `text-decoration-line`, `text-decoration-color`, and `text-decoration-style`.
	 *
	 * **Syntax**: `<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>`
	 *
	 * | Chrome | Firefox | Safari |  Edge  |  IE   |
	 * | :----: | :-----: | :----: | :----: | :---: |
	 * | **1**  |  **1**  | **1**  | **12** | **3** |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration
	 */
	textDecoration?: TextDecorationProperty<TLength>;
	/**
	 * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.
	 *
	 * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`
	 *
	 * | Chrome | Firefox | Safari  |  Edge  | IE  |
	 * | :----: | :-----: | :-----: | :----: | :-: |
	 * | **25** | **46**  | **6.1** | **79** | No  |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis
	 */
	textEmphasis?: TextEmphasisProperty;
	/**
	 * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.
	 *
	 * **Syntax**: `<single-transition>#`
	 *
	 * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |
	 * | :-----: | :-----: | :-------: | :----: | :----: |
	 * | **26**  | **16**  |   **9**   | **12** | **10** |
	 * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |
	 *
	 * @see https://developer.mozilla.org/docs/Web/CSS/transition
	 */
	transition?: TransitionProperty;
}
export interface StandardProperties<TLength = string | 0> extends StandardLonghandProperties<TLength>, StandardShorthandProperties<TLength> {
}
export interface VendorLonghandProperties<TLength = string | 0> {
	/**
	 * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 */
	MozAnimationDelay?: GlobalsString;
	/**
	 * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.
	 *
	 * **Syntax**: `<single-animation-direction>#`
	 *
	 * **Initial value**: `normal`
	 */
	MozAnimationDirection?: AnimationDirectionProperty;
	/**
	 * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 */
	MozAnimationDuration?: GlobalsString;
	/**
	 * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.
	 *
	 * **Syntax**: `<single-animation-fill-mode>#`
	 *
	 * **Initial value**: `none`
	 */
	MozAnimationFillMode?: AnimationFillModeProperty;
	/**
	 * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.
	 *
	 * **Syntax**: `<single-animation-iteration-count>#`
	 *
	 * **Initial value**: `1`
	 */
	MozAnimationIterationCount?: AnimationIterationCountProperty;
	/**
	 * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.
	 *
	 * **Syntax**: `[ none | <keyframes-name> ]#`
	 *
	 * **Initial value**: `none`
	 */
	MozAnimationName?: AnimationNameProperty;
	/**
	 * The **`animation-play-state`** CSS property sets whether an animation is running or paused.
	 *
	 * **Syntax**: `<single-animation-play-state>#`
	 *
	 * **Initial value**: `running`
	 */
	MozAnimationPlayState?: AnimationPlayStateProperty;
	/**
	 * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.
	 *
	 * **Syntax**: `<timing-function>#`
	 *
	 * **Initial value**: `ease`
	 */
	MozAnimationTimingFunction?: AnimationTimingFunctionProperty;
	/**
	 * The **`-moz-appearance`** CSS property is used in Gecko (Firefox) to display an element using platform-native styling based on the operating system's theme.
	 *
	 * **Syntax**: `none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized`
	 *
	 * **Initial value**: `none` (but this value is overridden in the user agent CSS)
	 */
	MozAppearance?: MozAppearanceProperty;
	/**
	 * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.
	 *
	 * **Syntax**: `visible | hidden`
	 *
	 * **Initial value**: `visible`
	 */
	MozBackfaceVisibility?: BackfaceVisibilityProperty;
	/**
	 * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-color'>`
	 *
	 * **Initial value**: `currentcolor`
	 */
	MozBorderEndColor?: BorderInlineEndColorProperty;
	/**
	 * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-style'>`
	 *
	 * **Initial value**: `none`
	 */
	MozBorderEndStyle?: BorderInlineEndStyleProperty;
	/**
	 * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-width'>`
	 *
	 * **Initial value**: `medium`
	 */
	MozBorderEndWidth?: BorderInlineEndWidthProperty<TLength>;
	/**
	 * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-color'>`
	 *
	 * **Initial value**: `currentcolor`
	 */
	MozBorderStartColor?: BorderInlineStartColorProperty;
	/**
	 * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'border-top-style'>`
	 *
	 * **Initial value**: `none`
	 */
	MozBorderStartStyle?: BorderInlineStartStyleProperty;
	/**
	 * The **`box-sizing`** CSS property defines how the user agent should calculate the total width and height of an element.
	 *
	 * **Syntax**: `content-box | border-box`
	 *
	 * **Initial value**: `content-box`
	 */
	MozBoxSizing?: BoxSizingProperty;
	/**
	 * The **`column-count`** CSS property breaks an element's content into the specified number of columns.
	 *
	 * **Syntax**: `<integer> | auto`
	 *
	 * **Initial value**: `auto`
	 */
	MozColumnCount?: ColumnCountProperty;
	/**
	 * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.
	 *
	 * **Syntax**: `auto | balance | balance-all`
	 *
	 * **Initial value**: `balance`
	 */
	MozColumnFill?: ColumnFillProperty;
	/**
	 * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.
	 *
	 * **Syntax**: `normal | <length-percentage>`
	 *
	 * **Initial value**: `normal`
	 */
	MozColumnGap?: ColumnGapProperty<TLength>;
	/**
	 * The **`column-rule-color`** CSS property sets the color of the rule (line) drawn between columns in a multi-column layout.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `currentcolor`
	 */
	MozColumnRuleColor?: ColumnRuleColorProperty;
	/**
	 * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.
	 *
	 * **Syntax**: `<'border-style'>`
	 *
	 * **Initial value**: `none`
	 */
	MozColumnRuleStyle?: ColumnRuleStyleProperty;
	/**
	 * The **`column-rule-width`** CSS property sets the width of the rule (line) drawn between columns in a multi-column layout.
	 *
	 * **Syntax**: `<'border-width'>`
	 *
	 * **Initial value**: `medium`
	 */
	MozColumnRuleWidth?: ColumnRuleWidthProperty<TLength>;
	/**
	 * The **`column-width`** CSS property specifies the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.
	 *
	 * **Syntax**: `<length> | auto`
	 *
	 * **Initial value**: `auto`
	 */
	MozColumnWidth?: ColumnWidthProperty<TLength>;
	/**
	 * If you reference an SVG image in a webpage (such as with the `<img>` element or as a background image), the SVG image can coordinate with the embedding element (its context) to have the image adopt property values set on the embedding element. To do this the embedding element needs to list the properties that are to be made available to the image by listing them as values of the **`-moz-context-properties`** property, and the image needs to opt in to using those properties by using values such as the `context-fill` value.
	 *
	 * **Syntax**: `none | [ fill | fill-opacity | stroke | stroke-opacity ]#`
	 *
	 * **Initial value**: `none`
	 */
	MozContextProperties?: MozContextPropertiesProperty;
	/**
	 * The non-standard **`-moz-float-edge`** CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness.
	 *
	 * **Syntax**: `border-box | content-box | margin-box | padding-box`
	 *
	 * **Initial value**: `content-box`
	 */
	MozFloatEdge?: MozFloatEdgeProperty;
	/**
	 * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.
	 *
	 * **Syntax**: `normal | <feature-tag-value>#`
	 *
	 * **Initial value**: `normal`
	 */
	MozFontFeatureSettings?: FontFeatureSettingsProperty;
	/**
	 * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.
	 *
	 * **Syntax**: `normal | <string>`
	 *
	 * **Initial value**: `normal`
	 */
	MozFontLanguageOverride?: FontLanguageOverrideProperty;
	/**
	 * The **`-moz-force-broken-image-icon`** extended CSS property can be used to force the broken image icon to be shown even when a broken image has an `alt` attribute.
	 *
	 * **Syntax**: `<integer>`
	 *
	 * **Initial value**: `0`
	 */
	MozForceBrokenImageIcon?: GlobalsNumber;
	/**
	 * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.
	 *
	 * **Syntax**: `none | manual | auto`
	 *
	 * **Initial value**: `manual`
	 */
	MozHyphens?: HyphensProperty;
	/**
	 * For certain XUL elements and pseudo-elements that use an image from the `list-style-image` property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.
	 *
	 * **Syntax**: `<shape> | auto`
	 *
	 * **Initial value**: `auto`
	 */
	MozImageRegion?: MozImageRegionProperty;
	/**
	 * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'margin-left'>`
	 *
	 * **Initial value**: `0`
	 */
	MozMarginEnd?: MarginInlineEndProperty<TLength>;
	/**
	 * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'margin-left'>`
	 *
	 * **Initial value**: `0`
	 */
	MozMarginStart?: MarginInlineStartProperty<TLength>;
	/**
	 * The **`-moz-orient`** CSS property specifies the orientation of the element to which it's applied.
	 *
	 * **Syntax**: `inline | block | horizontal | vertical`
	 *
	 * **Initial value**: `inline`
	 */
	MozOrient?: MozOrientProperty;
	/**
	 * In Mozilla applications, the **`-moz-outline-radius-bottomleft`** CSS property can be used to round the bottom-left corner of an element's `outline`.
	 *
	 * **Syntax**: `<outline-radius>`
	 *
	 * **Initial value**: `0`
	 */
	MozOutlineRadiusBottomleft?: MozOutlineRadiusBottomleftProperty<TLength>;
	/**
	 * In Mozilla applications, the **`-moz-outline-radius-bottomright`** CSS property can be used to round the bottom-right corner of an element's `outline`.
	 *
	 * **Syntax**: `<outline-radius>`
	 *
	 * **Initial value**: `0`
	 */
	MozOutlineRadiusBottomright?: MozOutlineRadiusBottomrightProperty<TLength>;
	/**
	 * In Mozilla applications, the **`-moz-outline-radius-topleft`** CSS property can be used to round the top-left corner of an element's `outline`.
	 *
	 * **Syntax**: `<outline-radius>`
	 *
	 * **Initial value**: `0`
	 */
	MozOutlineRadiusTopleft?: MozOutlineRadiusTopleftProperty<TLength>;
	/**
	 * In Mozilla applications, the **`-moz-outline-radius-topright`** CSS property can be used to round the top-right corner of an element's `outline`.
	 *
	 * **Syntax**: `<outline-radius>`
	 *
	 * **Initial value**: `0`
	 */
	MozOutlineRadiusTopright?: MozOutlineRadiusToprightProperty<TLength>;
	/**
	 * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'padding-left'>`
	 *
	 * **Initial value**: `0`
	 */
	MozPaddingEnd?: PaddingInlineEndProperty<TLength>;
	/**
	 * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'padding-left'>`
	 *
	 * **Initial value**: `0`
	 */
	MozPaddingStart?: PaddingInlineStartProperty<TLength>;
	/**
	 * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with z>0 becomes larger; each 3D-element with z<0 becomes smaller. The strength of the effect is determined by the value of this property.
	 *
	 * **Syntax**: `none | <length>`
	 *
	 * **Initial value**: `none`
	 */
	MozPerspective?: PerspectiveProperty<TLength>;
	/**
	 * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.
	 *
	 * **Syntax**: `<position>`
	 *
	 * **Initial value**: `50% 50%`
	 */
	MozPerspectiveOrigin?: PerspectiveOriginProperty<TLength>;
	/**
	 * **`-moz-stack-sizing`** is an extended CSS property. Normally, a `stack` will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible.
	 *
	 * **Syntax**: `ignore | stretch-to-fit`
	 *
	 * **Initial value**: `stretch-to-fit`
	 */
	MozStackSizing?: MozStackSizingProperty;
	/**
	 * The **`tab-size`** CSS property is used to customize the width of a tab (`U+0009`) character.
	 *
	 * **Syntax**: `<integer> | <length>`
	 *
	 * **Initial value**: `8`
	 */
	MozTabSize?: TabSizeProperty<TLength>;
	/**
	 * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.
	 *
	 * **Syntax**: `none | auto | <percentage>`
	 *
	 * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).
	 */
	MozTextSizeAdjust?: TextSizeAdjustProperty;
	/**
	 * The **`transform-origin`** CSS property sets the origin for an element's transformations.
	 *
	 * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`
	 *
	 * **Initial value**: `50% 50% 0`
	 */
	MozTransformOrigin?: TransformOriginProperty<TLength>;
	/**
	 * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.
	 *
	 * **Syntax**: `flat | preserve-3d`
	 *
	 * **Initial value**: `flat`
	 */
	MozTransformStyle?: TransformStyleProperty;
	/**
	 * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 */
	MozTransitionDelay?: GlobalsString;
	/**
	 * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 */
	MozTransitionDuration?: GlobalsString;
	/**
	 * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.
	 *
	 * **Syntax**: `none | <single-transition-property>#`
	 *
	 * **Initial value**: all
	 */
	MozTransitionProperty?: TransitionPropertyProperty;
	/**
	 * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.
	 *
	 * **Syntax**: `<timing-function>#`
	 *
	 * **Initial value**: `ease`
	 */
	MozTransitionTimingFunction?: TransitionTimingFunctionProperty;
	/**
	 * The **`-moz-user-focus`** CSS property is used to indicate whether an element can have the focus.
	 *
	 * **Syntax**: `ignore | normal | select-after | select-before | select-menu | select-same | select-all | none`
	 *
	 * **Initial value**: `none`
	 */
	MozUserFocus?: MozUserFocusProperty;
	/**
	 * The **`user-modify`** property has no effect in Firefox. It was originally planned to determine whether or not the content of an element can be edited by a user.
	 *
	 * **Syntax**: `read-only | read-write | write-only`
	 *
	 * **Initial value**: `read-only`
	 */
	MozUserModify?: MozUserModifyProperty;
	/**
	 * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.
	 *
	 * **Syntax**: `auto | text | none | contain | all`
	 *
	 * **Initial value**: `auto`
	 */
	MozUserSelect?: UserSelectProperty;
	/**
	 * The **`-moz-window-dragging`** CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X.
	 *
	 * **Syntax**: `drag | no-drag`
	 *
	 * **Initial value**: `drag`
	 */
	MozWindowDragging?: MozWindowDraggingProperty;
	/**
	 * The **`-ms-accelerator`** CSS property is a Microsoft extension that sets or retrieves a string indicating whether the object represents a keyboard shortcut.
	 *
	 * **Syntax**: `false | true`
	 *
	 * **Initial value**: `false`
	 */
	msAccelerator?: MsAcceleratorProperty;
	/**
	 * The **`align-self`** CSS property aligns flex items of the current flex line overriding the `align-items` value. If any of the item's cross-axis margin is set to `auto`, then `align-self` is ignored. In Grid layout `align-self` aligns the item inside the grid area.
	 *
	 * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`
	 *
	 * **Initial value**: `auto`
	 */
	msAlignSelf?: AlignSelfProperty;
	/**
	 * The **`-ms-block-progression`** CSS property is a Microsoft extension that specifies the block progression and layout orientation.
	 *
	 * **Syntax**: `tb | rl | bt | lr`
	 *
	 * **Initial value**: `tb`
	 */
	msBlockProgression?: MsBlockProgressionProperty;
	/**
	 * The **`-ms-content-zoom-chaining`** CSS property is a Microsoft extension specifying the zoom behavior that occurs when a user hits the zoom limit during page manipulation.
	 *
	 * **Syntax**: `none | chained`
	 *
	 * **Initial value**: `none`
	 */
	msContentZoomChaining?: MsContentZoomChainingProperty;
	/**
	 * The **`-ms-content-zoom-limit-max`** CSS property is a Microsoft extension that specifies the selected elements' maximum zoom factor.
	 *
	 * **Syntax**: `<percentage>`
	 *
	 * **Initial value**: `400%`
	 */
	msContentZoomLimitMax?: GlobalsString;
	/**
	 * The **`-ms-content-zoom-limit-min`** CSS property is a Microsoft extension that specifies the minimum zoom factor.
	 *
	 * **Syntax**: `<percentage>`
	 *
	 * **Initial value**: `100%`
	 */
	msContentZoomLimitMin?: GlobalsString;
	/**
	 * The **`-ms-content-zoom-snap-points`** CSS property is a Microsoft extension that specifies where zoom snap-points are located.
	 *
	 * **Syntax**: `snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )`
	 *
	 * **Initial value**: `snapInterval(0%, 100%)`
	 */
	msContentZoomSnapPoints?: GlobalsString;
	/**
	 * The **`-ms-content-zoom-snap-type`** CSS property is a Microsoft extension that specifies how zooming is affected by defined snap-points.
	 *
	 * **Syntax**: `none | proximity | mandatory`
	 *
	 * **Initial value**: `none`
	 */
	msContentZoomSnapType?: MsContentZoomSnapTypeProperty;
	/**
	 * The **`-ms-content-zooming`** CSS property is a Microsoft extension that specifies whether zooming is enabled.
	 *
	 * **Syntax**: `none | zoom`
	 *
	 * **Initial value**: zoom for the top level element, none for all other elements
	 */
	msContentZooming?: MsContentZoomingProperty;
	/**
	 * The `-ms-filter` CSS property is a Microsoft extension that sets or retrieves the filter or collection of filters applied to an object.
	 *
	 * **Syntax**: `<string>`
	 *
	 * **Initial value**: "" (the empty string)
	 */
	msFilter?: GlobalsString;
	/**
	 * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).
	 *
	 * **Syntax**: `row | row-reverse | column | column-reverse`
	 *
	 * **Initial value**: `row`
	 */
	msFlexDirection?: FlexDirectionProperty;
	/**
	 * The **`flex-grow`** CSS property sets how much of the available space in the flex container should be assigned to that item (the flex grow factor). If all sibling items have the same flex grow factor, then all items will receive the same share of available space, otherwise it is distributed according to the ratio defined by the different flex grow factors.
	 *
	 * **Syntax**: `<number>`
	 *
	 * **Initial value**: `0`
	 */
	msFlexPositive?: GlobalsNumber;
	/**
	 * The **`-ms-flow-from`** CSS property is a Microsoft extension that gets or sets a value identifying a region container in the document that accepts the content flow from the data source.
	 *
	 * **Syntax**: `[ none | <custom-ident> ]#`
	 *
	 * **Initial value**: `none`
	 */
	msFlowFrom?: MsFlowFromProperty;
	/**
	 * The **`-ms-flow-into`** CSS property is a Microsoft extension that gets or sets a value identifying an iframe container in the document that serves as the region's data source.
	 *
	 * **Syntax**: `[ none | <custom-ident> ]#`
	 *
	 * **Initial value**: `none`
	 */
	msFlowInto?: MsFlowIntoProperty;
	/**
	 * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track.
	 *
	 * **Syntax**: `<track-size>+`
	 *
	 * **Initial value**: `auto`
	 */
	msGridColumns?: GridAutoColumnsProperty<TLength>;
	/**
	 * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track.
	 *
	 * **Syntax**: `<track-size>+`
	 *
	 * **Initial value**: `auto`
	 */
	msGridRows?: GridAutoRowsProperty<TLength>;
	/**
	 * The **`-ms-high-contrast-adjust`** CSS property is a Microsoft extension that gets or sets a value indicating whether to override any CSS properties that would have been set in high contrast mode.
	 *
	 * **Syntax**: `auto | none`
	 *
	 * **Initial value**: `auto`
	 */
	msHighContrastAdjust?: MsHighContrastAdjustProperty;
	/**
	 * The **`-ms-hyphenate-limit-chars`** CSS property is a Microsoft extension that specifies one to three values indicating the minimum number of characters in a hyphenated word. If the word does not meet the required minimum number of characters in the word, before the hyphen, or after the hyphen, then the word is not hyphenated.
	 *
	 * **Syntax**: `auto | <integer>{1,3}`
	 *
	 * **Initial value**: `auto`
	 */
	msHyphenateLimitChars?: MsHyphenateLimitCharsProperty;
	/**
	 * The **`-ms-hyphenate-limit-lines`** CSS property is a Microsoft extension specifying the maximum number of consecutive lines in an element that may be ended with a hyphenated word.
	 *
	 * **Syntax**: `no-limit | <integer>`
	 *
	 * **Initial value**: `no-limit`
	 */
	msHyphenateLimitLines?: MsHyphenateLimitLinesProperty;
	/**
	 * The `**-ms-hyphenate-limit-zone**` CSS property is a Microsoft extension specifying the width of the hyphenation zone.
	 *
	 * **Syntax**: `<percentage> | <length>`
	 *
	 * **Initial value**: `0`
	 */
	msHyphenateLimitZone?: MsHyphenateLimitZoneProperty<TLength>;
	/**
	 * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.
	 *
	 * **Syntax**: `none | manual | auto`
	 *
	 * **Initial value**: `manual`
	 */
	msHyphens?: HyphensProperty;
	/**
	 * The **`-ms-ime-align`** CSS property is a Microsoft extension aligning the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active. The extension is implemented in Microsoft Edge and Internet Explorer 11.
	 *
	 * **Syntax**: `auto | after`
	 *
	 * **Initial value**: `auto`
	 */
	msImeAlign?: MsImeAlignProperty;
	/**
	 * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.
	 *
	 * **Syntax**: `auto | loose | normal | strict | anywhere`
	 *
	 * **Initial value**: `auto`
	 */
	msLineBreak?: LineBreakProperty;
	/**
	 * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.
	 *
	 * **Syntax**: `<integer>`
	 *
	 * **Initial value**: `0`
	 */
	msOrder?: GlobalsNumber;
	/**
	 * The **`-ms-overflow-style`** CSS property is a Microsoft extension controlling the behavior of scrollbars when the content of an element overflows.
	 *
	 * **Syntax**: `auto | none | scrollbar | -ms-autohiding-scrollbar`
	 *
	 * **Initial value**: `auto`
	 */
	msOverflowStyle?: MsOverflowStyleProperty;
	/**
	 * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.
	 *
	 * **Syntax**: `visible | hidden | clip | scroll | auto`
	 *
	 * **Initial value**: `visible`
	 */
	msOverflowX?: OverflowXProperty;
	/**
	 * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.
	 *
	 * **Syntax**: `visible | hidden | clip | scroll | auto`
	 *
	 * **Initial value**: `visible`
	 */
	msOverflowY?: OverflowYProperty;
	/**
	 * The `**-ms-scroll-chaining**` CSS property is a Microsoft extension that specifies the scrolling behavior that occurs when a user hits the scroll limit during a manipulation.
	 *
	 * **Syntax**: `chained | none`
	 *
	 * **Initial value**: `chained`
	 */
	msScrollChaining?: MsScrollChainingProperty;
	/**
	 * The `**-ms-scroll-limit-x-max**` CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollLeft` property.
	 *
	 * **Syntax**: `auto | <length>`
	 *
	 * **Initial value**: `auto`
	 */
	msScrollLimitXMax?: MsScrollLimitXMaxProperty<TLength>;
	/**
	 * The **`-ms-scroll-limit-x-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollLeft` property.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 */
	msScrollLimitXMin?: MsScrollLimitXMinProperty<TLength>;
	/**
	 * The **`-ms-scroll-limit-y-max`** CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollTop` property.
	 *
	 * **Syntax**: `auto | <length>`
	 *
	 * **Initial value**: `auto`
	 */
	msScrollLimitYMax?: MsScrollLimitYMaxProperty<TLength>;
	/**
	 * The **`-ms-scroll-limit-y-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollTop` property.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 */
	msScrollLimitYMin?: MsScrollLimitYMinProperty<TLength>;
	/**
	 * The **`-ms-scroll-rails`** CSS property is a Microsoft extension that specifies whether scrolling locks to the primary axis of motion.
	 *
	 * **Syntax**: `none | railed`
	 *
	 * **Initial value**: `railed`
	 */
	msScrollRails?: MsScrollRailsProperty;
	/**
	 * The **`-ms-scroll-snap-points-x`** CSS property is a Microsoft extension that specifies where snap-points will be located along the x-axis.
	 *
	 * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`
	 *
	 * **Initial value**: `snapInterval(0px, 100%)`
	 */
	msScrollSnapPointsX?: GlobalsString;
	/**
	 * The **`-ms-scroll-snap-points-y`** CSS property is a Microsoft extension that specifies where snap-points will be located along the y-axis.
	 *
	 * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`
	 *
	 * **Initial value**: `snapInterval(0px, 100%)`
	 */
	msScrollSnapPointsY?: GlobalsString;
	/**
	 * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.
	 *
	 * **Syntax**: `none | proximity | mandatory`
	 *
	 * **Initial value**: `none`
	 */
	msScrollSnapType?: MsScrollSnapTypeProperty;
	/**
	 * The **`-ms-scroll-translation`** CSS property is a Microsoft extension that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.
	 *
	 * **Syntax**: `none | vertical-to-horizontal`
	 *
	 * **Initial value**: `none`
	 */
	msScrollTranslation?: MsScrollTranslationProperty;
	/**
	 * The **`-ms-scrollbar-3dlight-color`** CSS property is a Microsoft extension specifying the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: depends on user agent
	 */
	msScrollbar3dlightColor?: MsScrollbar3dlightColorProperty;
	/**
	 * The **`-ms-scrollbar-arrow-color`** CSS property is a Microsoft extension that specifies the color of the arrow elements of a scroll arrow.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `ButtonText`
	 */
	msScrollbarArrowColor?: MsScrollbarArrowColorProperty;
	/**
	 * The `**-ms-scrollbar-base-color**` CSS property is a Microsoft extension that specifies the base color of the main elements of a scroll bar.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: depends on user agent
	 */
	msScrollbarBaseColor?: MsScrollbarBaseColorProperty;
	/**
	 * The **`-ms-scrollbar-darkshadow-color`** CSS property is a Microsoft extension that specifies the color of a scroll bar's gutter.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `ThreeDDarkShadow`
	 */
	msScrollbarDarkshadowColor?: MsScrollbarDarkshadowColorProperty;
	/**
	 * The `**-ms-scrollbar-face-color**` CSS property is a Microsoft extension that specifies the color of the scroll box and scroll arrows of a scroll bar.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `ThreeDFace`
	 */
	msScrollbarFaceColor?: MsScrollbarFaceColorProperty;
	/**
	 * The `**-ms-scrollbar-highlight-color**` CSS property is a Microsoft extension that specifies the color of the slider tray, the top and left edges of the scroll box, and the scroll arrows of a scroll bar.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `ThreeDHighlight`
	 */
	msScrollbarHighlightColor?: MsScrollbarHighlightColorProperty;
	/**
	 * The **`-ms-scrollbar-shadow-color`** CSS property is a Microsoft extension that specifies the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `ThreeDDarkShadow`
	 */
	msScrollbarShadowColor?: MsScrollbarShadowColorProperty;
	/**
	 * The **`-ms-text-autospace`** CSS property is a Microsoft extension that specifies the autospacing and narrow space width adjustment of text.
	 *
	 * **Syntax**: `none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space`
	 *
	 * **Initial value**: `none`
	 */
	msTextAutospace?: MsTextAutospaceProperty;
	/**
	 * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.
	 *
	 * **Syntax**: `none | all | [ digits <integer>? ]`
	 *
	 * **Initial value**: `none`
	 */
	msTextCombineHorizontal?: TextCombineUprightProperty;
	/**
	 * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.
	 *
	 * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`
	 *
	 * **Initial value**: `clip`
	 */
	msTextOverflow?: TextOverflowProperty;
	/**
	 * The **`touch-action`** CSS property sets how a region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).
	 *
	 * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`
	 *
	 * **Initial value**: `auto`
	 */
	msTouchAction?: TouchActionProperty;
	/**
	 * The **`-ms-touch-select`** CSS property is a Microsoft extension that toggles the gripper visual elements that enable touch text selection.
	 *
	 * **Syntax**: `grippers | none`
	 *
	 * **Initial value**: `grippers`
	 */
	msTouchSelect?: MsTouchSelectProperty;
	/**
	 * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.
	 *
	 * **Syntax**: `none | <transform-list>`
	 *
	 * **Initial value**: `none`
	 */
	msTransform?: TransformProperty;
	/**
	 * The **`transform-origin`** CSS property sets the origin for an element's transformations.
	 *
	 * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`
	 *
	 * **Initial value**: `50% 50% 0`
	 */
	msTransformOrigin?: TransformOriginProperty<TLength>;
	/**
	 * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 */
	msTransitionDelay?: GlobalsString;
	/**
	 * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 */
	msTransitionDuration?: GlobalsString;
	/**
	 * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.
	 *
	 * **Syntax**: `none | <single-transition-property>#`
	 *
	 * **Initial value**: all
	 */
	msTransitionProperty?: TransitionPropertyProperty;
	/**
	 * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.
	 *
	 * **Syntax**: `<timing-function>#`
	 *
	 * **Initial value**: `ease`
	 */
	msTransitionTimingFunction?: TransitionTimingFunctionProperty;
	/**
	 * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.
	 *
	 * **Syntax**: `none | element | text`
	 *
	 * **Initial value**: `text`
	 */
	msUserSelect?: MsUserSelectProperty;
	/**
	 * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.
	 *
	 * **Syntax**: `normal | break-all | keep-all | break-word`
	 *
	 * **Initial value**: `normal`
	 */
	msWordBreak?: WordBreakProperty;
	/**
	 * The **`-ms-wrap-flow`** CSS property is a Microsoft extension that specifies how exclusions impact inline content within block-level elements.
	 *
	 * **Syntax**: `auto | both | start | end | maximum | clear`
	 *
	 * **Initial value**: `auto`
	 */
	msWrapFlow?: MsWrapFlowProperty;
	/**
	 * The **`-ms-wrap-margin`** CSS property is a Microsoft extension that specifies a margin that offsets the inner wrap shape from other shapes.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 */
	msWrapMargin?: MsWrapMarginProperty<TLength>;
	/**
	 * The **`-ms-wrap-through`** CSS property is a Microsoft extension that specifies how content should wrap around an exclusion element.
	 *
	 * **Syntax**: `wrap | none`
	 *
	 * **Initial value**: `wrap`
	 */
	msWrapThrough?: MsWrapThroughProperty;
	/**
	 * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress.
	 *
	 * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`
	 *
	 * **Initial value**: `horizontal-tb`
	 */
	msWritingMode?: WritingModeProperty;
	/**
	 * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.
	 *
	 * **Syntax**: `fill | contain | cover | none | scale-down`
	 *
	 * **Initial value**: `fill`
	 */
	OObjectFit?: ObjectFitProperty;
	/**
	 * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.
	 *
	 * **Syntax**: `<position>`
	 *
	 * **Initial value**: `50% 50%`
	 */
	OObjectPosition?: ObjectPositionProperty<TLength>;
	/**
	 * The **`tab-size`** CSS property is used to customize the width of a tab (`U+0009`) character.
	 *
	 * **Syntax**: `<integer> | <length>`
	 *
	 * **Initial value**: `8`
	 */
	OTabSize?: TabSizeProperty<TLength>;
	/**
	 * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.
	 *
	 * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`
	 *
	 * **Initial value**: `clip`
	 */
	OTextOverflow?: TextOverflowProperty;
	/**
	 * The **`transform-origin`** CSS property sets the origin for an element's transformations.
	 *
	 * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`
	 *
	 * **Initial value**: `50% 50% 0`
	 */
	OTransformOrigin?: TransformOriginProperty<TLength>;
	/**
	 * The CSS **`align-content`** property sets how the browser distributes space between and around content items along the cross-axis of a flexbox container, and the main-axis of a grid container.
	 *
	 * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`
	 *
	 * **Initial value**: `normal`
	 */
	WebkitAlignContent?: AlignContentProperty;
	/**
	 * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. The align-self property sets the alignment of an item within its containing block. In Flexbox it controls the alignment of items on the Cross Axis, in Grid Layout it controls the alignment of items on the Block Axis within their grid area.
	 *
	 * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`
	 *
	 * **Initial value**: `normal`
	 */
	WebkitAlignItems?: AlignItemsProperty;
	/**
	 * The **`align-self`** CSS property aligns flex items of the current flex line overriding the `align-items` value. If any of the item's cross-axis margin is set to `auto`, then `align-self` is ignored. In Grid layout `align-self` aligns the item inside the grid area.
	 *
	 * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`
	 *
	 * **Initial value**: `auto`
	 */
	WebkitAlignSelf?: AlignSelfProperty;
	/**
	 * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 */
	WebkitAnimationDelay?: GlobalsString;
	/**
	 * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.
	 *
	 * **Syntax**: `<single-animation-direction>#`
	 *
	 * **Initial value**: `normal`
	 */
	WebkitAnimationDirection?: AnimationDirectionProperty;
	/**
	 * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 */
	WebkitAnimationDuration?: GlobalsString;
	/**
	 * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.
	 *
	 * **Syntax**: `<single-animation-fill-mode>#`
	 *
	 * **Initial value**: `none`
	 */
	WebkitAnimationFillMode?: AnimationFillModeProperty;
	/**
	 * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.
	 *
	 * **Syntax**: `<single-animation-iteration-count>#`
	 *
	 * **Initial value**: `1`
	 */
	WebkitAnimationIterationCount?: AnimationIterationCountProperty;
	/**
	 * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.
	 *
	 * **Syntax**: `[ none | <keyframes-name> ]#`
	 *
	 * **Initial value**: `none`
	 */
	WebkitAnimationName?: AnimationNameProperty;
	/**
	 * The **`animation-play-state`** CSS property sets whether an animation is running or paused.
	 *
	 * **Syntax**: `<single-animation-play-state>#`
	 *
	 * **Initial value**: `running`
	 */
	WebkitAnimationPlayState?: AnimationPlayStateProperty;
	/**
	 * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.
	 *
	 * **Syntax**: `<timing-function>#`
	 *
	 * **Initial value**: `ease`
	 */
	WebkitAnimationTimingFunction?: AnimationTimingFunctionProperty;
	/**
	 * The **`-moz-appearance`** CSS property is used in Gecko (Firefox) to display an element using platform-native styling based on the operating system's theme.
	 *
	 * **Syntax**: `none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield`
	 *
	 * **Initial value**: `none` (but this value is overridden in the user agent CSS)
	 */
	WebkitAppearance?: WebkitAppearanceProperty;
	/**
	 * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.
	 *
	 * **Syntax**: `none | <filter-function-list>`
	 *
	 * **Initial value**: `none`
	 */
	WebkitBackdropFilter?: BackdropFilterProperty;
	/**
	 * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.
	 *
	 * **Syntax**: `visible | hidden`
	 *
	 * **Initial value**: `visible`
	 */
	WebkitBackfaceVisibility?: BackfaceVisibilityProperty;
	/**
	 * The **`background-clip`** CSS property sets whether an element's background `<color>` or `<image>` extends underneath its border.
	 *
	 * **Syntax**: `<box>#`
	 *
	 * **Initial value**: `border-box`
	 */
	WebkitBackgroundClip?: BackgroundClipProperty;
	/**
	 * The **`background-origin`** CSS property sets the _background positioning area_. In other words, it sets the origin position of an image set with the `background-image` property.
	 *
	 * **Syntax**: `<box>#`
	 *
	 * **Initial value**: `padding-box`
	 */
	WebkitBackgroundOrigin?: BackgroundOriginProperty;
	/**
	 * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.
	 *
	 * **Syntax**: `<bg-size>#`
	 *
	 * **Initial value**: `auto auto`
	 */
	WebkitBackgroundSize?: BackgroundSizeProperty<TLength>;
	/**
	 * **Syntax**: `<'color'>`
	 *
	 * **Initial value**: `currentcolor`
	 */
	WebkitBorderBeforeColor?: WebkitBorderBeforeColorProperty;
	/**
	 * **Syntax**: `<'border-style'>`
	 *
	 * **Initial value**: `none`
	 */
	WebkitBorderBeforeStyle?: WebkitBorderBeforeStyleProperty;
	/**
	 * **Syntax**: `<'border-width'>`
	 *
	 * **Initial value**: `medium`
	 */
	WebkitBorderBeforeWidth?: WebkitBorderBeforeWidthProperty<TLength>;
	/**
	 * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element.
	 *
	 * **Syntax**: `<length-percentage>{1,2}`
	 *
	 * **Initial value**: `0`
	 */
	WebkitBorderBottomLeftRadius?: BorderBottomLeftRadiusProperty<TLength>;
	/**
	 * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element.
	 *
	 * **Syntax**: `<length-percentage>{1,2}`
	 *
	 * **Initial value**: `0`
	 */
	WebkitBorderBottomRightRadius?: BorderBottomRightRadiusProperty<TLength>;
	/**
	 * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.
	 *
	 * **Syntax**: `<number-percentage>{1,4} && fill?`
	 *
	 * **Initial value**: `100%`
	 */
	WebkitBorderImageSlice?: BorderImageSliceProperty;
	/**
	 * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element.
	 *
	 * **Syntax**: `<length-percentage>{1,2}`
	 *
	 * **Initial value**: `0`
	 */
	WebkitBorderTopLeftRadius?: BorderTopLeftRadiusProperty<TLength>;
	/**
	 * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element.
	 *
	 * **Syntax**: `<length-percentage>{1,2}`
	 *
	 * **Initial value**: `0`
	 */
	WebkitBorderTopRightRadius?: BorderTopRightRadiusProperty<TLength>;
	/**
	 * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.
	 *
	 * **Syntax**: `slice | clone`
	 *
	 * **Initial value**: `slice`
	 */
	WebkitBoxDecorationBreak?: BoxDecorationBreakProperty;
	/**
	 * The **`-webkit-box-reflect`** CSS property lets you reflect the content of an element in one specific direction.
	 *
	 * **Syntax**: `[ above | below | right | left ]? <length>? <image>?`
	 *
	 * **Initial value**: `none`
	 */
	WebkitBoxReflect?: WebkitBoxReflectProperty<TLength>;
	/**
	 * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color.
	 *
	 * **Syntax**: `none | <shadow>#`
	 *
	 * **Initial value**: `none`
	 */
	WebkitBoxShadow?: BoxShadowProperty;
	/**
	 * The **`box-sizing`** CSS property defines how the user agent should calculate the total width and height of an element.
	 *
	 * **Syntax**: `content-box | border-box`
	 *
	 * **Initial value**: `content-box`
	 */
	WebkitBoxSizing?: BoxSizingProperty;
	/**
	 * The `**clip-path**` CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.
	 *
	 * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`
	 *
	 * **Initial value**: `none`
	 */
	WebkitClipPath?: ClipPathProperty;
	/**
	 * The **`color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.
	 *
	 * **Syntax**: `economy | exact`
	 *
	 * **Initial value**: `economy`
	 */
	WebkitColorAdjust?: ColorAdjustProperty;
	/**
	 * The **`column-count`** CSS property breaks an element's content into the specified number of columns.
	 *
	 * **Syntax**: `<integer> | auto`
	 *
	 * **Initial value**: `auto`
	 */
	WebkitColumnCount?: ColumnCountProperty;
	/**
	 * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.
	 *
	 * **Syntax**: `auto | balance | balance-all`
	 *
	 * **Initial value**: `balance`
	 */
	WebkitColumnFill?: ColumnFillProperty;
	/**
	 * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.
	 *
	 * **Syntax**: `normal | <length-percentage>`
	 *
	 * **Initial value**: `normal`
	 */
	WebkitColumnGap?: ColumnGapProperty<TLength>;
	/**
	 * The **`column-rule-color`** CSS property sets the color of the rule (line) drawn between columns in a multi-column layout.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `currentcolor`
	 */
	WebkitColumnRuleColor?: ColumnRuleColorProperty;
	/**
	 * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.
	 *
	 * **Syntax**: `<'border-style'>`
	 *
	 * **Initial value**: `none`
	 */
	WebkitColumnRuleStyle?: ColumnRuleStyleProperty;
	/**
	 * The **`column-rule-width`** CSS property sets the width of the rule (line) drawn between columns in a multi-column layout.
	 *
	 * **Syntax**: `<'border-width'>`
	 *
	 * **Initial value**: `medium`
	 */
	WebkitColumnRuleWidth?: ColumnRuleWidthProperty<TLength>;
	/**
	 * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.
	 *
	 * **Syntax**: `none | all`
	 *
	 * **Initial value**: `none`
	 */
	WebkitColumnSpan?: ColumnSpanProperty;
	/**
	 * The **`column-width`** CSS property specifies the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.
	 *
	 * **Syntax**: `<length> | auto`
	 *
	 * **Initial value**: `auto`
	 */
	WebkitColumnWidth?: ColumnWidthProperty<TLength>;
	/**
	 * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.
	 *
	 * **Syntax**: `none | <filter-function-list>`
	 *
	 * **Initial value**: `none`
	 */
	WebkitFilter?: FilterProperty;
	/**
	 * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.
	 *
	 * **Syntax**: `content | <'width'>`
	 *
	 * **Initial value**: `auto`
	 */
	WebkitFlexBasis?: FlexBasisProperty<TLength>;
	/**
	 * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).
	 *
	 * **Syntax**: `row | row-reverse | column | column-reverse`
	 *
	 * **Initial value**: `row`
	 */
	WebkitFlexDirection?: FlexDirectionProperty;
	/**
	 * The **`flex-grow`** CSS property sets how much of the available space in the flex container should be assigned to that item (the flex grow factor). If all sibling items have the same flex grow factor, then all items will receive the same share of available space, otherwise it is distributed according to the ratio defined by the different flex grow factors.
	 *
	 * **Syntax**: `<number>`
	 *
	 * **Initial value**: `0`
	 */
	WebkitFlexGrow?: GlobalsNumber;
	/**
	 * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.
	 *
	 * **Syntax**: `<number>`
	 *
	 * **Initial value**: `1`
	 */
	WebkitFlexShrink?: GlobalsNumber;
	/**
	 * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.
	 *
	 * **Syntax**: `nowrap | wrap | wrap-reverse`
	 *
	 * **Initial value**: `nowrap`
	 */
	WebkitFlexWrap?: FlexWrapProperty;
	/**
	 * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.
	 *
	 * **Syntax**: `normal | <feature-tag-value>#`
	 *
	 * **Initial value**: `normal`
	 */
	WebkitFontFeatureSettings?: FontFeatureSettingsProperty;
	/**
	 * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.
	 *
	 * **Syntax**: `auto | normal | none`
	 *
	 * **Initial value**: `auto`
	 */
	WebkitFontKerning?: FontKerningProperty;
	/**
	 * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.
	 *
	 * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`
	 *
	 * **Initial value**: `normal`
	 */
	WebkitFontVariantLigatures?: FontVariantLigaturesProperty;
	/**
	 * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.
	 *
	 * **Syntax**: `none | manual | auto`
	 *
	 * **Initial value**: `manual`
	 */
	WebkitHyphens?: HyphensProperty;
	/**
	 * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.
	 *
	 * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`
	 *
	 * **Initial value**: `normal`
	 */
	WebkitJustifyContent?: JustifyContentProperty;
	/**
	 * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.
	 *
	 * **Syntax**: `auto | loose | normal | strict | anywhere`
	 *
	 * **Initial value**: `auto`
	 */
	WebkitLineBreak?: LineBreakProperty;
	/**
	 * The **`-webkit-line-clamp`** CSS property allows limiting of the contents of a block container to the specified number of lines.
	 *
	 * **Syntax**: `none | <integer>`
	 *
	 * **Initial value**: `none`
	 */
	WebkitLineClamp?: WebkitLineClampProperty;
	/**
	 * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'margin-left'>`
	 *
	 * **Initial value**: `0`
	 */
	WebkitMarginEnd?: MarginInlineEndProperty<TLength>;
	/**
	 * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'margin-left'>`
	 *
	 * **Initial value**: `0`
	 */
	WebkitMarginStart?: MarginInlineStartProperty<TLength>;
	/**
	 * If a `-webkit-mask-image` is specified, `-webkit-mask-attachment` determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block.
	 *
	 * **Syntax**: `<attachment>#`
	 *
	 * **Initial value**: `scroll`
	 */
	WebkitMaskAttachment?: WebkitMaskAttachmentProperty;
	/**
	 * The **`mask-clip`** CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area.
	 *
	 * **Syntax**: `[ <box> | border | padding | content | text ]#`
	 *
	 * **Initial value**: `border`
	 */
	WebkitMaskClip?: WebkitMaskClipProperty;
	/**
	 * The **`-webkit-mask-composite`** property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the `-webkit-mask-image` property.
	 *
	 * **Syntax**: `<composite-style>#`
	 *
	 * **Initial value**: `source-over`
	 */
	WebkitMaskComposite?: WebkitMaskCompositeProperty;
	/**
	 * The **`mask-image`** CSS property sets the image that is used as mask layer for an element.
	 *
	 * **Syntax**: `<mask-reference>#`
	 *
	 * **Initial value**: `none`
	 */
	WebkitMaskImage?: WebkitMaskImageProperty;
	/**
	 * The **`mask-origin`** CSS property sets the origin of a mask.
	 *
	 * **Syntax**: `[ <box> | border | padding | content ]#`
	 *
	 * **Initial value**: `padding`
	 */
	WebkitMaskOrigin?: WebkitMaskOriginProperty;
	/**
	 * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.
	 *
	 * **Syntax**: `<position>#`
	 *
	 * **Initial value**: `0% 0%`
	 */
	WebkitMaskPosition?: WebkitMaskPositionProperty<TLength>;
	/**
	 * The `-webkit-mask-position-x` CSS property sets the initial horizontal position of a mask image.
	 *
	 * **Syntax**: `[ <length-percentage> | left | center | right ]#`
	 *
	 * **Initial value**: `0%`
	 */
	WebkitMaskPositionX?: WebkitMaskPositionXProperty<TLength>;
	/**
	 * The `-webkit-mask-position-y` CSS property sets the initial vertical position of a mask image.
	 *
	 * **Syntax**: `[ <length-percentage> | top | center | bottom ]#`
	 *
	 * **Initial value**: `0%`
	 */
	WebkitMaskPositionY?: WebkitMaskPositionYProperty<TLength>;
	/**
	 * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.
	 *
	 * **Syntax**: `<repeat-style>#`
	 *
	 * **Initial value**: `repeat`
	 */
	WebkitMaskRepeat?: WebkitMaskRepeatProperty;
	/**
	 * The `-webkit-mask-repeat-x` property specifies whether and how a mask image is repeated (tiled) horizontally.
	 *
	 * **Syntax**: `repeat | no-repeat | space | round`
	 *
	 * **Initial value**: `repeat`
	 */
	WebkitMaskRepeatX?: WebkitMaskRepeatXProperty;
	/**
	 * The `-webkit-mask-repeat-y` property sets whether and how a mask image is repeated (tiled) vertically.
	 *
	 * **Syntax**: `repeat | no-repeat | space | round`
	 *
	 * **Initial value**: `repeat`
	 */
	WebkitMaskRepeatY?: WebkitMaskRepeatYProperty;
	/**
	 * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.
	 *
	 * **Syntax**: `<bg-size>#`
	 *
	 * **Initial value**: `auto auto`
	 */
	WebkitMaskSize?: WebkitMaskSizeProperty<TLength>;
	/**
	 * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block depending on its writing mode. It corresponds to the `max-width` or the `max-height` property depending on the value defined for `writing-mode`. If the writing mode is vertically oriented, the value of `max-inline-size` relates to the maximal height of the element, otherwise it relates to the maximal width of the element. It relates to `max-block-size`, which defines the other dimension of the element.
	 *
	 * **Syntax**: `<'max-width'>`
	 *
	 * **Initial value**: `0`
	 */
	WebkitMaxInlineSize?: MaxInlineSizeProperty<TLength>;
	/**
	 * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.
	 *
	 * **Syntax**: `<integer>`
	 *
	 * **Initial value**: `0`
	 */
	WebkitOrder?: GlobalsNumber;
	/**
	 * The `-webkit-overflow-scrolling` CSS property controls whether or not touch devices use momentum-based scrolling for a given element.
	 *
	 * **Syntax**: `auto | touch`
	 *
	 * **Initial value**: `auto`
	 */
	WebkitOverflowScrolling?: WebkitOverflowScrollingProperty;
	/**
	 * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'padding-left'>`
	 *
	 * **Initial value**: `0`
	 */
	WebkitPaddingEnd?: PaddingInlineEndProperty<TLength>;
	/**
	 * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the `padding-top`, `padding-right`, `padding-bottom`, or `padding-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'padding-left'>`
	 *
	 * **Initial value**: `0`
	 */
	WebkitPaddingStart?: PaddingInlineStartProperty<TLength>;
	/**
	 * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with z>0 becomes larger; each 3D-element with z<0 becomes smaller. The strength of the effect is determined by the value of this property.
	 *
	 * **Syntax**: `none | <length>`
	 *
	 * **Initial value**: `none`
	 */
	WebkitPerspective?: PerspectiveProperty<TLength>;
	/**
	 * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.
	 *
	 * **Syntax**: `<position>`
	 *
	 * **Initial value**: `50% 50%`
	 */
	WebkitPerspectiveOrigin?: PerspectiveOriginProperty<TLength>;
	/**
	 * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.
	 *
	 * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`
	 *
	 * **Initial value**: `none`
	 */
	WebkitScrollSnapType?: ScrollSnapTypeProperty;
	/**
	 * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.
	 *
	 * **Syntax**: `<length-percentage>`
	 *
	 * **Initial value**: `0`
	 */
	WebkitShapeMargin?: ShapeMarginProperty<TLength>;
	/**
	 * **`-webkit-tap-highlight-color`** is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped. The highlighting indicates to the user that their tap is being successfully recognized, and indicates which element they're tapping on.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `black`
	 */
	WebkitTapHighlightColor?: WebkitTapHighlightColorProperty;
	/**
	 * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.
	 *
	 * **Syntax**: `none | all | [ digits <integer>? ]`
	 *
	 * **Initial value**: `none`
	 */
	WebkitTextCombine?: TextCombineUprightProperty;
	/**
	 * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `currentcolor`
	 */
	WebkitTextDecorationColor?: TextDecorationColorProperty;
	/**
	 * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.
	 *
	 * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`
	 *
	 * **Initial value**: `none`
	 */
	WebkitTextDecorationLine?: TextDecorationLineProperty;
	/**
	 * The **`text-decoration-skip`** CSS property sets what parts of an element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.
	 *
	 * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`
	 *
	 * **Initial value**: `objects`
	 */
	WebkitTextDecorationSkip?: TextDecorationSkipProperty;
	/**
	 * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.
	 *
	 * **Syntax**: `solid | double | dotted | dashed | wavy`
	 *
	 * **Initial value**: `solid`
	 */
	WebkitTextDecorationStyle?: TextDecorationStyleProperty;
	/**
	 * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `currentcolor`
	 */
	WebkitTextEmphasisColor?: TextEmphasisColorProperty;
	/**
	 * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.
	 *
	 * **Syntax**: `[ over | under ] && [ right | left ]`
	 *
	 * **Initial value**: `over right`
	 */
	WebkitTextEmphasisPosition?: GlobalsString;
	/**
	 * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.
	 *
	 * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`
	 *
	 * **Initial value**: `none`
	 */
	WebkitTextEmphasisStyle?: TextEmphasisStyleProperty;
	/**
	 * The **`-webkit-text-fill-color`** CSS property specifies the fill color of characters of text. If this property is not set, the value of the `color` property is used.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `currentcolor`
	 */
	WebkitTextFillColor?: WebkitTextFillColorProperty;
	/**
	 * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.
	 *
	 * **Syntax**: `mixed | upright | sideways`
	 *
	 * **Initial value**: `mixed`
	 */
	WebkitTextOrientation?: TextOrientationProperty;
	/**
	 * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.
	 *
	 * **Syntax**: `none | auto | <percentage>`
	 *
	 * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).
	 */
	WebkitTextSizeAdjust?: TextSizeAdjustProperty;
	/**
	 * The **`-webkit-text-stroke-color`** CSS property specifies the stroke color of characters of text. If this property is not set, the value of the `color` property is used.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `currentcolor`
	 */
	WebkitTextStrokeColor?: WebkitTextStrokeColorProperty;
	/**
	 * The **`-webkit-text-stroke-width`** CSS property specifies the width of the stroke for text.
	 *
	 * **Syntax**: `<length>`
	 *
	 * **Initial value**: `0`
	 */
	WebkitTextStrokeWidth?: WebkitTextStrokeWidthProperty<TLength>;
	/**
	 * The `-webkit-touch-callout` CSS property controls the display of the default callout shown when you touch and hold a touch target.
	 *
	 * **Syntax**: `default | none`
	 *
	 * **Initial value**: `default`
	 */
	WebkitTouchCallout?: WebkitTouchCalloutProperty;
	/**
	 * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.
	 *
	 * **Syntax**: `none | <transform-list>`
	 *
	 * **Initial value**: `none`
	 */
	WebkitTransform?: TransformProperty;
	/**
	 * The **`transform-origin`** CSS property sets the origin for an element's transformations.
	 *
	 * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`
	 *
	 * **Initial value**: `50% 50% 0`
	 */
	WebkitTransformOrigin?: TransformOriginProperty<TLength>;
	/**
	 * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.
	 *
	 * **Syntax**: `flat | preserve-3d`
	 *
	 * **Initial value**: `flat`
	 */
	WebkitTransformStyle?: TransformStyleProperty;
	/**
	 * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 */
	WebkitTransitionDelay?: GlobalsString;
	/**
	 * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 */
	WebkitTransitionDuration?: GlobalsString;
	/**
	 * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.
	 *
	 * **Syntax**: `none | <single-transition-property>#`
	 *
	 * **Initial value**: all
	 */
	WebkitTransitionProperty?: TransitionPropertyProperty;
	/**
	 * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.
	 *
	 * **Syntax**: `<timing-function>#`
	 *
	 * **Initial value**: `ease`
	 */
	WebkitTransitionTimingFunction?: TransitionTimingFunctionProperty;
	/**
	 * **Syntax**: `read-only | read-write | read-write-plaintext-only`
	 *
	 * **Initial value**: `read-only`
	 */
	WebkitUserModify?: WebkitUserModifyProperty;
	/**
	 * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.
	 *
	 * **Syntax**: `auto | text | none | contain | all`
	 *
	 * **Initial value**: `auto`
	 */
	WebkitUserSelect?: UserSelectProperty;
	/**
	 * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress.
	 *
	 * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`
	 *
	 * **Initial value**: `horizontal-tb`
	 */
	WebkitWritingMode?: WritingModeProperty;
	/**
	 * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.
	 *
	 * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`
	 *
	 * **Initial value**: `auto`
	 */
	WebkittextUnderlinePosition?: TextUnderlinePositionProperty;
}
export interface VendorShorthandProperties<TLength = string | 0> {
	/**
	 * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.
	 *
	 * **Syntax**: `<single-animation>#`
	 */
	MozAnimation?: AnimationProperty;
	/**
	 * The **`border-image`** CSS property draws an image in place of an element's `border-style`.
	 *
	 * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`
	 */
	MozBorderImage?: BorderImageProperty;
	/**
	 * The **`column-rule`** CSS property sets the width, style, and color of the rule (line) drawn between columns in a multi-column layout.
	 *
	 * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`
	 */
	MozColumnRule?: ColumnRuleProperty<TLength>;
	/**
	 * The **`columns`** CSS property sets the column width and column count of an element.
	 *
	 * **Syntax**: `<'column-width'> || <'column-count'>`
	 */
	MozColumns?: ColumnsProperty<TLength>;
	/**
	 * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.
	 *
	 * **Syntax**: `<single-transition>#`
	 */
	MozTransition?: TransitionProperty;
	/**
	 * The **`-ms-content-zoom-limit`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-limit-min` and `-ms-content-zoom-limit-max` properties.
	 *
	 * **Syntax**: `<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>`
	 */
	msContentZoomLimit?: GlobalsString;
	/**
	 * The **`-ms-content-zoom-snap`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-snap-type` and `-ms-content-zoom-snap-points` properties.
	 *
	 * **Syntax**: `<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>`
	 */
	msContentZoomSnap?: MsContentZoomSnapProperty;
	/**
	 * The **`flex`** CSS property sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.
	 *
	 * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`
	 */
	msFlex?: FlexProperty<TLength>;
	/**
	 * The **\-ms-scroll-limit** CSS property is a Microsoft extension that specifies values for the `-ms-scroll-limit-x-min`, `-ms-scroll-limit-y-min`, `-ms-scroll-limit-x-max`, and `-ms-scroll-limit-y-max` properties.
	 *
	 * **Syntax**: `<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>`
	 */
	msScrollLimit?: GlobalsString;
	/**
	 * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-x` properties.
	 *
	 * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>`
	 */
	msScrollSnapX?: GlobalsString;
	/**
	 * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-y` properties.
	 *
	 * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>`
	 */
	msScrollSnapY?: GlobalsString;
	/**
	 * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.
	 *
	 * **Syntax**: `<single-transition>#`
	 */
	msTransition?: TransitionProperty;
	/**
	 * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.
	 *
	 * **Syntax**: `<single-animation>#`
	 */
	WebkitAnimation?: AnimationProperty;
	/**
	 * The **`-webkit-border-before`** CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet.
	 *
	 * **Syntax**: `<'border-width'> || <'border-style'> || <'color'>`
	 */
	WebkitBorderBefore?: WebkitBorderBeforeProperty<TLength>;
	/**
	 * The **`border-image`** CSS property draws an image in place of an element's `border-style`.
	 *
	 * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`
	 */
	WebkitBorderImage?: BorderImageProperty;
	/**
	 * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.
	 *
	 * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`
	 */
	WebkitBorderRadius?: BorderRadiusProperty<TLength>;
	/**
	 * The **`column-rule`** CSS property sets the width, style, and color of the rule (line) drawn between columns in a multi-column layout.
	 *
	 * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`
	 */
	WebkitColumnRule?: ColumnRuleProperty<TLength>;
	/**
	 * The **`columns`** CSS property sets the column width and column count of an element.
	 *
	 * **Syntax**: `<'column-width'> || <'column-count'>`
	 */
	WebkitColumns?: ColumnsProperty<TLength>;
	/**
	 * The **`flex`** CSS property sets how a flex item will grow or shrink to fit the space available in its flex container. It is a shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.
	 *
	 * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`
	 */
	WebkitFlex?: FlexProperty<TLength>;
	/**
	 * The **`flex-flow`** CSS property is a shorthand property for `flex-direction` and `flex-wrap` properties.
	 *
	 * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`
	 */
	WebkitFlexFlow?: FlexFlowProperty;
	/**
	 * The **`mask`** CSS property hides an element (partially or fully) by masking or clipping the image at specific points.
	 *
	 * **Syntax**: `[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#`
	 */
	WebkitMask?: WebkitMaskProperty<TLength>;
	/**
	 * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.
	 *
	 * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`
	 */
	WebkitTextEmphasis?: TextEmphasisProperty;
	/**
	 * The **`-webkit-text-stroke`** CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties `-webkit-text-stroke-width` and `-webkit-text-stroke-color`.
	 *
	 * **Syntax**: `<length> || <color>`
	 */
	WebkitTextStroke?: WebkitTextStrokeProperty<TLength>;
	/**
	 * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.
	 *
	 * **Syntax**: `<single-transition>#`
	 */
	WebkitTransition?: TransitionProperty;
}
export interface VendorProperties<TLength = string | 0> extends VendorLonghandProperties<TLength>, VendorShorthandProperties<TLength> {
}
export interface ObsoleteProperties<TLength = string | 0> {
	/**
	 * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.
	 *
	 * **Syntax**: `start | center | end | baseline | stretch`
	 *
	 * **Initial value**: `stretch`
	 *
	 * @deprecated
	 */
	boxAlign?: BoxAlignProperty;
	/**
	 * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).
	 *
	 * **Syntax**: `normal | reverse | inherit`
	 *
	 * **Initial value**: `normal`
	 *
	 * @deprecated
	 */
	boxDirection?: BoxDirectionProperty;
	/**
	 * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.
	 *
	 * **Syntax**: `<number>`
	 *
	 * **Initial value**: `0`
	 *
	 * @deprecated
	 */
	boxFlex?: GlobalsNumber;
	/**
	 * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.
	 *
	 * **Syntax**: `<integer>`
	 *
	 * **Initial value**: `1`
	 *
	 * @deprecated
	 */
	boxFlexGroup?: GlobalsNumber;
	/**
	 * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).
	 *
	 * **Syntax**: `single | multiple`
	 *
	 * **Initial value**: `single`
	 *
	 * @deprecated
	 */
	boxLines?: BoxLinesProperty;
	/**
	 * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.
	 *
	 * **Syntax**: `<integer>`
	 *
	 * **Initial value**: `1`
	 *
	 * @deprecated
	 */
	boxOrdinalGroup?: GlobalsNumber;
	/**
	 * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.
	 *
	 * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`
	 *
	 * **Initial value**: `inline-axis` (`horizontal` in XUL)
	 *
	 * @deprecated
	 */
	boxOrient?: BoxOrientProperty;
	/**
	 * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.
	 *
	 * **Syntax**: `start | center | end | justify`
	 *
	 * **Initial value**: `start`
	 *
	 * @deprecated
	 */
	boxPack?: BoxPackProperty;
	/**
	 * The **`clip`** CSS property defines what portion of an element is visible. The `clip` property applies only to absolutely positioned elements, that is elements with `position:absolute` or `position:fixed`.
	 *
	 * **Syntax**: `<shape> | auto`
	 *
	 * **Initial value**: `auto`
	 *
	 * @deprecated
	 */
	clip?: ClipProperty;
	/**
	 * The **`font-variant-alternates`** CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in `@font-feature-values`.
	 *
	 * **Syntax**: `normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]`
	 *
	 * **Initial value**: `normal`
	 *
	 * @deprecated
	 */
	fontVariantAlternates?: FontVariantAlternatesProperty;
	/**
	 * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.
	 *
	 * **Syntax**: `<length-percentage>`
	 *
	 * **Initial value**: `0`
	 *
	 * @deprecated
	 */
	gridColumnGap?: GridColumnGapProperty<TLength>;
	/**
	 * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.
	 *
	 * **Syntax**: `<'grid-row-gap'> <'grid-column-gap'>?`
	 *
	 * @deprecated
	 */
	gridGap?: GridGapProperty<TLength>;
	/**
	 * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's grid rows.
	 *
	 * **Syntax**: `<length-percentage>`
	 *
	 * **Initial value**: `0`
	 *
	 * @deprecated
	 */
	gridRowGap?: GridRowGapProperty<TLength>;
	/**
	 * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.
	 *
	 * **Syntax**: `auto | normal | active | inactive | disabled`
	 *
	 * **Initial value**: `auto`
	 *
	 * @deprecated
	 */
	imeMode?: ImeModeProperty;
	/**
	 * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'top'>{1,2}`
	 *
	 * **Initial value**: `auto`
	 *
	 * @deprecated
	 */
	offsetBlock?: InsetBlockProperty<TLength>;
	/**
	 * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'top'>`
	 *
	 * **Initial value**: `auto`
	 *
	 * @deprecated
	 */
	offsetBlockEnd?: InsetBlockEndProperty<TLength>;
	/**
	 * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'top'>`
	 *
	 * **Initial value**: `auto`
	 *
	 * @deprecated
	 */
	offsetBlockStart?: InsetBlockStartProperty<TLength>;
	/**
	 * The **`inset-inline`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'top'>{1,2}`
	 *
	 * **Initial value**: `auto`
	 *
	 * @deprecated
	 */
	offsetInline?: InsetInlineProperty<TLength>;
	/**
	 * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'top'>`
	 *
	 * **Initial value**: `auto`
	 *
	 * @deprecated
	 */
	offsetInlineEnd?: InsetInlineEndProperty<TLength>;
	/**
	 * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
	 *
	 * **Syntax**: `<'top'>`
	 *
	 * **Initial value**: `auto`
	 *
	 * @deprecated
	 */
	offsetInlineStart?: InsetInlineStartProperty<TLength>;
	/**
	 * The **`scroll-snap-coordinate`** CSS property defines the x and y coordinate positions within an element that will align with its nearest ancestor scroll container's `scroll-snap-destination` for each respective axis.
	 *
	 * **Syntax**: `none | <position>#`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	scrollSnapCoordinate?: ScrollSnapCoordinateProperty<TLength>;
	/**
	 * The **`scroll-snap-destination`** CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with.
	 *
	 * **Syntax**: `<position>`
	 *
	 * **Initial value**: `0px 0px`
	 *
	 * @deprecated
	 */
	scrollSnapDestination?: ScrollSnapDestinationProperty<TLength>;
	/**
	 * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.
	 *
	 * **Syntax**: `none | repeat( <length-percentage> )`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	scrollSnapPointsX?: ScrollSnapPointsXProperty;
	/**
	 * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.
	 *
	 * **Syntax**: `none | repeat( <length-percentage> )`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	scrollSnapPointsY?: ScrollSnapPointsYProperty;
	/**
	 * The **`scroll-snap-type-x`** CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.
	 *
	 * **Syntax**: `none | mandatory | proximity`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	scrollSnapTypeX?: ScrollSnapTypeXProperty;
	/**
	 * The **`scroll-snap-type-y`** CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.
	 *
	 * **Syntax**: `none | mandatory | proximity`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	scrollSnapTypeY?: ScrollSnapTypeYProperty;
	/**
	 * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `Scrollbar`
	 *
	 * @deprecated
	 */
	scrollbarTrackColor?: MsScrollbarTrackColorProperty;
	/**
	 * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.
	 *
	 * **Syntax**: `none | all | [ digits <integer>? ]`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	textCombineHorizontal?: TextCombineUprightProperty;
	/**
	 * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.
	 *
	 * **Syntax**: `start | center | end | baseline | stretch`
	 *
	 * **Initial value**: `stretch`
	 *
	 * @deprecated
	 */
	KhtmlBoxAlign?: BoxAlignProperty;
	/**
	 * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).
	 *
	 * **Syntax**: `normal | reverse | inherit`
	 *
	 * **Initial value**: `normal`
	 *
	 * @deprecated
	 */
	KhtmlBoxDirection?: BoxDirectionProperty;
	/**
	 * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.
	 *
	 * **Syntax**: `<number>`
	 *
	 * **Initial value**: `0`
	 *
	 * @deprecated
	 */
	KhtmlBoxFlex?: GlobalsNumber;
	/**
	 * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.
	 *
	 * **Syntax**: `<integer>`
	 *
	 * **Initial value**: `1`
	 *
	 * @deprecated
	 */
	KhtmlBoxFlexGroup?: GlobalsNumber;
	/**
	 * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).
	 *
	 * **Syntax**: `single | multiple`
	 *
	 * **Initial value**: `single`
	 *
	 * @deprecated
	 */
	KhtmlBoxLines?: BoxLinesProperty;
	/**
	 * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.
	 *
	 * **Syntax**: `<integer>`
	 *
	 * **Initial value**: `1`
	 *
	 * @deprecated
	 */
	KhtmlBoxOrdinalGroup?: GlobalsNumber;
	/**
	 * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.
	 *
	 * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`
	 *
	 * **Initial value**: `inline-axis` (`horizontal` in XUL)
	 *
	 * @deprecated
	 */
	KhtmlBoxOrient?: BoxOrientProperty;
	/**
	 * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.
	 *
	 * **Syntax**: `start | center | end | justify`
	 *
	 * **Initial value**: `start`
	 *
	 * @deprecated
	 */
	KhtmlBoxPack?: BoxPackProperty;
	/**
	 * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.
	 *
	 * **Syntax**: `auto | loose | normal | strict | anywhere`
	 *
	 * **Initial value**: `auto`
	 *
	 * @deprecated
	 */
	KhtmlLineBreak?: LineBreakProperty;
	/**
	 * The **`opacity`** CSS property sets the transparency of an element or the degree to which content behind an element is visible.
	 *
	 * **Syntax**: `<alpha-value>`
	 *
	 * **Initial value**: `1.0`
	 *
	 * @deprecated
	 */
	KhtmlOpacity?: OpacityProperty;
	/**
	 * The `**user-select**` CSS property controls whether the user can select text. This doesn't have any effect on content loaded as chrome, except in textboxes.
	 *
	 * **Syntax**: `auto | text | none | contain | all`
	 *
	 * **Initial value**: `auto`
	 *
	 * @deprecated
	 */
	KhtmlUserSelect?: UserSelectProperty;
	/**
	 * The **`background-clip`** CSS property sets whether an element's background `<color>` or `<image>` extends underneath its border.
	 *
	 * **Syntax**: `<box>#`
	 *
	 * **Initial value**: `border-box`
	 *
	 * @deprecated
	 */
	MozBackgroundClip?: BackgroundClipProperty;
	/**
	 * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.
	 *
	 * **Syntax**: `slice | clone`
	 *
	 * **Initial value**: `slice`
	 *
	 * @deprecated
	 */
	MozBackgroundInlinePolicy?: BoxDecorationBreakProperty;
	/**
	 * The **`background-origin`** CSS property sets the _background positioning area_. In other words, it sets the origin position of an image set with the `background-image` property.
	 *
	 * **Syntax**: `<box>#`
	 *
	 * **Initial value**: `padding-box`
	 *
	 * @deprecated
	 */
	MozBackgroundOrigin?: BackgroundOriginProperty;
	/**
	 * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.
	 *
	 * **Syntax**: `<bg-size>#`
	 *
	 * **Initial value**: `auto auto`
	 *
	 * @deprecated
	 */
	MozBackgroundSize?: BackgroundSizeProperty<TLength>;
	/**
	 * The **`-moz-binding`** CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.
	 *
	 * **Syntax**: `<url> | none`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	MozBinding?: MozBindingProperty;
	/**
	 * In Mozilla applications like Firefox, the **`-moz-border-bottom-colors`** CSS property sets a list of colors for the bottom border.
	 *
	 * **Syntax**: `<color>+ | none`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	MozBorderBottomColors?: MozBorderBottomColorsProperty;
	/**
	 * In Mozilla applications like Firefox, the **`-moz-border-left-colors`** CSS property sets a list of colors for the left border.
	 *
	 * **Syntax**: `<color>+ | none`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	MozBorderLeftColors?: MozBorderLeftColorsProperty;
	/**
	 * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.
	 *
	 * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`
	 *
	 * @deprecated
	 */
	MozBorderRadius?: BorderRadiusProperty<TLength>;
	/**
	 * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element.
	 *
	 * **Syntax**: `<length-percentage>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * @deprecated
	 */
	MozBorderRadiusBottomleft?: BorderBottomLeftRadiusProperty<TLength>;
	/**
	 * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element.
	 *
	 * **Syntax**: `<length-percentage>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * @deprecated
	 */
	MozBorderRadiusBottomright?: BorderBottomRightRadiusProperty<TLength>;
	/**
	 * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element.
	 *
	 * **Syntax**: `<length-percentage>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * @deprecated
	 */
	MozBorderRadiusTopleft?: BorderTopLeftRadiusProperty<TLength>;
	/**
	 * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element.
	 *
	 * **Syntax**: `<length-percentage>{1,2}`
	 *
	 * **Initial value**: `0`
	 *
	 * @deprecated
	 */
	MozBorderRadiusTopright?: BorderTopRightRadiusProperty<TLength>;
	/**
	 * In Mozilla applications like Firefox, the **`-moz-border-right-colors`** CSS property sets a list of colors for the right border.
	 *
	 * **Syntax**: `<color>+ | none`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	MozBorderRightColors?: MozBorderRightColorsProperty;
	/**
	 * In Mozilla applications like Firefox, the **`-moz-border-top-colors`** CSS property sets a list of colors for the top border.
	 *
	 * **Syntax**: `<color>+ | none`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	MozBorderTopColors?: MozBorderTopColorsProperty;
	/**
	 * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.
	 *
	 * **Syntax**: `start | center | end | baseline | stretch`
	 *
	 * **Initial value**: `stretch`
	 *
	 * @deprecated
	 */
	MozBoxAlign?: BoxAlignProperty;
	/**
	 * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).
	 *
	 * **Syntax**: `normal | reverse | inherit`
	 *
	 * **Initial value**: `normal`
	 *
	 * @deprecated
	 */
	MozBoxDirection?: BoxDirectionProperty;
	/**
	 * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.
	 *
	 * **Syntax**: `<number>`
	 *
	 * **Initial value**: `0`
	 *
	 * @deprecated
	 */
	MozBoxFlex?: GlobalsNumber;
	/**
	 * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.
	 *
	 * **Syntax**: `<integer>`
	 *
	 * **Initial value**: `1`
	 *
	 * @deprecated
	 */
	MozBoxOrdinalGroup?: GlobalsNumber;
	/**
	 * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.
	 *
	 * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`
	 *
	 * **Initial value**: `inline-axis` (`horizontal` in XUL)
	 *
	 * @deprecated
	 */
	MozBoxOrient?: BoxOrientProperty;
	/**
	 * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.
	 *
	 * **Syntax**: `start | center | end | justify`
	 *
	 * **Initial value**: `start`
	 *
	 * @deprecated
	 */
	MozBoxPack?: BoxPackProperty;
	/**
	 * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii, and color.
	 *
	 * **Syntax**: `none | <shadow>#`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	MozBoxShadow?: BoxShadowProperty;
	/**
	 * The **`opacity`** CSS property sets the transparency of an element or the degree to which content behind an element is visible.
	 *
	 * **Syntax**: `<alpha-value>`
	 *
	 * **Initial value**: `1.0`
	 *
	 * @deprecated
	 */
	MozOpacity?: OpacityProperty;
	/**
	 * The **`outline`** CSS property is a shorthand to set various outline properties in a single declaration: `outline-style`, `outline-width`, and `outline-color`.
	 *
	 * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`
	 *
	 * @deprecated
	 */
	MozOutline?: OutlineProperty<TLength>;
	/**
	 * The **`outline-color`** CSS property sets the color of an element's outline.
	 *
	 * **Syntax**: `<color> | invert`
	 *
	 * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other
	 *
	 * @deprecated
	 */
	MozOutlineColor?: OutlineColorProperty;
	/**
	 * In Mozilla applications like Firefox, the **`-moz-outline-radius`** CSS property can be used to give an element's `outline` rounded corners.
	 *
	 * **Syntax**: `<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?`
	 *
	 * @deprecated
	 */
	MozOutlineRadius?: MozOutlineRadiusProperty<TLength>;
	/**
	 * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.
	 *
	 * **Syntax**: `auto | <'border-style'>`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	MozOutlineStyle?: OutlineStyleProperty;
	/**
	 * The **`outline-width`** CSS property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.
	 *
	 * **Syntax**: `<line-width>`
	 *
	 * **Initial value**: `medium`
	 *
	 * @deprecated
	 */
	MozOutlineWidth?: OutlineWidthProperty<TLength>;
	/**
	 * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.
	 *
	 * **Syntax**: `auto | start | end | left | right | center | justify`
	 *
	 * **Initial value**: `auto`
	 *
	 * @deprecated
	 */
	MozTextAlignLast?: TextAlignLastProperty;
	/**
	 * The **`-moz-text-blink`** non-standard Mozilla CSS extension specifies the blink mode.
	 *
	 * **Syntax**: `none | blink`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	MozTextBlink?: MozTextBlinkProperty;
	/**
	 * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `currentcolor`
	 *
	 * @deprecated
	 */
	MozTextDecorationColor?: TextDecorationColorProperty;
	/**
	 * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.
	 *
	 * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	MozTextDecorationLine?: TextDecorationLineProperty;
	/**
	 * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.
	 *
	 * **Syntax**: `solid | double | dotted | dashed | wavy`
	 *
	 * **Initial value**: `solid`
	 *
	 * @deprecated
	 */
	MozTextDecorationStyle?: TextDecorationStyleProperty;
	/**
	 * In Mozilla applications, **`-moz-user-input`** determines if an element will accept user input.
	 *
	 * **Syntax**: `auto | none | enabled | disabled`
	 *
	 * **Initial value**: `auto`
	 *
	 * @deprecated
	 */
	MozUserInput?: MozUserInputProperty;
	/**
	 * The **`-moz-window-shadow`** CSS property specifies whether a window will have a shadow. It only works on Mac OS X.
	 *
	 * **Syntax**: `default | menu | tooltip | sheet | none`
	 *
	 * **Initial value**: `default`
	 *
	 * @deprecated
	 */
	MozWindowShadow?: MozWindowShadowProperty;
	/**
	 * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.
	 *
	 * **Syntax**: `auto | normal | active | inactive | disabled`
	 *
	 * **Initial value**: `auto`
	 *
	 * @deprecated
	 */
	msImeMode?: ImeModeProperty;
	/**
	 * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.
	 *
	 * **Syntax**: `<color>`
	 *
	 * **Initial value**: `Scrollbar`
	 *
	 * @deprecated
	 */
	msScrollbarTrackColor?: MsScrollbarTrackColorProperty;
	/**
	 * The **`animation`** shorthand CSS property sets an animated transition between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.
	 *
	 * **Syntax**: `<single-animation>#`
	 *
	 * @deprecated
	 */
	OAnimation?: AnimationProperty;
	/**
	 * The **`animation-delay`** CSS property sets when an animation starts. The animation can start later, immediately from its beginning, or immediately and partway through the animation.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 *
	 * @deprecated
	 */
	OAnimationDelay?: GlobalsString;
	/**
	 * The **`animation-direction`** CSS property sets whether an animation should play forwards, backwards, or alternating back and forth.
	 *
	 * **Syntax**: `<single-animation-direction>#`
	 *
	 * **Initial value**: `normal`
	 *
	 * @deprecated
	 */
	OAnimationDirection?: AnimationDirectionProperty;
	/**
	 * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 *
	 * @deprecated
	 */
	OAnimationDuration?: GlobalsString;
	/**
	 * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.
	 *
	 * **Syntax**: `<single-animation-fill-mode>#`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	OAnimationFillMode?: AnimationFillModeProperty;
	/**
	 * The **`animation-iteration-count`** CSS property sets the number of times an animation cycle should be played before stopping.
	 *
	 * **Syntax**: `<single-animation-iteration-count>#`
	 *
	 * **Initial value**: `1`
	 *
	 * @deprecated
	 */
	OAnimationIterationCount?: AnimationIterationCountProperty;
	/**
	 * The **`animation-name`** CSS property sets one or more animations to apply to an element. Each name is an `@keyframes` at-rule that sets the property values for the animation sequence.
	 *
	 * **Syntax**: `[ none | <keyframes-name> ]#`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	OAnimationName?: AnimationNameProperty;
	/**
	 * The **`animation-play-state`** CSS property sets whether an animation is running or paused.
	 *
	 * **Syntax**: `<single-animation-play-state>#`
	 *
	 * **Initial value**: `running`
	 *
	 * @deprecated
	 */
	OAnimationPlayState?: AnimationPlayStateProperty;
	/**
	 * The `**animation-timing-function**` CSS property sets how an animation progresses through the duration of each cycle.
	 *
	 * **Syntax**: `<timing-function>#`
	 *
	 * **Initial value**: `ease`
	 *
	 * @deprecated
	 */
	OAnimationTimingFunction?: AnimationTimingFunctionProperty;
	/**
	 * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.
	 *
	 * **Syntax**: `<bg-size>#`
	 *
	 * **Initial value**: `auto auto`
	 *
	 * @deprecated
	 */
	OBackgroundSize?: BackgroundSizeProperty<TLength>;
	/**
	 * The **`border-image`** CSS property draws an image in place of an element's `border-style`.
	 *
	 * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`
	 *
	 * @deprecated
	 */
	OBorderImage?: BorderImageProperty;
	/**
	 * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.
	 *
	 * **Syntax**: `none | <transform-list>`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	OTransform?: TransformProperty;
	/**
	 * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.
	 *
	 * **Syntax**: `<single-transition>#`
	 *
	 * @deprecated
	 */
	OTransition?: TransitionProperty;
	/**
	 * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 *
	 * @deprecated
	 */
	OTransitionDelay?: GlobalsString;
	/**
	 * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.
	 *
	 * **Syntax**: `<time>#`
	 *
	 * **Initial value**: `0s`
	 *
	 * @deprecated
	 */
	OTransitionDuration?: GlobalsString;
	/**
	 * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.
	 *
	 * **Syntax**: `none | <single-transition-property>#`
	 *
	 * **Initial value**: all
	 *
	 * @deprecated
	 */
	OTransitionProperty?: TransitionPropertyProperty;
	/**
	 * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.
	 *
	 * **Syntax**: `<timing-function>#`
	 *
	 * **Initial value**: `ease`
	 *
	 * @deprecated
	 */
	OTransitionTimingFunction?: TransitionTimingFunctionProperty;
	/**
	 * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.
	 *
	 * **Syntax**: `start | center | end | baseline | stretch`
	 *
	 * **Initial value**: `stretch`
	 *
	 * @deprecated
	 */
	WebkitBoxAlign?: BoxAlignProperty;
	/**
	 * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).
	 *
	 * **Syntax**: `normal | reverse | inherit`
	 *
	 * **Initial value**: `normal`
	 *
	 * @deprecated
	 */
	WebkitBoxDirection?: BoxDirectionProperty;
	/**
	 * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.
	 *
	 * **Syntax**: `<number>`
	 *
	 * **Initial value**: `0`
	 *
	 * @deprecated
	 */
	WebkitBoxFlex?: GlobalsNumber;
	/**
	 * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.
	 *
	 * **Syntax**: `<integer>`
	 *
	 * **Initial value**: `1`
	 *
	 * @deprecated
	 */
	WebkitBoxFlexGroup?: GlobalsNumber;
	/**
	 * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).
	 *
	 * **Syntax**: `single | multiple`
	 *
	 * **Initial value**: `single`
	 *
	 * @deprecated
	 */
	WebkitBoxLines?: BoxLinesProperty;
	/**
	 * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.
	 *
	 * **Syntax**: `<integer>`
	 *
	 * **Initial value**: `1`
	 *
	 * @deprecated
	 */
	WebkitBoxOrdinalGroup?: GlobalsNumber;
	/**
	 * The **`box-orient`** CSS property specifies whether an element lays out its contents horizontally or vertically.
	 *
	 * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`
	 *
	 * **Initial value**: `inline-axis` (`horizontal` in XUL)
	 *
	 * @deprecated
	 */
	WebkitBoxOrient?: BoxOrientProperty;
	/**
	 * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.
	 *
	 * **Syntax**: `start | center | end | justify`
	 *
	 * **Initial value**: `start`
	 *
	 * @deprecated
	 */
	WebkitBoxPack?: BoxPackProperty;
	/**
	 * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.
	 *
	 * **Syntax**: `none | repeat( <length-percentage> )`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	WebkitScrollSnapPointsX?: ScrollSnapPointsXProperty;
	/**
	 * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.
	 *
	 * **Syntax**: `none | repeat( <length-percentage> )`
	 *
	 * **Initial value**: `none`
	 *
	 * @deprecated
	 */
	WebkitScrollSnapPointsY?: ScrollSnapPointsYProperty;
}
export interface SvgProperties<TLength = string | 0> {
	alignmentBaseline?: AlignmentBaselineProperty;
	baselineShift?: BaselineShiftProperty<TLength>;
	clip?: ClipProperty;
	clipPath?: ClipPathProperty;
	clipRule?: ClipRuleProperty;
	color?: ColorProperty;
	colorInterpolation?: ColorInterpolationProperty;
	colorRendering?: ColorRenderingProperty;
	cursor?: CursorProperty;
	direction?: DirectionProperty;
	display?: DisplayProperty;
	dominantBaseline?: DominantBaselineProperty;
	fill?: FillProperty;
	fillOpacity?: GlobalsNumber;
	fillRule?: FillRuleProperty;
	filter?: FilterProperty;
	floodColor?: FloodColorProperty;
	floodOpacity?: GlobalsNumber;
	font?: FontProperty;
	fontFamily?: FontFamilyProperty;
	fontSize?: FontSizeProperty<TLength>;
	fontSizeAdjust?: FontSizeAdjustProperty;
	fontStretch?: FontStretchProperty;
	fontStyle?: FontStyleProperty;
	fontVariant?: FontVariantProperty;
	fontWeight?: FontWeightProperty;
	glyphOrientationVertical?: GlyphOrientationVerticalProperty;
	imageRendering?: ImageRenderingProperty;
	letterSpacing?: LetterSpacingProperty<TLength>;
	lightingColor?: LightingColorProperty;
	lineHeight?: LineHeightProperty<TLength>;
	marker?: MarkerProperty;
	markerEnd?: MarkerEndProperty;
	markerMid?: MarkerMidProperty;
	markerStart?: MarkerStartProperty;
	mask?: MaskProperty<TLength>;
	opacity?: OpacityProperty;
	overflow?: OverflowProperty;
	paintOrder?: PaintOrderProperty;
	pointerEvents?: PointerEventsProperty;
	shapeRendering?: ShapeRenderingProperty;
	stopColor?: StopColorProperty;
	stopOpacity?: GlobalsNumber;
	stroke?: StrokeProperty;
	strokeDasharray?: StrokeDasharrayProperty<TLength>;
	strokeDashoffset?: StrokeDashoffsetProperty<TLength>;
	strokeLinecap?: StrokeLinecapProperty;
	strokeLinejoin?: StrokeLinejoinProperty;
	strokeMiterlimit?: GlobalsNumber;
	strokeOpacity?: GlobalsNumber;
	strokeWidth?: StrokeWidthProperty<TLength>;
	textAnchor?: TextAnchorProperty;
	textDecoration?: TextDecorationProperty<TLength>;
	textRendering?: TextRenderingProperty;
	unicodeBidi?: UnicodeBidiProperty;
	vectorEffect?: VectorEffectProperty;
	visibility?: VisibilityProperty;
	whiteSpace?: WhiteSpaceProperty;
	wordSpacing?: WordSpacingProperty<TLength>;
	writingMode?: WritingModeProperty;
}
export interface Properties<TLength = string | 0> extends StandardProperties<TLength>, VendorProperties<TLength>, ObsoleteProperties<TLength>, SvgProperties<TLength> {
}
export type Globals = "-moz-initial" | "inherit" | "initial" | "revert" | "unset";
export type GlobalsString = Globals | string;
export type GlobalsNumber = Globals | number;
export type AlignContentProperty = Globals | ContentDistribution | ContentPosition | "baseline" | "normal" | string;
export type AlignItemsProperty = Globals | SelfPosition | "baseline" | "normal" | "stretch" | string;
export type AlignSelfProperty = Globals | SelfPosition | "auto" | "baseline" | "normal" | "stretch" | string;
export type AnimationProperty = Globals | SingleAnimation | string;
export type AnimationDirectionProperty = Globals | SingleAnimationDirection | string;
export type AnimationFillModeProperty = Globals | SingleAnimationFillMode | string;
export type AnimationIterationCountProperty = Globals | "infinite" | string | number;
export type AnimationNameProperty = Globals | "none" | string;
export type AnimationPlayStateProperty = Globals | "paused" | "running" | string;
export type AnimationTimingFunctionProperty = Globals | TimingFunction | string;
export type AppearanceProperty = Globals | Compat | "button" | "none" | "textfield";
export type AspectRatioProperty = Globals | "auto" | string;
export type BackdropFilterProperty = Globals | "none" | string;
export type BackfaceVisibilityProperty = Globals | "hidden" | "visible";
export type BackgroundProperty<TLength> = Globals | FinalBgLayer<TLength> | string;
export type BackgroundAttachmentProperty = Globals | Attachment | string;
export type BackgroundBlendModeProperty = Globals | BlendMode | string;
export type BackgroundClipProperty = Globals | Box | string;
export type BackgroundColorProperty = Globals | Color;
export type BackgroundImageProperty = Globals | "none" | string;
export type BackgroundOriginProperty = Globals | Box | string;
export type BackgroundPositionProperty<TLength> = Globals | BgPosition<TLength> | string;
export type BackgroundPositionXProperty<TLength> = Globals | TLength | "center" | "left" | "right" | "x-end" | "x-start" | string;
export type BackgroundPositionYProperty<TLength> = Globals | TLength | "bottom" | "center" | "top" | "y-end" | "y-start" | string;
export type BackgroundRepeatProperty = Globals | RepeatStyle | string;
export type BackgroundSizeProperty<TLength> = Globals | BgSize<TLength> | string;
export type BlockOverflowProperty = Globals | "clip" | "ellipsis" | string;
export type BlockSizeProperty<TLength> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "auto" | "max-content" | "min-content" | string;
export type BorderProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;
export type BorderBlockProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;
export type BorderBlockColorProperty = Globals | Color | string;
export type BorderBlockEndProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;
export type BorderBlockEndColorProperty = Globals | Color;
export type BorderBlockEndStyleProperty = Globals | LineStyle;
export type BorderBlockEndWidthProperty<TLength> = Globals | LineWidth<TLength>;
export type BorderBlockStartProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;
export type BorderBlockStartColorProperty = Globals | Color;
export type BorderBlockStartStyleProperty = Globals | LineStyle;
export type BorderBlockStartWidthProperty<TLength> = Globals | LineWidth<TLength>;
export type BorderBlockStyleProperty = Globals | LineStyle;
export type BorderBlockWidthProperty<TLength> = Globals | LineWidth<TLength>;
export type BorderBottomProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;
export type BorderBottomColorProperty = Globals | Color;
export type BorderBottomLeftRadiusProperty<TLength> = Globals | TLength | string;
export type BorderBottomRightRadiusProperty<TLength> = Globals | TLength | string;
export type BorderBottomStyleProperty = Globals | LineStyle;
export type BorderBottomWidthProperty<TLength> = Globals | LineWidth<TLength>;
export type BorderCollapseProperty = Globals | "collapse" | "separate";
export type BorderColorProperty = Globals | Color | string;
export type BorderEndEndRadiusProperty<TLength> = Globals | TLength | string;
export type BorderEndStartRadiusProperty<TLength> = Globals | TLength | string;
export type BorderImageProperty = Globals | "none" | "repeat" | "round" | "space" | "stretch" | string | number;
export type BorderImageOutsetProperty<TLength> = Globals | TLength | string | number;
export type BorderImageRepeatProperty = Globals | "repeat" | "round" | "space" | "stretch" | string;
export type BorderImageSliceProperty = Globals | string | number;
export type BorderImageSourceProperty = Globals | "none" | string;
export type BorderImageWidthProperty<TLength> = Globals | TLength | "auto" | string | number;
export type BorderInlineProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;
export type BorderInlineColorProperty = Globals | Color | string;
export type BorderInlineEndProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;
export type BorderInlineEndColorProperty = Globals | Color;
export type BorderInlineEndStyleProperty = Globals | LineStyle;
export type BorderInlineEndWidthProperty<TLength> = Globals | LineWidth<TLength>;
export type BorderInlineStartProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;
export type BorderInlineStartColorProperty = Globals | Color;
export type BorderInlineStartStyleProperty = Globals | LineStyle;
export type BorderInlineStartWidthProperty<TLength> = Globals | LineWidth<TLength>;
export type BorderInlineStyleProperty = Globals | LineStyle;
export type BorderInlineWidthProperty<TLength> = Globals | LineWidth<TLength>;
export type BorderLeftProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;
export type BorderLeftColorProperty = Globals | Color;
export type BorderLeftStyleProperty = Globals | LineStyle;
export type BorderLeftWidthProperty<TLength> = Globals | LineWidth<TLength>;
export type BorderRadiusProperty<TLength> = Globals | TLength | string;
export type BorderRightProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;
export type BorderRightColorProperty = Globals | Color;
export type BorderRightStyleProperty = Globals | LineStyle;
export type BorderRightWidthProperty<TLength> = Globals | LineWidth<TLength>;
export type BorderSpacingProperty<TLength> = Globals | TLength | string;
export type BorderStartEndRadiusProperty<TLength> = Globals | TLength | string;
export type BorderStartStartRadiusProperty<TLength> = Globals | TLength | string;
export type BorderStyleProperty = Globals | LineStyle | string;
export type BorderTopProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;
export type BorderTopColorProperty = Globals | Color;
export type BorderTopLeftRadiusProperty<TLength> = Globals | TLength | string;
export type BorderTopRightRadiusProperty<TLength> = Globals | TLength | string;
export type BorderTopStyleProperty = Globals | LineStyle;
export type BorderTopWidthProperty<TLength> = Globals | LineWidth<TLength>;
export type BorderWidthProperty<TLength> = Globals | LineWidth<TLength> | string;
export type BottomProperty<TLength> = Globals | TLength | "auto" | string;
export type BoxAlignProperty = Globals | "baseline" | "center" | "end" | "start" | "stretch";
export type BoxDecorationBreakProperty = Globals | "clone" | "slice";
export type BoxDirectionProperty = Globals | "inherit" | "normal" | "reverse";
export type BoxLinesProperty = Globals | "multiple" | "single";
export type BoxOrientProperty = Globals | "block-axis" | "horizontal" | "inherit" | "inline-axis" | "vertical";
export type BoxPackProperty = Globals | "center" | "end" | "justify" | "start";
export type BoxShadowProperty = Globals | "none" | string;
export type BoxSizingProperty = Globals | "border-box" | "content-box";
export type BreakAfterProperty = Globals | "all" | "always" | "auto" | "avoid" | "avoid-column" | "avoid-page" | "avoid-region" | "column" | "left" | "page" | "recto" | "region" | "right" | "verso";
export type BreakBeforeProperty = Globals | "all" | "always" | "auto" | "avoid" | "avoid-column" | "avoid-page" | "avoid-region" | "column" | "left" | "page" | "recto" | "region" | "right" | "verso";
export type BreakInsideProperty = Globals | "auto" | "avoid" | "avoid-column" | "avoid-page" | "avoid-region";
export type CaptionSideProperty = Globals | "block-end" | "block-start" | "bottom" | "inline-end" | "inline-start" | "top";
export type CaretColorProperty = Globals | Color | "auto";
export type ClearProperty = Globals | "both" | "inline-end" | "inline-start" | "left" | "none" | "right";
export type ClipProperty = Globals | "auto" | string;
export type ClipPathProperty = Globals | GeometryBox | "none" | string;
export type ColorProperty = Globals | Color;
export type ColorAdjustProperty = Globals | "economy" | "exact";
export type ColumnCountProperty = Globals | "auto" | number;
export type ColumnFillProperty = Globals | "auto" | "balance" | "balance-all";
export type ColumnGapProperty<TLength> = Globals | TLength | "normal" | string;
export type ColumnRuleProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;
export type ColumnRuleColorProperty = Globals | Color;
export type ColumnRuleStyleProperty = Globals | LineStyle | string;
export type ColumnRuleWidthProperty<TLength> = Globals | LineWidth<TLength> | string;
export type ColumnSpanProperty = Globals | "all" | "none";
export type ColumnWidthProperty<TLength> = Globals | TLength | "auto";
export type ColumnsProperty<TLength> = Globals | TLength | "auto" | string | number;
export type ContainProperty = Globals | "content" | "layout" | "none" | "paint" | "size" | "strict" | "style" | string;
export type ContentProperty = Globals | ContentList | "none" | "normal" | string;
export type CounterIncrementProperty = Globals | "none" | string;
export type CounterResetProperty = Globals | "none" | string;
export type CounterSetProperty = Globals | "none" | string;
export type CursorProperty = Globals | "-moz-grab" | "-webkit-grab" | "alias" | "all-scroll" | "auto" | "cell" | "col-resize" | "context-menu" | "copy" | "crosshair" | "default" | "e-resize" | "ew-resize" | "grab" | "grabbing" | "help" | "move" | "n-resize" | "ne-resize" | "nesw-resize" | "no-drop" | "none" | "not-allowed" | "ns-resize" | "nw-resize" | "nwse-resize" | "pointer" | "progress" | "row-resize" | "s-resize" | "se-resize" | "sw-resize" | "text" | "vertical-text" | "w-resize" | "wait" | "zoom-in" | "zoom-out" | string;
export type DirectionProperty = Globals | "ltr" | "rtl";
export type DisplayProperty = Globals | DisplayOutside | DisplayInside | DisplayInternal | DisplayLegacy | "contents" | "list-item" | "none" | string;
export type EmptyCellsProperty = Globals | "hide" | "show";
export type FilterProperty = Globals | "none" | string;
export type FlexProperty<TLength> = Globals | TLength | "auto" | "content" | "max-content" | "min-content" | "none" | string | number;
export type FlexBasisProperty<TLength> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "-webkit-auto" | "auto" | "content" | "max-content" | "min-content" | string;
export type FlexDirectionProperty = Globals | "column" | "column-reverse" | "row" | "row-reverse";
export type FlexFlowProperty = Globals | "column" | "column-reverse" | "nowrap" | "row" | "row-reverse" | "wrap" | "wrap-reverse" | string;
export type FlexWrapProperty = Globals | "nowrap" | "wrap" | "wrap-reverse";
export type FloatProperty = Globals | "inline-end" | "inline-start" | "left" | "none" | "right";
export type FontProperty = Globals | "caption" | "icon" | "menu" | "message-box" | "small-caption" | "status-bar" | string;
export type FontFamilyProperty = Globals | GenericFamily | string;
export type FontFeatureSettingsProperty = Globals | "normal" | string;
export type FontKerningProperty = Globals | "auto" | "none" | "normal";
export type FontLanguageOverrideProperty = Globals | "normal" | string;
export type FontOpticalSizingProperty = Globals | "auto" | "none";
export type FontSizeProperty<TLength> = Globals | AbsoluteSize | TLength | "larger" | "smaller" | string;
export type FontSizeAdjustProperty = Globals | "none" | number;
export type FontStretchProperty = Globals | FontStretchAbsolute;
export type FontStyleProperty = Globals | "italic" | "normal" | "oblique" | string;
export type FontSynthesisProperty = Globals | "none" | "style" | "weight" | string;
export type FontVariantProperty = Globals | EastAsianVariantValues | "all-petite-caps" | "all-small-caps" | "common-ligatures" | "contextual" | "diagonal-fractions" | "discretionary-ligatures" | "full-width" | "historical-forms" | "historical-ligatures" | "lining-nums" | "no-common-ligatures" | "no-contextual" | "no-discretionary-ligatures" | "no-historical-ligatures" | "none" | "normal" | "oldstyle-nums" | "ordinal" | "petite-caps" | "proportional-nums" | "proportional-width" | "ruby" | "slashed-zero" | "small-caps" | "stacked-fractions" | "tabular-nums" | "titling-caps" | "unicase" | string;
export type FontVariantAlternatesProperty = Globals | "historical-forms" | "normal" | string;
export type FontVariantCapsProperty = Globals | "all-petite-caps" | "all-small-caps" | "normal" | "petite-caps" | "small-caps" | "titling-caps" | "unicase";
export type FontVariantEastAsianProperty = Globals | EastAsianVariantValues | "full-width" | "normal" | "proportional-width" | "ruby" | string;
export type FontVariantLigaturesProperty = Globals | "common-ligatures" | "contextual" | "discretionary-ligatures" | "historical-ligatures" | "no-common-ligatures" | "no-contextual" | "no-discretionary-ligatures" | "no-historical-ligatures" | "none" | "normal" | string;
export type FontVariantNumericProperty = Globals | "diagonal-fractions" | "lining-nums" | "normal" | "oldstyle-nums" | "ordinal" | "proportional-nums" | "slashed-zero" | "stacked-fractions" | "tabular-nums" | string;
export type FontVariantPositionProperty = Globals | "normal" | "sub" | "super";
export type FontVariationSettingsProperty = Globals | "normal" | string;
export type FontWeightProperty = Globals | FontWeightAbsolute | "bolder" | "lighter";
export type GapProperty<TLength> = Globals | TLength | "normal" | string;
export type GridProperty = Globals | "none" | string;
export type GridAreaProperty = Globals | GridLine | string;
export type GridAutoColumnsProperty<TLength> = Globals | TrackBreadth<TLength> | string;
export type GridAutoFlowProperty = Globals | "column" | "dense" | "row" | string;
export type GridAutoRowsProperty<TLength> = Globals | TrackBreadth<TLength> | string;
export type GridColumnProperty = Globals | GridLine | string;
export type GridColumnEndProperty = Globals | GridLine;
export type GridColumnGapProperty<TLength> = Globals | TLength | string;
export type GridColumnStartProperty = Globals | GridLine;
export type GridGapProperty<TLength> = Globals | TLength | string;
export type GridRowProperty = Globals | GridLine | string;
export type GridRowEndProperty = Globals | GridLine;
export type GridRowGapProperty<TLength> = Globals | TLength | string;
export type GridRowStartProperty = Globals | GridLine;
export type GridTemplateProperty = Globals | "none" | string;
export type GridTemplateAreasProperty = Globals | "none" | string;
export type GridTemplateColumnsProperty<TLength> = Globals | TrackBreadth<TLength> | "none" | "subgrid" | string;
export type GridTemplateRowsProperty<TLength> = Globals | TrackBreadth<TLength> | "none" | "subgrid" | string;
export type HangingPunctuationProperty = Globals | "allow-end" | "first" | "force-end" | "last" | "none" | string;
export type HeightProperty<TLength> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "auto" | "max-content" | "min-content" | string;
export type HyphensProperty = Globals | "auto" | "manual" | "none";
export type ImageOrientationProperty = Globals | "flip" | "from-image" | string;
export type ImageRenderingProperty = Globals | "-moz-crisp-edges" | "-webkit-optimize-contrast" | "auto" | "crisp-edges" | "pixelated";
export type ImageResolutionProperty = Globals | "from-image" | string;
export type ImeModeProperty = Globals | "active" | "auto" | "disabled" | "inactive" | "normal";
export type InitialLetterProperty = Globals | "normal" | string | number;
export type InlineSizeProperty<TLength> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "auto" | "max-content" | "min-content" | string;
export type InsetProperty<TLength> = Globals | TLength | "auto" | string;
export type InsetBlockProperty<TLength> = Globals | TLength | "auto" | string;
export type InsetBlockEndProperty<TLength> = Globals | TLength | "auto" | string;
export type InsetBlockStartProperty<TLength> = Globals | TLength | "auto" | string;
export type InsetInlineProperty<TLength> = Globals | TLength | "auto" | string;
export type InsetInlineEndProperty<TLength> = Globals | TLength | "auto" | string;
export type InsetInlineStartProperty<TLength> = Globals | TLength | "auto" | string;
export type IsolationProperty = Globals | "auto" | "isolate";
export type JustifyContentProperty = Globals | ContentDistribution | ContentPosition | "left" | "normal" | "right" | string;
export type JustifyItemsProperty = Globals | SelfPosition | "baseline" | "left" | "legacy" | "normal" | "right" | "stretch" | string;
export type JustifySelfProperty = Globals | SelfPosition | "auto" | "baseline" | "left" | "normal" | "right" | "stretch" | string;
export type LeftProperty<TLength> = Globals | TLength | "auto" | string;
export type LetterSpacingProperty<TLength> = Globals | TLength | "normal";
export type LineBreakProperty = Globals | "anywhere" | "auto" | "loose" | "normal" | "strict";
export type LineClampProperty = Globals | "none" | number;
export type LineHeightProperty<TLength> = Globals | TLength | "normal" | string | number;
export type LineHeightStepProperty<TLength> = Globals | TLength;
export type ListStyleProperty = Globals | "inside" | "none" | "outside" | string;
export type ListStyleImageProperty = Globals | "none" | string;
export type ListStylePositionProperty = Globals | "inside" | "outside";
export type ListStyleTypeProperty = Globals | "none" | string;
export type MarginProperty<TLength> = Globals | TLength | "auto" | string;
export type MarginBlockProperty<TLength> = Globals | TLength | "auto" | string;
export type MarginBlockEndProperty<TLength> = Globals | TLength | "auto" | string;
export type MarginBlockStartProperty<TLength> = Globals | TLength | "auto" | string;
export type MarginBottomProperty<TLength> = Globals | TLength | "auto" | string;
export type MarginInlineProperty<TLength> = Globals | TLength | "auto" | string;
export type MarginInlineEndProperty<TLength> = Globals | TLength | "auto" | string;
export type MarginInlineStartProperty<TLength> = Globals | TLength | "auto" | string;
export type MarginLeftProperty<TLength> = Globals | TLength | "auto" | string;
export type MarginRightProperty<TLength> = Globals | TLength | "auto" | string;
export type MarginTopProperty<TLength> = Globals | TLength | "auto" | string;
export type MaskProperty<TLength> = Globals | MaskLayer<TLength> | string;
export type MaskBorderProperty = Globals | "alpha" | "luminance" | "none" | "repeat" | "round" | "space" | "stretch" | string | number;
export type MaskBorderModeProperty = Globals | "alpha" | "luminance";
export type MaskBorderOutsetProperty<TLength> = Globals | TLength | string | number;
export type MaskBorderRepeatProperty = Globals | "repeat" | "round" | "space" | "stretch" | string;
export type MaskBorderSliceProperty = Globals | string | number;
export type MaskBorderSourceProperty = Globals | "none" | string;
export type MaskBorderWidthProperty<TLength> = Globals | TLength | "auto" | string | number;
export type MaskClipProperty = Globals | GeometryBox | "no-clip" | string;
export type MaskCompositeProperty = Globals | CompositingOperator | string;
export type MaskImageProperty = Globals | "none" | string;
export type MaskModeProperty = Globals | MaskingMode | string;
export type MaskOriginProperty = Globals | Box | "margin-box" | string;
export type MaskPositionProperty<TLength> = Globals | Position<TLength> | string;
export type MaskRepeatProperty = Globals | RepeatStyle | string;
export type MaskSizeProperty<TLength> = Globals | BgSize<TLength> | string;
export type MaskTypeProperty = Globals | "alpha" | "luminance";
export type MaxBlockSizeProperty<TLength> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "auto" | "max-content" | "min-content" | string;
export type MaxHeightProperty<TLength> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "-webkit-max-content" | "-webkit-min-content" | "auto" | "max-content" | "min-content" | string;
export type MaxInlineSizeProperty<TLength> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "auto" | "max-content" | "min-content" | string;
export type MaxLinesProperty = Globals | "none" | number;
export type MaxWidthProperty<TLength> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "-webkit-max-content" | "-webkit-min-content" | "auto" | "intrinsic" | "max-content" | "min-content" | string;
export type MinBlockSizeProperty<TLength> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "auto" | "max-content" | "min-content" | string;
export type MinHeightProperty<TLength> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "-webkit-max-content" | "-webkit-min-content" | "auto" | "max-content" | "min-content" | string;
export type MinInlineSizeProperty<TLength> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "auto" | "max-content" | "min-content" | string;
export type MinWidthProperty<TLength> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "-webkit-max-content" | "-webkit-min-content" | "auto" | "intrinsic" | "max-content" | "min-content" | "min-intrinsic" | string;
export type MixBlendModeProperty = Globals | BlendMode;
export type OffsetProperty<TLength> = Globals | Position<TLength> | GeometryBox | "auto" | "none" | string;
export type OffsetDistanceProperty<TLength> = Globals | TLength | string;
export type OffsetPathProperty = Globals | GeometryBox | "none" | string;
export type OffsetRotateProperty = Globals | "auto" | "reverse" | string;
export type ObjectFitProperty = Globals | "contain" | "cover" | "fill" | "none" | "scale-down";
export type ObjectPositionProperty<TLength> = Globals | Position<TLength>;
export type OffsetAnchorProperty<TLength> = Globals | Position<TLength> | "auto";
export type OpacityProperty = Globals | string | number;
export type OutlineProperty<TLength> = Globals | Color | LineStyle | LineWidth<TLength> | "auto" | "invert" | string;
export type OutlineColorProperty = Globals | Color | "invert";
export type OutlineOffsetProperty<TLength> = Globals | TLength;
export type OutlineStyleProperty = Globals | LineStyle | "auto" | string;
export type OutlineWidthProperty<TLength> = Globals | LineWidth<TLength>;
export type OverflowProperty = Globals | "auto" | "hidden" | "scroll" | "visible" | string;
export type OverflowAnchorProperty = Globals | "auto" | "none";
export type OverflowBlockProperty = Globals | "auto" | "clip" | "hidden" | "scroll" | "visible";
export type OverflowClipBoxProperty = Globals | "content-box" | "padding-box";
export type OverflowInlineProperty = Globals | "auto" | "clip" | "hidden" | "scroll" | "visible";
export type OverflowWrapProperty = Globals | "anywhere" | "break-word" | "normal";
export type OverflowXProperty = Globals | "auto" | "hidden" | "scroll" | "visible";
export type OverflowYProperty = Globals | "auto" | "hidden" | "scroll" | "visible";
export type OverscrollBehaviorProperty = Globals | "auto" | "contain" | "none" | string;
export type OverscrollBehaviorBlockProperty = Globals | "auto" | "contain" | "none";
export type OverscrollBehaviorInlineProperty = Globals | "auto" | "contain" | "none";
export type OverscrollBehaviorXProperty = Globals | "auto" | "contain" | "none";
export type OverscrollBehaviorYProperty = Globals | "auto" | "contain" | "none";
export type PaddingProperty<TLength> = Globals | TLength | string;
export type PaddingBlockProperty<TLength> = Globals | TLength | string;
export type PaddingBlockEndProperty<TLength> = Globals | TLength | string;
export type PaddingBlockStartProperty<TLength> = Globals | TLength | string;
export type PaddingBottomProperty<TLength> = Globals | TLength | string;
export type PaddingInlineProperty<TLength> = Globals | TLength | string;
export type PaddingInlineEndProperty<TLength> = Globals | TLength | string;
export type PaddingInlineStartProperty<TLength> = Globals | TLength | string;
export type PaddingLeftProperty<TLength> = Globals | TLength | string;
export type PaddingRightProperty<TLength> = Globals | TLength | string;
export type PaddingTopProperty<TLength> = Globals | TLength | string;
export type PageBreakAfterProperty = Globals | "always" | "auto" | "avoid" | "left" | "recto" | "right" | "verso";
export type PageBreakBeforeProperty = Globals | "always" | "auto" | "avoid" | "left" | "recto" | "right" | "verso";
export type PageBreakInsideProperty = Globals | "auto" | "avoid";
export type PaintOrderProperty = Globals | "fill" | "markers" | "normal" | "stroke" | string;
export type PerspectiveProperty<TLength> = Globals | TLength | "none";
export type PerspectiveOriginProperty<TLength> = Globals | Position<TLength>;
export type PlaceContentProperty = Globals | ContentDistribution | ContentPosition | "baseline" | "normal" | string;
export type PlaceItemsProperty = Globals | SelfPosition | "baseline" | "normal" | "stretch" | string;
export type PlaceSelfProperty = Globals | SelfPosition | "auto" | "baseline" | "normal" | "stretch" | string;
export type PointerEventsProperty = Globals | "all" | "auto" | "fill" | "inherit" | "none" | "painted" | "stroke" | "visible" | "visibleFill" | "visiblePainted" | "visibleStroke";
export type PositionProperty = Globals | "-webkit-sticky" | "absolute" | "fixed" | "relative" | "static" | "sticky";
export type QuotesProperty = Globals | "auto" | "none" | string;
export type ResizeProperty = Globals | "block" | "both" | "horizontal" | "inline" | "none" | "vertical";
export type RightProperty<TLength> = Globals | TLength | "auto" | string;
export type RotateProperty = Globals | "none" | string;
export type RowGapProperty<TLength> = Globals | TLength | "normal" | string;
export type RubyAlignProperty = Globals | "center" | "space-around" | "space-between" | "start";
export type RubyMergeProperty = Globals | "auto" | "collapse" | "separate";
export type RubyPositionProperty = Globals | "over" | "under";
export type ScaleProperty = Globals | "none" | string | number;
export type ScrollBehaviorProperty = Globals | "auto" | "smooth";
export type ScrollMarginProperty<TLength> = Globals | TLength | string;
export type ScrollMarginBlockProperty<TLength> = Globals | TLength | string;
export type ScrollMarginBlockEndProperty<TLength> = Globals | TLength;
export type ScrollMarginBlockStartProperty<TLength> = Globals | TLength;
export type ScrollMarginBottomProperty<TLength> = Globals | TLength;
export type ScrollMarginInlineProperty<TLength> = Globals | TLength | string;
export type ScrollMarginInlineEndProperty<TLength> = Globals | TLength;
export type ScrollMarginInlineStartProperty<TLength> = Globals | TLength;
export type ScrollMarginLeftProperty<TLength> = Globals | TLength;
export type ScrollMarginRightProperty<TLength> = Globals | TLength;
export type ScrollMarginTopProperty<TLength> = Globals | TLength;
export type ScrollPaddingProperty<TLength> = Globals | TLength | "auto" | string;
export type ScrollPaddingBlockProperty<TLength> = Globals | TLength | "auto" | string;
export type ScrollPaddingBlockEndProperty<TLength> = Globals | TLength | "auto" | string;
export type ScrollPaddingBlockStartProperty<TLength> = Globals | TLength | "auto" | string;
export type ScrollPaddingBottomProperty<TLength> = Globals | TLength | "auto" | string;
export type ScrollPaddingInlineProperty<TLength> = Globals | TLength | "auto" | string;
export type ScrollPaddingInlineEndProperty<TLength> = Globals | TLength | "auto" | string;
export type ScrollPaddingInlineStartProperty<TLength> = Globals | TLength | "auto" | string;
export type ScrollPaddingLeftProperty<TLength> = Globals | TLength | "auto" | string;
export type ScrollPaddingRightProperty<TLength> = Globals | TLength | "auto" | string;
export type ScrollPaddingTopProperty<TLength> = Globals | TLength | "auto" | string;
export type ScrollSnapAlignProperty = Globals | "center" | "end" | "none" | "start" | string;
export type ScrollSnapCoordinateProperty<TLength> = Globals | Position<TLength> | "none" | string;
export type ScrollSnapDestinationProperty<TLength> = Globals | Position<TLength>;
export type ScrollSnapPointsXProperty = Globals | "none" | string;
export type ScrollSnapPointsYProperty = Globals | "none" | string;
export type ScrollSnapStopProperty = Globals | "always" | "normal";
export type ScrollSnapTypeProperty = Globals | "block" | "both" | "inline" | "none" | "x" | "y" | string;
export type ScrollSnapTypeXProperty = Globals | "mandatory" | "none" | "proximity";
export type ScrollSnapTypeYProperty = Globals | "mandatory" | "none" | "proximity";
export type ScrollbarColorProperty = Globals | Color | "auto" | "dark" | "light";
export type MsScrollbarTrackColorProperty = Globals | Color;
export type ScrollbarWidthProperty = Globals | "auto" | "none" | "thin";
export type ShapeImageThresholdProperty = Globals | string | number;
export type ShapeMarginProperty<TLength> = Globals | TLength | string;
export type ShapeOutsideProperty = Globals | Box | "margin-box" | "none" | string;
export type TabSizeProperty<TLength> = Globals | TLength | number;
export type TableLayoutProperty = Globals | "auto" | "fixed";
export type TextAlignProperty = Globals | "center" | "end" | "justify" | "left" | "match-parent" | "right" | "start";
export type TextAlignLastProperty = Globals | "auto" | "center" | "end" | "justify" | "left" | "right" | "start";
export type TextCombineUprightProperty = Globals | "all" | "digits" | "none" | string;
export type TextDecorationProperty<TLength> = Globals | Color | TLength | "auto" | "blink" | "dashed" | "dotted" | "double" | "from-font" | "grammar-error" | "line-through" | "none" | "overline" | "solid" | "spelling-error" | "underline" | "wavy" | string;
export type TextDecorationColorProperty = Globals | Color;
export type TextDecorationLineProperty = Globals | "blink" | "grammar-error" | "line-through" | "none" | "overline" | "spelling-error" | "underline" | string;
export type TextDecorationSkipProperty = Globals | "box-decoration" | "edges" | "leading-spaces" | "none" | "objects" | "spaces" | "trailing-spaces" | string;
export type TextDecorationSkipInkProperty = Globals | "all" | "auto" | "none";
export type TextDecorationStyleProperty = Globals | "dashed" | "dotted" | "double" | "solid" | "wavy";
export type TextDecorationThicknessProperty<TLength> = Globals | TLength | "auto" | "from-font" | string;
export type TextEmphasisProperty = Globals | Color | "circle" | "dot" | "double-circle" | "filled" | "none" | "open" | "sesame" | "triangle" | string;
export type TextEmphasisColorProperty = Globals | Color;
export type TextEmphasisStyleProperty = Globals | "circle" | "dot" | "double-circle" | "filled" | "none" | "open" | "sesame" | "triangle" | string;
export type TextIndentProperty<TLength> = Globals | TLength | string;
export type TextJustifyProperty = Globals | "auto" | "inter-character" | "inter-word" | "none";
export type TextOrientationProperty = Globals | "mixed" | "sideways" | "upright";
export type TextOverflowProperty = Globals | "clip" | "ellipsis" | string;
export type TextRenderingProperty = Globals | "auto" | "geometricPrecision" | "optimizeLegibility" | "optimizeSpeed";
export type TextShadowProperty = Globals | "none" | string;
export type TextSizeAdjustProperty = Globals | "auto" | "none" | string;
export type TextTransformProperty = Globals | "capitalize" | "full-size-kana" | "full-width" | "lowercase" | "none" | "uppercase";
export type TextUnderlineOffsetProperty<TLength> = Globals | TLength | "auto" | "from-font" | string;
export type TextUnderlinePositionProperty = Globals | "auto" | "from-font" | "left" | "right" | "under" | string;
export type TopProperty<TLength> = Globals | TLength | "auto" | string;
export type TouchActionProperty = Globals | "-ms-manipulation" | "-ms-none" | "-ms-pinch-zoom" | "auto" | "manipulation" | "none" | "pan-down" | "pan-left" | "pan-right" | "pan-up" | "pan-x" | "pan-y" | "pinch-zoom" | string;
export type TransformProperty = Globals | "none" | string;
export type TransformBoxProperty = Globals | "border-box" | "fill-box" | "view-box";
export type TransformOriginProperty<TLength> = Globals | TLength | "bottom" | "center" | "left" | "right" | "top" | string;
export type TransformStyleProperty = Globals | "flat" | "preserve-3d";
export type TransitionProperty = Globals | SingleTransition | string;
export type TransitionPropertyProperty = Globals | "all" | "none" | string;
export type TransitionTimingFunctionProperty = Globals | TimingFunction | string;
export type TranslateProperty<TLength> = Globals | TLength | "none" | string;
export type UnicodeBidiProperty = Globals | "-moz-isolate" | "-moz-isolate-override" | "-moz-plaintext" | "-webkit-isolate" | "bidi-override" | "embed" | "isolate" | "isolate-override" | "normal" | "plaintext";
export type UserSelectProperty = Globals | "-moz-none" | "all" | "auto" | "contain" | "element" | "none" | "text";
export type VerticalAlignProperty<TLength> = Globals | TLength | "baseline" | "bottom" | "middle" | "sub" | "super" | "text-bottom" | "text-top" | "top" | string;
export type VisibilityProperty = Globals | "collapse" | "hidden" | "visible";
export type WhiteSpaceProperty = Globals | "-moz-pre-wrap" | "break-spaces" | "normal" | "nowrap" | "pre" | "pre-line" | "pre-wrap";
export type WidthProperty<TLength> = Globals | TLength | "-moz-max-content" | "-moz-min-content" | "-webkit-max-content" | "auto" | "intrinsic" | "max-content" | "min-content" | "min-intrinsic" | string;
export type WillChangeProperty = Globals | AnimateableFeature | "auto" | string;
export type WordBreakProperty = Globals | "break-all" | "break-word" | "keep-all" | "normal";
export type WordSpacingProperty<TLength> = Globals | TLength | "normal" | string;
export type WordWrapProperty = Globals | "break-word" | "normal";
export type WritingModeProperty = Globals | "horizontal-tb" | "sideways-lr" | "sideways-rl" | "vertical-lr" | "vertical-rl";
export type ZIndexProperty = Globals | "auto" | number;
export type ZoomProperty = Globals | "normal" | "reset" | string | number;
export type MozAppearanceProperty = Globals | "-moz-mac-unified-toolbar" | "-moz-win-borderless-glass" | "-moz-win-browsertabbar-toolbox" | "-moz-win-communications-toolbox" | "-moz-win-communicationstext" | "-moz-win-exclude-glass" | "-moz-win-glass" | "-moz-win-media-toolbox" | "-moz-win-mediatext" | "-moz-window-button-box" | "-moz-window-button-box-maximized" | "-moz-window-button-close" | "-moz-window-button-maximize" | "-moz-window-button-minimize" | "-moz-window-button-restore" | "-moz-window-frame-bottom" | "-moz-window-frame-left" | "-moz-window-frame-right" | "-moz-window-titlebar" | "-moz-window-titlebar-maximized" | "button" | "button-arrow-down" | "button-arrow-next" | "button-arrow-previous" | "button-arrow-up" | "button-bevel" | "button-focus" | "caret" | "checkbox" | "checkbox-container" | "checkbox-label" | "checkmenuitem" | "dualbutton" | "groupbox" | "listbox" | "listitem" | "menuarrow" | "menubar" | "menucheckbox" | "menuimage" | "menuitem" | "menuitemtext" | "menulist" | "menulist-button" | "menulist-text" | "menulist-textfield" | "menupopup" | "menuradio" | "menuseparator" | "meterbar" | "meterchunk" | "none" | "progressbar" | "progressbar-vertical" | "progresschunk" | "progresschunk-vertical" | "radio" | "radio-container" | "radio-label" | "radiomenuitem" | "range" | "range-thumb" | "resizer" | "resizerpanel" | "scale-horizontal" | "scale-vertical" | "scalethumb-horizontal" | "scalethumb-vertical" | "scalethumbend" | "scalethumbstart" | "scalethumbtick" | "scrollbarbutton-down" | "scrollbarbutton-left" | "scrollbarbutton-right" | "scrollbarbutton-up" | "scrollbarthumb-horizontal" | "scrollbarthumb-vertical" | "scrollbartrack-horizontal" | "scrollbartrack-vertical" | "searchfield" | "separator" | "sheet" | "spinner" | "spinner-downbutton" | "spinner-textfield" | "spinner-upbutton" | "splitter" | "statusbar" | "statusbarpanel" | "tab" | "tab-scroll-arrow-back" | "tab-scroll-arrow-forward" | "tabpanel" | "tabpanels" | "textfield" | "textfield-multiline" | "toolbar" | "toolbarbutton" | "toolbarbutton-dropdown" | "toolbargripper" | "toolbox" | "tooltip" | "treeheader" | "treeheadercell" | "treeheadersortarrow" | "treeitem" | "treeline" | "treetwisty" | "treetwistyopen" | "treeview";
export type MozBindingProperty = Globals | "none" | string;
export type MozBorderBottomColorsProperty = Globals | Color | "none" | string;
export type MozBorderLeftColorsProperty = Globals | Color | "none" | string;
export type MozBorderRightColorsProperty = Globals | Color | "none" | string;
export type MozBorderTopColorsProperty = Globals | Color | "none" | string;
export type MozContextPropertiesProperty = Globals | "fill" | "fill-opacity" | "none" | "stroke" | "stroke-opacity" | string;
export type MozFloatEdgeProperty = Globals | "border-box" | "content-box" | "margin-box" | "padding-box";
export type MozImageRegionProperty = Globals | "auto" | string;
export type MozOrientProperty = Globals | "block" | "horizontal" | "inline" | "vertical";
export type MozOutlineRadiusProperty<TLength> = Globals | TLength | string;
export type MozOutlineRadiusBottomleftProperty<TLength> = Globals | TLength | string;
export type MozOutlineRadiusBottomrightProperty<TLength> = Globals | TLength | string;
export type MozOutlineRadiusTopleftProperty<TLength> = Globals | TLength | string;
export type MozOutlineRadiusToprightProperty<TLength> = Globals | TLength | string;
export type MozStackSizingProperty = Globals | "ignore" | "stretch-to-fit";
export type MozTextBlinkProperty = Globals | "blink" | "none";
export type MozUserFocusProperty = Globals | "ignore" | "none" | "normal" | "select-after" | "select-all" | "select-before" | "select-menu" | "select-same";
export type MozUserInputProperty = Globals | "auto" | "disabled" | "enabled" | "none";
export type MozUserModifyProperty = Globals | "read-only" | "read-write" | "write-only";
export type MozWindowDraggingProperty = Globals | "drag" | "no-drag";
export type MozWindowShadowProperty = Globals | "default" | "menu" | "none" | "sheet" | "tooltip";
export type MsAcceleratorProperty = Globals | "false" | "true";
export type MsBlockProgressionProperty = Globals | "bt" | "lr" | "rl" | "tb";
export type MsContentZoomChainingProperty = Globals | "chained" | "none";
export type MsContentZoomSnapProperty = Globals | "mandatory" | "none" | "proximity" | string;
export type MsContentZoomSnapTypeProperty = Globals | "mandatory" | "none" | "proximity";
export type MsContentZoomingProperty = Globals | "none" | "zoom";
export type MsFlowFromProperty = Globals | "none" | string;
export type MsFlowIntoProperty = Globals | "none" | string;
export type MsHighContrastAdjustProperty = Globals | "auto" | "none";
export type MsHyphenateLimitCharsProperty = Globals | "auto" | string | number;
export type MsHyphenateLimitLinesProperty = Globals | "no-limit" | number;
export type MsHyphenateLimitZoneProperty<TLength> = Globals | TLength | string;
export type MsImeAlignProperty = Globals | "after" | "auto";
export type MsOverflowStyleProperty = Globals | "-ms-autohiding-scrollbar" | "auto" | "none" | "scrollbar";
export type MsScrollChainingProperty = Globals | "chained" | "none";
export type MsScrollLimitXMaxProperty<TLength> = Globals | TLength | "auto";
export type MsScrollLimitXMinProperty<TLength> = Globals | TLength;
export type MsScrollLimitYMaxProperty<TLength> = Globals | TLength | "auto";
export type MsScrollLimitYMinProperty<TLength> = Globals | TLength;
export type MsScrollRailsProperty = Globals | "none" | "railed";
export type MsScrollSnapTypeProperty = Globals | "mandatory" | "none" | "proximity";
export type MsScrollTranslationProperty = Globals | "none" | "vertical-to-horizontal";
export type MsScrollbar3dlightColorProperty = Globals | Color;
export type MsScrollbarArrowColorProperty = Globals | Color;
export type MsScrollbarBaseColorProperty = Globals | Color;
export type MsScrollbarDarkshadowColorProperty = Globals | Color;
export type MsScrollbarFaceColorProperty = Globals | Color;
export type MsScrollbarHighlightColorProperty = Globals | Color;
export type MsScrollbarShadowColorProperty = Globals | Color;
export type MsTextAutospaceProperty = Globals | "ideograph-alpha" | "ideograph-numeric" | "ideograph-parenthesis" | "ideograph-space" | "none";
export type MsTouchSelectProperty = Globals | "grippers" | "none";
export type MsUserSelectProperty = Globals | "element" | "none" | "text";
export type MsWrapFlowProperty = Globals | "auto" | "both" | "clear" | "end" | "maximum" | "start";
export type MsWrapMarginProperty<TLength> = Globals | TLength;
export type MsWrapThroughProperty = Globals | "none" | "wrap";
export type WebkitAppearanceProperty = Globals | "button" | "button-bevel" | "caret" | "checkbox" | "default-button" | "inner-spin-button" | "listbox" | "listitem" | "media-controls-background" | "media-controls-fullscreen-background" | "media-current-time-display" | "media-enter-fullscreen-button" | "media-exit-fullscreen-button" | "media-fullscreen-button" | "media-mute-button" | "media-overlay-play-button" | "media-play-button" | "media-seek-back-button" | "media-seek-forward-button" | "media-slider" | "media-sliderthumb" | "media-time-remaining-display" | "media-toggle-closed-captions-button" | "media-volume-slider" | "media-volume-slider-container" | "media-volume-sliderthumb" | "menulist" | "menulist-button" | "menulist-text" | "menulist-textfield" | "meter" | "none" | "progress-bar" | "progress-bar-value" | "push-button" | "radio" | "searchfield" | "searchfield-cancel-button" | "searchfield-decoration" | "searchfield-results-button" | "searchfield-results-decoration" | "slider-horizontal" | "slider-vertical" | "sliderthumb-horizontal" | "sliderthumb-vertical" | "square-button" | "textarea" | "textfield";
export type WebkitBorderBeforeProperty<TLength> = Globals | LineWidth<TLength> | LineStyle | Color | string;
export type WebkitBorderBeforeColorProperty = Globals | Color;
export type WebkitBorderBeforeStyleProperty = Globals | LineStyle | string;
export type WebkitBorderBeforeWidthProperty<TLength> = Globals | LineWidth<TLength> | string;
export type WebkitBoxReflectProperty<TLength> = Globals | TLength | "above" | "below" | "left" | "right" | string;
export type WebkitLineClampProperty = Globals | "none" | number;
export type WebkitMaskProperty<TLength> = Globals | Position<TLength> | RepeatStyle | Box | "border" | "content" | "none" | "padding" | "text" | string;
export type WebkitMaskAttachmentProperty = Globals | Attachment | string;
export type WebkitMaskClipProperty = Globals | Box | "border" | "content" | "padding" | "text" | string;
export type WebkitMaskCompositeProperty = Globals | CompositeStyle | string;
export type WebkitMaskImageProperty = Globals | "none" | string;
export type WebkitMaskOriginProperty = Globals | Box | "border" | "content" | "padding" | string;
export type WebkitMaskPositionProperty<TLength> = Globals | Position<TLength> | string;
export type WebkitMaskPositionXProperty<TLength> = Globals | TLength | "center" | "left" | "right" | string;
export type WebkitMaskPositionYProperty<TLength> = Globals | TLength | "bottom" | "center" | "top" | string;
export type WebkitMaskRepeatProperty = Globals | RepeatStyle | string;
export type WebkitMaskRepeatXProperty = Globals | "no-repeat" | "repeat" | "round" | "space";
export type WebkitMaskRepeatYProperty = Globals | "no-repeat" | "repeat" | "round" | "space";
export type WebkitMaskSizeProperty<TLength> = Globals | BgSize<TLength> | string;
export type WebkitOverflowScrollingProperty = Globals | "auto" | "touch";
export type WebkitTapHighlightColorProperty = Globals | Color;
export type WebkitTextFillColorProperty = Globals | Color;
export type WebkitTextStrokeProperty<TLength> = Globals | Color | TLength | string;
export type WebkitTextStrokeColorProperty = Globals | Color;
export type WebkitTextStrokeWidthProperty<TLength> = Globals | TLength;
export type WebkitTouchCalloutProperty = Globals | "default" | "none";
export type WebkitUserModifyProperty = Globals | "read-only" | "read-write" | "read-write-plaintext-only";
export type AlignmentBaselineProperty = Globals | "after-edge" | "alphabetic" | "auto" | "baseline" | "before-edge" | "central" | "hanging" | "ideographic" | "mathematical" | "middle" | "text-after-edge" | "text-before-edge";
export type BaselineShiftProperty<TLength> = Globals | TLength | "baseline" | "sub" | "super" | string;
export type ClipRuleProperty = Globals | "evenodd" | "nonzero";
export type ColorInterpolationProperty = Globals | "auto" | "linearRGB" | "sRGB";
export type ColorRenderingProperty = Globals | "auto" | "optimizeQuality" | "optimizeSpeed";
export type DominantBaselineProperty = Globals | "alphabetic" | "auto" | "central" | "hanging" | "ideographic" | "mathematical" | "middle" | "no-change" | "reset-size" | "text-after-edge" | "text-before-edge" | "use-script";
export type FillProperty = Globals | Paint;
export type FillRuleProperty = Globals | "evenodd" | "nonzero";
export type FloodColorProperty = Globals | Color | "currentColor";
export type GlyphOrientationVerticalProperty = Globals | "auto" | string | number;
export type LightingColorProperty = Globals | Color | "currentColor";
export type MarkerProperty = Globals | "none" | string;
export type MarkerEndProperty = Globals | "none" | string;
export type MarkerMidProperty = Globals | "none" | string;
export type MarkerStartProperty = Globals | "none" | string;
export type ShapeRenderingProperty = Globals | "auto" | "crispEdges" | "geometricPrecision" | "optimizeSpeed";
export type StopColorProperty = Globals | Color | "currentColor";
export type StrokeProperty = Globals | Paint;
export type StrokeDasharrayProperty<TLength> = Globals | Dasharray<TLength> | "none";
export type StrokeDashoffsetProperty<TLength> = Globals | TLength | string;
export type StrokeLinecapProperty = Globals | "butt" | "round" | "square";
export type StrokeLinejoinProperty = Globals | "bevel" | "miter" | "round";
export type StrokeWidthProperty<TLength> = Globals | TLength | string;
export type TextAnchorProperty = Globals | "end" | "middle" | "start";
export type VectorEffectProperty = Globals | "non-scaling-stroke" | "none";
export type AbsoluteSize = "large" | "medium" | "small" | "x-large" | "x-small" | "xx-large" | "xx-small" | "xxx-large";
export type AnimateableFeature = "contents" | "scroll-position" | string;
export type Attachment = "fixed" | "local" | "scroll";
export type BgPosition<TLength> = TLength | "bottom" | "center" | "left" | "right" | "top" | string;
export type BgSize<TLength> = TLength | "auto" | "contain" | "cover" | string;
export type BlendMode = "color" | "color-burn" | "color-dodge" | "darken" | "difference" | "exclusion" | "hard-light" | "hue" | "lighten" | "luminosity" | "multiply" | "normal" | "overlay" | "saturation" | "screen" | "soft-light";
export type Box = "border-box" | "content-box" | "padding-box";
export type Color = NamedColor | DeprecatedSystemColor | "currentcolor" | string;
export type Compat = "button-bevel" | "checkbox" | "listbox" | "menulist" | "menulist-button" | "meter" | "progress-bar" | "push-button" | "radio" | "searchfield" | "slider-horizontal" | "square-button" | "textarea";
export type CompositeStyle = "clear" | "copy" | "destination-atop" | "destination-in" | "destination-out" | "destination-over" | "source-atop" | "source-in" | "source-out" | "source-over" | "xor";
export type CompositingOperator = "add" | "exclude" | "intersect" | "subtract";
export type ContentDistribution = "space-around" | "space-between" | "space-evenly" | "stretch";
export type ContentList = Quote | "contents" | string;
export type ContentPosition = "center" | "end" | "flex-end" | "flex-start" | "start";
export type CubicBezierTimingFunction = "ease" | "ease-in" | "ease-in-out" | "ease-out" | string;
export type Dasharray<TLength> = TLength | string | number;
export type DeprecatedSystemColor = "ActiveBorder" | "ActiveCaption" | "AppWorkspace" | "Background" | "ButtonFace" | "ButtonHighlight" | "ButtonShadow" | "ButtonText" | "CaptionText" | "GrayText" | "Highlight" | "HighlightText" | "InactiveBorder" | "InactiveCaption" | "InactiveCaptionText" | "InfoBackground" | "InfoText" | "Menu" | "MenuText" | "Scrollbar" | "ThreeDDarkShadow" | "ThreeDFace" | "ThreeDHighlight" | "ThreeDLightShadow" | "ThreeDShadow" | "Window" | "WindowFrame" | "WindowText";
export type DisplayInside = "-ms-flexbox" | "-ms-grid" | "-webkit-flex" | "flex" | "flow" | "flow-root" | "grid" | "ruby" | "table";
export type DisplayInternal = "ruby-base" | "ruby-base-container" | "ruby-text" | "ruby-text-container" | "table-caption" | "table-cell" | "table-column" | "table-column-group" | "table-footer-group" | "table-header-group" | "table-row" | "table-row-group";
export type DisplayLegacy = "-ms-inline-flexbox" | "-ms-inline-grid" | "-webkit-inline-flex" | "inline-block" | "inline-flex" | "inline-grid" | "inline-list-item" | "inline-table";
export type DisplayOutside = "block" | "inline" | "run-in";
export type EastAsianVariantValues = "jis04" | "jis78" | "jis83" | "jis90" | "simplified" | "traditional";
export type FinalBgLayer<TLength> = Color | BgPosition<TLength> | RepeatStyle | Attachment | Box | "none" | string;
export type FontStretchAbsolute = "condensed" | "expanded" | "extra-condensed" | "extra-expanded" | "normal" | "semi-condensed" | "semi-expanded" | "ultra-condensed" | "ultra-expanded" | string;
export type FontWeightAbsolute = "bold" | "normal" | number;
export type GenericFamily = "cursive" | "fantasy" | "monospace" | "sans-serif" | "serif";
export type GeometryBox = Box | "fill-box" | "margin-box" | "stroke-box" | "view-box";
export type GridLine = "auto" | string | number;
export type LineStyle = "dashed" | "dotted" | "double" | "groove" | "hidden" | "inset" | "none" | "outset" | "ridge" | "solid";
export type LineWidth<TLength> = TLength | "medium" | "thick" | "thin";
export type MaskLayer<TLength> = Position<TLength> | RepeatStyle | GeometryBox | CompositingOperator | MaskingMode | "no-clip" | "none" | string;
export type MaskingMode = "alpha" | "luminance" | "match-source";
export type NamedColor = "aliceblue" | "antiquewhite" | "aqua" | "aquamarine" | "azure" | "beige" | "bisque" | "black" | "blanchedalmond" | "blue" | "blueviolet" | "brown" | "burlywood" | "cadetblue" | "chartreuse" | "chocolate" | "coral" | "cornflowerblue" | "cornsilk" | "crimson" | "cyan" | "darkblue" | "darkcyan" | "darkgoldenrod" | "darkgray" | "darkgreen" | "darkgrey" | "darkkhaki" | "darkmagenta" | "darkolivegreen" | "darkorange" | "darkorchid" | "darkred" | "darksalmon" | "darkseagreen" | "darkslateblue" | "darkslategray" | "darkslategrey" | "darkturquoise" | "darkviolet" | "deeppink" | "deepskyblue" | "dimgray" | "dimgrey" | "dodgerblue" | "firebrick" | "floralwhite" | "forestgreen" | "fuchsia" | "gainsboro" | "ghostwhite" | "gold" | "goldenrod" | "gray" | "green" | "greenyellow" | "grey" | "honeydew" | "hotpink" | "indianred" | "indigo" | "ivory" | "khaki" | "lavender" | "lavenderblush" | "lawngreen" | "lemonchiffon" | "lightblue" | "lightcoral" | "lightcyan" | "lightgoldenrodyellow" | "lightgray" | "lightgreen" | "lightgrey" | "lightpink" | "lightsalmon" | "lightseagreen" | "lightskyblue" | "lightslategray" | "lightslategrey" | "lightsteelblue" | "lightyellow" | "lime" | "limegreen" | "linen" | "magenta" | "maroon" | "mediumaquamarine" | "mediumblue" | "mediumorchid" | "mediumpurple" | "mediumseagreen" | "mediumslateblue" | "mediumspringgreen" | "mediumturquoise" | "mediumvioletred" | "midnightblue" | "mintcream" | "mistyrose" | "moccasin" | "navajowhite" | "navy" | "oldlace" | "olive" | "olivedrab" | "orange" | "orangered" | "orchid" | "palegoldenrod" | "palegreen" | "paleturquoise" | "palevioletred" | "papayawhip" | "peachpuff" | "peru" | "pink" | "plum" | "powderblue" | "purple" | "rebeccapurple" | "red" | "rosybrown" | "royalblue" | "saddlebrown" | "salmon" | "sandybrown" | "seagreen" | "seashell" | "sienna" | "silver" | "skyblue" | "slateblue" | "slategray" | "slategrey" | "snow" | "springgreen" | "steelblue" | "tan" | "teal" | "thistle" | "tomato" | "transparent" | "turquoise" | "violet" | "wheat" | "white" | "whitesmoke" | "yellow" | "yellowgreen";
export type Paint = Color | "child" | "context-fill" | "context-stroke" | "none" | string;
export type Position<TLength> = TLength | "bottom" | "center" | "left" | "right" | "top" | string;
export type Quote = "close-quote" | "no-close-quote" | "no-open-quote" | "open-quote";
export type RepeatStyle = "no-repeat" | "repeat" | "repeat-x" | "repeat-y" | "round" | "space" | string;
export type SelfPosition = "center" | "end" | "flex-end" | "flex-start" | "self-end" | "self-start" | "start";
export type SingleAnimation = TimingFunction | SingleAnimationDirection | SingleAnimationFillMode | "infinite" | "none" | "paused" | "running" | string | number;
export type SingleAnimationDirection = "alternate" | "alternate-reverse" | "normal" | "reverse";
export type SingleAnimationFillMode = "backwards" | "both" | "forwards" | "none";
export type SingleTransition = TimingFunction | "all" | "none" | string;
export type StepTimingFunction = "step-end" | "step-start" | string;
export type TimingFunction = CubicBezierTimingFunction | StepTimingFunction | "linear";
export type TrackBreadth<TLength> = TLength | "auto" | "max-content" | "min-content" | string;
export type ReactComponentLike = string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any);
export interface ReactElementLike {
	type: ReactComponentLike;
	props: any;
	key: string | number | null;
}
export interface ReactNodeArray extends Array<ReactNodeLike> {
}
export type ReactNodeLike = {} | ReactElementLike | ReactNodeArray | string | number | boolean | null | undefined;
declare const nominalTypeHack: unique symbol;
export type IsOptional<T> = undefined extends T ? true : false;
export type RequiredKeys<V> = {
	[K in keyof V]-?: Exclude<V[K], undefined> extends Validator<infer T> ? IsOptional<T> extends true ? never : K : never;
}[keyof V];
export type OptionalKeys<V> = Exclude<keyof V, RequiredKeys<V>>;
export type InferPropsInner<V> = {
	[K in keyof V]-?: InferType<V[K]>;
};
export interface Validator<T> {
	(props: {
		[key: string]: any;
	}, propName: string, componentName: string, location: string, propFullName: string): Error | null;
	[nominalTypeHack]?: {
		type: T;
	};
}
export interface Requireable<T> extends Validator<T | undefined | null> {
	isRequired: Validator<NonNullable<T>>;
}
export type ValidationMap<T> = {
	[K in keyof T]?: Validator<T[K]>;
};
export type InferType<V> = V extends Validator<infer T> ? T : any;
export type InferProps<V> = InferPropsInner<Pick<V, RequiredKeys<V>>> & Partial<InferPropsInner<Pick<V, OptionalKeys<V>>>>;
declare const any: Requireable<any>;
declare const array: Requireable<any[]>;
declare const bool: Requireable<boolean>;
declare const func: Requireable<(...args: any[]) => any>;
declare const number: Requireable<number>;
declare const object: Requireable<object>;
declare const string: Requireable<string>;
declare const node: Requireable<ReactNodeLike>;
declare const element: Requireable<ReactElementLike>;
declare function instanceOf<T>(expectedClass: new (...args: any[]) => T): Requireable<T>;
declare function oneOf<T>(types: ReadonlyArray<T>): Requireable<T>;
declare function oneOfType<T extends Validator<any>>(types: T[]): Requireable<NonNullable<InferType<T>>>;
declare function arrayOf<T>(type: Validator<T>): Requireable<T[]>;
declare function objectOf<T>(type: Validator<T>): Requireable<{
	[K in keyof any]: T;
}>;
declare function shape<P extends ValidationMap<any>>(type: P): Requireable<InferProps<P>>;
declare function exact<P extends ValidationMap<any>>(type: P): Requireable<Required<InferProps<P>>>;
export type NativeAnimationEvent = AnimationEvent;
export type NativeClipboardEvent = ClipboardEvent;
export type NativeCompositionEvent = CompositionEvent;
export type NativeDragEvent = DragEvent;
export type NativeFocusEvent = FocusEvent;
export type NativeKeyboardEvent = KeyboardEvent;
export type NativeMouseEvent = MouseEvent;
export type NativeTouchEvent = TouchEvent;
export type NativePointerEvent = PointerEvent;
export type NativeTransitionEvent = TransitionEvent;
export type NativeUIEvent = UIEvent;
export type NativeWheelEvent = WheelEvent;
export type Booleanish = boolean | "true" | "false";
/**
 * defined in scheduler/tracing
 */
export interface SchedulerInteraction {
	id: number;
	name: string;
	timestamp: number;
}
export declare namespace React {
	//
	// React Elements
	// ----------------------------------------------------------------------
	type ElementType<P = any> = {
		[K in keyof JSX.IntrinsicElements]: P extends JSX.IntrinsicElements[K] ? K : never;
	}[keyof JSX.IntrinsicElements] | ComponentType<P>;
	/**
	 * @deprecated Please use `ElementType`
	 */
	type ReactType<P = any> = ElementType<P>;
	type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;
	type JSXElementConstructor<P> = ((props: P) => ReactElement | null) | (new (props: P) => Component<P, any>);
	type Key = string | number;
	interface RefObject<T> {
		readonly current: T | null;
	}
	type RefCallback<T> = {
		bivarianceHack(instance: T | null): void;
	}["bivarianceHack"];
	type Ref<T> = RefCallback<T> | RefObject<T> | null;
	type LegacyRef<T> = string | Ref<T>;
	type ComponentState = any;
	/**
	 * @internal You shouldn't need to use this type since you never see these attributes
	 * inside your component or have to validate them.
	 */
	interface Attributes {
		key?: Key;
	}
	interface RefAttributes<T> extends Attributes {
		ref?: Ref<T>;
	}
	interface ClassAttributes<T> extends Attributes {
		ref?: LegacyRef<T>;
	}
	interface ReactElement<P = any, T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>> {
		type: T;
		props: P;
		key: Key | null;
	}
	interface ReactComponentElement<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>, P = Pick<ComponentProps<T>, Exclude<keyof ComponentProps<T>, "key" | "ref">>> extends ReactElement<P, T> {
	}
	/**
	 * @deprecated Please use `FunctionComponentElement`
	 */
	type SFCElement<P> = FunctionComponentElement<P>;
	interface FunctionComponentElement<P> extends ReactElement<P, FunctionComponent<P>> {
		ref?: "ref" extends keyof P ? P extends {
			ref?: infer R;
		} ? R : never : never;
	}
	type CElement<P, T extends Component<P, ComponentState>> = ComponentElement<P, T>;
	interface ComponentElement<P, T extends Component<P, ComponentState>> extends ReactElement<P, ComponentClass<P>> {
		ref?: LegacyRef<T>;
	}
	type ClassicElement<P> = CElement<P, ClassicComponent<P, ComponentState>>;
	// string fallback for custom web-components
	interface DOMElement<P extends HTMLAttributes<T> | SVGAttributes<T>, T extends Element> extends ReactElement<P, string> {
		ref: LegacyRef<T>;
	}
	// ReactHTML for ReactHTMLElement
	// tslint:disable-next-line:no-empty-interface
	interface ReactHTMLElement<T extends HTMLElement> extends DetailedReactHTMLElement<AllHTMLAttributes<T>, T> {
	}
	interface DetailedReactHTMLElement<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMElement<P, T> {
		type: keyof ReactHTML;
	}
	// ReactSVG for ReactSVGElement
	interface ReactSVGElement extends DOMElement<SVGAttributes<SVGElement>, SVGElement> {
		type: keyof ReactSVG;
	}
	interface ReactPortal extends ReactElement {
		key: Key | null;
		children: ReactNode;
	}
	//
	// Factories
	// ----------------------------------------------------------------------
	type Factory<P> = (props?: Attributes & P, ...children: ReactNode[]) => ReactElement<P>;
	/**
	 * @deprecated Please use `FunctionComponentFactory`
	 */
	type SFCFactory<P> = FunctionComponentFactory<P>;
	type FunctionComponentFactory<P> = (props?: Attributes & P, ...children: ReactNode[]) => FunctionComponentElement<P>;
	type ComponentFactory<P, T extends Component<P, ComponentState>> = (props?: ClassAttributes<T> & P, ...children: ReactNode[]) => CElement<P, T>;
	type CFactory<P, T extends Component<P, ComponentState>> = ComponentFactory<P, T>;
	type ClassicFactory<P> = CFactory<P, ClassicComponent<P, ComponentState>>;
	type DOMFactory<P extends DOMAttributes<T>, T extends Element> = (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]) => DOMElement<P, T>;
	// tslint:disable-next-line:no-empty-interface
	interface HTMLFactory<T extends HTMLElement> extends DetailedHTMLFactory<AllHTMLAttributes<T>, T> {
	}
	interface DetailedHTMLFactory<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMFactory<P, T> {
		(props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;
	}
	interface SVGFactory extends DOMFactory<SVGAttributes<SVGElement>, SVGElement> {
		(props?: ClassAttributes<SVGElement> & SVGAttributes<SVGElement> | null, ...children: ReactNode[]): ReactSVGElement;
	}
	//
	// React Nodes
	// http://facebook.github.io/react/docs/glossary.html
	// ----------------------------------------------------------------------
	type ReactText = string | number;
	type ReactChild = ReactElement | ReactText;
	interface ReactNodeArray extends Array<ReactNode> {
	}
	type ReactFragment = {} | ReactNodeArray;
	type ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;
	//
	// Top Level API
	// ----------------------------------------------------------------------
	// DOM Elements
	function createFactory<T extends HTMLElement>(type: keyof ReactHTML): HTMLFactory<T>;
	function createFactory(type: keyof ReactSVG): SVGFactory;
	function createFactory<P extends DOMAttributes<T>, T extends Element>(type: string): DOMFactory<P, T>;
	// Custom components
	function createFactory<P>(type: FunctionComponent<P>): FunctionComponentFactory<P>;
	function createFactory<P>(type: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>): CFactory<P, ClassicComponent<P, ComponentState>>;
	function createFactory<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(type: ClassType<P, T, C>): CFactory<P, T>;
	function createFactory<P>(type: ComponentClass<P>): Factory<P>;
	// DOM Elements
	// TODO: generalize this to everything in `keyof ReactHTML`, not just "input"
	function createElement(type: "input", props?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement> | null, ...children: ReactNode[]): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
	function createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(type: keyof ReactHTML, props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;
	function createElement<P extends SVGAttributes<T>, T extends SVGElement>(type: keyof ReactSVG, props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): ReactSVGElement;
	function createElement<P extends DOMAttributes<T>, T extends Element>(type: string, props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DOMElement<P, T>;
	// Custom components
	function createElement<P extends {}>(type: FunctionComponent<P>, props?: Attributes & P | null, ...children: ReactNode[]): FunctionComponentElement<P>;
	function createElement<P extends {}>(type: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>, props?: ClassAttributes<ClassicComponent<P, ComponentState>> & P | null, ...children: ReactNode[]): CElement<P, ClassicComponent<P, ComponentState>>;
	function createElement<P extends {}, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(type: ClassType<P, T, C>, props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): CElement<P, T>;
	function createElement<P extends {}>(type: FunctionComponent<P> | ComponentClass<P> | string, props?: Attributes & P | null, ...children: ReactNode[]): ReactElement<P>;
	// DOM Elements
	// ReactHTMLElement
	function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(element: DetailedReactHTMLElement<P, T>, props?: P, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;
	// ReactHTMLElement, less specific
	function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(element: ReactHTMLElement<T>, props?: P, ...children: ReactNode[]): ReactHTMLElement<T>;
	// SVGElement
	function cloneElement<P extends SVGAttributes<T>, T extends SVGElement>(element: ReactSVGElement, props?: P, ...children: ReactNode[]): ReactSVGElement;
	// DOM Element (has to be the last, because type checking stops at first overload that fits)
	function cloneElement<P extends DOMAttributes<T>, T extends Element>(element: DOMElement<P, T>, props?: DOMAttributes<T> & P, ...children: ReactNode[]): DOMElement<P, T>;
	// Custom components
	function cloneElement<P>(element: FunctionComponentElement<P>, props?: Partial<P> & Attributes, ...children: ReactNode[]): FunctionComponentElement<P>;
	function cloneElement<P, T extends Component<P, ComponentState>>(element: CElement<P, T>, props?: Partial<P> & ClassAttributes<T>, ...children: ReactNode[]): CElement<P, T>;
	function cloneElement<P>(element: ReactElement<P>, props?: Partial<P> & Attributes, ...children: ReactNode[]): ReactElement<P>;
	// Context via RenderProps
	interface ProviderProps<T> {
		value: T;
		children?: ReactNode;
	}
	interface ConsumerProps<T> {
		children: (value: T) => ReactNode;
		unstable_observedBits?: number;
	}
	// TODO: similar to how Fragment is actually a symbol, the values returned from createContext,
	// forwardRef and memo are actually objects that are treated specially by the renderer; see:
	// https://github.com/facebook/react/blob/v16.6.0/packages/react/src/ReactContext.js#L35-L48
	// https://github.com/facebook/react/blob/v16.6.0/packages/react/src/forwardRef.js#L42-L45
	// https://github.com/facebook/react/blob/v16.6.0/packages/react/src/memo.js#L27-L31
	// However, we have no way of telling the JSX parser that it's a JSX element type or its props other than
	// by pretending to be a normal component.
	//
	// We don't just use ComponentType or SFC types because you are not supposed to attach statics to this
	// object, but rather to the original function.
	interface ExoticComponent<P = {}> {
		/**
		 * **NOTE**: Exotic components are not callable.
		 */
		(props: P): (ReactElement | null);
		readonly $$typeof: symbol;
	}
	interface NamedExoticComponent<P = {}> extends ExoticComponent<P> {
		displayName?: string;
	}
	interface ProviderExoticComponent<P> extends ExoticComponent<P> {
		propTypes?: WeakValidationMap<P>;
	}
	type ContextType<C extends Context<any>> = C extends Context<infer T> ? T : never;
	// NOTE: only the Context object itself can get a displayName
	// https://github.com/facebook/react-devtools/blob/e0b854e4c/backend/attachRendererFiber.js#L310-L325
	type Provider<T> = ProviderExoticComponent<ProviderProps<T>>;
	type Consumer<T> = ExoticComponent<ConsumerProps<T>>;
	interface Context<T> {
		Provider: Provider<T>;
		Consumer: Consumer<T>;
		displayName?: string;
	}
	function createContext<T>(
	// If you thought this should be optional, see
	// https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#issuecomment-382213106
	defaultValue: T, calculateChangedBits?: (prev: T, next: T) => number): Context<T>;
	function isValidElement<P>(object: {} | null | undefined): object is ReactElement<P>;
	const Children: ReactChildren;
	const Fragment: ExoticComponent<{
		children?: ReactNode;
	}>;
	const StrictMode: ExoticComponent<{
		children?: ReactNode;
	}>;
	interface SuspenseProps {
		children?: ReactNode;
		/** A fallback react tree to show when a Suspense child (like React.lazy) suspends */
		fallback: NonNullable<ReactNode> | null;
		/**
		 * Tells React whether to “skip” revealing this boundary during the initial load.
		 * This API will likely be removed in a future release.
		 */
		// NOTE: this is unflagged and is respected even in stable builds
		unstable_avoidThisFallback?: boolean;
	}
	/**
	 * This feature is not yet available for server-side rendering.
	 * Suspense support will be added in a later release.
	 */
	const Suspense: ExoticComponent<SuspenseProps>;
	const version: string;
	/**
	 * {@link https://github.com/bvaughn/rfcs/blob/profiler/text/0000-profiler.md#detailed-design | API}
	 */
	type ProfilerOnRenderCallback = (id: string, phase: "mount" | "update", actualDuration: number, baseDuration: number, startTime: number, commitTime: number, interactions: Set<SchedulerInteraction>) => void;
	interface ProfilerProps {
		children?: ReactNode;
		id: string;
		onRender: ProfilerOnRenderCallback;
	}
	const Profiler: ExoticComponent<ProfilerProps>;
	//
	// Component API
	// ----------------------------------------------------------------------
	type ReactInstance = Component<any> | Element;
	// Base component for plain JS classes
	// tslint:disable-next-line:no-empty-interface
	interface Component<P = {}, S = {}, SS = any> extends ComponentLifecycle<P, S, SS> {
	}
	class Component<P, S> {
		// tslint won't let me format the sample code in a way that vscode likes it :(
		/**
		 * If set, `this.context` will be set at runtime to the current value of the given Context.
		 *
		 * Usage:
		 *
		 * ```ts
		 * type MyContext = number
		 * const Ctx = React.createContext<MyContext>(0)
		 *
		 * class Foo extends React.Component {
		 *   static contextType = Ctx
		 *   context!: React.ContextType<typeof Ctx>
		 *   render () {
		 *     return <>My context's value: {this.context}</>;
		 *   }
		 * }
		 * ```
		 *
		 * @see https://reactjs.org/docs/context.html#classcontexttype
		 */
		static contextType?: Context<any>;
		/**
		 * If using the new style context, re-declare this in your class to be the
		 * `React.ContextType` of your `static contextType`.
		 * Should be used with type annotation or static contextType.
		 *
		 * ```ts
		 * static contextType = MyContext
		 * // For TS pre-3.7:
		 * context!: React.ContextType<typeof MyContext>
		 * // For TS 3.7 and above:
		 * declare context: React.ContextType<typeof MyContext>
		 * ```
		 *
		 * @see https://reactjs.org/docs/context.html
		 */
		// TODO (TypeScript 3.0): unknown
		context: any;
		constructor(props: Readonly<P>);
		/**
		 * @deprecated
		 * @see https://reactjs.org/docs/legacy-context.html
		 */
		constructor(props: P, context?: any);
		// We MUST keep setState() as a unified signature because it allows proper checking of the method return type.
		// See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257
		// Also, the ` | S` allows intellisense to not be dumbisense
		setState<K extends keyof S>(state: ((prevState: Readonly<S>, props: Readonly<P>) => (Pick<S, K> | S | null)) | (Pick<S, K> | S | null), callback?: () => void): void;
		forceUpdate(callback?: () => void): void;
		render(): ReactNode;
		// React.Props<T> is now deprecated, which means that the `children`
		// property is not available on `P` by default, even though you can
		// always pass children as variadic arguments to `createElement`.
		// In the future, if we can define its call signature conditionally
		// on the existence of `children` in `P`, then we should remove this.
		readonly props: Readonly<P> & Readonly<{
			children?: ReactNode;
		}>;
		state: Readonly<S>;
		/**
		 * @deprecated
		 * https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs
		 */
		refs: {
			[key: string]: ReactInstance;
		};
	}
	class PureComponent<P = {}, S = {}, SS = any> extends Component<P, S, SS> {
	}
	interface ClassicComponent<P = {}, S = {}> extends Component<P, S> {
		replaceState(nextState: S, callback?: () => void): void;
		isMounted(): boolean;
		getInitialState?(): S;
	}
	interface ChildContextProvider<CC> {
		getChildContext(): CC;
	}
	//
	// Class Interfaces
	// ----------------------------------------------------------------------
	/**
	 * @deprecated as of recent React versions, function components can no
	 * longer be considered 'stateless'. Please use `FunctionComponent` instead.
	 *
	 * @see [React Hooks](https://reactjs.org/docs/hooks-intro.html)
	 */
	type SFC<P = {}> = FunctionComponent<P>;
	/**
	 * @deprecated as of recent React versions, function components can no
	 * longer be considered 'stateless'. Please use `FunctionComponent` instead.
	 *
	 * @see [React Hooks](https://reactjs.org/docs/hooks-intro.html)
	 */
	type StatelessComponent<P = {}> = FunctionComponent<P>;
	type FC<P = {}> = FunctionComponent<P>;
	interface FunctionComponent<P = {}> {
		(props: PropsWithChildren<P>, context?: any): ReactElement | null;
		propTypes?: WeakValidationMap<P>;
		contextTypes?: ValidationMap<any>;
		defaultProps?: Partial<P>;
		displayName?: string;
	}
	interface ForwardRefRenderFunction<T, P = {}> {
		(props: PropsWithChildren<P>, ref: Ref<T>): ReactElement | null;
		displayName?: string;
		// explicit rejected with `never` required due to
		// https://github.com/microsoft/TypeScript/issues/36826
		/**
		 * defaultProps are not supported on render functions
		 */
		defaultProps?: never;
		/**
		 * propTypes are not supported on render functions
		 */
		propTypes?: never;
	}
	/**
	 * @deprecated Use ForwardRefRenderingFunction. forwardRef doesn't accept a
	 *             "real" component.
	 */
	interface RefForwardingComponent<T, P = {}> extends ForwardRefRenderFunction<T, P> {
	}
	interface ComponentClass<P = {}, S = ComponentState> extends StaticLifecycle<P, S> {
		new (props: P, context?: any): Component<P, S>;
		propTypes?: WeakValidationMap<P>;
		contextType?: Context<any>;
		contextTypes?: ValidationMap<any>;
		childContextTypes?: ValidationMap<any>;
		defaultProps?: Partial<P>;
		displayName?: string;
	}
	interface ClassicComponentClass<P = {}> extends ComponentClass<P> {
		new (props: P, context?: any): ClassicComponent<P, ComponentState>;
		getDefaultProps?(): P;
	}
	/**
	 * We use an intersection type to infer multiple type parameters from
	 * a single argument, which is useful for many top-level API defs.
	 * See https://github.com/Microsoft/TypeScript/issues/7234 for more info.
	 */
	type ClassType<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>> = C & (new (props: P, context?: any) => T);
	//
	// Component Specs and Lifecycle
	// ----------------------------------------------------------------------
	// This should actually be something like `Lifecycle<P, S> | DeprecatedLifecycle<P, S>`,
	// as React will _not_ call the deprecated lifecycle methods if any of the new lifecycle
	// methods are present.
	interface ComponentLifecycle<P, S, SS = any> extends NewLifecycle<P, S, SS>, DeprecatedLifecycle<P, S> {
		/**
		 * Called immediately after a component is mounted. Setting state here will trigger re-rendering.
		 */
		componentDidMount?(): void;
		/**
		 * Called to determine whether the change in props and state should trigger a re-render.
		 *
		 * `Component` always returns true.
		 * `PureComponent` implements a shallow comparison on props and state and returns true if any
		 * props or states have changed.
		 *
		 * If false is returned, `Component#render`, `componentWillUpdate`
		 * and `componentDidUpdate` will not be called.
		 */
		shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;
		/**
		 * Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as
		 * cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.
		 */
		componentWillUnmount?(): void;
		/**
		 * Catches exceptions generated in descendant components. Unhandled exceptions will cause
		 * the entire component tree to unmount.
		 */
		componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;
	}
	// Unfortunately, we have no way of declaring that the component constructor must implement this
	interface StaticLifecycle<P, S> {
		getDerivedStateFromProps?: GetDerivedStateFromProps<P, S>;
		getDerivedStateFromError?: GetDerivedStateFromError<P, S>;
	}
	type GetDerivedStateFromProps<P, S> = 
	/**
	 * Returns an update to a component's state based on its new props and old state.
	 *
	 * Note: its presence prevents any of the deprecated lifecycle methods from being invoked
	 */
	(nextProps: Readonly<P>, prevState: S) => Partial<S> | null;
	type GetDerivedStateFromError<P, S> = 
	/**
	 * This lifecycle is invoked after an error has been thrown by a descendant component.
	 * It receives the error that was thrown as a parameter and should return a value to update state.
	 *
	 * Note: its presence prevents any of the deprecated lifecycle methods from being invoked
	 */
	(error: any) => Partial<S> | null;
	// This should be "infer SS" but can't use it yet
	interface NewLifecycle<P, S, SS> {
		/**
		 * Runs before React applies the result of `render` to the document, and
		 * returns an object to be given to componentDidUpdate. Useful for saving
		 * things such as scroll position before `render` causes changes to it.
		 *
		 * Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated
		 * lifecycle events from running.
		 */
		getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>): SS | null;
		/**
		 * Called immediately after updating occurs. Not called for the initial render.
		 *
		 * The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.
		 */
		componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;
	}
	interface DeprecatedLifecycle<P, S> {
		/**
		 * Called immediately before mounting occurs, and before `Component#render`.
		 * Avoid introducing any side-effects or subscriptions in this method.
		 *
		 * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
		 * prevents this from being invoked.
		 *
		 * @deprecated 16.3, use componentDidMount or the constructor instead; will stop working in React 17
		 * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state
		 * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path
		 */
		componentWillMount?(): void;
		/**
		 * Called immediately before mounting occurs, and before `Component#render`.
		 * Avoid introducing any side-effects or subscriptions in this method.
		 *
		 * This method will not stop working in React 17.
		 *
		 * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
		 * prevents this from being invoked.
		 *
		 * @deprecated 16.3, use componentDidMount or the constructor instead
		 * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state
		 * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path
		 */
		UNSAFE_componentWillMount?(): void;
		/**
		 * Called when the component may be receiving new props.
		 * React may call this even if props have not changed, so be sure to compare new and existing
		 * props if you only want to handle changes.
		 *
		 * Calling `Component#setState` generally does not trigger this method.
		 *
		 * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
		 * prevents this from being invoked.
		 *
		 * @deprecated 16.3, use static getDerivedStateFromProps instead; will stop working in React 17
		 * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props
		 * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path
		 */
		componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
		/**
		 * Called when the component may be receiving new props.
		 * React may call this even if props have not changed, so be sure to compare new and existing
		 * props if you only want to handle changes.
		 *
		 * Calling `Component#setState` generally does not trigger this method.
		 *
		 * This method will not stop working in React 17.
		 *
		 * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
		 * prevents this from being invoked.
		 *
		 * @deprecated 16.3, use static getDerivedStateFromProps instead
		 * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props
		 * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path
		 */
		UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
		/**
		 * Called immediately before rendering when new props or state is received. Not called for the initial render.
		 *
		 * Note: You cannot call `Component#setState` here.
		 *
		 * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
		 * prevents this from being invoked.
		 *
		 * @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17
		 * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update
		 * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path
		 */
		componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;
		/**
		 * Called immediately before rendering when new props or state is received. Not called for the initial render.
		 *
		 * Note: You cannot call `Component#setState` here.
		 *
		 * This method will not stop working in React 17.
		 *
		 * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
		 * prevents this from being invoked.
		 *
		 * @deprecated 16.3, use getSnapshotBeforeUpdate instead
		 * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update
		 * @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path
		 */
		UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;
	}
	interface Mixin<P, S> extends ComponentLifecycle<P, S> {
		mixins?: Array<Mixin<P, S>>;
		statics?: {
			[key: string]: any;
		};
		displayName?: string;
		propTypes?: ValidationMap<any>;
		contextTypes?: ValidationMap<any>;
		childContextTypes?: ValidationMap<any>;
		getDefaultProps?(): P;
		getInitialState?(): S;
	}
	interface ComponentSpec<P, S> extends Mixin<P, S> {
		render(): ReactNode;
		[propertyName: string]: any;
	}
	function createRef<T>(): RefObject<T>;
	// will show `ForwardRef(${Component.displayName || Component.name})` in devtools by default,
	// but can be given its own specific name
	interface ForwardRefExoticComponent<P> extends NamedExoticComponent<P> {
		defaultProps?: Partial<P>;
		propTypes?: WeakValidationMap<P>;
	}
	function forwardRef<T, P = {}>(render: ForwardRefRenderFunction<T, P>): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;
	/** Ensures that the props do not include ref at all */
	type PropsWithoutRef<P> = 
	// Just Pick would be sufficient for this, but I'm trying to avoid unnecessary mapping over union types
	// https://github.com/Microsoft/TypeScript/issues/28339
	"ref" extends keyof P ? Pick<P, Exclude<keyof P, "ref">> : P;
	/** Ensures that the props do not include string ref, which cannot be forwarded */
	type PropsWithRef<P> = 
	// Just "P extends { ref?: infer R }" looks sufficient, but R will infer as {} if P is {}.
	"ref" extends keyof P ? P extends {
		ref?: infer R;
	} ? string extends R ? PropsWithoutRef<P> & {
		ref?: Exclude<R, string>;
	} : P : P : P;
	type PropsWithChildren<P> = P & {
		children?: ReactNode;
	};
	/**
	 * NOTE: prefer ComponentPropsWithRef, if the ref is forwarded,
	 * or ComponentPropsWithoutRef when refs are not supported.
	 */
	type ComponentProps<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> = T extends JSXElementConstructor<infer P> ? P : T extends keyof JSX.IntrinsicElements ? JSX.IntrinsicElements[T] : {};
	type ComponentPropsWithRef<T extends ElementType> = T extends ComponentClass<infer P> ? PropsWithoutRef<P> & RefAttributes<InstanceType<T>> : PropsWithRef<ComponentProps<T>>;
	type ComponentPropsWithoutRef<T extends ElementType> = PropsWithoutRef<ComponentProps<T>>;
	// will show `Memo(${Component.displayName || Component.name})` in devtools by default,
	// but can be given its own specific name
	type MemoExoticComponent<T extends ComponentType<any>> = NamedExoticComponent<ComponentPropsWithRef<T>> & {
		readonly type: T;
	};
	function memo<P extends object>(Component: SFC<P>, propsAreEqual?: (prevProps: Readonly<PropsWithChildren<P>>, nextProps: Readonly<PropsWithChildren<P>>) => boolean): NamedExoticComponent<P>;
	function memo<T extends ComponentType<any>>(Component: T, propsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean): MemoExoticComponent<T>;
	type LazyExoticComponent<T extends ComponentType<any>> = ExoticComponent<ComponentPropsWithRef<T>> & {
		readonly _result: T;
	};
	function lazy<T extends ComponentType<any>>(factory: () => Promise<{
		default: T;
	}>): LazyExoticComponent<T>;
	//
	// React Hooks
	// ----------------------------------------------------------------------
	// based on the code in https://github.com/facebook/react/pull/13968
	// Unlike the class component setState, the updates are not allowed to be partial
	type SetStateAction<S> = S | ((prevState: S) => S);
	// this technically does accept a second argument, but it's already under a deprecation warning
	// and it's not even released so probably better to not define it.
	type Dispatch<A> = (value: A) => void;
	// Since action _can_ be undefined, dispatch may be called without any parameters.
	type DispatchWithoutAction = () => void;
	// Unlike redux, the actions _can_ be anything
	type Reducer<S, A> = (prevState: S, action: A) => S;
	// If useReducer accepts a reducer without action, dispatch may be called without any parameters.
	type ReducerWithoutAction<S> = (prevState: S) => S;
	// types used to try and prevent the compiler from reducing S
	// to a supertype common with the second argument to useReducer()
	type ReducerState<R extends Reducer<any, any>> = R extends Reducer<infer S, any> ? S : never;
	type ReducerAction<R extends Reducer<any, any>> = R extends Reducer<any, infer A> ? A : never;
	// The identity check is done with the SameValue algorithm (Object.is), which is stricter than ===
	type ReducerStateWithoutAction<R extends ReducerWithoutAction<any>> = R extends ReducerWithoutAction<infer S> ? S : never;
	// TODO (TypeScript 3.0): ReadonlyArray<unknown>
	type DependencyList = ReadonlyArray<any>;
	// NOTE: callbacks are _only_ allowed to return either void, or a destructor.
	// The destructor is itself only allowed to return void.
	type EffectCallback = () => (void | (() => void | undefined));
	interface MutableRefObject<T> {
		current: T;
	}
	// This will technically work if you give a Consumer<T> or Provider<T> but it's deprecated and warns
	/**
	 * Accepts a context object (the value returned from `React.createContext`) and returns the current
	 * context value, as given by the nearest context provider for the given context.
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#usecontext
	 */
	function useContext<T>(context: Context<T> /*, (not public API) observedBits?: number|boolean */): T;
	/**
	 * Returns a stateful value, and a function to update it.
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#usestate
	 */
	function useState<S>(initialState: S | (() => S)): [
		S,
		Dispatch<SetStateAction<S>>
	];
	// convenience overload when first argument is ommitted
	/**
	 * Returns a stateful value, and a function to update it.
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#usestate
	 */
	function useState<S = undefined>(): [
		S | undefined,
		Dispatch<SetStateAction<S | undefined>>
	];
	/**
	 * An alternative to `useState`.
	 *
	 * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
	 * multiple sub-values. It also lets you optimize performance for components that trigger deep
	 * updates because you can pass `dispatch` down instead of callbacks.
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#usereducer
	 */
	// overload where dispatch could accept 0 arguments.
	function useReducer<R extends ReducerWithoutAction<any>, I>(reducer: R, initializerArg: I, initializer: (arg: I) => ReducerStateWithoutAction<R>): [
		ReducerStateWithoutAction<R>,
		DispatchWithoutAction
	];
	/**
	 * An alternative to `useState`.
	 *
	 * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
	 * multiple sub-values. It also lets you optimize performance for components that trigger deep
	 * updates because you can pass `dispatch` down instead of callbacks.
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#usereducer
	 */
	// overload where dispatch could accept 0 arguments.
	function useReducer<R extends ReducerWithoutAction<any>>(reducer: R, initializerArg: ReducerStateWithoutAction<R>, initializer?: undefined): [
		ReducerStateWithoutAction<R>,
		DispatchWithoutAction
	];
	/**
	 * An alternative to `useState`.
	 *
	 * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
	 * multiple sub-values. It also lets you optimize performance for components that trigger deep
	 * updates because you can pass `dispatch` down instead of callbacks.
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#usereducer
	 */
	// overload where "I" may be a subset of ReducerState<R>; used to provide autocompletion.
	// If "I" matches ReducerState<R> exactly then the last overload will allow initializer to be ommitted.
	// the last overload effectively behaves as if the identity function (x => x) is the initializer.
	function useReducer<R extends Reducer<any, any>, I>(reducer: R, initializerArg: I & ReducerState<R>, initializer: (arg: I & ReducerState<R>) => ReducerState<R>): [
		ReducerState<R>,
		Dispatch<ReducerAction<R>>
	];
	/**
	 * An alternative to `useState`.
	 *
	 * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
	 * multiple sub-values. It also lets you optimize performance for components that trigger deep
	 * updates because you can pass `dispatch` down instead of callbacks.
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#usereducer
	 */
	// overload for free "I"; all goes as long as initializer converts it into "ReducerState<R>".
	function useReducer<R extends Reducer<any, any>, I>(reducer: R, initializerArg: I, initializer: (arg: I) => ReducerState<R>): [
		ReducerState<R>,
		Dispatch<ReducerAction<R>>
	];
	/**
	 * An alternative to `useState`.
	 *
	 * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
	 * multiple sub-values. It also lets you optimize performance for components that trigger deep
	 * updates because you can pass `dispatch` down instead of callbacks.
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#usereducer
	 */
	// I'm not sure if I keep this 2-ary or if I make it (2,3)-ary; it's currently (2,3)-ary.
	// The Flow types do have an overload for 3-ary invocation with undefined initializer.
	// NOTE: without the ReducerState indirection, TypeScript would reduce S to be the most common
	// supertype between the reducer's return type and the initialState (or the initializer's return type),
	// which would prevent autocompletion from ever working.
	// TODO: double-check if this weird overload logic is necessary. It is possible it's either a bug
	// in older versions, or a regression in newer versions of the typescript completion service.
	function useReducer<R extends Reducer<any, any>>(reducer: R, initialState: ReducerState<R>, initializer?: undefined): [
		ReducerState<R>,
		Dispatch<ReducerAction<R>>
	];
	/**
	 * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument
	 * (`initialValue`). The returned object will persist for the full lifetime of the component.
	 *
	 * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable
	 * value around similar to how you’d use instance fields in classes.
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#useref
	 */
	// TODO (TypeScript 3.0): <T extends unknown>
	function useRef<T>(initialValue: T): MutableRefObject<T>;
	// convenience overload for refs given as a ref prop as they typically start with a null value
	/**
	 * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument
	 * (`initialValue`). The returned object will persist for the full lifetime of the component.
	 *
	 * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable
	 * value around similar to how you’d use instance fields in classes.
	 *
	 * Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type
	 * of the generic argument.
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#useref
	 */
	// TODO (TypeScript 3.0): <T extends unknown>
	function useRef<T>(initialValue: T | null): RefObject<T>;
	// convenience overload for potentially undefined initialValue / call with 0 arguments
	// has a default to stop it from defaulting to {} instead
	/**
	 * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument
	 * (`initialValue`). The returned object will persist for the full lifetime of the component.
	 *
	 * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable
	 * value around similar to how you’d use instance fields in classes.
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#useref
	 */
	// TODO (TypeScript 3.0): <T extends unknown>
	function useRef<T = undefined>(): MutableRefObject<T | undefined>;
	/**
	 * The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.
	 * Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside
	 * `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.
	 *
	 * Prefer the standard `useEffect` when possible to avoid blocking visual updates.
	 *
	 * If you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as
	 * `componentDidMount` and `componentDidUpdate`.
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#uselayouteffect
	 */
	function useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void;
	/**
	 * Accepts a function that contains imperative, possibly effectful code.
	 *
	 * @param effect Imperative function that can return a cleanup function
	 * @param deps If present, effect will only activate if the values in the list change.
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#useeffect
	 */
	function useEffect(effect: EffectCallback, deps?: DependencyList): void;
	// NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>
	/**
	 * `useImperativeHandle` customizes the instance value that is exposed to parent components when using
	 * `ref`. As always, imperative code using refs should be avoided in most cases.
	 *
	 * `useImperativeHandle` should be used with `React.forwardRef`.
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#useimperativehandle
	 */
	function useImperativeHandle<T, R extends T>(ref: Ref<T> | undefined, init: () => R, deps?: DependencyList): void;
	// I made 'inputs' required here and in useMemo as there's no point to memoizing without the memoization key
	// useCallback(X) is identical to just using X, useMemo(() => Y) is identical to just using Y.
	/**
	 * `useCallback` will return a memoized version of the callback that only changes if one of the `inputs`
	 * has changed.
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#usecallback
	 */
	// TODO (TypeScript 3.0): <T extends (...args: never[]) => unknown>
	function useCallback<T extends (...args: any[]) => any>(callback: T, deps: DependencyList): T;
	/**
	 * `useMemo` will only recompute the memoized value when one of the `deps` has changed.
	 *
	 * Usage note: if calling `useMemo` with a referentially stable function, also give it as the input in
	 * the second argument.
	 *
	 * ```ts
	 * function expensive () { ... }
	 *
	 * function Component () {
	 *   const expensiveResult = useMemo(expensive, [expensive])
	 *   return ...
	 * }
	 * ```
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#usememo
	 */
	// allow undefined, but don't make it optional as that is very likely a mistake
	function useMemo<T>(factory: () => T, deps: DependencyList | undefined): T;
	/**
	 * `useDebugValue` can be used to display a label for custom hooks in React DevTools.
	 *
	 * NOTE: We don’t recommend adding debug values to every custom hook.
	 * It’s most valuable for custom hooks that are part of shared libraries.
	 *
	 * @version 16.8.0
	 * @see https://reactjs.org/docs/hooks-reference.html#usedebugvalue
	 */
	// the name of the custom hook is itself derived from the function name at runtime:
	// it's just the function name without the "use" prefix.
	function useDebugValue<T>(value: T, format?: (value: T) => any): void;
	//
	// Event System
	// ----------------------------------------------------------------------
	// TODO: change any to unknown when moving to TS v3
	interface BaseSyntheticEvent<E = object, C = any, T = any> {
		nativeEvent: E;
		currentTarget: C;
		target: T;
		bubbles: boolean;
		cancelable: boolean;
		defaultPrevented: boolean;
		eventPhase: number;
		isTrusted: boolean;
		preventDefault(): void;
		isDefaultPrevented(): boolean;
		stopPropagation(): void;
		isPropagationStopped(): boolean;
		persist(): void;
		timeStamp: number;
		type: string;
	}
	/**
	 * currentTarget - a reference to the element on which the event listener is registered.
	 *
	 * target - a reference to the element from which the event was originally dispatched.
	 * This might be a child element to the element on which the event listener is registered.
	 * If you thought this should be `EventTarget & T`, see https://github.com/DefinitelyTyped/DefinitelyTyped/pull/12239
	 */
	interface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {
	}
	interface ClipboardEvent<T = Element> extends SyntheticEvent<T, NativeClipboardEvent> {
		clipboardData: DataTransfer;
	}
	interface CompositionEvent<T = Element> extends SyntheticEvent<T, NativeCompositionEvent> {
		data: string;
	}
	interface DragEvent<T = Element> extends MouseEvent<T, NativeDragEvent> {
		dataTransfer: DataTransfer;
	}
	interface PointerEvent<T = Element> extends MouseEvent<T, NativePointerEvent> {
		pointerId: number;
		pressure: number;
		tiltX: number;
		tiltY: number;
		width: number;
		height: number;
		pointerType: "mouse" | "pen" | "touch";
		isPrimary: boolean;
	}
	interface FocusEvent<T = Element> extends SyntheticEvent<T, NativeFocusEvent> {
		relatedTarget: EventTarget | null;
		target: EventTarget & T;
	}
	// tslint:disable-next-line:no-empty-interface
	interface FormEvent<T = Element> extends SyntheticEvent<T> {
	}
	interface InvalidEvent<T = Element> extends SyntheticEvent<T> {
		target: EventTarget & T;
	}
	interface ChangeEvent<T = Element> extends SyntheticEvent<T> {
		target: EventTarget & T;
	}
	interface KeyboardEvent<T = Element> extends SyntheticEvent<T, NativeKeyboardEvent> {
		altKey: boolean;
		charCode: number;
		ctrlKey: boolean;
		/**
		 * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.
		 */
		getModifierState(key: string): boolean;
		/**
		 * See the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values). for possible values
		 */
		key: string;
		keyCode: number;
		locale: string;
		location: number;
		metaKey: boolean;
		repeat: boolean;
		shiftKey: boolean;
		which: number;
	}
	interface MouseEvent<T = Element, E = NativeMouseEvent> extends SyntheticEvent<T, E> {
		altKey: boolean;
		button: number;
		buttons: number;
		clientX: number;
		clientY: number;
		ctrlKey: boolean;
		/**
		 * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.
		 */
		getModifierState(key: string): boolean;
		metaKey: boolean;
		movementX: number;
		movementY: number;
		pageX: number;
		pageY: number;
		relatedTarget: EventTarget | null;
		screenX: number;
		screenY: number;
		shiftKey: boolean;
	}
	interface TouchEvent<T = Element> extends SyntheticEvent<T, NativeTouchEvent> {
		altKey: boolean;
		changedTouches: TouchList;
		ctrlKey: boolean;
		/**
		 * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.
		 */
		getModifierState(key: string): boolean;
		metaKey: boolean;
		shiftKey: boolean;
		targetTouches: TouchList;
		touches: TouchList;
	}
	interface UIEvent<T = Element> extends SyntheticEvent<T, NativeUIEvent> {
		detail: number;
		view: AbstractView;
	}
	interface WheelEvent<T = Element> extends MouseEvent<T, NativeWheelEvent> {
		deltaMode: number;
		deltaX: number;
		deltaY: number;
		deltaZ: number;
	}
	interface AnimationEvent<T = Element> extends SyntheticEvent<T, NativeAnimationEvent> {
		animationName: string;
		elapsedTime: number;
		pseudoElement: string;
	}
	interface TransitionEvent<T = Element> extends SyntheticEvent<T, NativeTransitionEvent> {
		elapsedTime: number;
		propertyName: string;
		pseudoElement: string;
	}
	//
	// Event Handler Types
	// ----------------------------------------------------------------------
	type EventHandler<E extends SyntheticEvent<any>> = {
		bivarianceHack(event: E): void;
	}["bivarianceHack"];
	type ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;
	type ClipboardEventHandler<T = Element> = EventHandler<ClipboardEvent<T>>;
	type CompositionEventHandler<T = Element> = EventHandler<CompositionEvent<T>>;
	type DragEventHandler<T = Element> = EventHandler<DragEvent<T>>;
	type FocusEventHandler<T = Element> = EventHandler<FocusEvent<T>>;
	type FormEventHandler<T = Element> = EventHandler<FormEvent<T>>;
	type ChangeEventHandler<T = Element> = EventHandler<ChangeEvent<T>>;
	type KeyboardEventHandler<T = Element> = EventHandler<KeyboardEvent<T>>;
	type MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;
	type TouchEventHandler<T = Element> = EventHandler<TouchEvent<T>>;
	type PointerEventHandler<T = Element> = EventHandler<PointerEvent<T>>;
	type UIEventHandler<T = Element> = EventHandler<UIEvent<T>>;
	type WheelEventHandler<T = Element> = EventHandler<WheelEvent<T>>;
	type AnimationEventHandler<T = Element> = EventHandler<AnimationEvent<T>>;
	type TransitionEventHandler<T = Element> = EventHandler<TransitionEvent<T>>;
	//
	// Props / DOM Attributes
	// ----------------------------------------------------------------------
	/**
	 * @deprecated. This was used to allow clients to pass `ref` and `key`
	 * to `createElement`, which is no longer necessary due to intersection
	 * types. If you need to declare a props object before passing it to
	 * `createElement` or a factory, use `ClassAttributes<T>`:
	 *
	 * ```ts
	 * var b: Button | null;
	 * var props: ButtonProps & ClassAttributes<Button> = {
	 *     ref: b => button = b, // ok!
	 *     label: "I'm a Button"
	 * };
	 * ```
	 */
	interface Props<T> {
		children?: ReactNode;
		key?: Key;
		ref?: LegacyRef<T>;
	}
	interface HTMLProps<T> extends AllHTMLAttributes<T>, ClassAttributes<T> {
	}
	type DetailedHTMLProps<E extends HTMLAttributes<T>, T> = ClassAttributes<T> & E;
	interface SVGProps<T> extends SVGAttributes<T>, ClassAttributes<T> {
	}
	interface DOMAttributes<T> {
		children?: ReactNode;
		dangerouslySetInnerHTML?: {
			__html: string;
		};
		// Clipboard Events
		onCopy?: ClipboardEventHandler<T>;
		onCopyCapture?: ClipboardEventHandler<T>;
		onCut?: ClipboardEventHandler<T>;
		onCutCapture?: ClipboardEventHandler<T>;
		onPaste?: ClipboardEventHandler<T>;
		onPasteCapture?: ClipboardEventHandler<T>;
		// Composition Events
		onCompositionEnd?: CompositionEventHandler<T>;
		onCompositionEndCapture?: CompositionEventHandler<T>;
		onCompositionStart?: CompositionEventHandler<T>;
		onCompositionStartCapture?: CompositionEventHandler<T>;
		onCompositionUpdate?: CompositionEventHandler<T>;
		onCompositionUpdateCapture?: CompositionEventHandler<T>;
		// Focus Events
		onFocus?: FocusEventHandler<T>;
		onFocusCapture?: FocusEventHandler<T>;
		onBlur?: FocusEventHandler<T>;
		onBlurCapture?: FocusEventHandler<T>;
		// Form Events
		onChange?: FormEventHandler<T>;
		onChangeCapture?: FormEventHandler<T>;
		onBeforeInput?: FormEventHandler<T>;
		onBeforeInputCapture?: FormEventHandler<T>;
		onInput?: FormEventHandler<T>;
		onInputCapture?: FormEventHandler<T>;
		onReset?: FormEventHandler<T>;
		onResetCapture?: FormEventHandler<T>;
		onSubmit?: FormEventHandler<T>;
		onSubmitCapture?: FormEventHandler<T>;
		onInvalid?: FormEventHandler<T>;
		onInvalidCapture?: FormEventHandler<T>;
		// Image Events
		onLoad?: ReactEventHandler<T>;
		onLoadCapture?: ReactEventHandler<T>;
		onError?: ReactEventHandler<T>; // also a Media Event
		onErrorCapture?: ReactEventHandler<T>; // also a Media Event
		// Keyboard Events
		onKeyDown?: KeyboardEventHandler<T>;
		onKeyDownCapture?: KeyboardEventHandler<T>;
		onKeyPress?: KeyboardEventHandler<T>;
		onKeyPressCapture?: KeyboardEventHandler<T>;
		onKeyUp?: KeyboardEventHandler<T>;
		onKeyUpCapture?: KeyboardEventHandler<T>;
		// Media Events
		onAbort?: ReactEventHandler<T>;
		onAbortCapture?: ReactEventHandler<T>;
		onCanPlay?: ReactEventHandler<T>;
		onCanPlayCapture?: ReactEventHandler<T>;
		onCanPlayThrough?: ReactEventHandler<T>;
		onCanPlayThroughCapture?: ReactEventHandler<T>;
		onDurationChange?: ReactEventHandler<T>;
		onDurationChangeCapture?: ReactEventHandler<T>;
		onEmptied?: ReactEventHandler<T>;
		onEmptiedCapture?: ReactEventHandler<T>;
		onEncrypted?: ReactEventHandler<T>;
		onEncryptedCapture?: ReactEventHandler<T>;
		onEnded?: ReactEventHandler<T>;
		onEndedCapture?: ReactEventHandler<T>;
		onLoadedData?: ReactEventHandler<T>;
		onLoadedDataCapture?: ReactEventHandler<T>;
		onLoadedMetadata?: ReactEventHandler<T>;
		onLoadedMetadataCapture?: ReactEventHandler<T>;
		onLoadStart?: ReactEventHandler<T>;
		onLoadStartCapture?: ReactEventHandler<T>;
		onPause?: ReactEventHandler<T>;
		onPauseCapture?: ReactEventHandler<T>;
		onPlay?: ReactEventHandler<T>;
		onPlayCapture?: ReactEventHandler<T>;
		onPlaying?: ReactEventHandler<T>;
		onPlayingCapture?: ReactEventHandler<T>;
		onProgress?: ReactEventHandler<T>;
		onProgressCapture?: ReactEventHandler<T>;
		onRateChange?: ReactEventHandler<T>;
		onRateChangeCapture?: ReactEventHandler<T>;
		onSeeked?: ReactEventHandler<T>;
		onSeekedCapture?: ReactEventHandler<T>;
		onSeeking?: ReactEventHandler<T>;
		onSeekingCapture?: ReactEventHandler<T>;
		onStalled?: ReactEventHandler<T>;
		onStalledCapture?: ReactEventHandler<T>;
		onSuspend?: ReactEventHandler<T>;
		onSuspendCapture?: ReactEventHandler<T>;
		onTimeUpdate?: ReactEventHandler<T>;
		onTimeUpdateCapture?: ReactEventHandler<T>;
		onVolumeChange?: ReactEventHandler<T>;
		onVolumeChangeCapture?: ReactEventHandler<T>;
		onWaiting?: ReactEventHandler<T>;
		onWaitingCapture?: ReactEventHandler<T>;
		// MouseEvents
		onAuxClick?: MouseEventHandler<T>;
		onAuxClickCapture?: MouseEventHandler<T>;
		onClick?: MouseEventHandler<T>;
		onClickCapture?: MouseEventHandler<T>;
		onContextMenu?: MouseEventHandler<T>;
		onContextMenuCapture?: MouseEventHandler<T>;
		onDoubleClick?: MouseEventHandler<T>;
		onDoubleClickCapture?: MouseEventHandler<T>;
		onDrag?: DragEventHandler<T>;
		onDragCapture?: DragEventHandler<T>;
		onDragEnd?: DragEventHandler<T>;
		onDragEndCapture?: DragEventHandler<T>;
		onDragEnter?: DragEventHandler<T>;
		onDragEnterCapture?: DragEventHandler<T>;
		onDragExit?: DragEventHandler<T>;
		onDragExitCapture?: DragEventHandler<T>;
		onDragLeave?: DragEventHandler<T>;
		onDragLeaveCapture?: DragEventHandler<T>;
		onDragOver?: DragEventHandler<T>;
		onDragOverCapture?: DragEventHandler<T>;
		onDragStart?: DragEventHandler<T>;
		onDragStartCapture?: DragEventHandler<T>;
		onDrop?: DragEventHandler<T>;
		onDropCapture?: DragEventHandler<T>;
		onMouseDown?: MouseEventHandler<T>;
		onMouseDownCapture?: MouseEventHandler<T>;
		onMouseEnter?: MouseEventHandler<T>;
		onMouseLeave?: MouseEventHandler<T>;
		onMouseMove?: MouseEventHandler<T>;
		onMouseMoveCapture?: MouseEventHandler<T>;
		onMouseOut?: MouseEventHandler<T>;
		onMouseOutCapture?: MouseEventHandler<T>;
		onMouseOver?: MouseEventHandler<T>;
		onMouseOverCapture?: MouseEventHandler<T>;
		onMouseUp?: MouseEventHandler<T>;
		onMouseUpCapture?: MouseEventHandler<T>;
		// Selection Events
		onSelect?: ReactEventHandler<T>;
		onSelectCapture?: ReactEventHandler<T>;
		// Touch Events
		onTouchCancel?: TouchEventHandler<T>;
		onTouchCancelCapture?: TouchEventHandler<T>;
		onTouchEnd?: TouchEventHandler<T>;
		onTouchEndCapture?: TouchEventHandler<T>;
		onTouchMove?: TouchEventHandler<T>;
		onTouchMoveCapture?: TouchEventHandler<T>;
		onTouchStart?: TouchEventHandler<T>;
		onTouchStartCapture?: TouchEventHandler<T>;
		// Pointer Events
		onPointerDown?: PointerEventHandler<T>;
		onPointerDownCapture?: PointerEventHandler<T>;
		onPointerMove?: PointerEventHandler<T>;
		onPointerMoveCapture?: PointerEventHandler<T>;
		onPointerUp?: PointerEventHandler<T>;
		onPointerUpCapture?: PointerEventHandler<T>;
		onPointerCancel?: PointerEventHandler<T>;
		onPointerCancelCapture?: PointerEventHandler<T>;
		onPointerEnter?: PointerEventHandler<T>;
		onPointerEnterCapture?: PointerEventHandler<T>;
		onPointerLeave?: PointerEventHandler<T>;
		onPointerLeaveCapture?: PointerEventHandler<T>;
		onPointerOver?: PointerEventHandler<T>;
		onPointerOverCapture?: PointerEventHandler<T>;
		onPointerOut?: PointerEventHandler<T>;
		onPointerOutCapture?: PointerEventHandler<T>;
		onGotPointerCapture?: PointerEventHandler<T>;
		onGotPointerCaptureCapture?: PointerEventHandler<T>;
		onLostPointerCapture?: PointerEventHandler<T>;
		onLostPointerCaptureCapture?: PointerEventHandler<T>;
		// UI Events
		onScroll?: UIEventHandler<T>;
		onScrollCapture?: UIEventHandler<T>;
		// Wheel Events
		onWheel?: WheelEventHandler<T>;
		onWheelCapture?: WheelEventHandler<T>;
		// Animation Events
		onAnimationStart?: AnimationEventHandler<T>;
		onAnimationStartCapture?: AnimationEventHandler<T>;
		onAnimationEnd?: AnimationEventHandler<T>;
		onAnimationEndCapture?: AnimationEventHandler<T>;
		onAnimationIteration?: AnimationEventHandler<T>;
		onAnimationIterationCapture?: AnimationEventHandler<T>;
		// Transition Events
		onTransitionEnd?: TransitionEventHandler<T>;
		onTransitionEndCapture?: TransitionEventHandler<T>;
	}
	export interface CSSProperties extends CSS.Properties<string | number> {
	}
	// All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/
	interface AriaAttributes {
		/** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */
		"aria-activedescendant"?: string;
		/** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */
		"aria-atomic"?: boolean | "false" | "true";
		/**
		 * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
		 * presented if they are made.
		 */
		"aria-autocomplete"?: "none" | "inline" | "list" | "both";
		/** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */
		"aria-busy"?: boolean | "false" | "true";
		/**
		 * Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
		 * @see aria-pressed @see aria-selected.
		 */
		"aria-checked"?: boolean | "false" | "mixed" | "true";
		/**
		 * Defines the total number of columns in a table, grid, or treegrid.
		 * @see aria-colindex.
		 */
		"aria-colcount"?: number;
		/**
		 * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
		 * @see aria-colcount @see aria-colspan.
		 */
		"aria-colindex"?: number;
		/**
		 * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
		 * @see aria-colindex @see aria-rowspan.
		 */
		"aria-colspan"?: number;
		/**
		 * Identifies the element (or elements) whose contents or presence are controlled by the current element.
		 * @see aria-owns.
		 */
		"aria-controls"?: string;
		/** Indicates the element that represents the current item within a container or set of related elements. */
		"aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time";
		/**
		 * Identifies the element (or elements) that describes the object.
		 * @see aria-labelledby
		 */
		"aria-describedby"?: string;
		/**
		 * Identifies the element that provides a detailed, extended description for the object.
		 * @see aria-describedby.
		 */
		"aria-details"?: string;
		/**
		 * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
		 * @see aria-hidden @see aria-readonly.
		 */
		"aria-disabled"?: boolean | "false" | "true";
		/**
		 * Indicates what functions can be performed when a dragged object is released on the drop target.
		 * @deprecated in ARIA 1.1
		 */
		"aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup";
		/**
		 * Identifies the element that provides an error message for the object.
		 * @see aria-invalid @see aria-describedby.
		 */
		"aria-errormessage"?: string;
		/** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */
		"aria-expanded"?: boolean | "false" | "true";
		/**
		 * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
		 * allows assistive technology to override the general default of reading in document source order.
		 */
		"aria-flowto"?: string;
		/**
		 * Indicates an element's "grabbed" state in a drag-and-drop operation.
		 * @deprecated in ARIA 1.1
		 */
		"aria-grabbed"?: boolean | "false" | "true";
		/** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */
		"aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog";
		/**
		 * Indicates whether the element is exposed to an accessibility API.
		 * @see aria-disabled.
		 */
		"aria-hidden"?: boolean | "false" | "true";
		/**
		 * Indicates the entered value does not conform to the format expected by the application.
		 * @see aria-errormessage.
		 */
		"aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling";
		/** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */
		"aria-keyshortcuts"?: string;
		/**
		 * Defines a string value that labels the current element.
		 * @see aria-labelledby.
		 */
		"aria-label"?: string;
		/**
		 * Identifies the element (or elements) that labels the current element.
		 * @see aria-describedby.
		 */
		"aria-labelledby"?: string;
		/** Defines the hierarchical level of an element within a structure. */
		"aria-level"?: number;
		/** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */
		"aria-live"?: "off" | "assertive" | "polite";
		/** Indicates whether an element is modal when displayed. */
		"aria-modal"?: boolean | "false" | "true";
		/** Indicates whether a text box accepts multiple lines of input or only a single line. */
		"aria-multiline"?: boolean | "false" | "true";
		/** Indicates that the user may select more than one item from the current selectable descendants. */
		"aria-multiselectable"?: boolean | "false" | "true";
		/** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */
		"aria-orientation"?: "horizontal" | "vertical";
		/**
		 * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
		 * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
		 * @see aria-controls.
		 */
		"aria-owns"?: string;
		/**
		 * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
		 * A hint could be a sample value or a brief description of the expected format.
		 */
		"aria-placeholder"?: string;
		/**
		 * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
		 * @see aria-setsize.
		 */
		"aria-posinset"?: number;
		/**
		 * Indicates the current "pressed" state of toggle buttons.
		 * @see aria-checked @see aria-selected.
		 */
		"aria-pressed"?: boolean | "false" | "mixed" | "true";
		/**
		 * Indicates that the element is not editable, but is otherwise operable.
		 * @see aria-disabled.
		 */
		"aria-readonly"?: boolean | "false" | "true";
		/**
		 * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
		 * @see aria-atomic.
		 */
		"aria-relevant"?: "additions" | "additions text" | "all" | "removals" | "text";
		/** Indicates that user input is required on the element before a form may be submitted. */
		"aria-required"?: boolean | "false" | "true";
		/** Defines a human-readable, author-localized description for the role of an element. */
		"aria-roledescription"?: string;
		/**
		 * Defines the total number of rows in a table, grid, or treegrid.
		 * @see aria-rowindex.
		 */
		"aria-rowcount"?: number;
		/**
		 * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
		 * @see aria-rowcount @see aria-rowspan.
		 */
		"aria-rowindex"?: number;
		/**
		 * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
		 * @see aria-rowindex @see aria-colspan.
		 */
		"aria-rowspan"?: number;
		/**
		 * Indicates the current "selected" state of various widgets.
		 * @see aria-checked @see aria-pressed.
		 */
		"aria-selected"?: boolean | "false" | "true";
		/**
		 * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
		 * @see aria-posinset.
		 */
		"aria-setsize"?: number;
		/** Indicates if items in a table or grid are sorted in ascending or descending order. */
		"aria-sort"?: "none" | "ascending" | "descending" | "other";
		/** Defines the maximum allowed value for a range widget. */
		"aria-valuemax"?: number;
		/** Defines the minimum allowed value for a range widget. */
		"aria-valuemin"?: number;
		/**
		 * Defines the current value for a range widget.
		 * @see aria-valuetext.
		 */
		"aria-valuenow"?: number;
		/** Defines the human readable text alternative of aria-valuenow for a range widget. */
		"aria-valuetext"?: string;
	}
	interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {
		// React-specific Attributes
		defaultChecked?: boolean;
		defaultValue?: string | number | string[];
		suppressContentEditableWarning?: boolean;
		suppressHydrationWarning?: boolean;
		// Standard HTML Attributes
		accessKey?: string;
		className?: string;
		contentEditable?: Booleanish | "inherit";
		contextMenu?: string;
		dir?: string;
		draggable?: Booleanish;
		hidden?: boolean;
		id?: string;
		lang?: string;
		placeholder?: string;
		slot?: string;
		spellCheck?: Booleanish;
		style?: CSSProperties;
		tabIndex?: number;
		title?: string;
		translate?: "yes" | "no";
		// Unknown
		radioGroup?: string; // <command>, <menuitem>
		// WAI-ARIA
		role?: string;
		// RDFa Attributes
		about?: string;
		datatype?: string;
		inlist?: any;
		prefix?: string;
		property?: string;
		resource?: string;
		typeof?: string;
		vocab?: string;
		// Non-standard Attributes
		autoCapitalize?: string;
		autoCorrect?: string;
		autoSave?: string;
		color?: string;
		itemProp?: string;
		itemScope?: boolean;
		itemType?: string;
		itemID?: string;
		itemRef?: string;
		results?: number;
		security?: string;
		unselectable?: "on" | "off";
		// Living Standard
		/**
		 * Hints at the type of data that might be entered by the user while editing the element or its contents
		 * @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute
		 */
		inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search";
		/**
		 * Specify that a standard HTML element should behave like a defined custom built-in element
		 * @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is
		 */
		is?: string;
	}
	interface AllHTMLAttributes<T> extends HTMLAttributes<T> {
		// Standard HTML Attributes
		accept?: string;
		acceptCharset?: string;
		action?: string;
		allowFullScreen?: boolean;
		allowTransparency?: boolean;
		alt?: string;
		as?: string;
		async?: boolean;
		autoComplete?: string;
		autoFocus?: boolean;
		autoPlay?: boolean;
		capture?: boolean | string;
		cellPadding?: number | string;
		cellSpacing?: number | string;
		charSet?: string;
		challenge?: string;
		checked?: boolean;
		cite?: string;
		classID?: string;
		cols?: number;
		colSpan?: number;
		content?: string;
		controls?: boolean;
		coords?: string;
		crossOrigin?: string;
		data?: string;
		dateTime?: string;
		default?: boolean;
		defer?: boolean;
		disabled?: boolean;
		download?: any;
		encType?: string;
		form?: string;
		formAction?: string;
		formEncType?: string;
		formMethod?: string;
		formNoValidate?: boolean;
		formTarget?: string;
		frameBorder?: number | string;
		headers?: string;
		height?: number | string;
		high?: number;
		href?: string;
		hrefLang?: string;
		htmlFor?: string;
		httpEquiv?: string;
		integrity?: string;
		keyParams?: string;
		keyType?: string;
		kind?: string;
		label?: string;
		list?: string;
		loop?: boolean;
		low?: number;
		manifest?: string;
		marginHeight?: number;
		marginWidth?: number;
		max?: number | string;
		maxLength?: number;
		media?: string;
		mediaGroup?: string;
		method?: string;
		min?: number | string;
		minLength?: number;
		multiple?: boolean;
		muted?: boolean;
		name?: string;
		nonce?: string;
		noValidate?: boolean;
		open?: boolean;
		optimum?: number;
		pattern?: string;
		placeholder?: string;
		playsInline?: boolean;
		poster?: string;
		preload?: string;
		readOnly?: boolean;
		rel?: string;
		required?: boolean;
		reversed?: boolean;
		rows?: number;
		rowSpan?: number;
		sandbox?: string;
		scope?: string;
		scoped?: boolean;
		scrolling?: string;
		seamless?: boolean;
		selected?: boolean;
		shape?: string;
		size?: number;
		sizes?: string;
		span?: number;
		src?: string;
		srcDoc?: string;
		srcLang?: string;
		srcSet?: string;
		start?: number;
		step?: number | string;
		summary?: string;
		target?: string;
		type?: string;
		useMap?: string;
		value?: string | string[] | number;
		width?: number | string;
		wmode?: string;
		wrap?: string;
	}
	interface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {
		download?: any;
		href?: string;
		hrefLang?: string;
		media?: string;
		ping?: string;
		rel?: string;
		target?: string;
		type?: string;
		referrerPolicy?: string;
	}
	// tslint:disable-next-line:no-empty-interface
	interface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {
	}
	interface AreaHTMLAttributes<T> extends HTMLAttributes<T> {
		alt?: string;
		coords?: string;
		download?: any;
		href?: string;
		hrefLang?: string;
		media?: string;
		rel?: string;
		shape?: string;
		target?: string;
	}
	interface BaseHTMLAttributes<T> extends HTMLAttributes<T> {
		href?: string;
		target?: string;
	}
	interface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {
		cite?: string;
	}
	interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {
		autoFocus?: boolean;
		disabled?: boolean;
		form?: string;
		formAction?: string;
		formEncType?: string;
		formMethod?: string;
		formNoValidate?: boolean;
		formTarget?: string;
		name?: string;
		type?: "submit" | "reset" | "button";
		value?: string | string[] | number;
	}
	interface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {
		height?: number | string;
		width?: number | string;
	}
	interface ColHTMLAttributes<T> extends HTMLAttributes<T> {
		span?: number;
		width?: number | string;
	}
	interface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {
		span?: number;
	}
	interface DataHTMLAttributes<T> extends HTMLAttributes<T> {
		value?: string | string[] | number;
	}
	interface DetailsHTMLAttributes<T> extends HTMLAttributes<T> {
		open?: boolean;
	}
	interface DelHTMLAttributes<T> extends HTMLAttributes<T> {
		cite?: string;
		dateTime?: string;
	}
	interface DialogHTMLAttributes<T> extends HTMLAttributes<T> {
		open?: boolean;
	}
	interface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {
		height?: number | string;
		src?: string;
		type?: string;
		width?: number | string;
	}
	interface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {
		disabled?: boolean;
		form?: string;
		name?: string;
	}
	interface FormHTMLAttributes<T> extends HTMLAttributes<T> {
		acceptCharset?: string;
		action?: string;
		autoComplete?: string;
		encType?: string;
		method?: string;
		name?: string;
		noValidate?: boolean;
		target?: string;
	}
	interface HtmlHTMLAttributes<T> extends HTMLAttributes<T> {
		manifest?: string;
	}
	interface IframeHTMLAttributes<T> extends HTMLAttributes<T> {
		allow?: string;
		allowFullScreen?: boolean;
		allowTransparency?: boolean;
		frameBorder?: number | string;
		height?: number | string;
		marginHeight?: number;
		marginWidth?: number;
		name?: string;
		referrerPolicy?: string;
		sandbox?: string;
		scrolling?: string;
		seamless?: boolean;
		src?: string;
		srcDoc?: string;
		width?: number | string;
	}
	interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {
		alt?: string;
		crossOrigin?: "anonymous" | "use-credentials" | "";
		decoding?: "async" | "auto" | "sync";
		height?: number | string;
		loading?: "eager" | "lazy";
		referrerPolicy?: "no-referrer" | "origin" | "unsafe-url";
		sizes?: string;
		src?: string;
		srcSet?: string;
		useMap?: string;
		width?: number | string;
	}
	interface InsHTMLAttributes<T> extends HTMLAttributes<T> {
		cite?: string;
		dateTime?: string;
	}
	interface InputHTMLAttributes<T> extends HTMLAttributes<T> {
		accept?: string;
		alt?: string;
		autoComplete?: string;
		autoFocus?: boolean;
		capture?: boolean | string; // https://www.w3.org/TR/html-media-capture/#the-capture-attribute
		checked?: boolean;
		crossOrigin?: string;
		disabled?: boolean;
		form?: string;
		formAction?: string;
		formEncType?: string;
		formMethod?: string;
		formNoValidate?: boolean;
		formTarget?: string;
		height?: number | string;
		list?: string;
		max?: number | string;
		maxLength?: number;
		min?: number | string;
		minLength?: number;
		multiple?: boolean;
		name?: string;
		pattern?: string;
		placeholder?: string;
		readOnly?: boolean;
		required?: boolean;
		size?: number;
		src?: string;
		step?: number | string;
		type?: string;
		value?: string | string[] | number;
		width?: number | string;
		onChange?: ChangeEventHandler<T>;
	}
	interface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {
		autoFocus?: boolean;
		challenge?: string;
		disabled?: boolean;
		form?: string;
		keyType?: string;
		keyParams?: string;
		name?: string;
	}
	interface LabelHTMLAttributes<T> extends HTMLAttributes<T> {
		form?: string;
		htmlFor?: string;
	}
	interface LiHTMLAttributes<T> extends HTMLAttributes<T> {
		value?: string | string[] | number;
	}
	interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {
		as?: string;
		crossOrigin?: string;
		href?: string;
		hrefLang?: string;
		integrity?: string;
		media?: string;
		rel?: string;
		sizes?: string;
		type?: string;
	}
	interface MapHTMLAttributes<T> extends HTMLAttributes<T> {
		name?: string;
	}
	interface MenuHTMLAttributes<T> extends HTMLAttributes<T> {
		type?: string;
	}
	interface MediaHTMLAttributes<T> extends HTMLAttributes<T> {
		autoPlay?: boolean;
		controls?: boolean;
		controlsList?: string;
		crossOrigin?: string;
		loop?: boolean;
		mediaGroup?: string;
		muted?: boolean;
		playsinline?: boolean;
		preload?: string;
		src?: string;
	}
	interface MetaHTMLAttributes<T> extends HTMLAttributes<T> {
		charSet?: string;
		content?: string;
		httpEquiv?: string;
		name?: string;
	}
	interface MeterHTMLAttributes<T> extends HTMLAttributes<T> {
		form?: string;
		high?: number;
		low?: number;
		max?: number | string;
		min?: number | string;
		optimum?: number;
		value?: string | string[] | number;
	}
	interface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {
		cite?: string;
	}
	interface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {
		classID?: string;
		data?: string;
		form?: string;
		height?: number | string;
		name?: string;
		type?: string;
		useMap?: string;
		width?: number | string;
		wmode?: string;
	}
	interface OlHTMLAttributes<T> extends HTMLAttributes<T> {
		reversed?: boolean;
		start?: number;
		type?: "1" | "a" | "A" | "i" | "I";
	}
	interface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {
		disabled?: boolean;
		label?: string;
	}
	interface OptionHTMLAttributes<T> extends HTMLAttributes<T> {
		disabled?: boolean;
		label?: string;
		selected?: boolean;
		value?: string | string[] | number;
	}
	interface OutputHTMLAttributes<T> extends HTMLAttributes<T> {
		form?: string;
		htmlFor?: string;
		name?: string;
	}
	interface ParamHTMLAttributes<T> extends HTMLAttributes<T> {
		name?: string;
		value?: string | string[] | number;
	}
	interface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {
		max?: number | string;
		value?: string | string[] | number;
	}
	interface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {
		async?: boolean;
		charSet?: string;
		crossOrigin?: string;
		defer?: boolean;
		integrity?: string;
		noModule?: boolean;
		nonce?: string;
		src?: string;
		type?: string;
	}
	interface SelectHTMLAttributes<T> extends HTMLAttributes<T> {
		autoComplete?: string;
		autoFocus?: boolean;
		disabled?: boolean;
		form?: string;
		multiple?: boolean;
		name?: string;
		required?: boolean;
		size?: number;
		value?: string | string[] | number;
		onChange?: ChangeEventHandler<T>;
	}
	interface SourceHTMLAttributes<T> extends HTMLAttributes<T> {
		media?: string;
		sizes?: string;
		src?: string;
		srcSet?: string;
		type?: string;
	}
	interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {
		media?: string;
		nonce?: string;
		scoped?: boolean;
		type?: string;
	}
	interface TableHTMLAttributes<T> extends HTMLAttributes<T> {
		cellPadding?: number | string;
		cellSpacing?: number | string;
		summary?: string;
	}
	interface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {
		autoComplete?: string;
		autoFocus?: boolean;
		cols?: number;
		dirName?: string;
		disabled?: boolean;
		form?: string;
		maxLength?: number;
		minLength?: number;
		name?: string;
		placeholder?: string;
		readOnly?: boolean;
		required?: boolean;
		rows?: number;
		value?: string | string[] | number;
		wrap?: string;
		onChange?: ChangeEventHandler<T>;
	}
	interface TdHTMLAttributes<T> extends HTMLAttributes<T> {
		align?: "left" | "center" | "right" | "justify" | "char";
		colSpan?: number;
		headers?: string;
		rowSpan?: number;
		scope?: string;
		abbr?: string;
		valign?: "top" | "middle" | "bottom" | "baseline";
	}
	interface ThHTMLAttributes<T> extends HTMLAttributes<T> {
		align?: "left" | "center" | "right" | "justify" | "char";
		colSpan?: number;
		headers?: string;
		rowSpan?: number;
		scope?: string;
		abbr?: string;
	}
	interface TimeHTMLAttributes<T> extends HTMLAttributes<T> {
		dateTime?: string;
	}
	interface TrackHTMLAttributes<T> extends HTMLAttributes<T> {
		default?: boolean;
		kind?: string;
		label?: string;
		src?: string;
		srcLang?: string;
	}
	interface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {
		height?: number | string;
		playsInline?: boolean;
		poster?: string;
		width?: number | string;
		disablePictureInPicture?: boolean;
	}
	// this list is "complete" in that it contains every SVG attribute
	// that React supports, but the types can be improved.
	// Full list here: https://facebook.github.io/react/docs/dom-elements.html
	//
	// The three broad type categories are (in order of restrictiveness):
	//   - "number | string"
	//   - "string"
	//   - union of string literals
	interface SVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {
		// Attributes which also defined in HTMLAttributes
		// See comment in SVGDOMPropertyConfig.js
		className?: string;
		color?: string;
		height?: number | string;
		id?: string;
		lang?: string;
		max?: number | string;
		media?: string;
		method?: string;
		min?: number | string;
		name?: string;
		style?: CSSProperties;
		target?: string;
		type?: string;
		width?: number | string;
		// Other HTML properties supported by SVG elements in browsers
		role?: string;
		tabIndex?: number;
		crossOrigin?: "anonymous" | "use-credentials" | "";
		// SVG Specific attributes
		accentHeight?: number | string;
		accumulate?: "none" | "sum";
		additive?: "replace" | "sum";
		alignmentBaseline?: "auto" | "baseline" | "before-edge" | "text-before-edge" | "middle" | "central" | "after-edge" | "text-after-edge" | "ideographic" | "alphabetic" | "hanging" | "mathematical" | "inherit";
		allowReorder?: "no" | "yes";
		alphabetic?: number | string;
		amplitude?: number | string;
		arabicForm?: "initial" | "medial" | "terminal" | "isolated";
		ascent?: number | string;
		attributeName?: string;
		attributeType?: string;
		autoReverse?: Booleanish;
		azimuth?: number | string;
		baseFrequency?: number | string;
		baselineShift?: number | string;
		baseProfile?: number | string;
		bbox?: number | string;
		begin?: number | string;
		bias?: number | string;
		by?: number | string;
		calcMode?: number | string;
		capHeight?: number | string;
		clip?: number | string;
		clipPath?: string;
		clipPathUnits?: number | string;
		clipRule?: number | string;
		colorInterpolation?: number | string;
		colorInterpolationFilters?: "auto" | "sRGB" | "linearRGB" | "inherit";
		colorProfile?: number | string;
		colorRendering?: number | string;
		contentScriptType?: number | string;
		contentStyleType?: number | string;
		cursor?: number | string;
		cx?: number | string;
		cy?: number | string;
		d?: string;
		decelerate?: number | string;
		descent?: number | string;
		diffuseConstant?: number | string;
		direction?: number | string;
		display?: number | string;
		divisor?: number | string;
		dominantBaseline?: number | string;
		dur?: number | string;
		dx?: number | string;
		dy?: number | string;
		edgeMode?: number | string;
		elevation?: number | string;
		enableBackground?: number | string;
		end?: number | string;
		exponent?: number | string;
		externalResourcesRequired?: Booleanish;
		fill?: string;
		fillOpacity?: number | string;
		fillRule?: "nonzero" | "evenodd" | "inherit";
		filter?: string;
		filterRes?: number | string;
		filterUnits?: number | string;
		floodColor?: number | string;
		floodOpacity?: number | string;
		focusable?: Booleanish | "auto";
		fontFamily?: string;
		fontSize?: number | string;
		fontSizeAdjust?: number | string;
		fontStretch?: number | string;
		fontStyle?: number | string;
		fontVariant?: number | string;
		fontWeight?: number | string;
		format?: number | string;
		from?: number | string;
		fx?: number | string;
		fy?: number | string;
		g1?: number | string;
		g2?: number | string;
		glyphName?: number | string;
		glyphOrientationHorizontal?: number | string;
		glyphOrientationVertical?: number | string;
		glyphRef?: number | string;
		gradientTransform?: string;
		gradientUnits?: string;
		hanging?: number | string;
		horizAdvX?: number | string;
		horizOriginX?: number | string;
		href?: string;
		ideographic?: number | string;
		imageRendering?: number | string;
		in2?: number | string;
		in?: string;
		intercept?: number | string;
		k1?: number | string;
		k2?: number | string;
		k3?: number | string;
		k4?: number | string;
		k?: number | string;
		kernelMatrix?: number | string;
		kernelUnitLength?: number | string;
		kerning?: number | string;
		keyPoints?: number | string;
		keySplines?: number | string;
		keyTimes?: number | string;
		lengthAdjust?: number | string;
		letterSpacing?: number | string;
		lightingColor?: number | string;
		limitingConeAngle?: number | string;
		local?: number | string;
		markerEnd?: string;
		markerHeight?: number | string;
		markerMid?: string;
		markerStart?: string;
		markerUnits?: number | string;
		markerWidth?: number | string;
		mask?: string;
		maskContentUnits?: number | string;
		maskUnits?: number | string;
		mathematical?: number | string;
		mode?: number | string;
		numOctaves?: number | string;
		offset?: number | string;
		opacity?: number | string;
		operator?: number | string;
		order?: number | string;
		orient?: number | string;
		orientation?: number | string;
		origin?: number | string;
		overflow?: number | string;
		overlinePosition?: number | string;
		overlineThickness?: number | string;
		paintOrder?: number | string;
		panose1?: number | string;
		path?: string;
		pathLength?: number | string;
		patternContentUnits?: string;
		patternTransform?: number | string;
		patternUnits?: string;
		pointerEvents?: number | string;
		points?: string;
		pointsAtX?: number | string;
		pointsAtY?: number | string;
		pointsAtZ?: number | string;
		preserveAlpha?: Booleanish;
		preserveAspectRatio?: string;
		primitiveUnits?: number | string;
		r?: number | string;
		radius?: number | string;
		refX?: number | string;
		refY?: number | string;
		renderingIntent?: number | string;
		repeatCount?: number | string;
		repeatDur?: number | string;
		requiredExtensions?: number | string;
		requiredFeatures?: number | string;
		restart?: number | string;
		result?: string;
		rotate?: number | string;
		rx?: number | string;
		ry?: number | string;
		scale?: number | string;
		seed?: number | string;
		shapeRendering?: number | string;
		slope?: number | string;
		spacing?: number | string;
		specularConstant?: number | string;
		specularExponent?: number | string;
		speed?: number | string;
		spreadMethod?: string;
		startOffset?: number | string;
		stdDeviation?: number | string;
		stemh?: number | string;
		stemv?: number | string;
		stitchTiles?: number | string;
		stopColor?: string;
		stopOpacity?: number | string;
		strikethroughPosition?: number | string;
		strikethroughThickness?: number | string;
		string?: number | string;
		stroke?: string;
		strokeDasharray?: string | number;
		strokeDashoffset?: string | number;
		strokeLinecap?: "butt" | "round" | "square" | "inherit";
		strokeLinejoin?: "miter" | "round" | "bevel" | "inherit";
		strokeMiterlimit?: number | string;
		strokeOpacity?: number | string;
		strokeWidth?: number | string;
		surfaceScale?: number | string;
		systemLanguage?: number | string;
		tableValues?: number | string;
		targetX?: number | string;
		targetY?: number | string;
		textAnchor?: string;
		textDecoration?: number | string;
		textLength?: number | string;
		textRendering?: number | string;
		to?: number | string;
		transform?: string;
		u1?: number | string;
		u2?: number | string;
		underlinePosition?: number | string;
		underlineThickness?: number | string;
		unicode?: number | string;
		unicodeBidi?: number | string;
		unicodeRange?: number | string;
		unitsPerEm?: number | string;
		vAlphabetic?: number | string;
		values?: string;
		vectorEffect?: number | string;
		version?: string;
		vertAdvY?: number | string;
		vertOriginX?: number | string;
		vertOriginY?: number | string;
		vHanging?: number | string;
		vIdeographic?: number | string;
		viewBox?: string;
		viewTarget?: number | string;
		visibility?: number | string;
		vMathematical?: number | string;
		widths?: number | string;
		wordSpacing?: number | string;
		writingMode?: number | string;
		x1?: number | string;
		x2?: number | string;
		x?: number | string;
		xChannelSelector?: string;
		xHeight?: number | string;
		xlinkActuate?: string;
		xlinkArcrole?: string;
		xlinkHref?: string;
		xlinkRole?: string;
		xlinkShow?: string;
		xlinkTitle?: string;
		xlinkType?: string;
		xmlBase?: string;
		xmlLang?: string;
		xmlns?: string;
		xmlnsXlink?: string;
		xmlSpace?: string;
		y1?: number | string;
		y2?: number | string;
		y?: number | string;
		yChannelSelector?: string;
		z?: number | string;
		zoomAndPan?: string;
	}
	interface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {
		allowFullScreen?: boolean;
		allowpopups?: boolean;
		autoFocus?: boolean;
		autosize?: boolean;
		blinkfeatures?: string;
		disableblinkfeatures?: string;
		disableguestresize?: boolean;
		disablewebsecurity?: boolean;
		guestinstance?: string;
		httpreferrer?: string;
		nodeintegration?: boolean;
		partition?: string;
		plugins?: boolean;
		preload?: string;
		src?: string;
		useragent?: string;
		webpreferences?: string;
	}
	//
	// React.DOM
	// ----------------------------------------------------------------------
	interface ReactHTML {
		a: DetailedHTMLFactory<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;
		abbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		address: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		area: DetailedHTMLFactory<AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;
		article: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		aside: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		audio: DetailedHTMLFactory<AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;
		b: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		base: DetailedHTMLFactory<BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;
		bdi: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		bdo: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		big: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		blockquote: DetailedHTMLFactory<BlockquoteHTMLAttributes<HTMLElement>, HTMLElement>;
		body: DetailedHTMLFactory<HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;
		br: DetailedHTMLFactory<HTMLAttributes<HTMLBRElement>, HTMLBRElement>;
		button: DetailedHTMLFactory<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
		canvas: DetailedHTMLFactory<CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;
		caption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		cite: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		code: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		col: DetailedHTMLFactory<ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;
		colgroup: DetailedHTMLFactory<ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;
		data: DetailedHTMLFactory<DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;
		datalist: DetailedHTMLFactory<HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;
		dd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		del: DetailedHTMLFactory<DelHTMLAttributes<HTMLElement>, HTMLElement>;
		details: DetailedHTMLFactory<DetailsHTMLAttributes<HTMLElement>, HTMLElement>;
		dfn: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		dialog: DetailedHTMLFactory<DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;
		div: DetailedHTMLFactory<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;
		dl: DetailedHTMLFactory<HTMLAttributes<HTMLDListElement>, HTMLDListElement>;
		dt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		em: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		embed: DetailedHTMLFactory<EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;
		fieldset: DetailedHTMLFactory<FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;
		figcaption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		figure: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		footer: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		form: DetailedHTMLFactory<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;
		h1: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
		h2: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
		h3: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
		h4: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
		h5: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
		h6: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
		head: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLHeadElement>;
		header: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		hgroup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		hr: DetailedHTMLFactory<HTMLAttributes<HTMLHRElement>, HTMLHRElement>;
		html: DetailedHTMLFactory<HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;
		i: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		iframe: DetailedHTMLFactory<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;
		img: DetailedHTMLFactory<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;
		input: DetailedHTMLFactory<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
		ins: DetailedHTMLFactory<InsHTMLAttributes<HTMLModElement>, HTMLModElement>;
		kbd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		keygen: DetailedHTMLFactory<KeygenHTMLAttributes<HTMLElement>, HTMLElement>;
		label: DetailedHTMLFactory<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
		legend: DetailedHTMLFactory<HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;
		li: DetailedHTMLFactory<LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;
		link: DetailedHTMLFactory<LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;
		main: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		map: DetailedHTMLFactory<MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;
		mark: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		menu: DetailedHTMLFactory<MenuHTMLAttributes<HTMLElement>, HTMLElement>;
		menuitem: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		meta: DetailedHTMLFactory<MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;
		meter: DetailedHTMLFactory<MeterHTMLAttributes<HTMLElement>, HTMLElement>;
		nav: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		noscript: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		object: DetailedHTMLFactory<ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;
		ol: DetailedHTMLFactory<OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;
		optgroup: DetailedHTMLFactory<OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;
		option: DetailedHTMLFactory<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;
		output: DetailedHTMLFactory<OutputHTMLAttributes<HTMLElement>, HTMLElement>;
		p: DetailedHTMLFactory<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;
		param: DetailedHTMLFactory<ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;
		picture: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		pre: DetailedHTMLFactory<HTMLAttributes<HTMLPreElement>, HTMLPreElement>;
		progress: DetailedHTMLFactory<ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;
		q: DetailedHTMLFactory<QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;
		rp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		rt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		ruby: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		s: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		samp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		script: DetailedHTMLFactory<ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;
		section: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		select: DetailedHTMLFactory<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;
		small: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		source: DetailedHTMLFactory<SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;
		span: DetailedHTMLFactory<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;
		strong: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		style: DetailedHTMLFactory<StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;
		sub: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		summary: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		sup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		table: DetailedHTMLFactory<TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;
		template: DetailedHTMLFactory<HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;
		tbody: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
		td: DetailedHTMLFactory<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;
		textarea: DetailedHTMLFactory<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;
		tfoot: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
		th: DetailedHTMLFactory<ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;
		thead: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
		time: DetailedHTMLFactory<TimeHTMLAttributes<HTMLElement>, HTMLElement>;
		title: DetailedHTMLFactory<HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;
		tr: DetailedHTMLFactory<HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;
		track: DetailedHTMLFactory<TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;
		u: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		ul: DetailedHTMLFactory<HTMLAttributes<HTMLUListElement>, HTMLUListElement>;
		"var": DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		video: DetailedHTMLFactory<VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;
		wbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
		webview: DetailedHTMLFactory<WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;
	}
	interface ReactSVG {
		animate: SVGFactory;
		circle: SVGFactory;
		clipPath: SVGFactory;
		defs: SVGFactory;
		desc: SVGFactory;
		ellipse: SVGFactory;
		feBlend: SVGFactory;
		feColorMatrix: SVGFactory;
		feComponentTransfer: SVGFactory;
		feComposite: SVGFactory;
		feConvolveMatrix: SVGFactory;
		feDiffuseLighting: SVGFactory;
		feDisplacementMap: SVGFactory;
		feDistantLight: SVGFactory;
		feDropShadow: SVGFactory;
		feFlood: SVGFactory;
		feFuncA: SVGFactory;
		feFuncB: SVGFactory;
		feFuncG: SVGFactory;
		feFuncR: SVGFactory;
		feGaussianBlur: SVGFactory;
		feImage: SVGFactory;
		feMerge: SVGFactory;
		feMergeNode: SVGFactory;
		feMorphology: SVGFactory;
		feOffset: SVGFactory;
		fePointLight: SVGFactory;
		feSpecularLighting: SVGFactory;
		feSpotLight: SVGFactory;
		feTile: SVGFactory;
		feTurbulence: SVGFactory;
		filter: SVGFactory;
		foreignObject: SVGFactory;
		g: SVGFactory;
		image: SVGFactory;
		line: SVGFactory;
		linearGradient: SVGFactory;
		marker: SVGFactory;
		mask: SVGFactory;
		metadata: SVGFactory;
		path: SVGFactory;
		pattern: SVGFactory;
		polygon: SVGFactory;
		polyline: SVGFactory;
		radialGradient: SVGFactory;
		rect: SVGFactory;
		stop: SVGFactory;
		svg: SVGFactory;
		switch: SVGFactory;
		symbol: SVGFactory;
		text: SVGFactory;
		textPath: SVGFactory;
		tspan: SVGFactory;
		use: SVGFactory;
		view: SVGFactory;
	}
	interface ReactDOM extends ReactHTML, ReactSVG {
	}
	//
	// React.PropTypes
	// ----------------------------------------------------------------------
	type Validator<T> = PropTypes.Validator<T>;
	type Requireable<T> = PropTypes.Requireable<T>;
	type ValidationMap<T> = PropTypes.ValidationMap<T>;
	type WeakValidationMap<T> = {
		[K in keyof T]?: null extends T[K] ? Validator<T[K] | null | undefined> : undefined extends T[K] ? Validator<T[K] | null | undefined> : Validator<T[K]>;
	};
	interface ReactPropTypes {
		any: typeof PropTypes.any;
		array: typeof PropTypes.array;
		bool: typeof PropTypes.bool;
		func: typeof PropTypes.func;
		number: typeof PropTypes.number;
		object: typeof PropTypes.object;
		string: typeof PropTypes.string;
		node: typeof PropTypes.node;
		element: typeof PropTypes.element;
		instanceOf: typeof PropTypes.instanceOf;
		oneOf: typeof PropTypes.oneOf;
		oneOfType: typeof PropTypes.oneOfType;
		arrayOf: typeof PropTypes.arrayOf;
		objectOf: typeof PropTypes.objectOf;
		shape: typeof PropTypes.shape;
		exact: typeof PropTypes.exact;
	}
	//
	// React.Children
	// ----------------------------------------------------------------------
	interface ReactChildren {
		map<T, C>(children: C | C[], fn: (child: C, index: number) => T): C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;
		forEach<C>(children: C | C[], fn: (child: C, index: number) => void): void;
		count(children: any): number;
		only<C>(children: C): C extends any[] ? never : C;
		toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;
	}
	//
	// Browser Interfaces
	// https://github.com/nikeee/2048-typescript/blob/master/2048/js/touch.d.ts
	// ----------------------------------------------------------------------
	interface AbstractView {
		styleMedia: StyleMedia;
		document: Document;
	}
	interface Touch {
		identifier: number;
		target: EventTarget;
		screenX: number;
		screenY: number;
		clientX: number;
		clientY: number;
		pageX: number;
		pageY: number;
	}
	interface TouchList {
		[index: number]: Touch;
		length: number;
		item(index: number): Touch;
		identifiedTouch(identifier: number): Touch;
	}
	//
	// Error Interfaces
	// ----------------------------------------------------------------------
	interface ErrorInfo {
		/**
		 * Captures which component contained the exception, and its ancestors.
		 */
		componentStack: string;
	}
}
export declare const InfiniteTableClassName: string;
export declare const InfiniteTableFactory: <T extends unknown>(_cfg?: InfiniteTableFactoryConfig) => {
	(props: InfiniteTableProps<T>): JSX.Element;
	defaultProps: Partial<InfiniteTableProps<T>>;
};
export declare type InfiniteTablePropColumnOrderNormalized = string[];
export interface InfiniteTableComputedValues<T> extends InfiniteTableProps<T> {
	computedPinnedStartColumns: InfiniteTableComputedColumn<T>[];
	computedPinnedEndColumns: InfiniteTableComputedColumn<T>[];
	computedUnpinnedColumns: InfiniteTableComputedColumn<T>[];
	computedVisibleColumns: InfiniteTableComputedColumn<T>[];
	computedVisibleColumnsMap: Map<string, InfiniteTableComputedColumn<T>>;
	computedColumnVisibility: InfiniteTablePropColumnVisibility;
	computedColumnOrder: InfiniteTablePropColumnOrderNormalized;
	computedPinnedStartColumnsWidth: number;
	computedPinnedEndColumnsWidth: number;
	computedUnpinnedColumnsWidth: number;
	computedUnpinnedOffset: number;
	computedPinnedEndOffset: number;
	computedRemainingSpace: number;
	showZebraRows: boolean;
	unpinnedColumnRenderCount: number;
	columnRenderStartIndex: number;
	setColumnPinning: (columnPinning: InfiniteTablePropColumnPinning) => void;
	setColumnOrder: (columnOrder: InfiniteTablePropColumnOrder) => void;
	setColumnVisibility: (columnVisibility: InfiniteTablePropColumnVisibility) => void;
	rowHeight: number;
}
export declare type InfiniteTableEnhancedData<T> = {
	data: T | null;
	groupData?: T[];
	value?: any;
	isGroupRow?: boolean;
	groupNesting?: number;
	groupKeys?: any[];
	groupCount?: number;
};
export declare type InfiniteTablePropColumnOrder = InfiniteTablePropColumnOrderNormalized | true;
export declare type InfiniteTablePropColumnVisibility = Map<string, false>;
export declare type InfiniteTablePropColumnPinning = Map<string, true | "start" | "end">;
export declare type InfiniteTableColumnTypes = "string" | "number" | "date";
export declare type InfiniteTableColumnAlign = "start" | "center" | "end";
export declare type InfiniteTableColumnVerticalAlign = "start" | "center" | "end";
export declare type Renderable = React.ReactNode;
export interface InfiniteTableColumnHeaderRenderParams<T> {
	column: InfiniteTableComputedColumn<T>;
	columnSortInfo: DataSourceSingleSortInfo<T> | null | undefined;
}
export declare type InfiniteTableColumnHeaderRenderFunction<T> = ({ columnSortInfo, column, }: InfiniteTableColumnHeaderRenderParams<T>) => Renderable;
export declare type InfiniteTableColumnHeader<T> = Renderable | InfiniteTableColumnHeaderRenderFunction<T>;
export declare type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> & {
	[K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>;
}[Keys];
export declare type InfiniteTableColumnRenderFunction<DATA_TYPE> = ({ value, rowIndex, column, data, enhancedData, }: InfiniteTableColumnRenderParams<DATA_TYPE>) => Renderable | null;
export declare type InfiniteTableColumnWithRenderOrField<T> = RequireAtLeastOne<{
	field?: keyof T;
	render?: InfiniteTableColumnRenderFunction<T>;
}, "render" | "field">;
export declare type DiscriminatedUnion<A, B> = (A & {
	[K in keyof B]?: undefined;
}) | (B & {
	[K in keyof A]?: undefined;
});
export declare type InfiniteTableColumnWithFlex = {
	flex?: number;
	defaultFlex?: number;
};
export declare type InfiniteTableColumnWithWidth = {
	width?: number;
	defaultWidth?: number;
};
export declare type InfiniteTableColumnWithSize = DiscriminatedUnion<InfiniteTableColumnWithFlex, InfiniteTableColumnWithWidth>;
export declare type InfiniteTableColumn<T> = {
	maxWidth?: number;
	minWidth?: number;
	type?: InfiniteTableColumnTypes;
	sortable?: boolean;
	draggable?: boolean;
	align?: InfiniteTableColumnAlign;
	verticalAlign?: InfiniteTableColumnVerticalAlign;
	header?: InfiniteTableColumnHeader<T>;
	name?: Renderable;
	cssEllipsis?: boolean;
	headerCssEllipsis?: boolean;
} & InfiniteTableColumnWithRenderOrField<T> & InfiniteTableColumnWithSize;
export declare type InfiniteTableColumnPinned = "start" | "end" | false;
export declare type InfiniteTableComputedColumnBase<T> = {
	computedWidth: number;
	computedOffset: number;
	computedPinningOffset: number;
	computedAbsoluteOffset: number;
	computedSortable: boolean;
	computedSortInfo: DataSourceSingleSortInfo<T> | null;
	computedSorted: boolean;
	computedSortedAsc: boolean;
	computedSortedDesc: boolean;
	computedVisibleIndex: number;
	computedPinned: InfiniteTableColumnPinned;
	computedDraggable: boolean;
	computedFirstInCategory: boolean;
	computedLastInCategory: boolean;
	computedFirst: boolean;
	computedLast: boolean;
	toggleSort: () => void;
	id: string;
};
export declare type InfiniteTableComputedColumn<T> = InfiniteTableColumn<T> & InfiniteTableComputedColumnBase<T>;
export interface InfiniteTableColumnRenderParams<DATA_TYPE> {
	value: string | number | Renderable | void;
	data: DATA_TYPE | null;
	enhancedData: InfiniteTableEnhancedData<DATA_TYPE>;
	rowIndex: number;
	column: InfiniteTableComputedColumn<DATA_TYPE>;
}
export interface Setter<T> extends React.Dispatch<React.SetStateAction<T>> {
}
export interface Size {
	width: number;
	height: number;
}
export interface ScrollPosition {
	scrollTop: number;
	scrollLeft: number;
}
export interface InfiniteTableActions<T> {
	setBodySize: Setter<Size>;
	setScrollPosition: Setter<ScrollPosition>;
	setColumnOrder: Setter<InfiniteTablePropColumnOrder>;
	setColumnVisibility: Setter<InfiniteTablePropColumnVisibility>;
	setColumnPinning: Setter<InfiniteTablePropColumnPinning>;
	setColumnShifts: Setter<number[] | null>;
	setDraggingColumnId: Setter<string | null>;
	x?: T;
}
export declare type VoidFn = () => void;
export declare type SubscriptionCallbackOnChangeFn<T> = (node: T | null) => void;
export interface SubscriptionCallback<T> {
	(node: T): void;
	get: () => T | null;
	destroy: VoidFn;
	onChange: (fn: SubscriptionCallbackOnChangeFn<T>) => VoidFn;
}
export interface InfiniteTableInternalActions<T> {
	onRowHeightChange: SubscriptionCallback<number>;
	x?: T;
}
export interface InfiniteTableContextValue<T> {
	props: InfiniteTableProps<T>;
	ownProps: InfiniteTableOwnProps<T>;
	state: InfiniteTableState<T>;
	computed: InfiniteTableComputedValues<T>;
	actions: InfiniteTableActions<T>;
	internalActions: InfiniteTableInternalActions<T>;
	dispatch: Dispatch<InfiniteTableAction>;
	domRef: MutableRefObject<HTMLDivElement | null>;
	bodyDOMRef: RefObject<HTMLDivElement | null>;
	portalDOMRef: RefObject<HTMLDivElement | null>;
}
export interface InfiniteTableFactoryConfig {
}
export interface InfiniteTableState<T> {
	columnShifts: null | number[];
	draggingColumnId: null | string;
	bodySize: Size;
	scrollPosition: ScrollPosition;
	columnOrder: InfiniteTablePropColumnOrder;
	columnVisibility: InfiniteTablePropColumnVisibility;
	columnPinning: InfiniteTablePropColumnPinning;
	x?: T;
}
export declare type InfiniteTableAction = {
	type: InfiniteTableActionType;
	payload?: any;
};
export interface InfiniteTableReducer<T> {
	(state: InfiniteTableState<T>, action: InfiniteTableAction): InfiniteTableState<T>;
}
export interface TableScopedReducer<T> {
	(state: T, action: InfiniteTableAction): T;
}
export declare type InfiniteTablePropVirtualizeColumns<T> = boolean | ((columns: InfiniteTableComputedColumn<T>[]) => boolean);
export declare type InfiniteTableProps<T> = {
	columns: Map<string, InfiniteTableColumn<T>>;
	columnVisibility?: InfiniteTablePropColumnVisibility;
	defaultColumnVisibility?: InfiniteTablePropColumnVisibility;
	columnPinning?: InfiniteTablePropColumnPinning;
	defaultColumnPinning?: InfiniteTablePropColumnPinning;
	onColumnVisibilityChange?: (columnVisibility: InfiniteTablePropColumnVisibility) => void;
	primaryKey: string;
	rowHeight: number | string;
	domProps?: HTMLProps<HTMLDivElement>;
	showZebraRows?: boolean;
	sortable?: boolean;
	draggableColumns?: boolean;
	header?: boolean;
	columnDefaultWidth?: number;
	columnMinWidth?: number;
	columnMaxWidth?: number;
	virtualizeColumns?: InfiniteTablePropVirtualizeColumns<T>;
	virtualizeRows?: boolean;
	defaultColumnOrder?: InfiniteTablePropColumnOrder;
	columnOrder?: InfiniteTablePropColumnOrder;
	onColumnOrderChange?: (columnOrder: InfiniteTablePropColumnOrder) => void;
	onReady?: (api: InfiniteTableImperativeApi<T>) => void;
	rowProps?: HTMLProps<HTMLDivElement> | ((rowArgs: {
		rowIndex: number;
		data: T | null;
	}) => HTMLProps<HTMLDivElement>);
	licenseKey?: string;
};
export declare type InfiniteTableOwnProps<T> = InfiniteTableProps<T> & {
	rowHeight: number;
	rowHeightCSSVar: string;
	onHeaderResize: (height: number) => void;
	bodyDOMRef?: RefObject<HTMLDivElement | null>;
};
export declare type InfiniteTableImperativeApi<T> = {
	setColumnOrder: (columnOrder: InfiniteTablePropColumnOrder) => void;
	setColumnVisibility: (columnVisibility: InfiniteTablePropColumnVisibility) => void;
	x?: T;
};
export declare enum InfiniteTableActionType {
	SET_COLUMN_SIZE = 0,
	SET_SCROLL_POSITION = 1,
	SET_BODY_SIZE = 2,
	SET_COLUMN_ORDER = 3,
	SET_COLUMN_VISIBILITY = 4,
	SET_COLUMN_SHIFTS = 5,
	SET_COLUMN_PINNING = 6,
	SET_DRAGGING_COLUMN_ID = 7
}
export declare function useDataSource<T>(): DataSourceComputedValues<T>;
export declare function DataSource<T>(props: DataSourceProps<T>): JSX.Element;
export declare namespace DataSource {
	var defaultProps: {
		defaultLoading: boolean;
	};
}
export declare type DataSourceEnhancedData<T> = {
	data: T | null;
};
export interface DataSourceDataInfo<T> {
	originalDataArray: T[];
}
export declare type SortDir = 1 | -1;
export declare type MultisortInfo<T> = {
	/**
	 * The sorting direction
	 */
	dir: SortDir;
	/**
	 * a property whose value to use for sorting on the array items
	 */
	field?: keyof T;
	/**
	 * for now 'string' and 'number' are known types, meaning they have
	 * sort functions already implemented
	 */
	type?: string;
	fn?: (a: any, b: any) => number;
};
export declare type DataSourceSingleSortInfo<T> = MultisortInfo<T> & {
	field?: keyof T;
	id?: string;
};
export declare type DataSourceGroupBy<T> = (keyof T)[];
export declare type DataSourceSortInfo<T> = null | undefined | DataSourceSingleSortInfo<T> | DataSourceSingleSortInfo<T>[];
export declare type DataSourceData<T> = T[] | Promise<T[] | {
	data: T[];
}> | (() => T[] | Promise<T[] | {
	data: T[];
}>);
export interface DataSourceProps<T> {
	children: React.ReactNode | ((contextData: DataSourceComputedValues<T>) => React.ReactNode);
	primaryKey: keyof T;
	fields?: (keyof T)[];
	data: DataSourceData<T>;
	loading?: boolean;
	defaultLoading?: boolean;
	onLoadingChange?: (loading: boolean) => void;
	groupBy?: DataSourceGroupBy<T>;
	defaultGroupBy?: DataSourceGroupBy<T>;
	onGroupByChange?: (groupBy: DataSourceGroupBy<T>) => void;
	sortInfo?: DataSourceSortInfo<T>;
	defaultSortInfo?: DataSourceSortInfo<T>;
	onSortInfoChange?: (sortInfo: DataSourceSortInfo<T>) => void;
}
export interface DataSourceState<T> extends DataSourceDataInfo<T> {
	loading: boolean;
	sortInfo: DataSourceSingleSortInfo<T>[];
	originalDataArray: T[];
	dataArray: InfiniteTableEnhancedData<T>[];
	groupBy: DataSourceGroupBy<T>;
}
export interface DataSourceComputedValues<T> extends DataSourceState<T> {
	loading: boolean;
	dataArray: DataSourceEnhancedData<T>[];
	originalDataArray: T[];
	primaryKey: keyof T;
	sortInfo: DataSourceSingleSortInfo<T>[];
}
export interface DataSourceContextValue<T> {
	computed: DataSourceComputedValues<T>;
	props: DataSourceProps<T>;
	state: DataSourceState<T>;
	actions: DataSourceActions<T>;
	dispatch: React.Dispatch<DataSourceAction<any>>;
}
export interface DataSourceActions<T> {
	setLoading: Setter<boolean>;
	setDataSourceInfo: Setter<DataSourceDataInfo<T>>;
	setSortInfo: Setter<DataSourceSortInfo<T>>;
	setGroupBy: Setter<DataSourceGroupBy<T>>;
}
export declare enum DataSourceActionType {
	INIT = "INIT",
	SET_LOADING = "SET_LOADING",
	SET_GROUP_BY = "SET_GROUP_BY",
	SET_DATA_SOURCE_INFO = "SET_DATA_SOURCE_INFO",
	SET_SORT_INFO = "SET_SORT_INFO"
}
export interface DataSourceAction<T> {
	type: DataSourceActionType;
	payload: T;
}
export interface DataSourceReducer<T> {
	(state: DataSourceState<T>, action: DataSourceAction<any>): DataSourceState<T>;
}
export declare type GroupKeyType = any;
export declare type GroupParams<DataType> = {
	groupBy: (keyof DataType)[];
	groupToKey?: (value: any, item: DataType) => GroupKeyType;
};
export declare type Pair<KeyType, ValueType> = {
	value?: ValueType;
	map?: Map<KeyType, Pair<KeyType, ValueType>>;
	revision?: number;
};
declare class DeepMap<KeyType, ValueType> {
	private map;
	private length;
	private revision;
	set(keys: KeyType[] & {
		length: Omit<number, 0>;
	}, value: ValueType): this;
	get(keys: KeyType[]): ValueType | undefined;
	get size(): number;
	delete(keys: KeyType[]): boolean;
	has(keys: KeyType[]): boolean;
	private visitKey;
	visit: (fn: (pair: Pair<KeyType, ValueType>, keys: KeyType[]) => void) => void;
	private sortedIterator;
	private getArray;
	values(): Generator<ValueType, void, unknown>;
	keys(): Generator<KeyType[], void, unknown>;
	entries(): Generator<[
		KeyType[],
		ValueType
	], void, unknown>;
	topDownEntries(): [
		KeyType[],
		ValueType
	][];
	topDownKeys(): KeyType[][];
	topDownValues(): ValueType[];
}
export declare type DataGroupResult<DataType> = {
	deepMap: DeepMap<GroupKeyType, DataType[]>;
	groupParams: GroupParams<DataType>;
};
export declare function group<DataType>(groupParams: GroupParams<DataType>, data: DataType[]): DataGroupResult<DataType>;
export declare function flatten<DataType>(groupResult: DataGroupResult<DataType>): DataType[];

export {};

{
  "routes": [
    {
      "filePath": "/404",
      "routePath": "/404",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/404.page.md",
      "fileName": "404.page.md",
      "folderPath": "/",
      "frontmatter": {
        "title": "Not Found"
      },
      "excerpt": "#### This page doesn't exist. But you can always check out our API Reference.",
      "readingTime": "1 min read",
      "content": "\n#### This page doesn't exist. But you can always check out our API Reference.\n\n<HeroCards>\n  <YouWillLearnCard title=\"Learn Infinite Table\" path=\"/docs/learn/getting-started\">\n  Learn & unleash the power of Infinite Table\n  </YouWillLearnCard>\n  <YouWillLearnCard title=\"API Reference\" path=\"/docs/reference\">\n  Look up the component props\n  </YouWillLearnCard>\n</HeroCards>\n"
    },
    {
      "filePath": "/community",
      "routePath": "/community",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/community.page.md",
      "fileName": "community.page.md",
      "folderPath": "/",
      "frontmatter": {
        "title": "Community"
      },
      "excerpt": "<Intro>",
      "readingTime": "1 min read",
      "content": "\n<Intro>\n\nWe're pleased to be part of the React community üôè.\n\nEspecially grateful to the React core team for all their hard work and to all the library developers out there who make other people's lives easier by their work.\n\n</Intro>\n\nWith Infinite Table we want to bring our contribution to the React community specifically and to the frontend developer community more broadly. We want to enable developers push the limits of how they handle and display data.\n\n## Stack Overflow\n\nStack Overflow is a popular forum to ask code-level questions or if you're stuck with a specific error. Read through the [existing questions](https://stackoverflow.com/questions/tagged/infinite-table) tagged with **infinite-table** or [ask your own](https://stackoverflow.com/questions/ask?tags=infinite-table)!\n\n## News\n\nFor the latest news about Infinite Table, [follow us on Twitter](https://twitter.com/get_infinite).\n"
    },
    {
      "filePath": "/eula",
      "routePath": "/eula",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/eula.page.md",
      "fileName": "eula.page.md",
      "folderPath": "/",
      "frontmatter": {
        "title": "End User License Agreement"
      },
      "excerpt": "These terms and conditions (\"Terms\") are contracted between Webreactor SRL. (\"Licensor\") and the entity whose details are provided in the License Quotation (\"Licensee\"). This is effective as of the date of acceptance of these Terms (\"Effective Date\").",
      "readingTime": "36 min read",
      "content": "These terms and conditions (\"Terms\") are contracted between Webreactor SRL. (\"Licensor\") and the entity whose details are provided in the License Quotation (\"Licensee\").\nThis is effective as of the date of acceptance of these Terms (\"Effective Date\").\n\n\n\n\n- [TERMS AND CONDITIONS](#terms-and-conditions)\n  - [1. Definitions and interpretation](#1-definitions-and-interpretation)\n    - [1.1 Definitions](#11-definitions)\n    - [1.2 Interpretation](#12-interpretation)\n  - [2. Basis of terms](#2-basis-of-terms)\n    - [2.1](#21)\n    - [2.2](#22)\n    - [2.3](#23)\n    - [2.4](#24)\n    - [2.5](#25)\n    - [2.6](#26)\n  - [3. Provision of Licensed Materials and Support Services](#3-provision-of-licensed-materials-and-support-services)\n    - [3.1](#31)\n    - [3.2](#32)\n    - [3.3](#33)\n    - [3.4](#34)\n    - [3.5](#35)\n    - [3.6](#36)\n    - [3.7](#37)\n  - [4. Special Usage License](#4-special-usage-license)\n    - [4.1](#41)\n    - [4.2](#42)\n    - [4.3](#43)\n  - [5. Charges, invoicing and payment](#5-charges-invoicing-and-payment)\n    - [5.1](#51)\n    - [5.2](#52)\n    - [5.3](#53)\n  - [6. Warranties](#6-warranties)\n    - [6.1](#61)\n    - [6.2](#62)\n    - [6.3](#63)\n    - [6.4](#64)\n  - [7. Insurance](#7-insurance)\n    - [7.1](#71)\n  - [8. Intellectual Property Rights](#8-intellectual-property-rights)\n    - [8.1](#81)\n    - [8.2](#82)\n    - [8.3](#83)\n  - [9. Indemnities](#9-indemnities)\n    - [9.1](#91)\n    - [9.2](#92)\n  - [10. Exclusions and limitations](#10-exclusions-and-limitations)\n    - [10.1](#101)\n    - [10.2](#102)\n    - [10.3](#103)\n  - [11. Confidentiality](#11-confidentiality)\n    - [11.1](#111)\n    - [11.2](#112)\n  - [12. Data protection](#12-data-protection)\n    - [12.1](#121)\n    - [12.2](#122)\n  - [13. Commencement and duration of Terms](#13-commencement-and-duration-of-terms)\n    - [13.1](#131)\n  - [14. Commencement and duration of Quotations](#14-commencement-and-duration-of-quotations)\n    - [14.1](#141)\n    - [14.2](#142)\n  - [15. Termination](#15-termination)\n    - [15.1](#151)\n  - [16. Consequences of termination](#16-consequences-of-termination)\n    - [16.1](#161)\n    - [16.2](#162)\n  - [17. Force majeure](#17-force-majeure)\n  - [18. General](#18-general)\n    - [18.1](#181)\n    - [18.2](#182)\n    - [18.3](#183)\n    - [18.4](#184)\n    - [18.5](#185)\n    - [18.6](#186)\n    - [18.7](#187)\n    - [18.8](#188)\n    - [18.9](#189)\n    - [18.10](#1810)\n    - [18.11](#1811)\n    - [18.12](#1812)\n- [Support Schedule](#support-schedule)\n  - [1. Scope of Support Services](#1-scope-of-support-services)\n    - [1.1](#11)\n    - [1.2](#12)\n    - [1.3](#13)\n  - [2. Corrective maintenance](#2-corrective-maintenance)\n  - [3. Software updating service](#3-software-updating-service)\n    - [3.1](#31-1)\n    - [3.2](#32-1)\n\n\n\n# TERMS AND CONDITIONS\n\n## 1. Definitions and interpretation\n\n### 1.1 Definitions\n\nIn these Terms, where the context so admits, the following words and expressions shall have the following meanings:\n\n<table>\n  <thead>\n    <tr>\n      <th>Term</th>\n      <th>Meaning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><strong>Application</strong></td>\n      <td>\n        any software, application or elements developed by or on behalf of the\n        Licensee using the Software;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Bug</strong></td>\n      <td>\n        means any error, defect or malfunction in the Software that: (a) causes\n        the integrity of its data to be compromised or corrupted; (b) causes an\n        unexpected error message or fatal error to occur while using the\n        Software; (c) causes the Software to fail to conform to any applicable\n        warranties, including those set out in clause 6.1\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Business Day</strong></td>\n      <td>\n        means each day which is not a weekend day or public holiday in the\n        country in which the Licensor is located\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Confidential Information</strong></td>\n      <td>\n        means all information (whether written, oral or in some other form)\n        disclosed to or obtained by one party (whether directly or indirectly)\n        from the other (whether before or after the Effective Date), including\n        all information relating to that other‚Äôs business, operations, systems,\n        processes, products, trade secrets, know-how, contracts, finances,\n        plans, strategies or current, former or prospective clients, customers,\n        partners or suppliers (together with copies made of any of the\n        foregoing) and which information is marked as being confidential or\n        might reasonably be assumed to be confidential, but excluding\n        information which: <strong>(a)</strong> is available\n        to the public other than because of any breach of these Terms;\n        <strong>(b)</strong> is, when it is supplied, already\n        known to whoever it is disclosed to in circumstances in which they are\n        not prevented from disclosing it to others;\n        <strong>(c)</strong> is independently obtained by\n        whoever it is disclosed to in circumstances in which they are not\n        prevented from disclosing it to others; or\n        <strong>(d)</strong> is trivial or obvious;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Data Protection Legislation</strong></td>\n      <td>\n        all applicable legislation for the time being in force pertaining to\n        data protection, data privacy, data retention and/or data security\n        (including the General Data Protection Regulation (Regulation 2016/679)\n        (‚ÄúGDPR‚Äù) the Privacy and Electronic Communication Directive (Directive\n        2002/58/EC) and national legislation implementing or supplementing such\n        legislation in the United Kingdom and any applicable member state of the\n        European Union, including the Data Protection Act 2018) and all\n        associated codes of practice and other guidance issued by any applicable\n        data protection authority;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Developer License</strong></td>\n      <td>\n        means a license of the Licensed Materials granted to the Licensee which\n        permits the Licensee to develop Applications using the Licensed\n        Materials in accordance with and subject to these Terms\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Documentation</strong></td>\n      <td>\n        means the operating manuals, user instructions, technical literature and\n        all other related materials in eye-readable form supplied to the\n        Licensee by the Licensor (whether in online, electronic or printed form)\n        for aiding the use and application of the Software;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Fees</strong></td>\n      <td>\n        means the fees for the Services, as set out in the relevant Quotation\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Insolvency Event</strong></td>\n      <td>\n        means, in relation to a person (which includes an individual and a legal\n        person, such as a limited company), any of the following events:\n        <strong>(a)</strong> a meeting of creditors of that\n        person being held or an arrangement or composition with or for the\n        benefit of its creditors (including a voluntary arrangement as defined\n        in the Insolvency Act 1986) being proposed by or in relation to that\n        person; <strong>(b)</strong> a charge-holder,\n        receiver, administrative receiver or other similar person taking\n        possession of or being appointed over or any distress, execution or\n        other process being levied or enforced (and not being discharged within\n        seven days) on the whole or a material part of the assets of that\n        person; <strong>(c)</strong> that person ceasing to\n        carry on business or being deemed to be unable to pay its debts within\n        the meaning of section 123 Insolvency Act 1986 (except that, for the\n        purposes of this agreement, the reference to ¬£750 in section 123(1) of\n        that Act shall be construed as a reference to ¬£10,000);\n        <strong>(d)</strong> that person or its directors or\n        the holder of a qualifying floating charge or any of its creditors\n        giving notice of their intention to appoint, appointing or making an\n        application to the court for the appointment of, an administrator;\n        <strong>(e)</strong> a petition being advertised or a\n        resolution being passed or an order being made for the administration or\n        the winding-up, bankruptcy or dissolution of that person; or\n        <strong>(f)</strong> the happening in relation to that\n        person of an event analogous to any of the above in any jurisdiction in\n        which it is incorporated or resident or in which it carries on business\n        or has assets.\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Intellectual Property Rights</strong></td>\n      <td>\n        means patents, patentable rights, copyright, design rights, utility\n        models, trade marks (whether or not any of the above are registered),\n        trade names, rights in domain names, rights in inventions, rights in\n        data, database rights and confidential information, and all other\n        intellectual and industrial property and similar or analogous rights\n        existing under the laws of any country and all pending applications for\n        and right to apply for or register the same (present, future and\n        contingent, and including all renewals, extensions, revivals and all\n        accrued rights of action);\n      </td>\n    </tr>\n    <tr>\n      <td><strong>License Quotation</strong></td>\n      <td>\n        means a written quotation (whether in online, electronic or printed\n        form) agreed between the parties in relation to the Licensed Materials\n        which shall be deemed to incorporate these Terms;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Licensed Materials</strong></td>\n      <td>means the Software and related Documentation;</td>\n    </tr>\n    <tr>\n      <td><strong>Licensee Developers</strong></td>\n      <td>\n        means the Licensee‚Äôs employees, workers and contractors who are\n        authorised by the Licensee to, and qualified to, develop software\n        products that include the Software;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Licensee Materials</strong></td>\n      <td>\n        means all intellectual property, works, products, documentation,\n        information, data and other material of any kind (including computer\n        software and firmware, designs and specifications) provided or made\n        available by or on behalf of the Licensee in connection with these\n        Terms;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Licensor Materials</strong></td>\n      <td>\n        means all intellectual property, works, products, documentation,\n        information, data and other material of any kind (including computer\n        software and firmware, designs and specifications) provided or made\n        available by or on behalf of the Licensor in connection with these\n        Terms, excluding the Licensed Materials;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Losses</strong></td>\n      <td>\n        means all losses, liabilities, demands, claims, judgments, awards,\n        damages, amounts payable in settlement, costs and expenses (including\n        all legal and other professional fees, expenses and disbursements);\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Modification</strong></td>\n      <td>\n        means: <strong>(a)</strong> any addition to or\n        deletion from the contents of a file included in the Software or\n        previous Modifications created by the Licensee; and/or\n        <strong>(b)</strong> any new file that leverages any\n        part of the Software or previous Modifications;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>New Version</strong></td>\n      <td>\n        means any new version of the Software which from time to time is\n        publicly marketed and offered for licensing by the Licensor in the\n        course of its normal business, being a version which contains such\n        significant differences from the previous versions as to be generally\n        accepted in the marketplace as constituting a new product\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Our Website</strong></td>\n      <td>\n        means\n        <a\n          href=\"https://infinite-table.com\"\n          target=\"_blank\"\n          rel=\"nofollow noopener noreferrer\"\n          class=\"inline text-link break-normal border-b border-link border-opacity-0 hover:border-opacity-100 duration-100 ease-in transition leading-normal\"\n          >https://infinite-table.com</a>\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Proficiency</strong></td>\n      <td>has the meaning set out in clause 8.3</td>\n    </tr>\n    <tr>\n      <td><strong>Quotation(s)</strong></td>\n      <td>has the meaning set out in clause 2.2</td>\n    </tr>\n    <tr>\n      <td><strong>Quotation Effective Date</strong></td>\n      <td>has the meaning set out in clause 14.1</td>\n    </tr>\n    <tr>\n      <td><strong>Quotation Initial Term</strong></td>\n      <td>has the meaning set out in clause 14.1</td>\n    </tr>\n    <tr>\n      <td><strong>Quotation Renewal Term</strong></td>\n      <td>has the meaning set out in clause 14.1</td>\n    </tr>\n    <tr>\n      <td><strong>Production Environment</strong></td>\n      <td>\n        means a computer, server, collection of servers, data centre, cloud\n        instance, container or similar where the Licensee‚Äôs services and/or\n        store are made available to the Licensee‚Äôs customers\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Services</strong></td>\n      <td>\n        means the services (including the supply of Licensed Materials and\n        Support Services), set out in the relevant Quotation, to be provided by\n        the Licensor under such Quotation\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Site</strong></td>\n      <td>\n        means @infinite-table/infinite-react package on the public npm registry;\n        or any UMD bundle with an ‚Äúinfinite-table‚Äù prefix\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Software</strong></td>\n      <td>means the Infinite Table software made available by the Licensor</td>\n    </tr>\n    <tr>\n      <td><strong>Source Code</strong></td>\n      <td>\n        means the human-readable form of computer software, together with all\n        documentation and comments relating thereto sufficient for a reasonably\n        skilled computer programmer to understand, use, support and modify such\n        computer software;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Special Usage License</strong></td>\n      <td>\n        means a Developer License provided at no-cost on the terms set out in\n        clause 4.1\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Support Release</strong></td>\n      <td>\n        means a release of the Software which corrects faults, adds\n        functionality or otherwise amends or upgrades the Software, but which\n        does not constitute a New Version\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Support Request</strong></td>\n      <td>\n        means a request communicated by the Licensee to the Licensor to report a\n        Bug or to request some other support service or assistance;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Support Services</strong></td>\n      <td>\n        means the support services, to be provided by the Licensor in respect of\n        the Software (including the provision of Updates), as set out in the\n        Support Schedule; and\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n### 1.2 Interpretation\n\nIn these Terms (including the introduction and schedules) unless the context otherwise requires:\n\n(a) reference to a person includes a legal person (such as a limited company) as well as a natural person;\n\n(b) reference to these Terms includes the schedules and appendices and other documents attached to it or incorporated by reference into it (all as amended, added to or replaced from time to time);\n\n(c) references to clauses or schedules shall be to those in or to these Terms and references to paragraphs shall be to paragraphs of the schedules or annexes to the schedules (as the case may be);\n\n(d) clause headings are for convenience only and shall not affect the construction of these Terms;\n\n(e) reference to \"including\" or any similar terms in these Terms shall be treated as being by way of example and shall not limit the general applicability of any preceding words; and\n\n(f) reference to any legislation shall be to that legislation as amended, extended or re-enacted from time to time and to any subordinate provision made under that legislation.\n\n## 2. Basis of terms\n\n### 2.1\n\nThese Terms are framework terms further to which the parties may enter into a License Quotation in respect of Services to be provided by the Licensor to the Licensee.\n\n### 2.2\n\nEach such License Quotation once agreed in accordance with clause 2.3, shall constitute a separate contract for the provision of the Services specified in such Quotation, incorporating these Terms.\n\n### 2.3\n\nThe Licensor will only provide Services to the Licensee further to a Quotation. No Quotation shall be binding on either party unless and until agreed by both parties.\n\n### 2.4\n\nAll Quotations entered into with the Licensee will be subject to the terms set out in these Terms. No terms or conditions endorsed upon, delivered with or contained in any quotation, estimate, correspondence, acknowledgement or acceptance of order or any similar document issued by the Licensee shall form part of any contract between the Licensor and the Licensee.\n\n### 2.5\n\nIn the event of any conflict or inconsistency between the terms of these Terms and the terms of any Quotation, the terms of the relevant Quotation shall prevail only to the extent of any such conflict or inconsistency.\n\n### 2.6\n\nRequests for License Quotations must be made by email to admin@infinite-table.com\n\n## 3. Provision of Licensed Materials and Support Services\n\n### 3.1\n\nThe Licensor shall make the Licensed Materials available in Source Code form at https://github.com/infinite-table/infinite-react on the first Quotation Effective Date by provision of an activation key required to access the Licensed Materials, subject to payment of the Fees.\n\n### 3.2\n\nSubject to clause 3.3 below, the Licensor grants to the Licensee a worldwide, perpetual, non-exclusive, non-transferable, non-sublicensable, royalty-free license (in the form of a Developer License), commencing on the relevant Quotation Effective Date, to permit Licensee Developers to use the Licensed Materials in accordance with these Terms, subject to the limit on the number of permitted Licensee Developers set out in the relevant Quotation. Members within the group of Licensee Developers can be replaced with alternative members as long as the number of concurrent Licensee Developers at any time does not exceed the limit set out in the relevant Quotation. For the purposes of this limit, each developer modifying JavaScript code as part of the creation of an Application's user interface or Modification of a user interface shall constitute a separate Licensee Developer. For example, if the Licensee has seven developers working with JavaScript code on an Application, but only three developers directly working with the Software, all seven developers will be counted as Licensee Developers.\n\n### 3.3\n\nThe Licensee may use the Licensed Materials to install, load, launch, access, run, execute, operate, and archive the Licensed Materials for production, test, archival, emergency re-start and disaster recovery purposes and to develop and create derivative works from the Licensed Materials in the form of Applications, provided that:\n\n(a) the Licensee shall not permit any end user of any Application to use the Software independently of, or by or with any applications other than, the Application being used by that end user.\n\n### 3.4\n\nIn the event that the Licensee creates any Modifications to the Source Code to the Software, the Licensor shall not be obliged to provide the Support Services in relation to any such Modification(s) from the date on which any such Modification(s) take place.\n\n### 3.5\n\nThe Licensee shall not change or remove the copyright notice from any of the files included in the Licensed Materials.\n\n### 3.6\n\nThe Licensee shall not redistribute the Licensed Materials or any Modifications other than as expressly permitted by these Terms. For the avoidance of doubt, the Licensee shall not redistribute the Licensed Materials or any Modifications:\n\n(a) other than by including the Software or a portion of the Software within Application(s); and\n\n(b) as part of any Application that can be described as a development toolkit or library, an application builder, a website builder, a user interface designer, or any application that is intended for use by software, application, or website developers or designers, or has a similar purpose or functionality (as determined by the Licensor).\n\n### 3.7\n\nSubject to clause 3.3, the Licensor will provide the Support Services to the Licensee Developers in accordance with the Support Schedule for a period of 1 year from the relevant Quotation Effective Date, or for such other period as expressly set out in the relevant Quotation.\n\n## 4. Special Usage License\n\n### 4.1\n\nNotwithstanding anything else in these Terms, a Special Usage License can be granted, purely at the Licensors discretion.\n\n### 4.2\n\nWithout prejudice likely recipients of a Special Usage License will include:\n\n(a) Students in full-time education;\n(b) Charities and Non-Governmental Organisations\n(c) Open Source Products\n\n### 4.3\n\nRequests for Special Usage Licenses must be made by email to admin@infinite-table.com\n\n## 5. Charges, invoicing and payment\n\n### 5.1\n\nThe Fees will be invoiced by the Licensor annually in advance upon the relevant Quotation Effective Date. Unless otherwise agreed in writing between the parties, the Licensee must pay each valid invoice within 30 days of the date of the invoice.\n\n### 5.2\n\nUnless otherwise expressly provided in these Terms, all amounts referred to in these Terms are exclusive of value added tax (\"VAT\") which, where chargeable by the Licensor, shall be payable by the Licensee at the rate and in the manner prescribed by law. All other taxes, duties, customs or similar charges shall be the responsibility of the Licensor.\n\n### 5.3\n\nThe Licensor will invoice, and the Licensee will pay invoices in the currency to be agreed between the parties and as set out in the relevant Quotation.\n\n## 6. Warranties\n\n### 6.1\n\nThe Licensor represents and warrants that:\n\n(a) it has the right to enter into these Terms and to license the Licensed Materials and provide the Support Services (if any) as contemplated by these Terms;\n\n(b) the Support Services (if any) shall be performed with reasonable care, skill and diligence;\n\n(c) the Licensed Materials and Support Services (if any) shall comply with all applicable laws, regulatory requirements, mandatory standards and codes of practice of any competent authority for the time being in force;\n\n(d) it shall not knowingly introduce into any the Software any computer software routine intended or designed to disable, damage, erase, disrupt or impair the normal operation of, or provide unauthorised access to or modification or monitoring of, any computer system or any software or information stored on any computer system, including viruses, worms, time bombs, time locks, drop-dead devices, access codes, security keys, back doors or trap door devices;\n\n(e) the Software shall perform substantially in accordance with the Documentation for a period of 90 days after: (i) the first Quotation Effective Date; and (ii) the provision of a New Version in accordance with these Terms, provided that this warranty shall not apply to error or failure resulting from: (i) machine error; (ii) the Licensee's failure to follow operating instructions; (iii) negligence or accident by any person or entity other than the Licensor; or (iv) modifications to the Software by any person or entity other than the Licensor.\n\n### 6.2\n\nThe Licensee represents and warrants that:\n\n(a) it has the right to enter into these Terms and to perform its obligations as contemplated by this agreement; and\n\n(b) in the performance of its obligations under these Terms, it shall comply with all applicable laws, regulatory requirements, mandatory standards and codes of practice of any competent authority for the time being in force.\n\n### 6.3\n\nThe Licensor does not warrant that the operation of the Licensed Materials or the code produced by the Software will be uninterrupted or error-free. The Licensor provides the Licensed Materials on an \"as is\" basis and all warranties not expressly set out in these Terms, including any warranties of title, non-infringement, merchantability and fitness for a particular purpose, are disclaimed to the fullest extent permitted by law.\n\n### 6.4\n\nThe Licensee's sole and exclusive remedy for a breach of the warranty in clause 6.1(e) shall be to require the Licensor to repair the affected portion of the Software to ensure that it complies with the Documentation.\n\n## 7. Insurance\n\n### 7.1\n\nWithout prejudice to the Licensee's obligations and liabilities under these Terms, the Licensee shall effect and maintain in force for the duration of these Terms, with reputable and substantial insurers, such policies of insurance as are sufficient for a business of the Licensee's type and to cover all potential liability of the Licensee under these Terms, including professional indemnity insurance and public liability insurance. If coverage is written on a claims made basis, it shall be maintained by the Licensee for at least six years following the termination of these Terms. The Licensee shall, on the Licensor's request, produce both the insurance certificate giving details of cover and the receipt for the current year's premium in respect of each insurance.\n\n## 8. Intellectual Property Rights\n\n### 8.1\n\nAll Intellectual Property Rights in the Licensor Materials and Licensed Materials shall, at all times, be and remain the exclusive property of the Licensor or its third-party licensors. The Licensor grants the Licensee, for the term of these Terms, a limited, non-transferable, royalty-free, non-exclusive license to use the Licensor Materials for the Licensee's internal business purposes only in connection with the receipt of the Licensed Materials and Support Services in accordance with these Terms.\n\n### 8.2\n\nAll Intellectual Property Rights in the Licensee Materials shall, at all times, be and remain the exclusive property of the Licensee or its third-party licensors. If applicable, the Licensee grants the Licensor, for the term of these Terms, a limited, non-transferable, royalty-free, non-exclusive license to use the Licensee Materials only for the purpose of carrying out its obligations in accordance with these Terms. Subject to clause 8.1, no Intellectual Property Rights in any Application or Modification created by the Licensee will be deemed to transfer to the Licensor under these Terms.\n\n### 8.3\n\nEach party may use or re-use any skills, knowledge, experience, technical information, inventions, ideas or techniques of whatever nature utilised or gained by such party in the course of performing its obligations under these Terms (\"Proficiency\"), for its own benefit or the benefit of third parties, provided that such Proficiency does not involve:\n\n(a) the infringement of any part of the Intellectual Property Rights belonging to the other party (or the other party's third-party licensors); or\n\n(b) the use or disclosure of Confidential Information of the other party where such use or disclosure would be in breach of clause 11.\n\n## 9. Indemnities\n\n### 9.1\n\nThe Licensor shall indemnify, defend and hold harmless the Licensee against all Losses that the Licensee incurs or suffers however arising as a result of or in connection with any claim that the receipt, possession or use of any of the Licensed Materials, Licensor Materials and/or Support Services by the Licensee infringes the Intellectual Property Rights or other proprietary rights of any third party, provided that:\n\n(a) the Licensee notifies the Licensor in writing as soon as reasonably practicable of any claim under clause 9.1 of which the Licensee has notice (an \"Indemnified Claim\");\n\n(b) the Licensee does not admit any liability or agree to any settlement or compromise of an Indemnified Claim without the prior written consent of the Licensor, which shall not be unreasonably withheld or delayed;\n\n(c) the Licensor shall, at any time from notification in accordance with clause 9.1(a), at the Licensor's request, cost and expense, be entitled to assume exclusive conduct of the Indemnified Claim (which shall include the right to conduct any proceedings or action in relation to, negotiate the settlement of, and to conduct all discussions and dispute resolution efforts in connection with the Indemnified Claim, provided that no settlement of a claim which would or might affect any rights of the Licensee, or involve any admission of fault or liability on the part of the Licensee, shall be entered into without the Licensee's prior written consent); and\n\n(d) the Licensee shall give the Licensor all assistance that the Licensor may reasonably require in connection with the conduct of the Indemnified Claim.\n\n### 9.2\n\nWithout prejudice to clause 9.1, in the event that the receipt, possession or use of any of the Licensed Materials, Licensor Materials and/or Support Services is restricted as a result of any claim for which the Licensor is obliged to indemnify under clause 9.1, the Licensor may, at its discretion, either procure the rights necessary for continued receipt, possession and use or promptly carry out such modification or replacement as may be necessary to make receipt, possession and use non-infringing.\n\n## 10. Exclusions and limitations\n\n### 10.1\n\nNeither party's liability:\n\n(a) for death or personal injury caused by its negligence;\n\n(b) for fraudulent misrepresentation or for any other fraudulent act or omission;\n\n(c) for breach of clauses 3.5, 3.6 and/or 11;\n\n(d) for breach of any indemnity contained in these Terms; or\n\n(e) for any other liability which may not lawfully be excluded or limited;\nis excluded or limited by these Terms, even if any other term of these Terms would otherwise suggest that this might be the case.\n\n### 10.2\n\nSubject to clause 10.1, neither party shall be liable for:\n\n(a) any indirect, consequential or special loss; or\n\n(b) any loss of profit,\n\n(c) loss of business or contracts,\n\n(d) lost production or operation time,\n(e) loss of or corruption to data, or\n(f) loss of goodwill or anticipated savings;\n\nhowever arising (whether from breach of contract, tort (including negligence), breach of statutory duty or otherwise), whether or not such loss was foreseeable or if the party which would otherwise be liable for such loss was advised of its possibility (and, for the purposes of this clause 10.2, the term \"loss\" includes a partial loss or reduction in value as well as a complete or total loss).\n\n### 10.3\n\nSubject to clauses 10.1 and 10.2, a party's total liability to the other party arising out of or relating to these Terms or its subject matter and to anything which it has done or not done in connection with the same (whether from breach of contract, tort (including negligence), breach of statutory duty or otherwise) shall be limited, in aggregate for all claims arising, to the greater of: (a) the total of all amounts payable (whether or not yet paid) by the Licensee under these Terms; and (b) $5,000. The total liability of a party for any specific event will not exceed the total aggregate liability for such party, as calculated above, less any sums payable for previous events giving rise to liability on the part of such party that have occurred prior to the date of the specific event.\n\n## 11. Confidentiality\n\n### 11.1\n\nEach party shall:\n\n(a) keep confidential all Confidential Information of the other party which it receives in connection with these Terms;\n\n(b) only use such Confidential Information as strictly necessary for the performance of, or exercise of its rights under, these Terms;\n\n(c) subject to clause 11.2, not disclose such Confidential Information to any third party, other than its professional advisers, officers, employees, agents, contractors and sub-contractors on a 'need to know' basis as strictly required for the purposes of and as permitted under these Terms and subject to each such person being bound by an obligation of confidentiality equivalent to this clause 11; and\n\n(d) promptly, upon request and, in any event, upon termination of these Terms(for whatever reason), return to the other party all materials (in whatever form) incorporating, embodying or recording any such Confidential Information in its possession or control and, if requested by the other party, certify in writing that it has done so.\n\n### 11.2\n\nEither party may disclose the other's Confidential Information to the extent required by law or by any court, tribunal, regulator or other authority with competent jurisdiction to order its disclosure (but only to the extent of such requirement), provided that, to the extent permitted by law, the party compelled to make such disclosure shall notify the other party of the disclosure in advance.\n\n## 12. Data protection\n\n### 12.1\n\nEach party shall:\n\n(a) at all times during the term of this Terms, comply with the Data Protection Legislation; and\n(b) to the extent applicable under the Data Protection Legislation, obtain and maintain all appropriate registrations required in order to allow that party to perform its obligations under these Terms.\n\n### 12.2\n\nIn this clause 12, the terms \"personal data\", \"process\" and \"processor\" shall have the meanings given in the applicable Data Protection Legislation. In relation to all personal data provided or made available to the Licensor by or on behalf of the Licensee, the Licensor:\n\n(a) acknowledges that, as between the parties, it acts only as a processor;\n\n(b) shall only process such personal data in accordance with these Terms and the Licensee's instructions issued from time to time;\n\n(c) shall promptly inform the Licensee if, in the Licensor's opinion, any instructions given to it by the Licensee in relation to the processing of such personal data under these Terms infringe any Data Protection Legislation;\n\n(d) shall implement and operate appropriate technical and organisational measures to ensure: (i) the protection of the rights of the relevant data subjects; (ii) and a level of security appropriate to the risks that are presented by any processing of such personal data, in particular protection from accidental loss or unlawful destruction, loss, alteration, unauthorised disclosure of, or access to, personal data transmitted, stored or otherwise processed by the Licensor pursuant to these Terms.\n\n(e) shall procure that any permitted sub-processor implements and operates, appropriate technical and organisational measures to ensure: (i) the protection of the rights of the relevant data subjects; and (ii) a level of security appropriate to the risks that are presented by any processing of such personal data, in particular protection from accidental loss or unlawful destruction, loss, alteration, unauthorised disclosure of, or access to, personal data transmitted, stored or otherwise processed by the Licensor pursuant to these Terms;\n\n(f) shall not, without the prior written consent of the Licensee, transfer any such personal data to a country or territory outside the UK or European Economic Area unless adequate contractual or other assurances have first been put in place such as will enable each party to comply with the requirements of the Data Protection Legislation;\n\n(g) shall not engage any sub-processor without the prior written consent of the Licensee and then only on the basis of a written contract between the Licensor and the sub-processor which imposes on the sub-processor terms equivalent to the provisions of this clause 12. The Licensor shall be responsible for the management of any permitted sub-processor and its compliance with such terms and shall be directly liable to the Licensee for any breach of the same;\n\n(h) shall notify the Licensee without undue delay of any breach of the provisions of this clause 12 and provide assistance to the Licensee in respect of any such breach;\n\n(i) shall provide timely cooperation and assistance to the Licensee in ensuring compliance with: **(i)** the Licensee's obligations to respond to any complaint or request form any applicable data protection authority or data subjects seeking to exercise their rights under any Data Protection Legislation, including by promptly notifying the Licensee of each subject access request the Licensor receives; **(ii)** the Licensee's obligations set out under Articles 32-36 of the GDPR to: **(A)** ensure the security of the processing; **(B)** notify the relevant supervisory authority and any data subjects, where relevant, of any personal data breach; **(C)** carry out any data protection impact assessments (\"DPIA\") on the impact of the processing on the protection of personal data; and **(D)** consult the relevant supervisory authority prior to any processing where a DPIA indicates that the processing would result in a high risk in the absence of measures taken by the Licensee to mitigate the risk; and\n\n(j) shall make available to the Licensee all information reasonably required by the Licensee to demonstrate the Licensor's compliance with its obligations set out in this clause 12 and allow and participate in any data protection audits and inspections conducted by the Licensee or another auditor mandated by the Licensee.\n\n## 13. Commencement and duration of Terms\n\n### 13.1\n\nThese Terms shall commence on the Effective Date and shall, unless sooner terminated in accordance with its terms, terminate automatically without notice on expiry or termination of the last Quotation.\n\n## 14. Commencement and duration of Quotations\n\n### 14.1\n\nThe relevant Quotation is effective as of the later of the: (i) Effective Date; and (ii) effective date set out in the relevant Quotation (\"Quotation Effective Date\"). The relevant Quotation shall commence on the relevant Quotation Effective Date and shall, unless sooner terminated in accordance with its terms or these Terms, continue for a period of 12 months (\"Quotation Initial Term\") when it shall terminate automatically without notice unless, no later than 30 days before the end of the relevant Quotation Initial Term (or any Quotation Renewal Term agreed in accordance with this clause), the parties agree in writing that the terms of the relevant Quotation shall be extended for a period of 12 months from the effective date.\n\n### 14.2\n\nUnless the relevant Quotation is further extended in accordance with this clause or terminated earlier in accordance with its terms or these Terms, the relevant Quotation shall terminate automatically without notice at the end of the relevant Quotation Renewal Term.\n\n## 15. Termination\n\n### 15.1\n\nEither party may terminate these Terms and/or any Quotation by giving the other written notice if:\n\n(a) the other materially breaches any term of these Terms and it is not possible to remedy that breach;\n\n(b) the other materially breaches any term of these Terms and it is possible to remedy that breach, but the other fails to do so within 30 days of being requested in writing to do so;\n\n(c) the other suffers or undergoes an Insolvency Event and to the extent such termination is permitted under applicable law; or\n\n(d) the other is delayed in performing its obligations under these Terms under clause 17 for a period of 30 days or more.\n\nFor the purposes of this clause 15.1, in order for it to be possible to remedy a breach it must be possible to take steps so as to put the other party into the same position which (save as to the date) it would have been in if the breach had never occurred.\n\n## 16. Consequences of termination\n\n### 16.1\n\nTermination of any Quotation will not have the effect of terminating the whole Terms or any other Quotation, but termination of these Terms will automatically terminate all Quotations.\n\n### 16.2\n\nTermination of these Terms and/or any Quotation for any reason will not affect:\n\n(a) any accrued rights or liabilities which either party may have by the time termination takes effect; or\n(b) the coming into force or the continuation in force of any of its provisions that expressly or by implication are intended to come into force or continue in force on or after termination. Without prejudice to the foregoing, clauses 3, 4, 6. 7, 9, 10, 11,16 and 18 shall survive termination of these Terms.\n\n## 17. Force majeure\n\nNeither party will be liable to the other for any failure or delay in performing its obligations under these Terms which arises because of any circumstances which it cannot reasonably be expected to control (including any fire, flood, earthquake, elements of nature or acts of God, acts of war (whether or not war is declared), terrorism, riots, civil disorders, rebellions or revolutions, strikes, lock outs or other form of industrial action, provided that nothing shall affect the Licensee's obligation to make any payments due under these Terms. 18.\n\n## 18. General\n\n### 18.1\n\nExcept as expressly permitted under these Terms, the Licensee may not sub-license or assign, sub-contract or delegate any or all of its rights or obligations under these Terms without the prior written consent of the Licensor. Licensed use of this Software within AdapTable is deemed perpetual.\n\n### 18.2\n\nIn the event that the Licensor consents to the Licensee sub-contracting performance of its obligations, the Licensee will remain liable for performance of the relevant obligations and shall procure that the sub-contractor complies with all relevant provisions of these Terms applying to performance of the obligations concerned.\n\n### 18.3\n\nAll notices and consents relating to these Terms must be sent by email.\n\n### 18.4\n\nUnless the parties expressly agree otherwise in writing:\n\n(a) if a party:\n(i) fails to exercise or delays exercising or only exercises partially any right or remedy provided under these Terms or by law; or\n(ii) agrees not to exercise or to delay exercising any right or remedy provided under these Terms or by law;\n\nthen that party shall not be deemed to have waived and shall not be precluded or restricted from further exercising that or any other right or remedy; and\n\n(b) no right, power or remedy under these Terms or otherwise available to a party is exclusive of any other right, power or remedy under these Terms or otherwise available to that party.\n\n### 18.5\n\nIf any provision of these Terms is held for any reason to be ineffective or unenforceable, this shall not affect the validity or enforceability of any other provision of these Terms or these Terms as a whole. If any provision of these Terms is so found to be ineffective or unenforceable but would be effective or enforceable if some part of the provision were deleted, the provision in question shall apply with such modification(s) as may be necessary to make it effective and enforceable.\n\n### 18.6\n\nAll variations to these Terms must be agreed, set out in writing and signed on behalf of both parties before they take effect.\n\n### 18.7\n\nExcept to the extent that these Terms expressly provide otherwise, nothing in these Terms shall or is intended to create a partnership or joint venture between the parties, constitute one party as agent of the other or give either party authority to make or enter into commitments, assume liabilities or pledge credit on behalf of the other party. Neither party may act as f it were or represent (expressly or by implying it) that it is, an agent of the other or has such authority.\n\n### 18.8\n\nEach party confirms that, in entering into and performing these Terms, it is acting as principal and not as the agent of any undisclosed third-party principal.\n\n### 18.9\n\nA person who is not a party to these Terms shall not have any rights whether under the Contracts (Rights of Third Parties) Act 1999 or otherwise.\n\n### 18.10\n\nThe Licensor shall:\n\n(a) comply with all applicable laws, statutes, regulations and codes relating to anti-bribery and anti-corruption, including the Bribery Act 2010 (\"Act\");\n\n(b) not do anything which would constitute an offence or which would cause the Licensee to commit an offence under the Act;\n\n(c) have and shall maintain in place throughout the term of these Terms its own policies and procedures (copies of which will be made available to the Licensee upon request), including adequate procedures to ensure compliance with the Act as informed by the principles outlined in the guidance to the Act, and will enforce them where appropriate;\n\n(d) promptly report to the Licensee any request or demand for any undue financial or other advantage of any kind received by the Licensor in connection with the performance of these Terms; and\n\n(e) procure that all associated persons (as defined in the Act) of the Licensor will comply with clauses 18.10(a) to (c).\nA breach of this clause 18.10 by the Licensor shall constitute a material breach entitling the Licensee to terminate these Terms immediately on written notice.\n\n### 18.11\n\nThese Terms sets out all of the terms that have been agreed between the parties in relation to the subjects covered by it and no other terms shall be applicable between the parties in relation to such subjects, including without limitation, any terms set out on any purchase orders that have been issued by the Licensee. Provided always that nothing in this clause 18.11 will operate to limit or exclude any liability for fraud or fraudulent misrepresentation, no other representations or terms shall apply or form part of these Terms. Each party acknowledges that it has not been influenced to enter these Terms by and shall have no right or remedy (other than for breach of contract) in respect of, anything the other party has said or done or committed to do, except as expressly recorded in these Terms.\n\n### 18.12\n\nThese Terms are governed by English law. The parties submit to the exclusive jurisdiction of the English courts in relation to any dispute or difference between the parties arising out of or in connection with these Terms, its interpretation or subject-matter, but the Licensor is also entitled to apply to any court worldwide for injunctive or other remedies in order to protect or enforce its Intellectual Property Rights and/or Confidential Information.\n\n# Support Schedule\n\n## 1. Scope of Support Services\n\n### 1.1\n\nThe Licensor shall provide the following Support Services for the Software in accordance with these Terms:\n\n(a) corrective maintenance as described in paragraph 2; and\n\n(b) a software updating service as described in paragraph 3.\n\n### 1.2\n\nThe Support Services will be provided in English.\n\n### 1.3\n\nNotwithstanding anything else in these Terms, the Licensor shall not be obliged to provide Support Services:\n\n(a) in relation to any Bug to the extent that it is caused by the Licensee's misuse, misconfiguration, alteration or damage to the Software; the Licensee's failure to install an Update; or use of the Software in breach of these Terms;\n\n(b) on any public holiday day in the UK; and\n\n## 2. Corrective maintenance\n\n(a) Upon receipt of a Support Request, the Licensor shall use its reasonable endeavours to commence corrective maintenance or otherwise resolve the Support Request by the end of the following Business Day.\n\n(b) Notwithstanding anything else in the Support Schedule, the Licensor shall only be required to resolve Support Requests which relate to the current release of the Software.\n\n## 3. Software updating service\n\n### 3.1\n\nThe Licensor shall promptly make available to the Licensee Developers, as part of the Support Services, all Updates issued generally by the Licensor to its customers or to users of the Software.\n\n### 3.2\n\nThe Licensor shall promptly notify the Licensee Developers of all revisions, additions or updates to all Documentation which may be necessary as a result of the provision of any Update to enable proper use to be made of the Software by the Licensee Developers.\n"
    },
    {
      "filePath": "/privacy",
      "routePath": "/privacy",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/privacy.page.md",
      "fileName": "privacy.page.md",
      "folderPath": "/",
      "frontmatter": {
        "title": "Privacy Policy",
        "metaTitle": "Infinite Table DataGrid for React ‚Äî Privacy Policy",
        "metaDescription": "Infinite Table DataGrid for React ‚Äî Privacy Policy"
      },
      "excerpt": "_Last updated: 30 October 2022_",
      "readingTime": "7 min read",
      "content": "\n_Last updated: 30 October 2022_\n\n_This document describes the policies and procedures we use at Infinite Table in relation to the collection, use and disclosure of your information when you use our products._\nInfinite Table is fully committed to protecting your personal data and we ensure that we comply with all relevant data privacy laws.\n\nThis privacy policy gives details on what happens to your personal data when you use the Infinite Table website or the Infinite Table DataGrid.  \nShould you have concerns about your data, our contact details are:\n\nEmail address: admin@infinite-table.com\n\n## Our Collection and Processing of your Data\n\nPersonal data refers to any information which can identify an individual. It does not include anonymised data.\n\nThe personal data we may use at Infinite Table is limited to the following:\n\n### Communication Data¬†\n\nThis encompasses any message you send to us via forms on our website, by email or through any other form of communication. We process this data in order to communicate with you, for our own record keeping and in the event it should become necessary, for the establishment, pursuance or defence of legal claims.\n\nWe are lawfully entitled to process your data in this way on the grounds of legitimate interest, that is, in order to reply to communications sent to us, to keep records and to establish, pursue or defend legal claims.\n\n### Customer Data\n\nThis refers to data connected to any purchasing of Infinite Table licenses, including your name, billing address, email address, phone number, contact details, and purchase details. We process this data to supply you with the services you have purchased and to keep records of such transactions. Our lawful ground for this processing is the performance of a contract between you and us and/or taking steps at your request to enter into such a contract.\n\n### Marketing Data\n\nThis includes data about your preferences in receiving marketing materials from us. We process this data to deliver relevant content to you and measure or understand the effectiveness of this advertising. Our lawful ground for this processing is our consent, where we have asked for it or legitimate interests, where you have previously purchased from us or expressed an interest in our services or products, which in this case are to study how customers use our products/services, to develop them, to grow our business and to decide our marketing strategy.\n\n### Sensitive Data\n\n**We do not collect any Sensitive Data about you** (i.e. data that includes details about your race or ethnicity, religious or philosophical beliefs, sex life, sexual orientation, political opinions, trade union membership, information about your health and genetic and biometric data, criminal convictions and offences).\n\n### How We Collect Your Personal Data\n\nWe only collect data about you by you providing data directly to us (by filling in forms on our site or by sending us emails). We do not use any cookies on our website.\n\n### Marketing Communications\n\nOur lawful grounds for processing your personal data to send you marketing communications is either your consent or our legitimate interests (namely to grow our business).\n\nUnder the Privacy and Electronic Communications Regulations, we may send you marketing communications if:\n\n- you made a purchase or asked for information from us about our goods or services\n- you agreed to receive marketing communications and in each case you have not since opted out of receiving such communications. You can opt out of receiving marketing emails from us at any time.\n\nYou can ask us to stop sending you marketing messages at any time by following the opt-out links on any marketing message sent to you or via email.\n\nIf you opt out of receiving marketing communications this opt-out does not affect personal data provided as a result of other transactions, such as purchases, warranty registrations etc.\n\n### Disclosures Of Your Personal Data\n\nWe may have to share your personal data with one or more of the parties below:\n\n- Professional advisers including lawyers, bankers, auditors and insurers\n- Government bodies that require us to report processing activities.\n\nWe require all third parties to whom we transfer your data to respect the security of your personal data and to treat it in accordance with the law. We only allow such third parties to process your personal data for specified purposes and in accordance with our instructions.\nInternational Transfers\n\n### Data Security\n\nWe have security measures in place to prevent your personal data from being accidentally lost, used, altered, disclosed, or accessed without authorisation. We also allow access to your personal data only to those employees and partners who have a business need to know such data. They will only process your personal data on our instructions, and we insist on absolute confidentiality.\n\nWe have strict procedures in place to deal with any suspected personal data breach and will notify you and any applicable regulator of a breach if we are legally required to.\n\n### Data Retention\n\nWe will only retain your personal data for as long as necessary to fulfil the purposes we collected it for, including for the purposes of satisfying any legal, accounting, or reporting requirements.\n\nWhen deciding the correct time for which to keep the data, we look at its amount, nature and sensitivity, potential risk of harm from unauthorised use or disclosure, the processing purposes, and if these can be achieved by other means and legal requirements.\n\nFor tax purposes the law requires us to keep basic information about our customers (including Contact, Identity, Financial and Transaction Data) for six years after they stop being customers.\n\n### Your Legal Rights\n\nUnder data protection laws your rights in relation to your personal data include the right to:\n\n- request access, correction, erasure, restriction or transfer of data\n- object to processing, or to movement of data and (where the lawful ground of processing is consent) to withdraw consent\n\nIn order to exercise any of your rights, please get in touch with us at [admin@infinite-table.com](mailto:admin@infinite-table.com); we guarantee to respond to your request as quickly as possible.\n\nInfinite Table will not require you to pay a fee to access your personal data or to exercise any of the other rights relating to your data.\n\nWe may need to request specific information from you to help us confirm your identity and ensure your right to access your personal data and your rights in relation to it. This is an important security measure designed to protect your data and to ensure that personal data is not disclosed to any person who has no right to receive it. We may also contact you to ask you for further information in relation to your request.\n\nWe try to respond to all legitimate requests within one week. Occasionally it may take us longer if your request is particularly complex or you have made a number of requests. In this case, we will notify you.\n\nIf you are not happy with any aspect of how we collect and use your data, we would ask you to get in touch with us so that we can try to resolve the issue for you.\n\n### Third-Party Links\n\nThe Infinite Table website includes links to third-party websites, plug-ins and applications. Clicking on those links or enabling those connections may allow third parties to collect or share data about you. We do not control these third-party websites and are not responsible for their privacy statements. We advise you to be aware when you leave our website, and to read the privacy notice of every website you visit.\n"
    },
    {
      "filePath": "/blog/ideas",
      "routePath": "/blog/ideas",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/ideas.page.md",
      "fileName": "ideas.page.md",
      "folderPath": "/blog/",
      "frontmatter": {
        "title": "Blog ideas",
        "draft": true,
        "date": "2025-01-01T00:00:00.000Z"
      },
      "excerpt": "# Blog post about keeping productivity high in infinite table - tests, build tools, styling approach",
      "readingTime": "1 min read",
      "content": "\n# Blog post about keeping productivity high in infinite table - tests, build tools, styling approach\n"
    },
    {
      "filePath": "/docs/devtools",
      "routePath": "/docs/devtools",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/devtools.page.md",
      "fileName": "devtools.page.md",
      "folderPath": "/docs/",
      "frontmatter": {
        "title": "Infinite Table DevTools",
        "description": "Guide on using the Chrome DevTools Extension for the Infinite Table React DataGrid"
      },
      "excerpt": "We're happy to announce that [Infinite Table DevTools extension](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa) is now live - [install it here!](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa)",
      "readingTime": "1 min read",
      "content": "\nWe're happy to announce that [Infinite Table DevTools extension](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa) is now live - [install it here!](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa)\n\n\n\nTo see the extension on a live demo, head to the [chrome webstore](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa) to download the extension.\n\nThen visit [our live demo page](/full-demo) and open your browser devtools - you should see the \"Infinite Table\" devtool tab. Click it and enjoy interacting with the DataGrid!\n\n\n<Note>\n\nTo see an Infinite Table instance in the devtools, specify the <PropLink name=\"debugId\" /> prop.\n\n\n```tsx {2}\n<InfiniteTable\n  debugId=\"unique id for devtools\"\n/>\n```\n\n</Note>\n\nInfinite Table is the first DataGrid with a Chrome DevTools extension. Starting with version `7.0.0` of Infinite, you can specify the `debugId` property on the `<InfiniteTable />` instance and it will be picked up by the devtools.\n\n\n```tsx {16}\nconst columns = {\n  name: {\n    field: 'firstName',\n  },\n  lastName: {\n    field: 'lastName',\n  },\n  age: {\n    field: 'age',\n  },\n}\n\nconst App = () => {\n  return <DataSource primaryKey={'id'} data={[...]}>\n    <InfiniteTable\n      debugId=\"simple\"\n      columns={columns}\n    />\n  </DataSource>\n}\n```\n\n<Note>\n\nIf you have multiple instances, each with a unique `debugId` property, they will all show up\n</Note>\n\n<img src=\"https://raw.githubusercontent.com/infinite-table/infinite-react/refs/heads/master/devtools/screenshots/main.jpg\" alt=\"Infinite Table DevTools Extension\" width=\"100%\" style={{minWidth: \"100%\"}} />\n"
    },
    {
      "filePath": "/docs/index",
      "routePath": "/docs/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/",
      "frontmatter": {
        "title": "Infinite Table Documentation",
        "description": "Developer Documentation for Infinite Table, your go-to React DataGrid component to handle huge amounts of data"
      },
      "excerpt": "<HomepageHero />",
      "readingTime": "3 min read",
      "content": "\n<HomepageHero />\n\n## What is Infinite Table?\n\nInfinite Table is a React DataGrid component for displaying virtualized tabular data.\n\nIt helps you display huge datasets and get the most out of your data by providing you the right tools to enjoy these features:\n\n- [<img src=\"/icons/50x50/sorting.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> sorting](/docs/learn/sorting/overview)\n- [<img src=\"/icons/50x50/row-grouping.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> row grouping](/docs/learn/grouping-and-pivoting/grouping-rows) - both server-side and client-side\n- [<img src=\"/icons/50x50/pivoting.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> pivoting](/docs/learn/grouping-and-pivoting/pivoting/overview) - both server-side and client-side\n- [<img src=\"/icons/50x50/aggregations.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> aggregations](/docs/learn/grouping-and-pivoting/grouping-rows#aggregations)\n- [<img src=\"/icons/50x50/live-pagination.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> live pagination](/docs/learn/working-with-data/live-pagination)\n- [<img src=\"/icons/50x50/lazy-loading.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> lazy loading](/docs/learn/working-with-data/lazy-loading)\n- [<img src=\"/icons/50x50/keyboard-navigation.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> keyboard navigation](/docs/learn/keyboard-navigation/navigating-cells)\n- [<img src=\"/icons/50x50/fixed-flex-cols.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> fixed and flexible columns](/docs/learn/columns/fixed-and-flexible-size)\n- [<img src=\"/icons/50x50/column-grouping.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> column grouping](/docs/learn/column-groups)\n- [<img src=\"/icons/50x50/filtering.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> filtering](/docs/learn/filtering)\n- [<img src=\"/icons/50x50/theming.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> theming](/docs/learn/theming)\n\n## Installation\n\nInstallation could not be more straightforward - just one npm command:\n\n<TerminalBlock>\nnpm i @infinite-table/infinite-react\n</TerminalBlock>\n\n## ‚ù§Ô∏è TypeScript\n\nInfinite Table is fully typed and offers you a great developer experience, to help you get up and running quickly.\n\n> The TypeScript typings file is included in the npm package - you don't have to download an additional **@types** package\n\n<HeroCards>\n<YouWillLearnCard title=\"Learn about our TypeScript typings\" path=\"/docs/learn/getting-started/typescript-types\">\nRead more about how to use our TypeScript types\n</YouWillLearnCard>\n\n</HeroCards>\n\n## üìÑ Extensive Documentation\n\nWe're aware good documentation is a must and are updating our documentation as we add new features. Head to [our getting started](/docs/learn/getting-started) guide to get up and running quickly.\n\n## üè¢ Enterprise-Ready\n\nInfinite Table is ready to power your enterprise apps, as it supports advanced [data fetching](/docs/learn/working-with-data#data-loading-strategies), [filtering](/docs/learn/filtering), [sorting](/docs/learn/sorting/overview), [grouping](/docs/learn/grouping-and-pivoting/grouping-rows), [pivoting](/docs/learn/grouping-and-pivoting/pivoting/overview), [aggregations](/docs/learn/grouping-and-pivoting/group-aggregations), [live pagination](/docs/learn/working-with-data/live-pagination), [lazy loading](/docs/learn/working-with-data/lazy-loading) - all of those with support for both client-side and server-side implementations.\n\nYou can choose to leverage our built-in implementations in the browser, or you can process your data on the server with full support from our-side.\n\n### üîí Secure by Default\n\nWe take security seriously and only have a total of 3 dependencies in our full dependency graph - and this number will only go down.\n\n### üì¶ Small Bundle Size\n\nOur bundle size is under `300kB` and we're dedicated to [keeping it small](https://bundlephobia.com/package/@infinite-table/infinite-react).\n\n<HeroCards>\n<YouWillLearnCard title=\"Small bundle\" newTab path=\"https://bundlephobia.com/package/@infinite-table/infinite-react\">\n\nSee our bundle size in BundlePhobia\n\n</YouWillLearnCard>\n</HeroCards>\n\n### üß™ Automated End-to-End Tests\n\nOur releases are automated and, we have full end-to-end tests that ensure we're delivering to our standards.\n\nReal-browser tests help us move with confidence and continue to ship great features.\n\n<HeroCards>\n<YouWillLearnCard title=\"End-to-end tests\" newTab path=\"https://github.com/infinite-table/infinite-react/tree/master/examples/src/pages/tests\">\n\nCheck out our end-to-end tests in GitHub\n\n</YouWillLearnCard>\n\n</HeroCards>\n\n## üé® Themable\n\n`Infinite Table` is fully customizable, via CSS variables.\n\nIt ships with both a **light** and a **dark** theme - all you have to do is import the CSS file from the package.\n\n```ts\nimport '@infinite-table/infinite-react/index.css';\n\n// This file includes both the light and the dark themes.\n```\n\n<HeroCards>\n<YouWillLearnCard title=\"Theming with CSS Variables\" path=\"/docs/learn/theming#css-variables\">\n\nRead how to use themes and **CSS variables** to customize every aspect of Infinite Table\n\n</YouWillLearnCard>\n</HeroCards>\n"
    },
    {
      "filePath": "/comparison/index",
      "routePath": "/comparison/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/comparison/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/comparison/",
      "frontmatter": {},
      "excerpt": "# Comparison of React DataGrids",
      "readingTime": "1 min read",
      "content": "# Comparison of React DataGrids\n\n## DevExtreme Data Grid\n\n\nSandpack deps=\"devextreme-react,devextreme\">\n\n```tsx file=\"devexpress.app.tsx\"\n\n```\n\n```html file=devexpress.index.html\n\n```\n\n```ts file=\"columns.ts\"\n\n```\n\nSandpack\n\n## AG Grid\n\nSandpack deps=\"ag-grid-community,ag-grid-react,ag-grid-enterprise\"\n\n`tsx file=\"aggrid.page.tsx\"\n\n`\n\n`ts file=\"columns.ts\"\n\n`\n\nSandpack\n\n## Infinite Table\n\nSandpack\n\n`tsx file=\"infinite.page.tsx\"\n\n`\n\n`ts file=\"columns.ts\"\n\n`\n\nSandpack\n"
    },
    {
      "filePath": "/docs/releases/index",
      "routePath": "/docs/releases/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/releases/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/releases/",
      "frontmatter": {
        "title": "Releases",
        "description": "All releases | Infinite Table DataGrid for React"
      },
      "excerpt": "## 7.2.0",
      "readingTime": "6 min read",
      "content": "\n## 7.2.0\n\nRelease GroupingToolbar - a new way to interact with your grouping.\nFix error that appeared when column pinning was used and no visible columns were available.\n\n## 7.1.0\n\nSupport for React 19 - update source-code, fix tests and update typings to work with React 19\n\n## 7.0.1\n\nBugfix related to devtools Uncaught TypeError: Cannot read properties of undefined (reading 'startsWith')\n\n## 7.0.0\n\nFirst version that supports Infinite Table devtools.\n\n## 6.2.11\n\nImprove performance on heavy scrolling by avoiding CSS vars for scroll pos.\n\n## 6.2.10\n\nRecompute DataSource repeat wrapped group rows when `wrapRowsHorizontally` changes.\n\n## 6.2.9\n\nFix edge case where `repeatWrappedGroupRows` didn't work in trees for collapsed non-leaf nodes. When a non-leaf node was collapsed, if it was the first node in a column set, it didn't repeat its parents correctly.\nVersion `6.2.9` fixes this.\n\n## 6.2.8\n\nMinor bugfix.\n\n## 6.2.6\n\nConsolidate themes\n\n## 6.2.2\n\nUpdate shadcn theme to work well with the latest tailwind 4 colors.\n\n## 6.2.0\n\nStarting with this release, the CSS for each theme (other than the `\"default\"`) is not included in the root CSS file (`@infinite-table/infinite-react/index.css`) and has to be imported explicitly:\n\n```ts\nimport '@infinite-table/infinite-react/theme/shadcn.css'\nimport '@infinite-table/infinite-react/theme/balsam.css'\nimport '@infinite-table/infinite-react/theme/minimalist.css'\nimport '@infinite-table/infinite-react/theme/ocean.css'\n```\n\n## 6.1.1\n\nFix performance regressions introduced in 6.1.0.\n\nAdd [Keyboard Navigation API](/docs/reference/keyboard-navigation-api)\n\n## 6.1.0\n\nThis release includes a refactor of the core virtualization algorithm, which should result some performance improvements in certain scenarios.\n\n@milestone id=\"142\"\n\n## 6.1.0-canary.0\n\nFix virtualization issues.\n\n## 6.0.20\n\n\n## 6.0.19\n\n@milestone id=\"141\"\n\n## 6.0.18\n\n@milestone id=\"140\"\n\n## 6.0.16\n\n@milestone id=\"139\"\n\n## 6.0.15\n\n@milestone id=\"138\"\n\n## 6.0.13\n\n@milestone id=\"136\"\n\n## 6.0.12\n\n@milestone id=\"135\"\n\n## 6.0.10\n\n@milestone id=\"134\"\n\n## 6.0.9\n\n@milestone id=\"133\"\n\n## 6.0.8\n\n@milestone id=\"132\"\n\n## 6.0.5\n\n@milestone id=\"131\"\n\n## 6.0.0\n\n@milestone id=\"130\"\n\n## 5.0.5\n\n@milestone id=\"129\"\n\n## 5.0.4\n\n@milestone id=\"128\"\n\n## 5.0.1\n\n@milestone id=\"127\"\n\n## 5.0.0\n\nAdd support for horizontal layout.\n\n## 4.4.1\n\n## 4.4.0\n\n@milestone id=\"125\"\n\n## 4.3.7\n\n@milestone id=\"124\"\n\n## 4.3.2\n\n@milestone id=\"123\"\n\n## 4.3.0\n\nFix major lazy loading bugs and issues.\n\n## 4.2.0\n\nReplace `sortMode` with [shouldReloadData.sortInfo](https://infinite-table.com/docs/reference/datasource-props#shouldReloadData.sortInfo)\nReplace `groupMode` with [shouldReloadData.groupBy](https://infinite-table.com/docs/reference/datasource-props#shouldReloadData.groupBy)\n\n@milestone id=\"122\"\n\n## 4.1.0\n\n@milestone id=\"121\"\n\n## 4.0.0\n\n@milestone id=\"120\"\n\n## 3.3.4\n\n@milestone id=\"119\"\n\n## 3.3.3\n\n@milestone id=\"118\"\n\n## 3.3.0\n\n@milestone id=\"117\"\n\n## 3.2.11\n\n@milestone id=\"116\"\n\n## 3.2.6\n\n@milestone id=\"115\"\n\n## 3.2.5\n\n@milestone id=\"114\"\n\n## 3.2.3\n\n@milestone id=\"112\"\n\n## 3.2.0\n\n@milestone id=\"111\"\n\n## 3.1.5\n\n@milestone id=\"109\"\n\n## 3.1.1\n\n@milestone id=\"107\"\n\n## 3.1.0\n\n@milestone id=\"106\"\n\n## 3.0.15\n\n@milestone id=\"105\"\n\n## 3.0.12\n\n@milestone id=\"104\"\n\n## 3.0.10\n\n@milestone id=\"102\"\n\n## 3.0.9\n\n@milestone id=\"101\"\n\n## 3.0.7\n\n@milestone id=\"100\"\n\n## 3.0.4\n\n@milestone id=\"99\"\n\n## 3.0.3\n\n@milestone id=\"98\"\n\n## 3.0.1\n\n@milestone id=\"97\"\n\n## 3.0.0\n\n@milestone id=\"96\"\n\n## 2.0.8\n\n@milestone id=\"95\"\n\n## 2.0.4 üöÄ\n\n@milestone id=\"93\"\n\n## 2.0.3 üöÄ\n\n@milestone id=\"92\"\n\n## 2.0.2 üöÄ\n\n@milestone id=\"91\"\n\n## 2.0.0 üöÄ\n\nThis release, although a major one, does not introduce new major functionality, but rather improves on existing features and more specifically adds support for sorting group columns.\n\n#### Improved group column sorting\n\nVersion `2.0.0` allows you to make group columns sortable, even when they are configured with `groupBy` fields that are not actually bound to columns.\n\n```tsx\n<DataSource<Person>\n  groupBy={[\n    // those fields are not bound to actual columns\n    {field: 'team'},\n    {field: 'age' },\n  ]}>\n  <InfiniteTable<Person>\n    groupColumn={{\n      sortType: ['string', 'number'], // <--- allows you to have\n      // the group column sortable\n    }}\n    ...\n/>\n```\n\n### Updated column sortable behavior\n\nWe've also introduced a few new props and renamed `column.sortable` to <PropLink name=\"columns.defaultSortable\" />.\n\nAlso, the behavior for the <PropLink name=\"sortable\" /> prop has changed. The new <PropLink name=\"columnDefaultSortable\" /> is now what <PropLink name=\"sortable\" /> used to be, while the <PropLink name=\"sortable\" /> prop overrides any sorting flags and is the ultimate source of truth for column sorting.\n\n@milestone id=\"90\"\n\n## 1.3.23 üöÄ\n\n@milestone id=\"89\"\n\n## 1.3.22 üöÄ\n\n@milestone id=\"88\"\n\n## 1.3.21 üöÄ\n\n@milestone id=\"87\"\n\n## 1.3.20 üöÄ\n\n@milestone id=\"86\"\n\n## 1.3.17 üöÄ\n\n@milestone id=\"85\"\n\n## 1.3.15 üöÄ\n\n@milestone id=\"84\"\n\n## 1.3.12 üöÄ\n\n@milestone id=\"83\"\n\n## 1.3.8 üöÄ\n\n@milestone id=\"82\"\n\n## 1.3.7 üöÄ\n\n@milestone id=\"81\"\n\n## 1.3.6 üöÄ\n\n@milestone id=\"80\"\n\n## 1.3.4 üöÄ\n\n@milestone id=\"79\"\n\n## 1.3.2 üöÄ\n\n@milestone id=\"78\"\n\n## 1.3.0 üöÄ\n\n@milestone id=\"77\"\n\n## 1.2.5 üöÄ\n\n@milestone id=\"76\"\n\n## 1.2.4 üöÄ\n\n@milestone id=\"75\"\n\n## 1.2.3 üöÄ\n\n@milestone id=\"74\"\n\n## 1.2.2 üöÄ\n\n@milestone id=\"73\"\n\n## 1.2.1 üöÄ\n\n@milestone id=\"72\"\n\n## 1.2.0 üöÄ\n\n@milestone id=\"71\"\n\n## 1.1.0 üöÄ\n\n@milestone id=\"70\"\n\n## 1.0.0 üöÄ\n\n@milestone id=\"69\"\n\n## 0.9.0 üöÄ\n\n@milestone id=\"67\"\n\n## 0.8.1 üöÄ\n\n@milestone id=\"66\"\n\n## 0.8.0 üöÄ\n\n@milestone id=\"65\"\n\n## 0.7.3 üöÄ\n\n@milestone id=\"64\"\n\n## 0.7.1 üöÄ\n\n@milestone id=\"64\"\n\n## 0.7.0 üöÄ\n\n@milestone id=\"63\"\n\n## 0.6.4 üöÄ\n\n@milestone id=\"62\"\n\n## 0.6.3 üöÄ\n\n@milestone id=\"61\"\n\n## 0.6.2 üöÄ\n\n@milestone id=\"60\"\n\n## 0.6.1 üöÄ\n\n@milestone id=\"59\"\n\n## 0.6.0 üöÄ\n\n@milestone id=\"58\"\n\n## 0.4.12 üöÄ\n\n@milestone id=\"56\"\n\n## 0.4.10 üöÄ\n\n@milestone id=\"54\"\n\n## 0.4.9 üöÄ\n\n@milestone id=\"53\"\n\n## 0.4.8 üöÄ\n\n@milestone id=\"52\"\n\n## 0.4.7 üöÄ\n\n@milestone id=\"51\"\n\n## 0.4.6 üöÄ\n\n@milestone id=\"50\"\n\n## 0.4.5 üöÄ\n\n@milestone id=\"49\"\n\n## 0.4.4 üöÄ\n\n@milestone id=\"48\"\n\n## 0.4.3 üöÄ\n\n@milestone id=\"47\"\n\n## 0.4.1 üöÄ\n\n@milestone id=\"45\"\n\n## 0.4.0 üöÄ\n\n@milestone id=\"44\"\n\n## 0.3.22 üöÄ\n\n@milestone id=\"43\"\n\n## 0.3.21 üöÄ\n\n@milestone id=\"42\"\n\n## 0.3.20 üöÄ\n\n@milestone id=\"41\"\n\n## 0.3.19 üöÄ\n\n@milestone id=\"40\"\n\n## 0.3.17 üöÄ\n\n@milestone id=\"39\"\n\n## 0.3.16 üöÄ\n\n@milestone id=\"38\"\n\n## 0.3.15 üöÄ\n\n@milestone id=\"37\"\n\n## 0.3.14 üöÄ\n\n@milestone id=\"36\"\n\n## 0.3.13 üöÄ\n\n@milestone id=\"35\"\n\n## 0.3.12 üöÄ\n\n@milestone id=\"34\"\n\n## 0.3.11 üöÄ\n\n@milestone id=\"33\"\n\n## 0.3.10 üöÄ\n\n@milestone id=\"32\"\n\n## 0.3.7 üöÄ\n\n@milestone id=\"31\"\n\n## 0.3.6 üöÄ\n\n@milestone id=\"30\"\n\n## 0.3.4 üöÄ\n\n@milestone id=\"29\"\n\n## 0.3.3 üöÄ\n\n@milestone id=\"28\"\n\n## 0.3.2 üöÄ\n\n@milestone id=\"27\"\n\n## 0.3.1 üöÄ\n\n@milestone id=\"26\"\n\nRename `rowInfo.flatRowInfoArray` to `rowInfo.deepRowInfoArray`\n\n## 0.3.0 üöÄ\n\n@milestone id=\"25\"\n\n## 0.3.0-canary.0 üöÄ\n\nNew virtualization engine implemented for better performance.\n\n## 0.2.20 üöÄ\n\n@milestone id=\"24\"\n\n## 0.2.18 üöÄ\n\n@milestone id=\"22\"\n\n## 0.2.17 üöÄ\n\n@milestone id=\"21\"\n\n## 0.2.16 üöÄ\n\n@milestone id=\"20\"\n\n## 0.2.15 üöÄ\n\n@milestone id=\"19\"\n\n## 0.2.14 üöÄ\n\n@milestone id=\"18\"\n\n## 0.2.13 üöÄ\n\n@milestone id=\"17\"\n\n## 0.2.12 üöÄ\n\n@milestone id=\"16\"\n\n## 0.2.11 üöÄ\n\n@milestone id=\"15\"\n\n## 0.2.10 üöÄ\n\n@milestone id=\"14\"\n\n## 0.2.9 üöÄ\n\n@milestone id=\"13\"\n\n## 0.2.8 üöÄ\n\n@milestone id=\"12\"\n\n## 0.2.7 üöÄ\n\n@milestone id=\"11\"\n\n## 0.2.6 üöÄ\n\n@milestone id=\"9\"\n\n## 0.2.5 üöÄ\n\n@milestone id=\"8\"\n\n## 0.2.4 üöÄ\n\n@milestone id=\"7\"\n\n## 0.2.0 üöÄ\n\n- Implement initial support for [server-side pivoting](/docs/learn/grouping-and-pivoting/pivoting/overview)\n\n## 0.1.0 üöÄ\n\nThis release introduces several breaking changes:\n\n- `DataSource.groupRowsBy` has been renamed to <DataSourcePropLink name=\"groupBy\"/>\n- `InfiniteTable.columnAggregations` has been removed and you have to use <DataSourcePropLink name=\"aggregationReducers\" />\n\n@milestone id=\"5\"\n\n## 0.0.10 üöÄ\n\n@milestone id=\"4\"\n\n## 0.0.9 üöÄ\n\n@milestone id=\"3\"\n\n## 0.0.7 üöÄ\n\n@milestone id=\"2\"\n\n## 0.0.5 üöÄ\n\n@milestone id=\"1\"\n"
    },
    {
      "filePath": "/docs/releases/v1",
      "routePath": "/docs/releases/v1",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/releases/v1.page.md",
      "fileName": "v1.page.md",
      "folderPath": "/docs/releases/",
      "frontmatter": {
        "title": "Version 1",
        "layout": "Releases"
      },
      "excerpt": "## 1.0.0 üöÄ",
      "readingTime": "1 min read",
      "content": "\n## 1.0.0 üöÄ\n\n@milestone id=\"60\"\n"
    },
    {
      "filePath": "/docs/reference/error-codes",
      "routePath": "/docs/reference/error-codes",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/error-codes.page.md",
      "fileName": "error-codes.page.md",
      "folderPath": "/docs/reference/",
      "frontmatter": {
        "title": "Error Codes",
        "description": "Infinite Table Error Codes",
        "layout": "API"
      },
      "excerpt": "<PropTable sort>",
      "readingTime": "1 min read",
      "content": "\n<PropTable sort>\n\n<Prop name=\"DS001\">\n\n> The error happens when you pass a new `data` prop on every render.\n\n```tsx title=\"DONT: Dont use a new reference of the data prop on every render\"\nfunction App() {\n  // this is a new reference on every render\n  function data(){\n    return Promise.resolve([])\n  }\n  return <DataSource primaryKey=\"id\" data={data}>\n  </DataSource>\n}\n```\n\n```tsx title=\"DO: Use the same reference of the data\"\n// this is the same reference on every render\nfunction data(){\n  return Promise.resolve([])\n}\nfunction App() {\n  \n  const [dataFn, setDataFn] = useState(data)\n  return <DataSource\n    primaryKey=\"id\"\n    data={dataFn} // or data={data}\n    onSortInfo={() => {\n      // you can update it if you want\n      // but dont do it on every render\n      setDataFn(data.bind(null)) \n    }}\n  />\n}\n```\n\n</Prop>\n\n</PropTable>"
    },
    {
      "filePath": "/docs/reference/index",
      "routePath": "/docs/reference/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/",
      "frontmatter": {
        "title": "Reference Overview",
        "description": "Infinite Table Reference Overview",
        "layout": "API"
      },
      "excerpt": "The Reference pages contain API documentation on every prop exposed in the `InfiniteTable` component and the related `DataSource` component.",
      "readingTime": "2 min read",
      "content": "\nThe Reference pages contain API documentation on every prop exposed in the `InfiniteTable` component and the related `DataSource` component.\n\n<HeroCards>\n<YouWillLearnCard title=\"Infinite Table Props\" path=\"/docs/reference/infinite-table-props\">\n\nGo through the extensive list of props available on the `InfiniteTable` component.\n\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"DataSource Props\" path=\"/docs/reference/datasource-props\">\n\nSee the full list of props available on the `DataSource` component.\n\n</YouWillLearnCard>\n\n</HeroCards>\n\n## API objects\n\nIn addition, both those components expose an `API` object that can be used to imperatively interact with them. This is useful for very advanced use cases - as most of the time interacting with the component via its props declaratively will be enough.\n\n<HeroCards>\n<YouWillLearnCard title=\"Infinite Table API\" path=\"/docs/reference/api\">\n\nExplore the `InfiniteTable` API which allows advanced interactions with the component, like scrolling to a specific cell, selecting rows and more.\n\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"DataSource API\" path=\"/docs/reference/datasource-api\">\n\nJump into the `DataSource` API, which allows advanced interactions with the data source, like editing & inserting data, fetching data, refreshing and more.\n\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"Infinite Table Selection API\" path=\"/docs/reference/selection-api\">\n\nRead more about the Selection API and how you can use it to change row and group selection.\n\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"Infinite Table Column API\" path=\"/docs/reference/column-api\">\n\nFind out more about the Column API and how you can use it to change column state.\n\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"DataSource Tree API\" path=\"/docs/reference/tree-api\">\n\nJump into the `Tree` API, which allows advanced interactions with the tree data source - collapse/expand nodes, node updates and more.\n\n</YouWillLearnCard>\n</HeroCards>\n\n## Hooks\n\nInfinite Table exposes a few custom hooks that can be used to customize the component and its behavior. Most of the hooks will be useful when you want to implement custom components for `InfiniteTable` - like custom cells, headers, cell editors, etc.\n\n<HeroCards>\n<YouWillLearnCard title=\"Infinite Table Hooks\" path=\"/docs/reference/hooks\">\n\nCustom hooks allow you to use the `InfiniteTable` at full potential and customize it to your needs.\n\n</YouWillLearnCard>\n\n</HeroCards>\n\n## Type Definitions\n\nInfinite Table exports quite a lot of TS type definitions. See the dedicated page for guides and explanations to help you use them effectively.\n\n<HeroCards>\n<YouWillLearnCard title=\"Type Definitions\" path=\"/docs/reference/type-definitions\">\n\nWe export our type definitions in case you ever need them. In many cases, you won't need to import them explicitly, but you might find them useful in more advaced scenarios.\n\n</YouWillLearnCard>\n\n</HeroCards>\n"
    },
    {
      "filePath": "/docs/reference/infinite-table-props",
      "routePath": "/docs/reference/infinite-table-props",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/infinite-table-props.page.md",
      "fileName": "infinite-table-props.page.md",
      "folderPath": "/docs/reference/",
      "frontmatter": {
        "title": "Infinite Table Props",
        "layout": "API",
        "description": "Infinite Table Props Reference page with complete examples"
      },
      "excerpt": "In the API Reference below we'll use **`DATA_TYPE`** to refer to the TypeScript type that represents the data the component is bound to.",
      "readingTime": "80 min read",
      "content": "\nIn the API Reference below we'll use **`DATA_TYPE`** to refer to the TypeScript type that represents the data the component is bound to.\n\n<PropTable sort>\n\n<Prop name=\"debugId\" type=\"string\">\n\n> The unique id to identify this InfiniteTable instance in devtools\n\nIf you have [Infinite Table DevTools extension](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa) installed, the current `<InfiniteTable />` instance will be picked up by the devtools with this specific name.\n\nSee [our blogpost on the devtools extension](/blog/2025/05/12/the-first-devtools-for-a-datagrid) for more details.\n\n\n</Prop>\n\n<Prop name=\"repeatWrappedGroupRows\" type=\"boolean|(rowInfo: InfiniteTableRowInfo<DATA_TYPE>) => boolean\" defaultValue={true}>\n\n> When enabled, and <PropLink name=\"wrapRowsHorizontally\" /> is also enabled, if there is <DPropLink name=\"groupBy\" code={false}>grouping configured</DPropLink> or if you're using tree data, the group/tree rows will be repeated at the top of each column set if the group/parent starts in the previous column set.\n\nSee related <PropLink name=\"wrapRowsHorizontally\" />.\n\n<Sandpack title=\"Horizontal Layout with repeated wrapped group rows\">\n\n```tsx file=\"horizontal-layout-repeat-wrapped-groups-example.page.tsx\"\n```\n\n</Sandpack>\n\n<Sandpack title=\"Tree with horizontal Layout and repeated wrapped tree rows\">\n\n<Description>\n\nIn this example, parent nodes are repeated conditionally: only top-level parent nodes are repeated when wrapping happens.\n\n</Description>\n\n```tsx file=\"horizontal-layout-repeat-wrapped-tree-rows-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"wrapRowsHorizontally\" type=\"boolean\" defaultValue={false}>\n\n> Whether to wrap rows horizontally or not. Horizontal Layout is a very different approach to the normal grid layout and only useful in very advanced scenarios.\n\nWhen this is set to `true`, rows will be wrapped horizontally to fit the container.\n\n<Note>\n\nWhen horizontal layout is enabled in combination with grouping, you can also use the <PropLink name=\"repeatWrappedGroupRows\" /> property to repeat the group rows at the top of each column set - if the group starts in the previous column set.\n\n</Note>\n\nWhen horizontal layout is enabled, rows will wrap and the existing columns will be repeated for each row-wrapping section - we will call them  column sets.\n\nSo for example when the DataGrid is configured with 3 columns and the DataSource has 25 rows, but only 10 rows fit in the vertical viewport, you will end up with 3 column-sets: the first with 10 rows, the second with the next 10 rows, and the third with the remaining 5 rows. The same columns are repeated for each column-set.\n\n<Sandpack title=\"Horizontal Layout example\">\n\n```tsx file=\"horizontal-layout-example.page.tsx\"\n```\n\n</Sandpack>\n\n<Note>\n\nIn the column rendering functions (both for header and cell rendering), you will have access to the `horizontalLayoutPageIndex` property. This is the index of the current horizontal layout page (the current column-set). `horizontalLayoutPageIndex` can either be `null`, when horizontal layout is disabled, or a number >= 0, when horizontal layout is enabled.\n\n</Note>\n\n<Note>\n\nWhen using horizontal layout, columns can't be configured to have a flexible width. So don't specify <PropLink name=\"columns.defaultFlex\" /> for any column when horizontal layout is enabled.\n\n</Note>\n\n\n<Sandpack title=\"Horizontal Layout example with column set index in header\">\n\n```tsx file=\"horizontal-layout-with-column-set-index-in-header-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"components.RowDetail\">\n\n> Component to use for rendering the row details section in the master-detail DataGrid. When specified, it makes InfiniteTable be a [master-detail DataGrid](/docs/learn/master-detail/overview). For configuring the height of row details, see <PropLink name=\"rowDetailHeight\" />\n\nSee related <PropLink name=\"rowDetailRenderer\" />.\n\n<Sandpack title=\"Basic master detail DataGrid example\" size=\"lg\">\n\n<Description>\n\nThis example shows a master DataGrid with cities & countries.\n\nThe details for each city shows a DataGrid with developers in that city.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-component-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n</Prop>\n\n<Prop name=\"scrollStopDelay\" type=\"number\" defaultValue={250}>\n\n> The delay in milliseconds that the DataGrid waits until it considers scrolling to be stopped. Also used when lazy loading is to fetch the next batch of data.\n\nThis also determines when the <PropLink name=\"onScrollStop\" /> callback prop is called.\n\n<Sandpack title=\"Scroll stop delay for lazy loading\">\n\n```ts file=\"scrollStopDelay-lazy-load-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n\n\n<Prop name=\"headerOptions\" type=\"{alwaysReserveSpaceForSortIcon: boolean}\" >\n\n> Various header configurations for the DataGrid.\n\nFor now, it has the following properties:\n\n - <PropLink name=\"headerOptions.alwaysReserveSpaceForSortIcon\" />\n\n<Sandpack>\n\n```tsx file=\"sortIcon-reserve-space-example.page.tsx\"\n```\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"headerOptions.alwaysReserveSpaceForSortIcon\" type=\"boolean\" defaultValue={true}>\n\n> Whether to reserve space in the column header for the sort icon or not.\n\nWhen this is set to `true`, the space for the sort icon is always reserved, even if the column is not currently sorted.\n\n<Sandpack>\n\n```tsx file=\"sortIcon-reserve-space-example.page.tsx\"\n```\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"rowDetailRenderer\" type=\"(rowInfo: InfiniteTableRowInfo<DATA_TYPE>) => ReactNode\">\n\n> When specified, it makes InfiniteTable be a [master-detail DataGrid](/docs/learn/master-detail/overview). For configuring the height of row details, see <PropLink name=\"rowDetailHeight\" />. See related <PropLink name=\"components.RowDetail\" />.\n\nIt's an alternative to using <PropLink name=\"components.RowDetail\" />.\n\nThis function is called with the <TypeLink name=\"InfiniteTableRowInfo\">rowInfo</TypeLink> the user expands to see details for.\n\nUsing this function, you can render another DataGrid or any other custom content.\n\n<Note>\n\nMake sure you have a column with the `renderRowDetailIcon: true` flag set. <PropLink name=\"columns.renderRowDetailIcon\" /> on a column makes the column display the row details expand icon.\n\nWithout this flag, no column will have the expand icon, and the master-detail functionality will not work.\n\n</Note>\n\nTo configure the height of the row details section, use the <PropLink name=\"rowDetailHeight\" /> prop.\n\nFor rendering some row details as already expanded, see <PropLink name=\"defaultRowDetailState\" />.\n\n<Sandpack title=\"Basic master detail DataGrid example\" size=\"lg\">\n\n<Description>\n\nThis example shows a master DataGrid with cities & countries.\n\nThe details for each city shows a DataGrid with developers in that city.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"showColumnFilters\" type=\"boolean\" defaultValue={true}>\n\n> Whether to show the column filters or not (only applicable when the `<DataSource>` is configured with filtering - either with <DPropLink name=\"defaultFilterValue\" /> or <DPropLink name=\"filterValue\" />).\n\nWhen the `<DataSource>` is configured with <DPropLink name=\"defaultFilterValue\" />, the column filters will be shown by default. Specify this prop as `false` to hide the column filters.\n\n<Sandpack title=\"Controling the visibility of column filters\">\n\n```tsx file=\"column-filters-visibility-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"defaultRowDetailState\" type=\"RowDetailState\">\n\n> Specifies the default expanded/collapsed state of row details.\n\nFor the controlled version, see <PropLink name=\"rowDetailState\" />.\n\nIf <PropLink name=\"isRowDetailExpanded\" /> is specified, it has the last word in deciding if a row detail is expanded or not, so it overrides the `defaultRowDetailState`.\n\n<Sandpack title=\"Master detail DataGrid with some row details expanded by default\" size=\"lg\">\n\n<Description>\n\nSome of the rows in the master DataGrid are expanded by default.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-default-expanded-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"isRowDetailExpanded\" type=\"(rowInfo: InfiniteTableRowInfo) => boolean\">\n\n> This function ultimately decides if a row detail is expanded or not.\n\nThis function is meant for very advanced scenarios. For common use-cases, you'll probably use <PropLink name=\"rowDetailState\" /> and <PropLink name=\"defaultRowDetailState\" />.\n\nIf `isRowDetailExpanded` is specified, it overrides <PropLink name=\"rowDetailState\" />/<PropLink name=\"defaultRowDetailState\" />.\n\n</Prop>\n\n<Prop name=\"isRowDetailEnabled\" type=\"(rowInfo: InfiniteTableRowInfo<DATA_TYPE>) => boolean\">\n\n> Decides on a per-row basis if the row details are enabled or not. See [Master Detail](/docs/learn/master-detail/overview) for more information.\n\nThis function is called with the <TypeLink name=\"InfiniteTableRowInfo\">rowInfo</TypeLink> and should return a `boolean` value.\n\n\nIt's useful when you don't want to show the row detail for some rows.\n\n<Sandpack title=\"Master detail DataGrid with some row not having details\" size=\"lg\">\n\n<Description>\n\nAll the odd rows don't have details.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-per-row-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"rowDetailState\" type=\"RowDetailState\">\n\n> Specifies the expanded/collapsed state of row details.\n\nFor the uncontrolled version, see <PropLink name=\"defaultRowDetailState\" />.\n\nWhen you use this controlled property, make sure you pair it with the <PropLink name=\"onRowDetailStateChange\" /> callback to update it.\n\nIf <PropLink name=\"isRowDetailExpanded\" /> is specified, it has the final say in deciding if a row detail is expanded or not, so it overrides the `rowDetailState` and <PropLink name=\"defaultRowDetailState\" />.\n\n<Sandpack title=\"Master detail DataGrid with some row details expanded by default\" size=\"lg\">\n\n<Description>\n\nSome of the rows in the master DataGrid are expanded by default.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-controlled-expanded-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onRowDetailStateChange\" type=\"(rowDetailState: RowDetailState, {expandRow, collapseRow}) => void\">\n\n> Called when the expand/collapse state of row details changes.\n\nYou can use this function prop to update the <PropLink name=\"rowDetailState\" /> prop or simply to listen to changes in the row details state.\n\n<Note>\n\nThis function is called with an instance of the <TypeLink name=\"RowDetailState\" />. If you want to get the object behind it, simply call `rowDetailState.getState()`.\n\nBoth the `RowDetailState` instance and the state object (literal) are valid values you can pass to the <PropLink name=\"rowDetailState\" />.\n\n</Note>\n\n<Note>\n\nThe second parameter of this function is an object with `expandRow` and `collapseRow` properties, which contain the primary key of either the last expanded or the last collapsed row.\n\nFor example, if the user is expanding row `3`, the object will be `{expandRow: 3, collapseRow: null}`.\nNext, if the user collapses row `5`, the object will be `{expandRow: null, collapseRow: 5}`.\n\nThis makes it easy for you to know which action was taken and on which row.\n\n</Note>\n\nSee related <PropLink name=\"rowDetailState\" /> and <PropLink name=\"defaultRowDetailState\" />.\n\n<Sandpack title=\"Master detail DataGrid with listener to the row expand/collapse state change\" size=\"lg\">\n\n<Description>\n\nSome of the rows in the master DataGrid are expanded by default.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-controlled-expanded-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"rowDetailCache\" type=\"boolean|number\">\n> Controls the caching of detail DataGrids. By default, caching is disabled.\n\nIt can be one of the following:\n\n- `false` - caching is disabled - this is the default\n- `true` - enables caching for all detail DataGrids\n- `number` - the maximum number of detail DataGrids to keep in the cache. When the limit is reached, the oldest detail DataGrid will be removed from the cache.\n\n<Sandpack title=\"Master detail DataGrid with caching for 5 detail DataGrids\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nThis example will cache the last 5 detail DataGrids - meaning they won't reload when you expand them again.\nYou can try collapsing a row and then expanding it again to see the caching in action - it won't reload the data.\nBut when you open up a row that hasn't been opened before, it will load the data from the remote location.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-caching-with-default-expanded-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"rowDetailHeight\" type=\"number|CSSVar|(rowInfo)=>number\" defaultValue={300}>\n\n> Controls the height of the row details section, in master-detail DataGrids.\n\nThe default value is `300` pixels.\n\nThis can be a number, a string (the name of a CSS variable - eg `--detail-height`), or a function. When a function is defined, it's called with the <TypeLink name=\"InfiniteTableRowInfo\">rowInfo</TypeLink> object for the corresponding row.\n\n<Sandpack title=\"Master detail DataGrid with custom detail height\" size=\"lg\">\n\n<Description>\n\nIn this example we configure the height of row details to be 200px.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-custom-detail-height-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"activeCellIndex\" type=\"[number,number] | null\">\n\n> Specifies the active cell for keyboard navigation. This is a controlled prop. See the [Keyboard Navigation](/docs/learn/keyboard-navigation/navigating-cells) page for more details.\n\nSee <PropLink name=\"defaultActiveCellIndex\" /> for the uncontrolled version of this prop and <PropLink name=\"keyboardNavigation\" /> for the keyboard navigation behavior.\n\nUse the <PropLink name=\"onActiveCellIndexChange\" /> callback to be notified when the active cell changes.\n\n`null` is a valid value, and it means no cell is currently rendered as active. Especially useful for controlled scenarios, when you need ultimate control over the behavior of keyboard navigation.\n\n<Sandpack title=\"Controlled keyboard navigation for cells\">\n\n<Description>\n\nThis example starts with cell `[2,0]` already active.\n\n</Description>\n\n```ts file=\"$DOCS/learn/keyboard-navigation/navigating-cells-controlled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"activeRowIndex\" type=\"number | null\">\n\n> Specifies the active row for keyboard navigation. This is a controlled prop. See the [Keyboard Navigation](/docs/learn/keyboard-navigation/navigating-rows) page for more details.\n\nSee <PropLink name=\"defaultActiveRowIndex\" /> for the uncontrolled version of this prop and <PropLink name=\"keyboardNavigation\" /> for the keyboard navigation behavior.\n\nUse the <PropLink name=\"onActiveRowIndexChange\" /> callback to be notified when the active row changes.\n\n`null` is a valid value, and it means no row is currently rendered as active. Especially useful for controlled scenarios, when you need ultimate control over the behavior of keyboard navigation.\n\n<Sandpack title=\"Controlled keyboard navigation for rows\">\n\n<Description>\n\nThis example starts with row at index `2` already active.\n\n</Description>\n\n```ts file=\"$DOCS/learn/keyboard-navigation/navigating-rows-controlled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"autoSizeColumnsKey\" type=\"number|string|{key,includeHeader,columnsToSkip,columnsToResize}\">\n\n> Controls auto-sizing of columns.\n\nHere is a list of possible values for `autoSizeColumnsKey`:\n\n- `string` or `number` - when the value is changing, all columns will be auto-sized.\n\n- an object with a `key` property (of type `string` or `number`) - whenever the `key` changes, the columns will be auto-sized. Specifying an object for `autoSizeColumnsKey` gives you more control over which columns are auto-sized and if the size measurements include the header or not.\n\nWhen an object is used, the following properties are available:\n\n- `key` - mandatory property, which, when changed, triggers the update\n- `includeHeader` - optional boolean, - decides whether the header will be included in the auto-sizing calculations. If not specified, `true` is assumed.\n- `columnsToSkip` - a list of column ids to skip from auto-sizing. If this is used, all columns except those in the list will be auto-sized.\n- `columnsToResize` - the list of column ids to include in auto-sizing. If this is used, only columns in the list will be auto-sized.\n\n<Sandpack title=\"Auto-sizing columns\">\n\n```tsx file=\"autoSizeColumnsKey-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nWhen auto-sizing takes place, <PropLink name=\"onColumnSizingChange\" /> is called with the new column sizes. If you use controlled <PropLink name=\"columnSizing\" />, make sure you update its value accordingly.\n\n</Note>\n\n<Note>\n\nWhen columns are auto-sized, keep in mind that only visible (rendered) rows are taken into account - so if you scroll new rows into view, auto-sizing columns may result in different column sizes.\n\nIn the same logic, keep in mind that by default columns are also virtualized (controlled by <PropLink name=\"virtualizeColumns\" />), not only rows, so only visible columns are auto-sized (in case you have more columns, the columns that are not currently visible do not change their sizes).\n\n</Note>\n\n</Prop>\n\n<Prop name=\"columnDefaultEditable\" type=\"boolean\">\n\n> Specifies whether columns are editable by default.\n\nTo enable editing globally, you can use this boolean prop on the `InfiniteTable` component. It will enable the editing on all columns.\n\nOr you can be more specific and choose to make individual columns editable via the <PropLink name=\"columns.defaultEditable\">column.defaultEditable</PropLink> prop.\n\nIn addition to the props already in discussion, you can use the <PropLink name=\"editable\" /> prop on the `InfiniteTable` component. This overrides all other properties and when it is defined, is the only source of truth for whether something is editable or not.\n\n\nBy default, double-clicking an editable cell will show the cell editor. You can prevent this by returning `{preventEdit: true}` from the <PropLink name=\"onCellDoubleClick\">onCellDoubleClick</PropLink> function prop.\n\n<Sandpack>\n\n<Description>\n\nAll columns are configured to not be editable, except the `salary` column.\n\n</Description>\n\n```ts file=\"global-should-accept-edit-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columnDefaultSortable\" type=\"boolean\" defaultValue={true}>\n\n> Specifies whether columns are sortable by default.\n\nThis property is overriden by (in this order) the following props:\n\n- <PropLink name=\"columnTypes.defaultSortable\" />\n- <PropLink name=\"column.defaultSortable\" />\n- <PropLink name=\"sortable\" />\n\nWhen specified, <PropLink name=\"sortable\" /> overrides all other properties and is the only source of truth for whether something is sortable or not.\n\n<Note>\n\nThis property does not apply for group columns, since for sorting, group columns generally depend on the columns they are grouping.\n\nIn some cases, you can have group columns that group by fields that are not bound to actual columns, so for determining sorting for group columns, use one of the following props:\n\n- <PropLink name=\"columnTypes.defaultSortable\" />\n- <PropLink name=\"column.defaultSortable\" />\n- <PropLink name=\"sortable\" />\n\n</Note>\n\n</Prop>\n\n<Prop name=\"sortable\" type=\"boolean | ({column, columns, api, columnApi}) => boolean\">\n\n> This prop is the ultimate source of truth on whether (and which) columns are sortable.\n\nThis property overrides all the following props:\n\n- <PropLink name=\"columnDefaultSortable\" /> (this is the base value, overriden by all other props in this list, in this order)\n- <PropLink name=\"columnTypes.defaultSortable\" />\n- <PropLink name=\"column.defaultSortable\" />\n\nThe <PropLink name=\"sortable\" /> prop is designed to be used for highly advanced scenarios, where you need to have ultimate control over which columns are sortable and which are not - in this case, you will want to declare <PropLink name=\"sortable\" /> as a function, which returns `true/false` for every column.\n\n</Prop>\n\n<Prop name=\"columnDefaultWidth\" type=\"number\" defaultValue={200}>\n\n> Specifies the a default width for all columns.\n\n<Note>\n\nIf a column is explicitly sized via <PropLink name=\"columns.defaultWidth\">column.defaultWidth</PropLink>, <PropLink name=\"columns.defaultFlex\">column.defaultFlex</PropLink>, <PropLink name=\"columnSizing.width\" /> (or <PropLink name=\"defaultColumnSizing.width\" />), that will be used instead.\n\n</Note>\n\nUse <PropLink name=\"columnMinWidth\" /> to set a minimum width for all columns.\nUse <PropLink name=\"columnMaxWidth\" /> to set a maximum width for all columns.\n\n<PropLink name=\"columnMinWidth\" /> and <PropLink name=\"columnMaxWidth\" /> will be very useful once flex column sizing lands.\n\n<Sandpack>\n\n```ts files=[\"columnDefaultWidth-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"columnHeaderHeight\" type=\"number\">\n\n> The height of the column header.\n\nThis only refers to the height of the header label - so if you have another row in the column header, for filters, the filters will also have this height. Also, for column groups, each additional group will have this height.\n\n<Sandpack>\n\n<Description>\n\nThe column header height is set to `60` pixels. The column filters will also pick up this height.\n\n</Description>\n\n```ts files=[\"columnHeaderHeight-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"columnMaxWidth\" type=\"number\" defaultValue={2000}>\n\n> Specifies the maximum width for all columns.\n\nFor specifying the minimum column width, see <PropLink name=\"columnMinWidth\" />.\n\nMaximum column width can be controlled more granularly via <PropLink name=\"columnSizing.maxWidth\" />, on a per column level.\n\n<Sandpack>\n\n```tsx file=\"columnMaxWidth-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columnMinWidth\" type=\"number\" defaultValue={30}>\n\n> Specifies the minimum width for all columns.\n\nFor specifying the maximum column width, see <PropLink name=\"columnMaxWidth\" />.\n\nMinimum column width can be controlled more granularly via <PropLink name=\"columnSizing.minWidth\" /> or <PropLink name=\"columns.minWidth\" />, on a per column level.\n\n<Sandpack>\n\n```tsx file=\"columnMinWidth-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columnOrder\" type=\"string[]|true\">\n\n> Defines the order in which columns are displayed in the component\n\nFor uncontrolled usage, see <PropLink name=\"defaultColumnOrder\" />.\n\nWhen using this controlled prop, make sure you also listen to <PropLink name=\"onColumnOrderChange\" />\n\nSee [Column Order](/docs/learn/columns/column-order) for more details on ordering columns both programatically and via drag & drop.\n\n<Note>\n\nThe `columnOrder` array can contain identifiers that are not yet defined in the <PropLink name=\"columns\" /> Map or can contain duplicate ids. This is a feature, not a bug. We want to allow you to use the `columnOrder` in a flexible way so it can define the order of current and future columns.\n\nDisplaying the same column twice is a perfectly valid use case.\n\n</Note>\n\n<Sandpack title=\"Column order\">\n\n```ts file=\"columnOrder-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nThis prop can either be an array of strings (column ids) or the boolean `true`. When `true`, all columns present in the <PropLink name=\"columns\" /> object will be displayed, in the iteration order of the object keys.\n\n<Sandpack title=\"Column order advanced example\">\n\n```ts file=\"columnOrder-advanced-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nUsing <PropLink name=\"columnOrder\" /> in combination with <PropLink name=\"columnVisibility\" /> is very powerful - for example, you can have a specific column order even for columns which are not visible at a certain moment, so when they will be made visible, you'll know exactly where they will be displayed.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"columns\" type=\"Record<string, InfiniteTableColumn<DATA_TYPE>>\">\n\n> Describes the columns available in the component.\n\nThe following properties are available:\n\n- <PropLink name=\"columns.field\">field</PropLink>\n- <PropLink name=\"columns.defaultWidth\">defaultWidth</PropLink>\n- <PropLink name=\"columns.defaultFlex\">defaultFlex</PropLink>\n- <PropLink name=\"columns.render\">render</PropLink>\n- <PropLink name=\"columns.renderValue\">renderValue</PropLink>\n- <PropLink name=\"columns.type\">type</PropLink>\n- <PropLink name=\"columns.header\">header</PropLink>\n- <PropLink name=\"columns.valueGetter\">valueGetter</PropLink>\n- <PropLink name=\"columns.valueFormatter\">valueFormatter</PropLink>\n- ...etc\n\n<Sandpack>\n\n```ts files=[\"columns-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"columns.className\" type=\"string | (param: InfiniteTableColumnStyleFnParams) => string\">\n\n> Controls styling via CSS classes for the column. Can be a `string` or a function returning a `string` (a valid className).\n\nIf defined as a function, it accepts an object as a parameter (of type <TypeLink name=\"InfiniteTableColumnStylingFnParams\" />), which has the following properties:\n\n- `column` - the current column where the className is being applied\n- `data` - the data object for the current row. The type of this object is `DATA_TYPE | Partial<DATA_TYPE> | null`. For regular rows, it will be of type `DATA_TYPE`, while for group rows it will be `Partial<DATA_TYPE>`. For rows not yet loaded (because of batching being used), it will be `null`.\n- `rowInfo` - the information about the current row - see [Using RowInfo](/docs/learn/rows/using-row-info) for more details.\n- `value` - the underlying value of the current cell - will generally be `data[column.field]`, if the column is bound to a `field` property\n- ... and more, see <TypeLink name=\"InfiniteTableColumnStylingFnParams\" /> for details\n\n<Note>\n\nThe `className` property can also be specified for <PropLink name=\"columnTypes\"/>\n\n</Note>\n\n<Sandpack>\n\n```ts files=[\"column-className-function-example.page.tsx\",\"coloring.module.css\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"components\">\n\n> Components to override the default ones used by the DataGrid.\n\nThe following components can be overridden:\n\n- `LoadMask` - see <PropLink name=\"components.LoadMask\" />\n- `CheckBox`\n- `Menu`\n- `MenuIcon`\n\n</Prop>\n\n<Prop name=\"components.LoadMask\">\n\n> Allows customising the `LoadMask` displayed over the DataGrid when it's loading data.\n\n<Note>\n\nTo better test this out, you can use the controlled <DPropLink name=\"loading\" /> prop on the `<DataSource />`\n</Note>\n\nFor more components that can be overriden, see <PropLink name=\"components\" />\n\n<Sandpack title=\"Custom LoadMask component\">\n\n```tsx file=\"load-mask-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n<Prop name=\"columns.renderTreeIcon\" type=\"boolean|(cellContext) => ReactNode\">\n\n> Renders the tree expand/collapse icon in the column cells. If you want default behavior, specify `true` and the default icon will be used.\n\nTo render a custom icon, specify a function that returns a React node. The `cellContext` object param will contain all the information about the current cell.\n\n<Note>\n\nThe `cellContext` object contains a `toggleCurrentTreeNode` function property, which can be used to toggle the node state when clicked.\n\n</Note>\n\nWith the default value of `true`, an icon will be rendered only for parent nodes. If you want to render an icon for all nodes, specify a function (and differentiate between parent and leaf nodes), and it will be called regardless of whether the node is a parent or a leaf.\n\n\nYou can also use <PropLink name=\"columns.renderTreeIconForParentNode\" /> to specify to customize the tree icon rendering for parent nodes or <PropLink name=\"columns.renderTreeIconForLeafNode\" /> to customize the tree icon rendering for leaf nodes.\n\n<Sandpack title=\"Specifying a column to used as the tree icon\">\n\n```ts file=\"treegrid-rendericon-default-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n<Sandpack title=\"Rendering a custom tree icon for both parent and leaf nodes\" >\n\n<Description>\n\nThis example renders a custom tree icon and uses the `toggleCurrentTreeNode` function to toggle the node state when Clicked. `toggleCurrentTreeNode` is a property of the `cellContext` argument passed to the `renderTreeIcon` function.\n\n</Description>\n\n```tsx file=\"tree-icon-custom-example-with-toggle.page.tsx\"\n```\n\n</Sandpack>\n\n\n</Prop>\n\n<Prop name=\"columns.renderRowDetailIcon\" type=\"boolean|(cellContext) => ReactNode\">\n\n> Renders the row detail expand/collapse icon in the column cell. Only used when [master-detail](/docs/learn/master-detail/overview) is enabled.\n\nIf this function is a prop, it can be used to customize the icon rendered for expanding/collapsing the row detail.\n\nSee related <PropLink name=\"rowDetailRenderer\" /> for configuring master-detail.\n\n<Sandpack title=\"Basic master detail DataGrid example\" size=\"lg\">\n\n<Description>\n\nThis example shows a master DataGrid with the ID column configured to show the row detail expand icon.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n<Prop name=\"columns.components\">\n\n> Specifies custom React components to use for column cells or header\n\nThe column components object can have either of the two following properties:\n\n- <PropLink name=\"columns.components.ColumnCell\">ColumnCell</PropLink> - a React component to use for rendering the column cells\n- <PropLink name=\"columns.components.HeaderCell\">HeaderCell</PropLink> - a React component to use for rendering the column header\n\n- <PropLink name=\"columns.components.Editor\">Editor</PropLink> - a React component to use for the editor, when editing is enabled for the column\n\n- <PropLink name=\"columns.components.FilterOperatorSwitch\">FilterOperatorSwitch</PropLink> - a React component to use for the filter operator switch - clicking the operator pops up a menu with the available operators for that column filter.\n\nSee [editing docs](/docs/learn/editing/overview).\n\n</Prop>\n\n<Prop name=\"columns.components.ColumnCell\">\n\n> Specifies a custom React component to use for column cells\n\nFor column header see related <PropLink name=\"columns.components.HeaderCell\"/>.\n\nInside a component used as a cell, you have to use <HookLink name=\"useInfiniteColumnCell\"/> to retrieve information about the currently rendered cell.\n\n<Note>\n\nIt's very important that you take\n\n```tsx\nconst { domRef } = useInfiniteColumnCell<DATA_TYPE>();\n```\n\nthe `domRef` from the <HookLink name=\"useInfiniteColumnCell\"/> hook and pass it on to the root DOM element of your cell component.\n\n```tsx\n<div ref={domRef}>...</div>\n```\n\n**If you don't do this, the column rendering will not work.**\n\n</Note>\n\n<Note>\n\nAlso note that your React Component should be a functional component and have this signature\n\n```tsx\nfunction CustomComponent(props: React.HTMLProps<HTMLDivElement>) {\n  return ...\n}\n```\n\nthat is, the `props` that the component is rendered with (is called with) are `HTMLProps` (more exactly `HTMLProps<HTMLDivElement>`) that you need to spread on the root DOM element of your component. If you want to customize anything, you can, for example, append a `className` or specify some extra styles.\n\nIn order to access the cell-related information, you don't use the props, but you call the <HookLink name=\"useInfiniteColumnCell\"/> hook.\n\n```tsx\nconst ExampleCellComponent: React.FunctionComponent<\n  React.HTMLProps<HTMLDivElement>\n> = (props) => {\n  const { domRef } = useInfiniteColumnCell<Developer>();\n\n  return (\n    <div\n      ref={domRef}\n      {...props}\n      className={`${props.className} extra-cls`}\n      style={style}\n    >\n      {props.children} <div style={{ flex: 1 }} /> {emoji}\n    </div>\n  );\n};\n```\n\n</Note>\n\n<Sandpack title=\"Custom components\">\n\n```tsx file=\"column-components-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.components.Editor\">\n\n> Specifies a custom React component to use for the editor, when [editing](/docs/learn/editing/overview) is enabled for the column.\n\nThe editor component should use the <HookLink name=\"useInfiniteColumnEditor\"/> hook to have access to cell-related information and to confirm, cancel or reject the edit.\n\nHere's the implementation for our default editor\n\n```tsx\nexport function InfiniteTableColumnEditor<T>() {\n  const { initialValue, setValue, confirmEdit, cancelEdit, readOnly } =\n    useInfiniteColumnEditor<T>();\n\n  const domRef = useRef<HTMLInputElement>();\n  const refCallback = React.useCallback((node: HTMLInputElement) => {\n    domRef.current = node;\n\n    if (node) {\n      node.focus();\n    }\n  }, []);\n\n  const onKeyDown = useCallback((event: React.KeyboardEvent) => {\n    const { key } = event;\n    if (key === 'Enter' || key === 'Tab') {\n      confirmEdit();\n    } else if (key === 'Escape') {\n      cancelEdit();\n    } else {\n      event.stopPropagation();\n    }\n  }, []);\n\n  return (\n    <>\n      <input\n        readOnly={readOnly}\n        ref={refCallback}\n        onKeyDown={onKeyDown}\n        onBlur={() => confirmEdit()}\n        className={'...'}\n        type={'text'}\n        defaultValue={initialValue}\n        onChange={useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n          setValue(event.target.value);\n        }, [])}\n      />\n    </>\n  );\n}\n```\n\n<Sandpack title=\"Column with custom editor\">\n\n<Description>\n\nTry editing the `salary` column - it has a custom editor\n\n</Description>\n\n```tsx file=\"$DOCS/reference/hooks/custom-editor-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.components.HeaderCell\">\n\n> Specifies a custom React component to use for column headers\n\nFor column cells see related <PropLink name=\"columns.components.ColumnCell\"/>.\n\nInside a custom component used as a column header, you have to use <HookLink name=\"useInfiniteHeaderCell\"/> to retrieve information about the currently rendered header cell.\n\n<Note>\n\nIt's very important that you take\n\n```tsx\nconst { domRef } = useInfiniteColumnCell<DATA_TYPE>();\n```\n\nthe `domRef` from the <HookLink name=\"useInfiniteHeaderCell\"/> hook and pass it on to the root DOM element of your header component.\n\n```tsx\n<div ref={domRef}>...</div>\n```\n\n**If you don't do this, the column header rendering will not work.**\n\n</Note>\n\n<Note>\n\nAlso note that your React Component should be a functional component and have this signature\n\n```tsx\nfunction CustomHeaderComponent(props: React.HTMLProps<HTMLDivElement>) {\n  return ...\n}\n```\n\nthat is, the `props` that the component is rendered with (is called with) are `HTMLProps` (more exactly `HTMLProps<HTMLDivElement>`) that you need to spread on the root DOM element of your component. If you want to customize anything, you can, for example, append a `className` or specify some extra styles.\n\nIn order to access the column header-related information, you don't use the props, but you call the <HookLink name=\"useInfiniteHeaderCell\"/> hook.\n\n```tsx\nconst ExampleHeaderComponent: React.FunctionComponent<\n  React.HTMLProps<HTMLDivElement>\n> = (props) => {\n  const { domRef } = useInfiniteHeaderCell<Developer>();\n\n  return (\n    <div\n      ref={domRef}\n      {...props}\n      className={`${props.className} extra-cls`}\n      style={style}\n    >\n      {props.children} <div style={{ flex: 1 }} /> {emoji}\n    </div>\n  );\n};\n```\n\n</Note>\n\n<Sandpack title=\"Custom components\">\n\n```tsx file=\"column-components-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.contentFocusable\" type=\"boolean|(params) => boolean\">\n\n> Specifies if the column (or cell, if a function is used) renders content that will/should be focusable (via tab-navigation)\n\n<Sandpack title=\"Columns with cell content focusable\">\n\n```ts file=\"column-contentFocusable-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.cssEllipsis\" type=\"boolean\" defaultValue={true}>\n\n> Specifies if the column should show ellipsis for content that is too long and does not fit the column width.\n\n<Note>\n\nFor header ellipsis, see related <PropLink name=\"headerCssEllipsis\" />.\n\n</Note>\n\n<Sandpack title=\"First name column(first) has cssEllipsis set to false\">\n\n```ts file=\"columns-cssEllipsis-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.dataType\" type=\"string\">\n\n> Specifies the type of the data for the column. For now, it's better to simply use <PropLink name=\"columns.type\" />.\n\nIf a column doesn't specify a <PropLink name=\"columns.sortType\">sortType</PropLink>, the `dataType` will be used instead to determine the type of sorting to use. If neither `sortType` nor `dataType` are specified, the <PropLink name=\"columns.type\">column.type</PropLink> will be used.\n\n</Prop>\n\n<Prop name=\"columns.defaultDraggable\" type=\"boolean\">\n\n> Specifies whether the column is draggable by default (for reordering columns).\n\nThis property overrides the global <PropLink name=\"columnDefaultDraggable\" />.\n</Prop>\n\n<Prop name=\"draggableColumns\" type=\"boolean\">\n\n> Specifies whether columns are draggable (for reordering columns).\n\nThis property overrides the global <PropLink name=\"columnDefaultDraggable\" /> and the column-level <PropLink name=\"columns.defaultDraggable\" />.\n</Prop>\n\n<Prop name=\"columnDefaultDraggable\" type=\"boolean\">\n\n> Specifies whether columns are draggable by default (for reordering columns).\n\nThis is overriden by <PropLink name=\"columns.defaultDraggable\" /> and <PropLink name=\"draggableColumns\" />.\n</Prop>\n\n<Prop name=\"columns.defaultEditable\" type=\"boolean|(param)=>boolean|Promise<boolean>\">\n\n> Controls if the column is editable or not.\n\nThis overrides the global <PropLink name=\"columnDefaultEditable\" />.\nThis is overridden by the <PropLink name=\"editable\" /> prop.\n\nThe value for this property can be either a `boolean` or a function.\n\nIf it is a function, it will be called when an edit is triggered on the column. The function will be called with a single object that contains the following properties:\n\n- `value` - the current value of the cell (the value currently displayed, so after <PropLink name=\"columns.valueFormatter\" /> and <PropLink name=\"columns.renderValue\" /> have been applied)\n- `rawValue` - the current value of the cell, but before any formatting and custom rendering has been applied. This is either the field value from the current data object, or the result of the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `data` - the data object (of type `DATA_TYPE`) for the current row\n- `rowInfo` - the row info object that underlies the row\n- `column` - the current column on which editing is invoked\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSourceApi` - - a reference to the [DataSource API](/docs/reference/datasource-api)\n\nThe function can return a `boolean` value or a `Promise` that resolves to a `boolean` - this means you can asynchronously decide whether the cell is editable or not.\n\nMaking <PropLink name=\"columns.defaultEditable\">column.defaultEditable</PropLink> a function gives you the ability to granularly control which cells are editable or not (even within the same column, based on the cell value or other values you have access to).\n\nBy default, double-clicking an editable cell will show the cell editor. You can prevent this by returning `{preventEdit: true}` from the <PropLink name=\"onCellDoubleClick\">onCellDoubleClick</PropLink> function prop.\n\n<Sandpack>\n\n<Description>\n\nOnly the `salary` column is editable.\n\n</Description>\n\n```ts file=\"global-should-accept-edit-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.defaultFlex\" type=\"number\" >\n\n> Specifies a default flex for the column\n\n<Note>\n\nIf you want more control on sizing, use controlled <PropLink name=\"columnSizing\" /> (or uncontrolled <PropLink name=\"defaultColumnSizing\" />).\n</Note>\n\nSee related <PropLink name=\"columns.defaultWidth\" />\n\n</Prop>\n\n<Prop name=\"columnGroupVisibility\" type=\"Record<string, boolean>\">\n\n> Controls the visibility of column groups. By default, column groups are visible.\n\n```tsx\n<InfiniteTable<DATA_TYPE>\n  columnGroupVisibility={{\n    'country': false,\n    'city': true,\n  }}\n  columns={{...}}\n/>\n```\n\n</Prop>\n\n<Prop name=\"columns.defaultHiddenWhenGroupedBy\" type=\"'*'| true | keyof DATA_TYPE | { [keyof DATA_TYPE]: true }\">\n\n> Controls default column visibility when <DataSourcePropLink name=\"groupBy\" /> is used.\n\nThis property does not apply (work) when controlled <PropLink name=\"columnVisibility\"  /> is used, it only works with uncontrolled column visibility.\n\nThe value for this property can be one of the following:\n\n- the `'*'` string - this means, the column is hidden whenever there are groups - so any groups.\n- a `string`, namely a field from the bound type of the `DataSource` (so type is `keyof DATA_TYPE`) - the column is hidden whenever there is grouping that includes the specified field. The grouping can contain any other fields, but if it includes the specified field, the column is hidden.\n- `true` - the column is hidden when there grouping that uses the field that the column is bound to.\n- `an object with keys` of type `keyof DATA_TYPE` and values being `true` - whenever the grouping includes any of the fields that are in the keys of this object, the column is hidden.\n\n<Sandpack>\n\n```ts file=\"columnDefaultHiddenWhenGroupedBy-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.defaultWidth\" type=\"number\" >\n\n> Specifies a default width for the column\n\n<Note>\n\nIf you want more control on sizing, use controlled <PropLink name=\"columnSizing\" /> (or uncontrolled <PropLink name=\"defaultColumnSizing\" />).\n</Note>\n\nSee related <PropLink name=\"columns.defaultFlex\" />\n\n</Prop>\n\n<Prop name=\"columns.field\" type=\"keyof DATA_TYPE\">\n\n> Binds the column to the specified data field. It should be a keyof `DATA_TYPE`.\n\nIt can be the same or different to the column id. This is not used for referencing the column in various other props - the column key (column id) is used for that.\n\nIf no <PropLink name=\"columns.header\" /> is specified, it will be used as the column header.\n\n<Sandpack>\n\n```ts files=[\"columns-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n\nGroup columns can also be bound to a field, like in the snippet below.\n\n<Sandpack>\n\n<Description>\nIn this example, the group column is bound to the `firstName` field, so this field will be rendered in non-group rows for this column.\n</Description>\n\n```ts file=\"group-column-bound-to-field-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.filterType\" type=\"string\">\n\n> Use this to configure the filter type for the column, when the `filterType` needs to be different from the column <PropLink name=\"columns.type\">type</PropLink>.\n\nSee related <PropLink name=\"columns.type\" />\n\n<Note>\n\nIf the type of filter you want to show does not match the column <PropLink name=\"columns.type\">type</PropLink>, you can specify the filter with the <PropLink name=\"columns.filterType\">column.filterType</PropLink> property. Only use this when the type of the data differs from the type of the filter (eg: you have a numeric column, with a custom filter type).\n\n</Note>\n\n<Sandpack title=\"Custom column filterType for the salary column\">\n\n<Description>\n\nIn this example, the `salary` column has `type=\"number\"` and `filterType=\"salary\"`.\n\nThis means the sort order defined for `type=\"number\"` will be used while displaying a custom type of filter.\n\n</Description>\n\n```ts file=\"column-filterType-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.getValueToEdit\" type=\"(params) => any|Promise<any>\">\n\n> Allows customizing the value that will be passed to the cell editor when it is displayed (when editing starts).\n\nThe function is called with an object that has the following properties:\n\n- `value` - the value of the cell (the value that is displayed in the cell before editing starts). This is the value resulting after <PropLink name=\"columns.valueFormatter\" /> and <PropLink name=\"columns.renderValue\" /> have been applied)\n- `rawValue` - the raw value of the cell, before any formatting and custom rendering has been applied. This is either the field value from the current data object, or the result of the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `data` - the current data object\n- `rowInfo` - the row info object that underlies the row\n- `column` - the current column on which editing is invoked\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSourceApi` - - a reference to the [DataSource API](/docs/reference/datasource-api)\n\n<Note>\n\nThis function can be async. Return a `Promise` to wait for the value to be resolved and then passed to the cell editor.\n\n</Note>\n\nSee related <PropLink name=\"columns.getValueToPersist\" /> and <PropLink name=\"columns.shouldAcceptEdit\" />.\n\n<Sandpack>\n\n<Description>\n\nIn this example, the `salary` for each row includes the currency string.\n\n<p>When editing starts, we want to remove the currency string and only show the numeric value in the editor - we do this via <PropLink name=\"columns.getValueToEdit\" />.</p>\n\n</Description>\n\n```ts file=\"inline-editing-custom-edit-value-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.getValueToPersist\" type=\"(params) => any|Promise<any>\">\n\n> Allows customizing the value that will be persisted when an edit has been accepted.\n\nThe function is called with an object that has the following properties:\n\n- `initialValue` - the initial value of the cell (the value that was displayed in the cell before editing started). This is the value resulting after <PropLink name=\"columns.valueFormatter\" /> and <PropLink name=\"columns.renderValue\" /> have been applied)\n- `value` - the current value that was accepted as an edit and which came from the cell editor.\n- `rawValue` - the raw value of the cell, before any formatting and custom rendering has been applied. This is either the field value from the current data object, or the result of the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `data` - the current data object\n- `rowInfo` - the row info object that underlies the row\n- `column` - the current column on which editing is invoked\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSourceApi` - - a reference to the [DataSource API](/docs/reference/datasource-api)\n\n<Note>\n\nThis function can be async. Return a `Promise` to wait for the value to be resolved and then persisted.\n\n</Note>\n\nSee related <PropLink name=\"columns.getValueToEdit\" /> and <PropLink name=\"columns.shouldAcceptEdit\" />.\n\n<Sandpack>\n\n<Description>\n\nIn this example, the `salary` for each row includes the currency string.\n\n<p>When an edit is accepted, we want the persisted value to include the currency string as well (like the original value did) - we do this via <PropLink name=\"columns.getValueToPersist\" />.</p>\n\n</Description>\n\n```ts file=\"inline-editing-custom-edit-value-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.renderHeader\" type=\"(param: InfiniteTableColumnHeaderParam) => ReactNode\">\n\n> A custom rendering function for the column header. Called with an object of type <TypeLink name=\"InfiniteTableColumnHeaderParam\" />.\n\nIt's the equivalent of <PropLink name=\"columns.renderValue\" /> but for the <PropLink name=\"columns.header\">column.header</PropLink>.\n\nIt gives you access to the column, along with information about sorting, filtering, grouping, etc.\n\nIt is called with a single argument, of type <TypeLink name=\"InfiniteTableColumnHeaderParam\" />.\n\n</Prop>\n\n<Prop name=\"columns.header\" type=\"React.ReactNode|({column, columnSortInfo, columnApi})=>React.ReactNode\">\n\n> Specifies the column header. Can be a static value or a function that returns a React node.\n\n<Note>\n\nIf no `header` is specified for a column, the <PropLink name=\"columns.field\">field</PropLink> will be used instead.\n\n</Note>\n\nIf a function is provided, it will be called with an argument with the following properties:\n\n- `column`\n- `columnSortInfo` - will allow you to render custom header based on the sort state of the column.\n- `columnApi` - [API](reference/column-api) for the current column. Can be useful if you customize the header and want to programatically trigger actions like sorting, show/hide column menu, etc.\n\nWhen we implement filtering, you'll also have access to the column filter.\n\n<Note>\n\nFor styling the column header, you can use <PropLink name=\"columns.headerStyle\">headerStyle</PropLink> or <PropLink name=\"columns.headerClassName\">headerClassName</PropLink>.\n\nFor configuring the column header height, see the <PropLink name=\"columnHeaderHeight\" /> prop.\n\n</Note>\n\n<Sandpack>\n\n```ts files=[\"columns-header-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n\n<Note>\n\nIn the `column.header` function you can use hooks or <PropLink name=\"columns.components.HeaderCell\" nocode>render custom React components via column.components.HeaderCell</PropLink>. To make it easier to access the param of the `header` function, we've exposed the <HookLink name=\"useInfiniteHeaderCell\" /> - use it to gain access to the same object that is passed as an argument to the `header` function.\n\n</Note>\n\n<Sandpack title=\"Column with custom header that uses useInfiniteHeaderCell\">\n\n```ts file=\"column-header-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Custom header with button to trigger the column context menu\">\n\n<Description>\n\nThe `preferredLanguage` column has a custom header that shows a button for triggering the column context menu.\n\nIn addition, the currency and preferredLanguage columns have a custom context menu icon.\n\n</Description>\n\n```ts file=\"getColumnMenuItems-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.headerClassName\" type=\"string | (args) => string\">\n\n> Controls the css class name for the column header. Can be a string or a function returning a string.\n\nIf defined as a function, it accepts an object as a parameter, which has the following properties:\n\n- `column` - the current column where the style is being applied\n- `columnSortInfo` - the sorting information for the column\n- `columnFilterValue` - the filtering information for the column\n- `dragging` - whether the current column is being dragged at the current time (during a column reorder)\n\n<Note>\n\nThe `headerClassName` property can also be specified for <PropLink name=\"columnTypes.headerClassName\">columnTypes</PropLink>.\n\nFor styling with inline styles, see <PropLink name=\"columns.headerStyle\" />.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"columns.headerCssEllipsis\" type=\"boolean\" defaultValue={true}>\n\n> Specifies if the column should show ellipsis in the column header if the header is too long and does not fit the column width.\n\nIf this property is not specified, the value of <PropLink name=\"columns.cssEllipsis\" /> will be used.\n\n<Note>\n\nFor normal cell ellipsis, see related <PropLink name=\"cssEllipsis\" />.\n\n</Note>\n\n<Sandpack title=\"Preferred Language column(second) has headerCssEllipsis set to false\">\n\n```ts file=\"columns-cssEllipsis-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.headerStyle\" type=\"CSSProperties | (args) => CSSProperties\">\n\n> Controls styling for the column header. Can be a style object or a function returning a style object.\n\nIf defined as a function, it accepts an object as a parameter, which has the following properties:\n\n- `column` - the current column where the style is being applied\n- `columnSortInfo` - the sorting information for the column\n- `columnFilterValue` - the filtering information for the column\n- `dragging` - whether the current column is being dragged at the current time (during a column reorder)\n\n<Note>\n\nThe `headerStyle` property can also be specified for <PropLink name=\"columnTypes.headerStyle\">columnTypes</PropLink>.\n\nFor styling with CSS, see <PropLink name=\"columns.headerClassName\" />.\n\nFor configuring the column header height, see the <PropLink name=\"columnHeaderHeight\" /> prop.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"columns.maxWidth\" type=\"number\">\n\n> Configures the maximum width for the column.\n\nIf not specified, <PropLink name=\"columnMaxWidth\" /> will be used (defaults to `2000`).\n\n</Prop>\n\n<Prop name=\"columns.minWidth\" type=\"number\">\n\n> Configures the minimum width for the column.\n\nIf not specified, <PropLink name=\"columnMinWidth\" /> will be used (defaults to `30`).\n\n</Prop>\n\n<Prop name=\"columns.render\" type=\"(cellContext) => Renderable\">\n\n> Customizes the rendering of the column. The argument passed to the function is an object of type <TypeLink name=\"InfiniteTableColumnCellContextType\" />\n\nSee related <PropLink name=\"columns.renderValue\" />, <PropLink name=\"columns.renderGroupValue\" />\n\n<Note>\n\nThe difference between <PropLink name=\"columns.render\"/> and <PropLink name=\"columns.renderValue\"/> is only for special columns (for now, only group columns are special columns, but more will come) when `InfiniteTable` renders additional content inside the column (eg: collapse/expand tool for group rows). The <PropLink name=\"columns.render\"/> function allows you to override the additional content. So if you specify this function, it's up to you to render whatever content, including the collapse/expand tool.\n\nNote that for customizing the collapse/expand tool, you can use specify `renderGroupIcon` function on the group column.\n\n</Note>\n\n<Note>\n\nTo understand how the rendering pipeline works, head over to the page on [Column rendering](/docs/learn/columns/column-rendering#rendering-pipeline).\n\n</Note>\n\nThe <PropLink name=\"columns.render\">render</PropLink> and <PropLink name=\"columns.renderValue\">renderValue</PropLink> functions are called with an object that has the following properties:\n\n- data - the data object (of type `DATA_TYPE | Partial<DATA_TYPE> | null`) for the row.\n- rowInfo - very useful information about the current row. See [Using RowInfo](/docs/learn/rows/using-row-info) for more details.\n- renderBag - read more about this in the docs for [Column rendering pipeline](/docs/learn/columns/column-rendering#rendering-pipeline)\n\n<Sandpack title=\"Column with custom render\">\n\n```ts file=\"column-render-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIn the `column.render` function you can use hooks or <PropLink name=\"columns.components.ColumnCell\" nocode>render custom React components</PropLink>. To make it easier to access the param of the `render` function, we've exposed the <HookLink name=\"useInfiniteColumnCell\" /> - use it to gain access to the same object that is passed as an argument to the `render` function.\n\n</Note>\n\n<Sandpack title=\"Column with custom render that uses useInfiniteColumnCell\">\n\n```ts file=\"column-render-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.renderFilterIcon\">\n\n> Customizes the rendering of the filter icon for the column.\n\n<Sandpack title=\"Custom filter icons for salary and name columns\">\n\n<Description>\n\nThe `salary` column will show a bolded label when filtered.\n\nThe `firstName` column will show a custom filter icon when filtered.\n\n</Description>\n\n```ts file=\"$DOCS/learn/columns/column-filter-icon-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.renderGroupIcon\" type=\"(cellContext) => Renderable\">\n\n> Customizes the rendering of the collapse/expand group icon for group rows. The argument passed to the function is an object of type <TypeLink name=\"InfiniteTableColumnCellContextType\" />\n\nFor actual content of group cells, see related <PropLink name=\"columns.renderGroupValue\" />\n\n<Note>\n\nTo understand how the rendering pipeline works, head over to the page on [Column rendering](/docs/learn/columns/column-rendering#rendering-pipeline).\n\n</Note>\n\n<Sandpack title=\"Column with custom renderGroupIcon\">\n\n```tsx file=\"column-renderGroupValueAndRenderLeafValue-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.renderMenuIcon\" type=\"boolean|(cellContext)=> ReactNode\">\n\n> Allows customization of the context menu icon.\n\nUse this prop to customize the context icon for the current column. Specify `false` for no context menu icon.\n\nUse a function to render a custom icon. The function is called with an object that has the following properties:\n\n- `column`\n- `columnApi` - an API object for controlling the column programatically (toggle sort, toggle column context menu, etc)\n\n<Sandpack title=\"Custom menu icons and custom menu items\">\n\n<Description>\n\nIn this example, the currency and preferredLanguage columns have a custom icon for triggering the column context menu.\n\nIn addition, the `preferredLanguage` column has a custom header that shows a button for triggering the column context menu.\n\n</Description>\n\n```ts file=\"getColumnMenuItems-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.renderSelectionCheckBox\" type=\"boolean | ({ data, rowSelected: boolean | null, selectRow, deselectRow, ... })\">\n\n> Specifies that the current column will have a selection checkbox - if a function is provided, will be used to customizes the rendering of the checkbox rendered for selection.\n\nSee related <DPropLink name=\"rowSelection\" />.\n\nIf `true` is provided, the default selection checkbox will be rendered. When a function is provided, it will be used for rendering the checkbox for selection.\n\n<Note>\n\n`rowSelected` property in the function parameter can be either `boolean` or `null`. The `null` value is used for groups with indeterminate state, meaning the group has some children selected, but not all of them.\n</Note>\n\n<Note>\n\nTo understand how the rendering pipeline works, head over to the page on [Column rendering](/docs/learn/columns/column-rendering#rendering-pipeline).\n\n</Note>\n\n<Sandpack title=\"Column with custom renderSelectionCheckBox\">\n\n<Description>\nThis example shows how you can use the default selection checkbox and decorate it.\n</Description>\n\n```tsx file=\"column-renderSelectionCheckBox-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.renderGroupValue\" type=\"({ data, rowInfo, column, renderBag, rowIndex, ... })\">\n\n> Customizes the rendering of a group column content, but only for group rows.\n\nThis prop is different from <PropLink name=\"columns.render\" />, <PropLink name=\"columns.renderValue\" />, as it is only called for group rows.\n\n<Note>\n\nThis function prop is called with a parameter - the `value` property of this parameter is not useful for group rows (of non-group columns), as it refers to the current data item, which is a group item, not a normal data item. Instead, use `rowInfo.value`, as that's the current group row value.\n\n</Note>\n\nSee related <PropLink name=\"columns.renderGroupIcon\" /> for customizing the collapse/expand group icon.\nSee related <PropLink name=\"columns.renderLeafValue\" /> for customizing the value for non-group rows in a group column.\n\n<Sandpack title=\"Column with custom renderGroupValue\">\n\n```tsx file=\"column-renderGroupValueAndRenderLeafValue-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.renderLeafValue\" type=\"({ data, rowInfo, column, renderBag, rowIndex, ... })\">\n\n> Customizes the rendering of the group column content, but only for non-group rows.\n\nSee related <PropLink name=\"columns.renderGroupValue\" /> for customizing the value for group rows in a group column.\n\n<Sandpack title=\"Column with custom renderLeafValue\">\n\n```tsx file=\"column-renderGroupValueAndRenderLeafValue-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n<Prop name=\"columns.renderValue\" type=\"(cellContext) => Renderable\">\n\n> Customizes the rendering of the column content. The argument passed to the function is an object of type <TypeLink name=\"InfiniteTableColumnCellContextType\" />\n\nSee related <PropLink name=\"columns.render\" />, <PropLink name=\"columns.renderGroupValue\" />\n\n<Note>\n\nThe difference between <PropLink name=\"columns.renderValue\"/> and <PropLink name=\"columns.render\"/> is only for special columns (for now, only group columns are special columns, but more will come) when `InfiniteTable` renders additional content inside the column (eg: collapse/expand tool for group rows). The <PropLink name=\"columns.render\"/> function allows you to override the additional content. So if you specify this function, it's up to you to render whatever content, including the collapse/expand tool.\n\nNote that for customizing the collapse/expand tool, you can use specify `renderGroupIcon` function on the group column.\n\n</Note>\n\n<Note>\n\nTo understand how the rendering pipeline works, head over to the page on [Column rendering](/docs/learn/columns/column-rendering#rendering-pipeline).\n\n</Note>\n\nThe <PropLink name=\"columns.renderValue\">renderValue</PropLink> and <PropLink name=\"columns.render\">render</PropLink> functions are called with an object that has the following properties:\n\n- data - the data object (of type `DATA_TYPE | Partial<DATA_TYPE> | null`) for the row.\n- rowInfo - very useful information about the current row. See [Using RowInfo](/docs/learn/rows/using-row-info) for more details.\n- renderBag - read more about this in the docs for [Column rendering pipeline](/docs/learn/columns/column-rendering#rendering-pipeline)\n\n<Sandpack title=\"Column with custom renderValue\">\n\n```tsx file=\"column-renderValue-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIn the `column.renderValue` function you can use hooks or <PropLink name=\"columns.components.ColumnCell\" nocode>render custom React components</PropLink>. To make it easier to access the param of the `renderValue` function, we've exposed the <HookLink name=\"useInfiniteColumnCell\" /> - use it to gain access to the same object that is passed as an argument to the `renderValue` function.\n\n</Note>\n\n<Sandpack title=\"Using a sparkline component\" size=\"md\" viewMode=\"preview\" deps=\"react-sparklines\">\n\n```tsx file=\"$DOCS/learn/examples/using-sparklines-example.page.tsx\" \n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.resizable\" type=\"boolean\">\n\n> Specifies if the current column is resizable or not.\n\nBy default, all columns are resizable, since <PropLink name=\"resizableColumns\" /> defaults to `true`.\n\n</Prop>\n\n<Prop name=\"columns.rowspan\" type=\"({ rowInfo, data, rowIndex, column }) => number\">\n\n> Specifies the rowspan for cells on the current column.\n\nThe default rowspan for a column cell is 1. If you want to span multiple rows, return a value that is greater than 1.\n\nThis function is called with an object that has the following properties:\n\n- column - the current column\n- data - the current data\n- rowInfo - information about the current row\n\nThe `rowInfo` object contains information about grouping (if this row is a group row, the collapsed state, etc), parent groups, children of the current row (if it's a row group), etc. See [Using RowInfo](/docs/learn/rows/using-row-info) for more details.\n\n<Sandpack>\n\n```ts file=\"column-rowspan-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.shouldAcceptEdit\" type=\"(params) => boolean|Error|Promise<boolean|Error>\">\n\n> Function specified for the column, that determines whether to accept an edit or not.\n\nThis function is called when the user wants to finish an edit. The function is used to decide whether an edit is accepted or rejected.\n\n<p>When the global <PropLink name=\"shouldAcceptEdit\" /> prop is specified, this is no longer called, and instead the global one is called.</p>\n<p>If you define the global <PropLink name=\"shouldAcceptEdit\" /> and still want to use the column-level function, you can call the column-level function from the global one.</p>\n\nThe function is called with an object that has the following properties:\n\n- `value` - the value that the user wants to persist via the cell editor\n- `initialValue` - the initial value of the cell (the value that was displayed before editing started). This is the value resulting after <PropLink name=\"columns.valueFormatter\" /> and <PropLink name=\"columns.renderValue\" /> have been applied)\n- `rawValue` - the initial value of the cell, but before any formatting and custom rendering has been applied. This is either the field value from the current data object, or the result of the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `data` - the current data object\n- `rowInfo` - the row info object that underlies the row\n- `column` - the current column on which editing is invoked\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSourceApi` - - a reference to the [DataSource API](/docs/reference/datasource-api)\n\n<Sandpack>\n\n<Description>\n\nTry editing the `salary` column. In the editor you can write whatever, but the column will only accept edits that are valid numbers.\n\n</Description>\n\n```ts file=\"inline-editing-custom-edit-value-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.sortable\" type=\"boolean\">\n\n> Specifies the sorting behavior for the current column. Overrides the global <PropLink name=\"sortable\" /> prop.\n\nUse this column property in order to explicitly make the column sortable or not sortable. If not specified, the sortable prop from the column type (<PropLink name=\"columnTypes.sortable\" />) will be used. If that is not specified either, the global <PropLink name=\"sortable\" /> prop will be used.\n\n</Prop>\n\n<Prop name=\"columns.sortType\" type=\"string | string[]\" defaultValue=\"'string'\">\n\n> Specifies the sort type for the column. See related <DataSourcePropLink name=\"sortTypes\" />\n\nFor local sorting, the sort order for a column is determined by the specified `sortType`.\n\n- if no `sortType` is specified, the <PropLink name=\"columns.dataType\">column.dataType</PropLink> will be used as the `sortType`\n- if no `sortType` or `dataType` is specified, it will default to the <PropLink name=\"columns.type\"/> value (if an array, the first item will be used).\n- if none of those are specified `\"string\"` is used\n\nThe value of this prop (as specified, or as computed by the steps described above) should be a key from the <DataSourcePropLink name=\"sortTypes\" /> object.\n\n<Sandpack  title=\"Custom sort by color - magenta will come first\">\n\n```ts file=\"./datasource-props/sortTypes-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nFor group columns (and more specifically, when <PropLink name=\"groupRenderStrategy\"/> is `single-column`), the `sortType` should be a `string[]`, each item in the array corresponding to an item in <DPropLink name=\"groupBy\" /> of the `<DataSource />`. This is especially useful when there are no corresponding columns for the `groupBy` fields. In this case, `InfiniteTable` can't know the type of sorting those fields will require, so you have to provide it yourself via the `column.sortType`.\n</Note>\n\n</Prop>\n\n<Prop name=\"columns.style\" type=\"CSSProperties | (param: InfiniteTableColumnStyleFnParams) => CSSProperties\">\n\n> Controls styling for the column. Can be a style object or a function returning a style object.\n\nIf defined as a function, it accepts an object as a parameter (of type <TypeLink name=\"InfiniteTableColumnStylingFnParams\" />), which has the following properties:\n\n- `column` - the current column where the style is being applied\n- `data` - the data object for the current row. The type of this object is `DATA_TYPE | Partial<DATA_TYPE> | null`. For regular rows, it will be of type `DATA_TYPE`, while for group rows it will be `Partial<DATA_TYPE>`. For rows not yet loaded (because of batching being used), it will be `null`.\n- `rowInfo` - the information about the current row - see [Using RowInfo](/docs/learn/rows/using-row-info) for more details.\n- `value` - the underlying value of the current cell - will generally be `data[column.field]`, if the column is bound to a `field` property\n- ... and more, see <TypeLink name=\"InfiniteTableColumnStylingFnParams\" /> for details\n\n<Note>\n\nThe `style` property can also be specified for <PropLink name=\"columnTypes\"/>\n\n</Note>\n\n<Sandpack>\n\n```ts file=\"columns-style-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.type\" type=\"string | string[]\" defaultValue=\"'default'\">\n\n> Specifies the column type - a column type is a set of properties that describes the column. Column types allow to easily apply the same properties to multiple columns.\n\n<Note>\n\nSpecifying `type: \"number\"` for numeric columns will ensure correct number sorting function is used (when sorting is done client-side). This happens because <DPropLink name=\"sortTypes\" /> has a definition for the `number` sort type.\n\nFor date columns (where the values in the columns are actual date objects) specify `type: \"date\"`. [Read more about date columns here](/docs/learn/working-with-data/handling-dates#using-date-strings)\n\n</Note>\n\nSee <PropLink name=\"columnTypes\"/> for more details on using column types.\n\n<Note>\n\nBy default, all columns have the `default` column type applied. So, if you define the `default` column type, but don't specify any <PropLink name=\"columns.type\">type</PropLink> for a column, the default column type properties will be applied to that column.\n\n</Note>\n\n<Note>\n\nWhen you want both the default type and another type to be applied, you can do so by specifying `type: [\"default\", \"second-type\"]`.\n\nWhen you dont want the default type to be applied, use `type: null`.\n\n</Note>\n\nIf a column is filterable and does not explicitly specify a <PropLink name=\"columns.filterType\">filterType</PropLink>, the `type` will also be used as the filter type.\n\nIf a column is sortable and does not explicitly specify a <PropLink name=\"columns.sortType\">sortType</PropLink>, the `type` will also be used as the sort type.\n\nSee the example below - `id` and `age` columns are `type='number'`.\n\n<Sandpack>\n\n```ts files=[\"columns-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"columns.valueFormatter\" type=\"({ data?, isGroupRow, rowInfo, field?, rowSelected, rowActive, isGroupRow }) => Renderable\">\n\n> Customizes the value that will be rendered\n\nThe `valueFormatter` prop is the next function called after the <PropLink name=\"columns.valueGetter\" /> during the [rendering pipeline](/docs/learn/columns/column-rendering#rendering-pipeline). Unlike <PropLink name=\"columns.valueGetter\" />, <PropLink name=\"columns.valueFormatter\" /> can return any renderable value, like `JSX.Element`s.\n\n<Note>\n\nUnlike `valueGetter`, it is being called with an object that has both the `data` item (might be null or partial for group rows) and the `rowInfo` object, and some extra flags regarding the row state (selection, active, etc). Use the TS `isGroupRow` flag as discriminator to decide if `data` is available.\n\n</Note>\n\nIf you want to further customize what's being rendered, see related <PropLink name=\"columns.valueGetter\" />, <PropLink name=\"columns.renderValue\" />, <PropLink name=\"columns.render\" />, <PropLink name=\"columns.renderGroupValue\" />, <PropLink name=\"columns.renderLeafValue\" /> and <PropLink name=\"columns.renderGroupIcon\" />.\n\n<Sandpack title=\"Column with custom valueFormatter\">\n\n```tsx file=\"column-valueFormatter-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.valueGetter\" type=\"({ data, field? }) => string | number | boolean | null | undefined\">\n\n> Customizes the value that will be rendered\n\nThe `valueGetter` prop is a function that takes a single argument - an object with `data` and `field` properties. It should return a plain JavaScript value (so not a `ReactNode` or `JSX.Element`)\n\n<Note>\n\nNote that the `data` property is of type `DATA_TYPE | Partial<DATA_TYPE> | null` and not simply `DATA_TYPE`, because there are cases when you can have grouping (so for group rows with aggregations `data` will be `Partial<DATA_TYPE>`) or when there are lazily loaded rows or group rows with no aggregations - for which `data` is still `null`.\n\n</Note>\n\nIf you want to further customize what's being rendered, see related <PropLink name=\"columns.valueFormatter\" />, <PropLink name=\"columns.renderValue\" />, <PropLink name=\"columns.render\" />, <PropLink name=\"columns.renderGroupValue\" />, <PropLink name=\"columns.renderLeafValue\" /> and <PropLink name=\"columns.renderGroupIcon\" />.\n\n<Sandpack title=\"Column with custom valueGetter\">\n\n```tsx file=\"column-valueGetter-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columnSizing\" type=\"Record<string,{width,flex,...}>\">\n\n> Defines the sizing of columns in the grid.\n\nThis is a controlled property. For the uncontrolled version, see <PropLink name=\"defaultColumnSizing\" />.\n\nIt is an object that maps column ids to column sizing options. The values in the objects can contain the following properties:\n\n- <PropLink name=\"columnSizing.flex\">flex</PropLink> - use this for flexible columns. Behaves like the `flex` CSS property.\n- <PropLink name=\"columnSizing.width\">width</PropLink> - use this for fixed sized columns\n- <PropLink name=\"columnSizing.minWidth\">minWidth</PropLink> - specifies the minimum width of the column. Useful for flexible columns or for restricting users resizing both fixed and flexible columns.\n- <PropLink name=\"columnSizing.maxWidth\">maxWidth</PropLink> - specifies the maximum width of the column. Useful for flexible columns or for restricting users resizing both fixed and flexible columns.\n\n<Sandpack title=\"Controlled column sizing\">\n\n```tsx file=\"columnSizing-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nFor auto-sizing columns, see <PropLink name=\"autoSizeColumnsKey\" />.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"columnSizing.flex\" type=\"number\">\n\n> Specifies the flex value for the column.\n\nSee [using flexible column sizing section](/docs/learn/columns/fixed-and-flexible-size#using-flexible-column-sizing) for more details.\n\nA column can either be flexible or fixed-width. For fixed columns, use <PropLink name=\"columnSizing.width\" /> if you're using <PropLink name=\"columnSizing\" /> or <PropLink name=\"columns.defaultWidth\">column.defaultWidth</PropLink> for default-uncontrolled sizing.\n\n<Sandpack title=\"Controlled column sizing with flex columns\">\n\n```tsx file=\"columnSizing-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columnSizing.minWidth\" type=\"number\">\n\n> Specifies the minimum width for a column. Especially useful for flexible columns.\n\nSee [Using flexible column sizing](/docs/learn/columns/fixed-and-flexible-size#using-flexible-column-sizing) for more details on the flex algorithm.\n\nThis can also be specified for all columns by specifying <PropLink name=\"columnMinWidth\" />.\n\n<Sandpack title=\"Controlled column sizing with minWidth for column\">\n\n```tsx file=\"columnSizing-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"columnSizing.maxWidth\" type=\"number\">\n\n> Specifies the maximum width for a column. Especially useful for flexible columns.\n\nSee [Using flexible column sizing](/docs/learn/columns/fixed-and-flexible-size#using-flexible-column-sizing) for more details on the flex algorithm.\n\nThis can also be specified for all columns by specifying <PropLink name=\"columnMaxWidth\" />.\n\n<Sandpack title=\"Controlled column sizing with maxWidth for column\">\n\n```tsx file=\"columnSizing-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"columnSizing.width\" type=\"number\">\n\n> Specifies the fixed width for the column.\n\nSee [Using flexible column sizing](/docs/learn/columns/fixed-and-flexible-size#using-flexible-column-sizing) for more details.\n\nA column can either be flexible or fixed. For flexible columns, use <PropLink name=\"columnSizing.flex\" />.\n\n<Sandpack title=\"Controlled column sizing with fixed column\">\n\n```tsx file=\"columnSizing-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"keyboardShortcuts\" type=\"{key,handler,when}[]\">\n\n> An array that specifies the keyboard shortcuts for the DataGrid.\n\nSee the [Keyboard Shortcuts](/docs/learn/keyboard-navigation/keyboard-shortcuts) page for more details.\n\n<Sandpack>\n\n<Description>\nClick on a cell and use the keyboard to navigate.\n\nPress `Shift+Enter` to show an alert with the current active cell position.\n\n</Description>\n\n```ts file=\"$DOCS/reference/keyboard-shortcuts-initial-example.page.tsx\"\n```\n</Sandpack>\n\n\nInfinite Table DataGrid comes with some predefined keyboard shorcuts.\nyou can import from the `keyboardShortcuts` named export.\n```ts\nimport { keyboardShortcuts } from '@infinite-table/infinite-react'\n```\n\n#### Instant Edit\n\n```ts {4,12}\nimport {\n  DataSource,\n  InfiniteTable,\n  keyboardShortcuts\n} from '@infinite-table/infinite-react';\n\n function App() {\n  return <DataSource<Developer> primaryKey=\"id\" data={dataSource}>\n    <InfiniteTable<Developer>\n      columns={columns}\n      keyboardShortcuts={[\n        keyboardShortcuts.instantEdit\n      ]}\n    />\n  </DataSource>\n}\n```\n\n\n<Note>\n\nFor now, the only predefined keyboard shorcut is `keyboardShortcuts.instantEdit`. This keyboard shorcut starts cell editing when any key is pressed on the active cell. This is the same behavior found in Excel/Google Sheets.\n\n</Note>\n\n<Sandpack>\n\n<Description>\n\nClick on a cell and then start typing to edit the cell.\n\n</Description>\n\n```ts file=\"$DOCS/reference/keyboard-shortcuts-instant-edit-example.page.tsx\"\n```\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columnTypes\" type=\"Record<string,InfiniteTableColumnType>\">\n\n> Specifies an object that maps column type ids to column types. Column types are used to apply the same configuration/properties to multiple columns. See related <PropLink name=\"columns.type\" />\n\n<Note>\nBy default, all columns have the `default` column type applied. So, if you define the `default` column type, but don't specify any <PropLink name=\"columns.type\">type</PropLink> for a column, the default column type properties will be applied to that column.\n</Note>\n\nThe following properties are currently supported for defining a column type:\n\n- `align` - See <PropLink name=\"columns.align\" />\n- `components` - See <PropLink name=\"columns.components\" />\n- `cssEllipsis` - See <PropLink name=\"columns.cssEllipsis\" />\n- `defaultEditable` - See <PropLink name=\"columns.defaultEditable\" />\n- `defaultFlex` - default flex value (uncontrolled) for the column(s) this column type will be applied to. See <PropLink name=\"column.defaultFlex\" />\n- `defaultWidth` - default width (uncontrolled) for the column(s) this column type will be applied to. See <PropLink name=\"column.defaultWidth\" />\n- `getValueToEdit` - See <PropLink name=\"columns.getValueToEdit\" />\n- `getValueToPersist` - See <PropLink name=\"columns.getValueToPersist\" />\n- `headerAlign` - See <PropLink name=\"columns.headerAlign\" />\n- `headerCssEllipsis` - See <PropLink name=\"columns.headerCssEllipsis\" />\n- `headerStyle` - See <PropLink name=\"columns.headerStyle\" />\n- `header` - See <PropLink name=\"columns.header\" />\n- `maxWidth` - minimum width for the column(s) this column type will be applied to. See <PropLink name=\"column.maxWidth\" />\n- `minWidth` - minimum width for the column(s) this column type will be applied to. See <PropLink name=\"column.minWidth\" />\n- `renderMenuIcon` - See <PropLink name=\"columns.renderMenuIcon\" />\n- `renderSortIcon` - See <PropLink name=\"columns.renderSortIcon\" />\n- `renderValue` - See <PropLink name=\"columns.renderValue\" />\n- `render` - render function for the column(s) this column type will be applied to. See <PropLink name=\"column.render\" />\n- `shouldAcceptEdit` - See <PropLink name=\"columns.shouldAcceptEdit\" />\n- `sortable` - See <PropLink name=\"columns.sortable\" />\n- `style` - See <PropLink name=\"columns.style\" />\n- `valueFormatter` - See <PropLink name=\"columns.valueFormatter\" />\n- `valueGetter` - See <PropLink name=\"columns.valueGetter\" />\n- `verticalAlign` - See <PropLink name=\"columns.verticalAlign\" />\n\n<Note>\nWhen any of the properties defined in a column type are also defined in a column (or in column sizing/pinning,etc), the later take precedence so the properties in column type are not applied.\n\nThe only exception to this rule is the <PropLink name=\"columns.components\">components</PropLink> property, which is merged from column types into the column.\n</Note>\n\n<Sandpack size=\"lg\" title=\"Using MUI X Date Picker with custom 'date' type columns\" deps=\"@emotion/react,@emotion/styled,@mui/material,@mui/x-date-pickers,dayjs\">\n\n<Description>\n\nThis is a basic example integrating with the [MUI X Date Picker](https://mui.com/x/react-date-pickers/date-picker/) - click any cell in the **Birth Date** or **Date Hired** columns to show the date picker.\n\nThis example uses the <PropLink name=\"columnTypes\" code={false}>column types</PropLink> to give each date column the same editor and styling.\n\n</Description>\n\n```ts file=\"$DOCS/learn/editing/column-types-date-editor-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columnTypes.components\">\n\n> See related <PropLink name=\"columns.components\" />.\n\n</Prop>\n\n<Prop name=\"columnTypes.defaultFlex\" type=\"number\" >\n\n> Specifies a default flex value for the column type. Will be overriden in any column that already specifies a `defaultFlex` property.\n\nSee related <PropLink name=\"columnTypes.defaultWidth\" />, <PropLink name=\"columns.defaultFlex\" /> and <PropLink name=\"columns.defaultWidth\" />\n\n</Prop>\n\n<Prop name=\"columnTypes.defaultSortable\" type=\"boolean\" >\n\n> Specifies whether columns of this type are sortable.\n\nThis prop overrides the component-level <PropLink name=\"columnDefaultSortable\" />.\n\nThis prop is overriden by <PropLink name=\"columns.defaultSortable\" /> and <PropLink name=\"sortable\" />.\n\n</Prop>\n\n<Prop name=\"columnTypes.headerClassName\" type=\"string | (args) => string\">\n\n> Controls styling for the column header for columns with this column type. Can be a string or a function returning a string.\n\nSee docs at <PropLink name=\"columns.headerClassName\" />.\n\n</Prop>\n\n<Prop name=\"columns.align\" type=\"'start' | 'center' | 'end'\">\n\n> Controls the alignment of text in column cells and also the alignment of the column header. To only apply alignment to the column header, use <PropLink name=\"columns.headerAlign\" />. For vertical alignment, see <PropLink name=\"columns.verticalAlign\" />.\n\nFor css ellipsis, see <PropLink name=\"columns.cssEllipsis\" />.\n\n<Sandpack title=\"Column align example\">\n\n```tsx file=\"column-align-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n</Prop>\n\n\n\n<Prop name=\"columns.verticalAlign\" type=\"'start' | 'center' | 'end'\">\n\n> Controls the vertical alignment of text in column cells. For horizontal alignment, see <PropLink name=\"columns.align\" />.\n\n<Sandpack title=\"Column vertical align example\">\n\n```tsx file=\"column-vertical-align-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n</Prop>\n\n\n<Prop name=\"columns.headerAlign\" type=\"'start' | 'center' | 'end'\">\n\n> Controls the alignment of the column header. See related <PropLink name=\"columns.align\" /> and <PropLink name=\"columns.headerCssEllipsis\" />.\n\n<Sandpack title=\"Column header align example\">\n\n```tsx file=\"column-header-align-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n</Prop>\n\n<Prop name=\"columnTypes.headerStyle\" type=\"CSSProperties | (args) => CSSProperties\">\n\n> Controls styling for the column header for columns with this column type. Can be a style object or a function returning a style object.\n\nSee docs at <PropLink name=\"columns.headerStyle\" />.\n\n</Prop>\n\n<Prop name=\"columnTypes.defaultWidth\" type=\"number\" >\n\n> Specifies a default fixed width for the column type. Will be overriden in any column that already specifies a `defaultWidth` property.\n\nSee related <PropLink name=\"columnTypes.defaultFlex\" />, <PropLink name=\"columns.defaultWidth\" /> and <PropLink name=\"columns.defaultFlex\" />\n\n</Prop>\n\n<Prop name=\"columnTypes.maxWidth\" type=\"number\" >\n\n> Specifies a default maximum width for the column type. Will be overriden in any column that already specifies a `maxWidth` property.\n\nSee related <PropLink name=\"columnTypes.maxWidth\" /> and <PropLink name=\"columns.maxWidth\" />\n\n</Prop>\n\n<Prop name=\"columnTypes.minWidth\" type=\"number\" >\n\n> Specifies a default minimum width for the column type. Will be overriden in any column that already specifies a `minWidth` property.\n\nSee related <PropLink name=\"columnTypes.maxWidth\" /> and <PropLink name=\"columns.minWidth\" />\n\n</Prop>\n\n<Prop name=\"defaultActiveCellIndex\" type=\"[number,number]\">\n\n> Specifies the active cell for keyboard navigation. This is an uncontrolled prop. See the [Keyboard Navigation](/docs/learn/keyboard-navigation/navigating-cells) page for more details.\n\nSee <PropLink name=\"activeCellIndex\" /> for the controlled version of this prop and\n<PropLink name=\"keyboardNavigation\" /> for the keyboard navigation behavior.\n\n<Sandpack title=\"Uncontrolled keyboard navigation for cells\">\n\n<Description>\n\nThis example starts with cell `[2,0]` already active.\n\n</Description>\n\n```ts file=\"$DOCS/learn/keyboard-navigation/navigating-cells-uncontrolled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columnsTypes.sortable\" type=\"boolean\">\n\n> Specifies the sorting behavior for columns of this type.\n\nOverrides the global <PropLink name=\"sortable\" /> prop, but is overriden by the column's own <PropLink name=\"columns.sortable\">sortable</PropLink> property.\n\n</Prop>\n\n<Prop name=\"defaultActiveRowIndex\" type=\"number\">\n\n> Specifies the active row for keyboard navigation. This is an uncontrolled prop. See the [Keyboard Navigation](/docs/learn/keyboard-navigation/navigating-rows) page for more details.\n\nSee <PropLink name=\"activeRowIndex\" /> for the controlled version of this prop and\n<PropLink name=\"keyboardNavigation\" /> for the keyboard navigation behavior.\n\n<Sandpack title=\"Uncontrolled keyboard navigation for rows\">\n\n<Description>\n\nThis example starts with row at index `2` already active.\n\n</Description>\n\n```ts file=\"$DOCS/learn/keyboard-navigation/navigating-rows-uncontrolled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"defaultColumnOrder\" type=\"string[]|true\" defaultValue={true}>\n\n> Defines the order in which columns are displayed in the component.\n\nFor controlled usage, see <PropLink name=\"columnOrder\" />.\n\nWhen using this uncontrolled prop, you can also listen to <PropLink name=\"onColumnOrderChange\" /> to be notified of column order changes\n\n<Note>\n\nThe `defaultColumnOrder` array can contain identifiers that are not yet defined in the <PropLink name=\"columns\" /> Map or can contain duplicate ids. This is a feature, not a bug. We want to allow you to use the `defaultColumnOrder` in a flexible way so it can define the order of current and future columns.\n\nDisplaying the same column twice is a perfectly valid use case.\n\n</Note>\n\nSee [Column Order](/docs/learn/columns/column-order) for more details on ordering columns both programatically and via drag & drop.\n\n<Sandpack title=\"Uncontrolled column order\">\n\n```ts file=\"defaultColumnOrder-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"defaultColumnSizing\" type=\"Record<string,{width,flex,...}>\">\n\n> Defines a default sizing of columns in the grid.\n\nThis is an uncontrolled property. For the controlled version and more details, see <PropLink name=\"columnSizing\" />.\n\nIt is an object that maps column ids to column sizing options. The values in the objects can contain the following properties:\n\n- <PropLink name=\"defaultColumnSizing.flex\">flex</PropLink> - use this for flexible columns. Behaves like the `flex` CSS property.\n- <PropLink name=\"defaultColumnSizing.width\">width</PropLink> - use this for fixed sized columns\n- <PropLink name=\"defaultColumnSizing.minWidth\">minWidth</PropLink> - specifies the minimum width of the column. Useful for flexible columns or for restricting users resizing both fixed and flexible columns.\n- <PropLink name=\"defaultColumnSizing.maxWidth\">maxWidth</PropLink> - specifies the maximum width of the column. Useful for flexible columns or for restricting users resizing both fixed and flexible columns.\n\n<Sandpack title=\"Uncontrolled column sizing\">\n\n```tsx file=\"defaultColumnSizing-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nFor auto-sizing columns, see <PropLink name=\"autoSizeColumnsKey\" />.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"defaultColumnSizing.flex\" type=\"number\">\n\n> Specifies the flex value for the column.\n\nSee <PropLink name=\"columnSizing.flex\" /> for details.\n\n</Prop>\n\n<Prop name=\"defaultColumnSizing.minWidth\" type=\"number\">\n\n> Specifies the minimum width for a column. Especially useful for flexible columns.\n\nSee <PropLink name=\"columnSizing.minWidth\" /> for details.\n\n</Prop>\n\n<Prop name=\"defaultColumnSizing.maxWidth\" type=\"number\">\n\n> Specifies the maximum width for a column. Especially useful for flexible columns.\n\nSee <PropLink name=\"columnSizing.maxWidth\" /> for details.\n\n</Prop>\n\n<Prop name=\"defaultColumnSizing.width\" type=\"number\">\n\n> Specifies the fixed width for the column.\n\nSee <PropLink name=\"columnSizing.width\" /> for details.\n\n</Prop>\n\n<Prop name=\"domProps\" type=\"React.HTMLProps<HTMLDivElement>\">\n\n> DOM properties to be applied to the component root element.\n\nFor applying a className when the component is focused, see <PropLink name=\"focusedClassName\" />\n\nFor applying a className when the focus is within the component, see <PropLink name=\"focusedWithinClassName\" />\n\n<Sandpack>\n\n```ts files=[\"domprops-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"editable\" type=\"(param) => boolean | Promise<boolean>\">\n\n> Controls whether columns are editable or not.\n\nThis overrides both the global <PropLink name=\"columnDefaultEditable\" /> prop and the column's own <PropLink name=\"columns.defaultEditable\">defaultEditable</PropLink> property.\n\nThis function prop will be called when an edit is triggered on the column. The function will be called with a single object that contains the following properties:\n\n- `value` - the current value of the cell (the value currently displayed, so after <PropLink name=\"columns.valueFormatter\" /> and <PropLink name=\"columns.renderValue\" /> have been applied)\n- `rawValue` - the current value of the cell, but before any formatting and custom rendering has been applied. This is either the field value from the current data object, or the result of the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `data` - the data object (of type `DATA_TYPE`) for the current row\n- `rowInfo` - the row info object that underlies the row\n- `column` - the current column on which editing is invoked\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSourceApi` - - a reference to the [DataSource API](/docs/reference/datasource-api)\n\n<Note>\n\nThe function can return a `boolean` value or a `Promise` that resolves to a `boolean` - this means you can asynchronously decide whether the cell is editable or not.\n\n</Note>\n\nBy default, double-clicking an editable cell will show the cell editor. You can prevent this by returning `{preventEdit: true}` from the <PropLink name=\"onCellDoubleClick\">onCellDoubleClick</PropLink> function prop.\n\n</Prop>\n\n<Prop name=\"focusedClassName\" type=\"string\">\n\n> CSS class name to be applied to the component root element when it has focus.\n\nFor applying a className when the focus is within the component, see <PropLink name=\"focusedWithinClassName\" />\n\nFor focus style, see <PropLink name=\"focusedStyle\" />.\n\n</Prop>\n\n<Prop name=\"focusedWithinClassName\" type=\"string\">\n\n> CSS class name to be applied to the component root element when there is focus within (inside) the component.\n\nFor applying a className when the component root element is focused, see <PropLink name=\"focusedClassName\" />\n\n</Prop>\n\n<Prop name=\"focusedStyle\">\n\n> Specifies the `style` to be applied to the component root element when it has focus.\n\n<Sandpack title=\"focusedStyle example\">\n\n```ts files=[\"focusedStyle-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"focusedWithinStyle\">\n\n> Specifies the `style` to be applied to the component root element when there is focus within (inside) the component.\n\n<Note>\n\nTo listen to focusWithin changes, listen to <PropLink name=\"onFocusWithin\" /> and <PropLink name=\"onBlurWithin\" />.\n\n</Note>\n\n<Sandpack title=\"focusedWithinStyle example - focus an input inside the table to see it in action\">\n\n```ts files=[\"focusedWithinStyle-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"getCellContextMenuItems\" type=\"({data, column, rowInfo}) => MenuItem[] | null | { items: MenuItem[], columns: [{name}] } | Promise\">\n\n> Customises the context menu items for a cell.\n\nIf you want to customize the context menu even when the user clicks outside any cell, but inside the table body, use <PropLink name=\"getContextMenuItems\" />.\n\nThe `getCellContextMenuItems` function can return one of the following:\n\n- `null` - no custom context menu will be displayed, the default context menu will be shown (default event behavior not prevented)\n- `[]` - an empty array - no custom context menu will be displayed, but the default context menu is not shown - the default event behavior is prevented\n- `Array<MenuItem>` - an array of menu items to be displayed in the context menu - each `MenuItem` should have:\n  - a unique `key` property,\n  - a `label` property with the value to display in the menu cell - it's called `label` because this is the name of the default column in the context menu\n  - an optional `onAction({ key, item, hideMenu: () => void })` callback function to handle the click action on the menu item.\n  - an optional `onClick(event)` callback function to handle the click event on the menu item.\n  - an optional `hideMenuOnAction: boolean` - if `true`, it will close the context menu when the menu item is clicked\n\n<Sandpack title=\"Using context menus\">\n\n```ts file=\"cell-basic-context-menu-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nThis function can also return a `Promise` that resolves to one of the above types. This is useful for lazy loading the context menu items.\n\nWhen returning a `Promise`, the context menu will be shown after the promise resolves, and the default browser context menu is not shown.\n\n</Note>\n\nIn addition, if you need to configure the context menu to have other columns rather than the default column (named `label`), you can do so by returning an object with `columns` and `items`:\n\n```tsx\nconst getCellContextMenuItems = () => {\n  return {\n    columns: [{ name: 'label' }, { name: 'icon' }],\n    items: [\n      {\n        label: 'Welcome',\n        icon: 'üëã',\n        key: 'hi',\n      },\n      {\n        label: 'Convert',\n        icon: 'üîÅ',\n        key: 'convert',\n      },\n    ],\n  };\n};\n```\n\n<Sandpack title=\"Customising columns in the context menu\">\n\n<Description>\n\nRight-click any cell in the table to see a context menu with multiple columns (`icon`, `label` and `description`).\n\n</Description>\n\n```ts file=\"cells-with-custom-columns-context-menu-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"getContextMenuItems\" type=\"({event, data?, column?, rowInfo}, {api, dataSourceApi}) => MenuItem[] | null | { items: MenuItem[], columns: [{name}] } | Promise\">\n\n> Customises the context menu items for the whole table.\n\nIf you want to customize the context menu only when the user clicks inside a cell, use <PropLink name=\"getCellContextMenuItems\" />, which is probably what you're looking for.\n\nThe first argument this function is called with has the same shape as the one for <PropLink name=\"getCellContextMenuItems\" /> but all cell-related properties could also be `undefined`. Also, the `event` is available as a property on this object.\n\nIf this function returns null, the default context menu of the browser will be shown (default event behavior not prevented).\n\n<Sandpack title=\"Using context menus for the whole table\">\n\n```ts file=\"table-basic-context-menu-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nThis function can also return a `Promise` that resolves to one of the above types. This is useful for lazy loading the context menu items.\n\nWhen returning a `Promise`, the context menu will be shown after the promise resolves, and the default browser context menu is not shown.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getColumnMenuItems\" type=\"(items, context) => MenuItem[]\">\n\n> Allows customization of the context menu items for a column.\n\nUse this function to customize the context menu for columns. The function is called with the following arguments:\n\n- `items` - the default menu items for the column - you can return this array as is to use the default menu items (same as not providing this function prop) or you can customize the array or return a new one altogether.\n- `context` - an object that gives you access to the column and the grid state\n  - `context.column: InfiniteTableComputedColumn<T>` - the current column for which the context menu is being shown\n  - `context.api` - a reference to the [api](./reference/api)\n\n<Sandpack title=\"getColumnMenuItems example - custom menu item and icon\">\n\n<Description>\n\nIn this example, the currency and preferredLanguage columns have a custom icon for triggering the column context menu.\n\nIn addition, the `preferredLanguage` column has a custom header that shows a button for triggering the column context menu.\n\n</Description>\n\n```ts file=\"getColumnMenuItems-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"groupColumn\" type=\"InfiniteTableColumn|(colInfo, toggleGroupRow) => InfiniteTableColumn\">\n\n> Allows you to define a custom configuration for one or multiple group columns. When this prop is defined, it gets merged onto any values specified in the <DPropLink name=\"groupBy.column\" /> property.\n\nIf this is an object and no explicit <PropLink name=\"groupRenderStrategy\" /> is specified, the component is rendered as if you had <PropLink name=\"groupRenderStrategy\">groupRenderStrategy=\"single-column\"</PropLink>.\n\nIf it's a function, it will be called with the following arguments:\n\n- `colInfo` - an object with the following properties:\n- `colInfo.groupCount` - the count of row groups\n- `colInfo.groupBy` - the array of row groups, used by the `DataSource` to do the grouping\n- `colInfo.groupRenderStrategy` - the current <PropLink name=\"groupRenderStrategy\" code={false}>render strategy for groups</PropLink>.\n- `colInfo.groupByForColumn` - the grouping object (one of the items in `colInfo.groupBy`) corresponding to the current column. Only defined when `groupRenderStrategy` is `multi-column`.\n- `colInfo.groupIndexForColumn` - the index of `colInfo.groupByForColumn` in `colInfo.groupBy` - corresponding to the current column. Only defined when `groupRenderStrategy` is `multi-column`.\n- `toggleGroupRow(groupKeys: any[])` - a function you can use to toggle a group row. Pass an array of keys - the path to the group row you want to toggle.\n\n<Note>\n\nYou can still use <PropLink name=\"groupColumn\" /> as a function with single column group render strategy, but in this case, you have to be explicit and specify <PropLink name=\"groupRenderStrategy\">groupRenderStrategy=\"single-column\"</PropLink>.\n\n</Note>\n\n<Sandpack title=\"groupColumn used as an object\">\n\n```ts file=\"group-column-custom-renderers-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"groupColumn used as a function\">\n\n<Description>\n\nThis example shows how to use <PropLink name=\"groupColumn\" /> as a function that allows you to customize all generated group columns in a single place.\n\n</Description>\n\n```ts file=\"group-column-custom-renderers-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"groupRenderStrategy\" type=\"'single-column'|'multi-column'\">\n\n> Determines how grouping is rendered - whether a single or multiple columns are generated.\n\n<Sandpack>\n\n```ts files=[\"groupRenderStrategy-example.page.tsx\",\"employee-columns.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"hideColumnWhenGrouped\" type=\"boolean\" defaultValue={false}>\n\n> Allows you to hide group columns bound to fields that are grouped by (fields mentioned in <DataSourcePropLink name=\"groupBy\">groupBy.field</DataSourcePropLink>).\n\n<Sandpack>\n\n<Description>\n\nIn this example, toggle the checkbox to see the `stack` and `preferredLanguage` columns hide/show as the value of `hideColumnWhenGrouped` changes.\n\n</Description>\n\n```ts file=\"hideColumnWhenGrouped-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"hideEmptyGroupColumns\" type=\"boolean\" defaultValue={false}>\n\n> Allows you to hide group columns which don't render any information (this happens when all previous groups are collapsed).\n\n<Sandpack>\n\n```ts files=[\"hideEmptyGroupColumns-example.page.tsx\",\"employee-columns.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"keyboardNavigation\" type=\"'cell'|'row'|false\" defaultValue=\"'cell'\">\n\n> Determines whether keyboard navigation is enabled.\n\nAvailable values:\n\n- `'cell'` - enables keyboard navigation for cells. This is the default.\n- `'row'` - enables keyboard navigation for rows.\n- `false` - disables keyboard navigation.\n\nFor cell keyboard navigation, see <PropLink name=\"activeCellIndex\" />.\nFor row keyboard navigation, see <PropLink name=\"activeRowIndex\" />.\n\n<Sandpack title=\"Keyboard navigation\">\n\n<Description>\n\nThis example starts with cell `[2,0]` already active.\n\n</Description>\n\n```ts file=\"$DOCS/learn/keyboard-navigation/navigating-cells-uncontrolled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Disabled Keyboard navigation\">\n\n<Description>\n\nIn this example the keyboard navigation is disabled.\n\n</Description>\n\n```ts file=\"$DOCS/learn/keyboard-navigation/navigation-disabled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"keyboardSelection\" type=\"boolean\" defaultValue={true}>\n\n> Determines whether the keyboard can be used for selecting/deselecting rows/cells.\n\nBy default <PropLink name=\"keyboardSelection\" /> is enabled, so you can use the keyboard **spacebar** key to select multiple rows. Using the spacebar key is equivalent to doing a mouse click, so expect the combination of **spacebar** + `cmd`/`ctrl`/`shift` modifier keys to behave just like clicking + the same modifier keys.\n\nFor specifying the selection mode, use <DPropLink name=\"selectionMode\" />\n\n<Sandpack  title=\"Toggling keyboard navigation\">\n\n```ts file=\"default-selection-mode-multi-row-keyboard-toggle-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"loadingText\" type=\"ReactNode\" defaultValue=\"'Loading'\">\n\n> The text inside the load mask - displayed when <DataSourcePropLink name=\"loading\">loading=true</DataSourcePropLink>.\n\n<Sandpack title=\"Customized loading text\">\n\n```ts file=\"loadingText-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"multiSortBehavior\" type=\"'append'|'replace'\" default=\"'replace'\">\n\n> Specifies the behavior of the DataGrid when [multiple sorting](/docs/learn/sorting/multiple-sorting) is configured. Defaults to `'replace'`.\n\nWhen `InfiniteTable` is configured with multiple sorting there are two supported behaviors:\n\n- `append` - when this behavior is used, clicking a column header adds that column to the alredy existing sort. If the column is already sorted, the sort direction is reversed. In order to remove a column from the sort, the user needs to click the column header in order to toggle sorting from ascending to descending and then to no sorting.\n- `replace` - the default behavior - a user clicking a column header removes any existing sorting and sets that column as sorted. In order to add a new column to the sort, the user needs to hold the `Ctrl/Cmd` key while clicking the column header.\n\n<Sandpack>\n<Description>\n\nTry clicking the `age` column and then the `firstName` column.\n\nIf the multi-sort behavior is `replace`, clicking the second column will remove the sort from the first column.\nIn order for the sorting to be additive, even if the behavior is `replace`, use the `Ctrl`/`Cmd` key while clicking the column header.\n\nIf the multi-sort behavior is `append`, clicking the second column will add it to the sort.\n\n</Description>\n\n```ts file=\"$DOCS/learn/sorting/local-multi-sorting-example-defaults-with-local-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onActiveCellIndexChange\" type=\"(activeCellIndex:[number,number])=>void\">\n\n> Callback triggered by cell navigation. See the [Keyboard Navigation](/docs/learn/keyboard-navigation/navigating-cells) page for more details.\n\nSee related <PropLink name=\"activeCellIndex\" /> and <PropLink name=\"keyboardNavigation\" /> for the keyboard navigation behavior.\n\n<Sandpack title=\"Controlled keyboard navigation (for cells) with callback\">\n\n<Description>\n\nThis example uses `onActiveCellIndexChange` to react to changes in the `activeCellIndex`.\n\n</Description>\n\n```ts file=\"$DOCS/learn/keyboard-navigation/navigating-cells-controlled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onActiveRowIndexChange\" type=\"(activeRowIndex:number)=>void\">\n\n> Callback triggered by row navigation. See the [Keyboard Navigation](/docs/learn/keyboard-navigation/navigating-rows) page for more details.\n\nSee related <PropLink name=\"activeRowIndex\" /> and <PropLink name=\"keyboardNavigation\" /> for the keyboard navigation behavior.\n\n<Sandpack title=\"Controlled keyboard navigation (for rows) with callback\">\n\n<Description>\n\nThis example uses `onActiveRowIndexChange` to react to changes in the `activeRowIndex`.\n\n</Description>\n\n```ts file=\"$DOCS/learn/keyboard-navigation/navigating-rows-controlled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onBlurWithin\" type=\"(event)=> void\">\n\n> Function that is called when a focused element is blurred within the component.\n\nFor the corresponding focus event, see <PropLink name=\"onFocusWithin\" />\n\n<Note>\n\nThis callback is fired when a focusable element inside the component is blurred, and the focus is no longer within the component. In other words, when you navigate focusable elements inside the table, this callback is not fired.\n\n</Note>\n\n<Sandpack title=\"Blur an input inside the table to see the callback fired\">\n\n```ts files=[\"onBlurWithin-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"onCellDoubleClick\" type=\"({ colIndex, rowIndex, column, columnApi, api, dataSourceApi }, event) => void | {preventEdit?: boolean} \">\n\n> Callback function called when a cell has been double clicked.\n\nIf the cell is editable, you can prevent going into edit mode by returning `{preventEdit: true}` from the function.\n\n</Prop>\n\n<Prop name=\"onCellClick\" type=\"({ colIndex, rowIndex, column, columnApi, api, dataSourceApi }, event) => void\">\n\n> Callback function called when a cell has been clicked.\n\nThe first argument of the function is an object that contains the following properties:\n\n- `rowIndex: number` - the index of the row that was clicked.\n- `colIndex: number` - the index of the column that was clicked. This index is the index in the array of visible columns.\n- `column: InfiniteTableComputedColumn<DATA_TYPE>` - the column that has been clicked\n- `columnApi: InfiniteTableColumnApi<DATA_TYPE>` - the [column API](/docs/reference/column-api)\n- `api: InfiniteTableApi<DATA_TYPE>` - a reference to the [API](docs/reference/api)\n- `dataSourceApi: DataSourceApi<DATA_TYPE>` - a reference to the [Data Source API](/docs/reference/datasource-api). Can be used to get the current data.\n\nThe second argument is the original browser click event.\n\n</Prop>\n\n<Prop name=\"onColumnOrderChange\" type=\"(columnOrder: string[])=>void\">\n\n> Called as a result of user changing the column order\n\n</Prop>\n\n<Prop name=\"onColumnSizingChange\" type=\"(columnSizing)=>void\">\n\n> Called as a result of user doing a column resize.\n\nUse this callback to get updated information after a column resize is performed.\n\nThis works well in combination with the controlled <PropLink name=\"columnSizing\" /> prop (though you don't have to use controlled <PropLink name=\"columnSizing\" /> in order to use this callback). For more info on resizing columns, see [Column Sizing](/docs/learn/columns/fixed-and-flexible-size).\n\nSee related <PropLink name=\"onViewportReservedWidthChange\" />\n\n<Sandpack title=\"Controlled column sizing example with onColumnSizingChange\">\n\n```ts file=\"onColumnSizingChange-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onEditAccepted\" type=\"({value, initialValue, column, rowInfo, ...}) => void\">\n\n> Callback prop called when an edit is accepted\n\nIn order to decide whether an edit should be accepted or not, you can use the global <PropLink name=\"shouldAcceptEdit\"/> prop or the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> alternative.\n\n<Note>\n\nWhen neither the global <PropLink name=\"shouldAcceptEdit\"/> nor the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> are defined, all edits are accepted by default.\n\n</Note>\n\nThis callback is called with a single object that has the following properties:\n\n- `value` - the value that was accepted for the edit operation.\n- `initialValue` - the initial value of the cell (the value before editing started)\n- `rowInfo` - of type <TypeLink name=\"InfiniteTableRowInfo\" /> - the row info object that underlies the row\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSouceApi` - a reference to the [DataSource API](/docs/reference/datasource-api)\n- `column` - the column on which the edit was performed\n- `columnApi` - a reference to the [column API](/docs/reference/column-api)\n\nSee related <PropLink name=\"onEditRejected\" /> callback prop.\n\n</Prop>\n\n<Prop name=\"onEditPersistSuccess\" type=\"({value, initialValue, column, rowInfo, ...})=>void\">\n\n> Callback prop called when an edit is persisted successfully\n\nHas the same signature as <PropLink name=\"onEditAccepted\" />\n\n</Prop>\n\n<Prop name=\"onEditRejected\" type=\"({ value, initialValue, column, rowInfo, ... }) => void\">\n\n> Callback prop called when an edit is rejected\n\nIn order to decide whether an edit should be accepted or rejected, you can use the global <PropLink name=\"shouldAcceptEdit\"/> prop or the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> alternative.\n\n<Note>\n\nWhen neither the global <PropLink name=\"shouldAcceptEdit\"/> nor the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> are defined, all edits are accepted by default.\n\n</Note>\n\nThis callback prop has almost the same signature as the <PropLink name=\"onEditAccepted\" /> callback prop. The only difference is that the argument passed to the function also contains an `error` property, with a reference to the error that caused the edit to be rejected.\n\n</Prop>\n\n<Prop name=\"onFocusWithin\" type=\"(event)=> void\">\n\n> Function that is called when the table receives focus within the component.\n\nFor the corresponding blur event, see <PropLink name=\"onBlurWithin\" />\n\n<Sandpack title=\"Focus an input inside the table to see the callback fired\">\n\n```ts files=[\"onFocusWithin-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"onKeyDown\" type=\"({ api, dataSourceApi }, event) => void | InfiniteTablePropOnKeyDownResult\">\n\n> Callback function called when the `keydown` event occurs on the table.\n\nThe first argument of the function is an object that contains the following properties:\n\n- `api: InfiniteTableApi<DATA_TYPE>` - a reference to the [API](docs/reference/api)\n- `dataSourceApi: DataSourceApi<DATA_TYPE>` - a reference to the [Data Source API](/docs/reference/datasource-api). Can be used to get the current data.\n\nThe second argument is the original browser `keydown` event.\n\nIf you want to prevent some default behaviours, you can return an object with the following properties:\n\n- `preventEdit: boolean` - if true, the cell editor will not be shown when hitting the `Enter` key in an editable cell.\n- `preventEditStop: boolean` - if true, hitting the `Escape` key will not stop the edit.\n- `preventSelection: boolean` - if true, the ` ` and `Cmd+a` keys will not select cells/rows\n- `preventNavigation: boolean` - if true, keyboard navigation will be prevented when using `arrow` keys, `page up/down`, `home/end`, `enter`.\n\n<Note>\n\nFor keyboard shortcuts, see <PropLink name=\"keyboardShortcuts\" />.\n\n</Note>\n</Prop>\n\n<Prop name=\"onReady\" type=\"({api, dataSourceApi}) => void}\">\n\n> Callback prop that is being called when the table is ready.\n\nThis is called only once with an object that has an `api` property, which is an instance of [`InfiniteTableApi<DATA_TYPE>`](/docs/reference/api) and a `dataSourceApi` property, which is an instance of [`DataSourceApi<DATA_TYPE>`](/docs/reference/datasource-api).\n\nThe `ready` state for the table means it has been layout out and has measured its available size for laying out the columns.\n\nIt will never be called again after the component is ready.\n\n</Prop>\n\n<Prop name=\"onRenderRangeChange\" type=\"(range)=>void\">\n> Called whenever the render range changes, that is, additional rows or columns come into view.\n\nThe first (and only) argument is an object with `{start, end}` where both `start` and `end` are arrays of `[rowIndex, colIndex]` pairs.\n\n So if you want to get the start and end indexes, you can do\n\n ```ts\n const [startRow, startCol] = renderRange.start;\n const [endRow, endCol] = renderRange.end;\n ```\n\n<Note>\n\nThis callback is not debounced or throttled, so it can be called multiple times in a short period of time, especially while scrolling. Make sure your function is fast, or attach a debounced function, in order to avoid performance issues.\n\n```tsx\nimport {\n  debounce,\n  InfiniteTable,\n  DataSource\n} from '@infinite-table/infinite-react';\n\nfunction App() {\n  const onRenderRangeChange = useMemo(() => {\n    return debounce((range) => {\n      console.log(range.start, range.end);\n    }, {wait: 100});\n  }, []);\n\n  return <DataSource<Developer>\n    primaryKey=\"id\"\n    data={/*data*/}\n  >\n    <InfiniteTable<Developer>\n      onRenderRangeChange={onRenderRangeChange}\n      columns={/*columns*/}\n    />\n  </DataSource>\n}\n```\n</Note>\n\nUnlike <PropLink name=\"onScrollStop\" />, this function is also called when the DataGrid is resized and also when initially rendered.\n\n</Prop>\n\n\n<Prop name=\"onScrollStop\" type=\"({renderRange, viewportSize, scrollTop, scrollLeft})=>void\">\n\n> Triggered when the user has stopped scrolling (after <PropLink name=\"scrollStopDelay\" /> milliseconds).\n\nThis is called when the user stops scrolling for a period of time - as configured by <PropLink name=\"scrollStopDelay\" /> (milliseconds).\n\nThe function is called with an object that has the following properties:\n - `renderRange` - the render range of the viewport. This is an object with `{start, end}` where both `start` and `end` are arrays of `[rowIndex, colIndex]` pairs.\n So if you want to get the start and end indexes, you can do\n ```ts\n const [startRow, startCol] = renderRange.start;\n const [endRow, endCol] = renderRange.end;\n ```\n\n - `viewportSize` - the size of the viewport - `{width, height}`\n - `scrollTop` - the scrollTop position of the viewport - `number`\n - `scrollLeft` - the scrollLeft position of the viewport - `number`\n\n\nAlso see <PropLink name=\"onScrollToTop\" />, <PropLink name=\"onScrollToBottom\" /> and <PropLink name=\"onRenderRangeChange\" />.\n\n<Sandpack title=\"onScrollStop is called with viewport info - scroll the grid and see the console\" >\n\n```ts file=\"./onScrollStop-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"onScrollToBottom\" type=\"()=>void\">\n\n> Triggered when the user has scrolled to the bottom of the component. Also see <PropLink name=\"onScrollToTop\" /> and <PropLink name=\"onScrollStop\" />.\n\nAlso see <PropLink name=\"onScrollToTop\" /> and <PropLink name=\"onScrollStop\" />.\n\nAs an example usage, we're demoing live pagination, done in combination with the [react-query](https://tanstack.com/query/latest) library.\n\n<Note>\n\nIf you want to scroll to the top of the table, you can use the <PropLink name=\"scrollTopKey\" /> prop.\n\n</Note>\n\n<Sandpack title=\"Fetch new data on scroll to bottom\">\n\n```ts file=\"$DOCS/learn/working-with-data/live-pagination-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onViewportReservedWidthChange\" type=\"(reserved: number) => void\">\n\n> Callback to be notified of changes to <PropLink name=\"viewportReservedWidth\" />\n\nSee <PropLink name=\"viewportReservedWidth\" /> for details. See related <PropLink name=\"onColumnSizingChange\" />.\n\nWhen he user is performing a column resize (via drag & drop), <PropLink name=\"onViewportReservedWidthChange\" /> is called when the resize is finished (not the case for resizing with the **SHIFT** key pressed, when adjacent columns share the space between them since the reserved width is preserved).\n\n<Sandpack title=\"Using onViewportReservedWidth to respond to user column resizing\">\n\n<Description>\nResize a column to see `viewportReservedWidth` updated and then click the button to reset it to `0px`\n</Description>\n\n```ts file=\"viewportReservedWidth-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"persistEdit\" type=\"(params) => any|Error|Promise<any|Error>\">\n\n> Custom function to persist an edit\n\nThis allows edits that have been accepted (see <PropLink name=\"shouldAcceptEdit\" />) to be persisted to a remote (or local) location.\n\nThis function is called with an object that has the following properties:\n\n- `value` - the value that was accepted for the edit operation.\n- `initialValue` - the initial value of the cell (the value that was displayed before editing started). This is the value resulting after <PropLink name=\"columns.valueFormatter\" /> and <PropLink name=\"columns.renderValue\" /> have been applied)\n- `rawValue` - the initial value of the cell, but before any formatting and custom rendering has been applied. This is either the field value from the current data object, or the result of the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `data` - the current data object\n- `rowInfo` - the row info object that underlies the row\n- `column` - the current column on which editing is invoked\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSourceApi` - - a reference to the [DataSource API](/docs/reference/datasource-api)\n\n<Note>\n\nThis function can be synchronous or asynchronous. For synchronous persisting, return an `Error` if the persisting fails, or any other value if all went well.\n\nFor asynchronous persisting, you have to return a `Promise`. If the persisting fails, resolve the promise with an `Error` object or reject the promise. If the persisting succeeded, resolve the promise with any non-error value.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"pivotGrandTotalColumnPosition\" defaultValue={false} type={'\"start\"|\"end\"|false'}>\n\n> Controls the position and visibility of pivot grand-total columns\n\nIf specified as `false`, the pivot grand-total columns are not displayed.\n\nFor normal pivot total columns, see <PropLink name=\"pivotTotalColumnPosition\"/>.\n\n<Sandpack title=\"Pivoting with pivotGrandTotalColumnPosition=start\">\n\n```ts file=\"pivot-grand-total-column-position-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"pivotTotalColumnPosition\" defaultValue={'\"end\"'} type={'\"start\"|\"end\"|false'}>\n\n> Controls the position and visibility of pivot total columns\n\nIf specified as `false`, the pivot total columns are not displayed.\n\nFor grand-total pivot columns, see <PropLink name=\"pivotGrandTotalColumnPosition\"/>.\n\n<Note>\n\nPivot total columns only make sense when pivoting by two or more pivot fields, and thus will only display if this is the case. You can however, display grand-total columns if you have a single pivot field (or even no pivot fields - so <DataSourcePropLink name=\"pivotBy\"/> is an empty array).\n\nIn case there are no pivot fields, but <DataSourcePropLink name=\"pivotBy\"/> is an empty array, by default, a total column will be displayed for each aggregation (unless you specify <PropLink name=\"pivotTotalColumnPosition\"/> as `false`).\n\n</Note>\n\n<Sandpack title=\"Pivoting with pivotTotalColumnPosition=start\">\n\n```ts file=\"pivot-total-column-position-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"resizableColumns\" type=\"boolean\" defaultValue={true}>\n\n> Controls if by default all columns are resizable or not.\n\nThis property controls the behavior for all columns that don't have <PropLink name=\"columns.resizable\" /> explicitly specified.\n\n<Sandpack title=\"Resizable columns example\">\n\n<Description>\nFor resizable columns, hover the mouse between column headers to grab & drag the resize handle.\n\nHold SHIFT when grabbing in order to **share space on resize**.\n</Description>\n\n```ts file=\"resizableColumns-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"rowHeight\" type=\"number|string\" defaultValue={40}>\n\n> Specifies the height for rows. If a string is passed, it should be the name of a CSS variable, eg `--row-height`\n\n<Sandpack title=\"rowHeight as number\">\n\n```ts files=[\"rowHeight-number-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"rowHeight from CSS variable name\">\n\n```ts files=[\"rowHeight-cssvar-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"rowClassName\" type=\"string|(params:InfiniteTableStylingFnParams) => string\">\n\n> Specifies the className to be applied to all rows or conditionally to certain rows.\n\nThe `rowClassName` prop can be either a string or a function that returns a string.\n\nWhen used as a function, it's called with a param of type <TypeLink name=\"InfiniteTableStylingFnParams\" />, just like the <PropLink name=\"rowStyle\" /> function.\n\n</Prop>\n\n<Prop name=\"rowStyle\" type=\"CSSProperties|(params:InfiniteTableStylingFnParams) => CSSProperties\">\n\n> Specifies the style object to be applied to all rows or conditionally to certain rows.\n\nThe `rowStyle` prop can be either an object (typed as `React.CSSProperties`) or a function that is called with a param of type <TypeLink name=\"InfiniteTableStylingFnParams\" />\n\n### `rowStyle` as a function\n\nWhen `rowStyle` is a function, it's called with a param of type <TypeLink name=\"InfiniteTableStylingFnParams\" />\n\nWhen Infinite Table calls `rowStyle`, the `data` property can be null - this is the case for grouped rows.\n\nThe `rowInfo` object contains the following properties (see <TypeLink name=\"InfiniteTableRowInfo\" >type definition here</TypeLink>):\n\n- `id` - the id of the current row\n- `data` - the data object\n- `indexInAll` - the index in the whole dataset\n- `indexInGroup` - the index of the row in the current group\n- `groupBy` - the fields used to group the `DataSource`\n- `isGroupRow` - whether the row is a group row\n- `collapsed` - for a group row, whether the group row is collapsed\n\nSee [Using RowInfo](/docs/learn/rows/using-row-info) for more details.\n\nYou can either return a valid style object, or undefined.\n\n```tsx\nconst rowStyle: InfiniteTablePropRowStyle<Employee> = ({\n  data,\n  rowInfo,\n}: {\n  data: Employee | null;\n  rowInfo: InfiniteTableRowInfo<Employee>;\n}) => {\n  const salary = data ? data.salary : 0;\n\n  if (salary > 150_000) {\n    return { background: 'tomato' };\n  }\n  if (rowInfo.indexInAll % 10 === 0) {\n    return { background: 'lightblue', color: 'black' };\n  }\n};\n```\n\n<Sandpack title=\"rowStyle example usage\">\n\n```ts files=[\"rowStyle-example.page.tsx\",\"rowStyle-example-columns.ts\"]\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"viewportReservedWidth\" type=\"number\" defaultValue={0}>\n\n> Specifies the width of the space to be kept as blank - useful when there are flex columns. This number can even be negative.\n\nThe flexbox algorithm also uses `viewportReservedWidth` to determine the width of the viewport to use for sizing columns - you can use `viewportReservedWidth=100` to always have a `100px` reserved area that won't be used for flexing columns.\n\nOr you can use a negative value, eg `-200` so the flexbox algorithm will use another `200px` (in addition to the available viewport area) for sizing flexible columns - this will result in a horizontal scrollbar being visible.\n\nFor reacting to column resizing, you need to listen to <PropLink name=\"onViewportReservedWidthChange\" />\n\n<Sandpack title=\"Using viewportReservedWidth to reserve whitespace when you have flexible columns\">\n\n<Description>\nResize a column to see `viewportReservedWidth` updated and then click the button to reset it to `0px`\n</Description>\n\n```ts file=\"viewportReservedWidth-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"shouldAcceptEdit\" type=\"(params) => boolean|Error|Promise<boolean|Error>\">\n\n> Function used to validate edits for all columns.\n\nThis function is called when the user wants to finish an edit - it is used to decide whether an edit is accepted or rejected, for all columns.\n\n<p>This overrides the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> prop.</p>\n<p>If you define the global <PropLink name=\"shouldAcceptEdit\" /> and still want to use the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink>, you can call the column-level function from this global one.</p>\n\nThe function is called with an object that has the following properties:\n\n- `value` - the value that the user wants to persist via the cell editor\n- `initialValue` - the initial value of the cell (the value that was displayed before editing started). This is the value resulting after <PropLink name=\"columns.valueFormatter\" /> and <PropLink name=\"columns.renderValue\" /> have been applied)\n- `rawValue` - the initial value of the cell, but before any formatting and custom rendering has been applied. This is either the field value from the current data object, or the result of the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `data` - the current data object\n- `rowInfo` - the row info object that underlies the row\n- `column` - the current column on which editing is invoked\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSourceApi` - - a reference to the [DataSource API](/docs/reference/datasource-api)\n\n<Sandpack>\n\n<Description>\n\nEdit the `salary` column. Only valid numbers are persisted.\n\n</Description>\n\n```ts file=\"global-should-accept-edit-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"scrollTopKey\" type=\"number|string\">\n\n> Determines scrolling the table to the top.\n\nUse this property to declaratively tell the `InfiniteTable` component to scroll to the top. Whenever a new value is provided for this property, it will scroll to the top.\n\n<Sandpack title=\"Declaratively scrolling to the top of the table\">\n\n```ts file=\"scrollTopKey-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"virtualizeColumns\" type=\"boolean\" defaultValue={true}>\n\n> Configures whether columns are virtualized or not\n\nBy default, columns are virtualized in order to improve performance.\n\n</Prop>\n\n</PropTable>\n"
    },
    {
      "filePath": "/docs/learn/common-issues/index",
      "routePath": "/docs/learn/common-issues/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/common-issues/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/learn/common-issues/",
      "frontmatter": {
        "title": "Common Issues",
        "description": "Avoid common pitfalls and issues when using the component. Learn how to use it properly to perform smooth and avoid jank."
      },
      "excerpt": "As people have started using `<InfiniteTable />` we've noticed a few issues keep popping up.",
      "readingTime": "2 min read",
      "content": "\nAs people have started using `<InfiniteTable />` we've noticed a few issues keep popping up.\n\nWhile we're trying to refine our API to be easier to use and understand, developers using the component still need to be aware of some design decisions and conventions used in the component.\n\n## Issue: Performance degradation because props are new on every render\n\nPassing new props on every render to the `<InfiniteTable />` component or to the `<DataSource />` component can be a performance bottleneck:\n\n```ts\n<DataSource\n  // dont do this\n  groupBy={[{ field: 'country' }]}\n/>\n```\n\nInstead pass the **same** reference when things do change - stored in state or any other place:\n\n```ts\nconst [groupBy, setGroupBy] = useState([{ field: 'country' }]);\n\n<DataSource groupBy={groupBy} onGroupByChange={setGroupBy} />;\n```\n\n<Note>\n\nWhen in dev mode, you can set `localStorage.debug = \"*\"` in your localstorage to see potential issues logged to the console.\n\nFor example, you might see:\n\n`InfiniteTable:rerender Triggered by new values for the following props +1s columns`\n\n</Note>\n\n## Issue: State inside custom components rendered in cells is lost while scrolling\n\nWhen using custom rendering or custom components for columns, make sure all your rendering logic is [controlled](https://reactjs.org/docs/forms.html#controlled-components) and that it doesn't have any local or transient state.\n\nThis is important because `InfiniteTable` makes heavy use of virtualization, in both _column cells and column headers_, so **custom components can and will be unmounted and re-mounted multiple times**, during the virtualization process (triggered by user scrolling, sorting, filtering and a few other interactions).\n"
    },
    {
      "filePath": "/docs/learn/columns/cell-and-column-styling",
      "routePath": "/docs/learn/columns/cell-and-column-styling",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/cell-and-column-styling.page.md",
      "fileName": "cell-and-column-styling.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Styling",
        "description": "Styling columns in the InfiniteTable React DataGrid via both style and className properties."
      },
      "excerpt": "## Using the column `style`",
      "readingTime": "3 min read",
      "content": "\n## Using the column `style`\n\nThe most straightforward way to style the cells in a column is to use the <PropLink name=\"columns.style\">column.style</PropLink> property as an object.\n\n```ts title=\"Styling a column in the DataGrid\"\nconst column = {\n  firstName: {\n    style: {\n      color: 'red',\n      fontWeight: 'bold',\n    },\n  },\n};\n```\n\n<Sandpack title=\"Using column.style as an object\">\n\n```tsx file=\"column-style-object-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nThe <PropLink name=\"columns.style\">column.style</PropLink> property can either be an object (of type `React.CSSProperties`) or a function that returns an object (of the same type).\n\nUsing functions for the <PropLink name=\"columns.style\">column.style</PropLink> property allows you to style the cells based on the cell's value or other properties.\n\n```ts {6} title=\"Styling a column using a style function\"\nconst columns = {\n  salary: {\n    field: 'salary',\n    type: 'number',\n    style: ({ value, data, column, rowInfo }) => {\n      return {\n        color: value && value > 100_000 ? 'red' : 'tomato',\n      };\n    },\n  },\n};\n```\n\n<Sandpack title=\"Using column.style as a function\">\n\n```tsx file=\"column-style-fn-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf defined as a function, the <PropLink name=\"columns.style\">column.style</PropLink> accepts an object as a parameter, which has the following properties:\n\n- `column` - the current column where the style is being applied\n- `data` - the data object for the current row. The type of this object is `DATA_TYPE | Partial<DATA_TYPE> | null`. For regular rows, it will be of type `DATA_TYPE`, while for group rows it will be `Partial<DATA_TYPE>`. For rows not yet loaded (because of batching being used), it will be `null`.\n- `rowInfo` - the information about the current row - see [Using RowInfo](/docs/learn/rows/using-row-info) for more details.\n- `value` - the underlying value of the current cell - will generally be `data[column.field]`, if the column is bound to a `field` property\n\n</Note>\n\n## Using the column `className`\n\nMirroring the behavior already described for the <PropLink name=\"columns.style\">column.style</PropLink> property, the <PropLink name=\"columns.className\">column.className</PropLink> property can be used to apply a CSS class to the cells in a column.\n\nIt can be used as a string or a function that returns a string.\n\n```ts title=\"Styling a column using column.className\"\nconst columns = {\n  firstName: {\n    className: 'first-name-column',\n  },\n};\n```\n\n<Sandpack title=\"Using column.className as an string\">\n\n```tsx files=[\"column-className-string-example.page.tsx\",\"coloring.module.css\"]\n\n```\n\n</Sandpack>\n\nUsing functions for the <PropLink name=\"columns.className\">column.className</PropLink> property allows you to style the cells based on the cell's data/value/rowInfo etc.\n\n```ts {6} title=\"Styling a column using a className function\"\nconst columns = {\n  salary: {\n    field: 'salary',\n    type: 'number',\n    className: ({ value, data, column, rowInfo }) => {\n      return value && value > 100_000 ? 'red-color' : 'tomato-color',\n    },\n  },\n}\n```\n\n<Sandpack title=\"Using column.className as a function\">\n\n```tsx files=[\"column-className-fn-example.page.tsx\",\"coloring.module.css\"]\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/columns/column-grouping",
      "routePath": "/docs/learn/columns/column-grouping",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/column-grouping.page.md",
      "fileName": "column-grouping.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Groups",
        "description": "Columns can be grouped with multiple levels of nesting thus making Infinite Table DataGrid a powerful tool for data analysts"
      },
      "excerpt": "Specify column groups via the controlled <PropLink name=\"columnGroups\" /> (or uncontrolled <PropLink name=\"defaultColumnGroups\"/>) prop.",
      "readingTime": "1 min read",
      "content": "\nSpecify column groups via the controlled <PropLink name=\"columnGroups\" /> (or uncontrolled <PropLink name=\"defaultColumnGroups\"/>) prop.\n\nThe value is an object, with keys being the group id and value being the group description.\n\n```tsx title=\"defining-column-groups\"\nconst columnGroups: Record<string, InfiniteTableColumnGroup> = {\n  'contact info': { header: 'Contact info' },\n  // `street` column group belongs to the `address` columnGroup\n  street: { header: 'street', columnGroup: 'address' },\n  location: { header: 'location', columnGroup: 'address' },\n\n  // this is a top-level group\n  address, { header: 'Address' }\n}\n```\n\nA column group can have a parent column group, specified by the <PropLink name=\"columnGroups.columnGroup\" /> property. The same goes for a column - columns can have <PropLink name=\"columns.columnGroup\">columnGroup</PropLink> as well.\n\n```tsx title=\"defining-columns-with-groups\"\nconst columns: Record<string, InfiniteTableColumn<Person>> = {\n  id: { field: 'id' },\n\n  // `streetNo` column belongs to the `street` columnGroup\n  streetNo: { field: 'streetNo', columnGroup: 'street' },\n  city: { field: 'city', columnGroup: 'location' },\n\n  streetName: { field: 'streetName', columnGroup: 'street' },\n  firstName: { field: 'firstName' },\n\n  country: { field: 'country', columnGroup: 'location' },\n  region: { field: 'region', columnGroup: 'location' },\n\n  email: { field: 'email', columnGroup: 'contact info' },\n  phone: { field: 'phone', columnGroup: 'contact info' },\n};\n```\n\n## Column groups in action\n\n<Sandpack>\n\n```tsx files=[\"column-groups-example.page.tsx\",\"column-groups-data.ts\"]\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/columns/column-headers",
      "routePath": "/docs/learn/columns/column-headers",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/column-headers.page.md",
      "fileName": "column-headers.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Headers",
        "description": "Configure column headers with custom column header, custom sort icon, menu icon and more."
      },
      "excerpt": "Column headers have the same level of customization as column cells - you can fully control what is being rendered and when. Here's a summary of the things you can do in the column header:",
      "readingTime": "8 min read",
      "content": "\nColumn headers have the same level of customization as column cells - you can fully control what is being rendered and when. Here's a summary of the things you can do in the column header:\n\n- customize the header label of a column\n- specify custom sort icon\n- configure and customize the menu icon\n- configure the column selection chechbox (for columns configured to display a selection checkbox)\n- customize the order of all of the above, and select which ones should be included\n\n## Column Header Label\n\nBy default, the label displayed for the column header is the <PropLink name=\"columns.field\">field</PropLink> the column is bound to. If you want to customize this, use the <PropLink name=\"columns.header\">header</PropLink> property.\n\n```tsx\ntype Developer = {\n  id: string;\n  firstName: string;\n  lastName: string;\n  age: number;\n};\nconst columns: InfiniteTablePropColumns<Developer> = {\n  id: {\n    field: 'id', // will be used as default label in column header\n    defaultWidth: 100,\n  },\n  name: {\n    header: 'First and Last Name', // custom column header label\n    valueGetter: ({ data }) => `${data.firstName} ${data.lastName}`,\n  },\n};\n```\n\n<Sandpack title=\"Simple table with both default and custom column headers\">\n\n```ts file=\"column-header-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nHaving the <PropLink name=\"columns.header\">header</PropLink> property be a strin value is useful but when you want more flexibility, you can use a function instead.\n\nWhen <PropLink name=\"columns.header\" code={false}>the column header</PropLink> is a function, it is called with an object that contains the following properties:\n\n- `column` - the current column object. NOTE: it's not the same as the column object you passed to the <PropLink name=\"columns\">columns</PropLink> prop - but rather an enhanced version of that, which contains additional properties and computed values. It is called a \"computed\" column - typed as `InfiniteTableComputedColumn<DATA_TYPE>`.\n- `columnsMap` - a map of all computed columns available in the table, keyed by the column id. This is useful if at runtime you need access to other columns in the table. NOTE: this map does not contain only the visible columns, but rather ALL the columns.\n- `columnSortInfo` - the sorting information for the current column, or `null` if the column is not sorted.\n- `api` - a reference to the table [API](/docs/reference/api) object.\n- `columnApi` - a reference to the table [Column API](/docs/reference/column-api) object for bound to the current column.\n- `allRowsSelected: boolean`\n- `someRowsSelected: boolean`\n- `renderBag` - more on that below - used to reference changes between the different render functions of the column header (those functions are the column header rendering pipeline described in the next section).\n\n<Note>\n\nAll the render props exposed for the rendering pipeline of the column header are called with the same object as the first argument.\n\n</Note>\n\nHaving the <PropLink name=\"column.header\" code={false}>column header</PropLink> as a function and having access to the state of the column and of the table allows you to create very dynamic column headers that accurately reflect column state.\n\n## Column Header Rendering Pipeline\n\nThe rendering pipeline of the column header is similar to the one of the column cells.\n\nIt's a series of functions defined on the column that are called while rendering elements found in the column header (the header label, the sort and menu icons, the filtering icon, the selection checkbox).\n\nAll of the functions that are part of the column header rendering pipeline are called with the same object as the first argument - the shape of this object is described in the previous section.\n\n- <PropLink name=\"columns.renderSortIcon\">renderSortIcon</PropLink>\n- <PropLink name=\"columns.renderFilterIcon\">renderFilterIcon</PropLink>\n- <PropLink name=\"columns.renderMenuIcon\">renderMenuIcon</PropLink>\n- <PropLink name=\"columns.renderSelectionCheckBox\">renderSelectionCheckBox</PropLink>\n- <PropLink name=\"columns.renderHeaderSelectionCheckBox\">renderHeaderSelectionCheckBox</PropLink>\n- <PropLink name=\"columns.header\">header</PropLink>\n\nIf you want to customize any of the above, use the corresponding function.\n\nFor even more control, the last function in the pipeline that gets called is the <PropLink name=\"columns.renderHeader\">column.renderHeader</PropLink> function.\n\nThis function is called with the same object as the first argument, but it also has a `renderBag` property that contains the result of all the previous functions in the pipeline (eg: `renderBag.sortIcon` - the result of the <PropLink name=\"columns.renderSortIcon\">renderSortIcon</PropLink> call, `renderBag.filterIcon` - the result of the <PropLink name=\"columns.renderFilterIcon\">renderFilterIcon</PropLink> call, etc).\n\nSo if you specify a custom <PropLink name=\"columns.renderHeader\">renderHeader</PropLink> function, it's up to you to use the results of the previous functions in the pipeline, in order to fully take control of the column header.\n\n#### Available properties on the renderBag\n\nThe `renderBag` object contains the following properties available to the render functions of the column header:\n\n- `header` - the label of the column header.\n- `sortIcon` - the default sort icon\n- `filterIcon` - the filter icon - displayed when the current column is used in filtering\n- `filterEditor` - the current filter editor\n- `menuIcon` - the menu icon that can be clicked to open the column menu\n- `selectionCheckBox` - the selection check box - displays the current selection status and controls the selection for all rows.\n- `all` - all of the above combined together in a `React.Fragment`.\n\n### Customizing the Sort Icon\n\nFor customizing the sort icon, use the <PropLink name=\"columns.renderSortIcon\">column.renderSortIcon</PropLink> function.\n\nInside that function you can either use the object passed as a parameter to get information about the sort state of the column\n\n```tsx {1} title=\"Customizing_the_column_sort_icon\"\nrenderSortIcon({ columnSortInfo }) {\n  if (!columnSortInfo) {\n    return ' ü§∑‚Äç‚ôÇÔ∏è';\n  }\n  return columnSortInfo.dir === 1 ? '‚ñ≤' : '‚ñº';\n}\n```\n\nor you can use the <HookLink name=\"useInfiniteHeaderCell\"/> hook to get the same information.\n\n```tsx {8} title=\"Customizing_the_column_sort_icon\"\nimport {\n  useInfiniteHeaderCell,\n} from '@infinite-table/infinite-react';\n\n/// ...\n\nrenderSortIcon(){\n  const { columnSortInfo } = useInfiniteHeaderCell();\n  if (!columnSortInfo) {\n    return ' ü§∑‚Äç‚ôÇÔ∏è';\n  }\n  return columnSortInfo.dir === 1 ? '‚ñ≤' : '‚ñº';\n},\n```\n\n<Sandpack title=\"Custom sort icon for the name column\">\n\n```ts file=\"column-sort-icon-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Customizing the Menu Icon\n\nFor customizing the menu icon, use the <PropLink name=\"columns.renderMenuIcon\">column.renderMenuIcon</PropLink> function.\n\nInside that function you can either use the object passed as a parameter to get information about the column\n\n```tsx {1} title=\"Customizing_the_menu_icon\"\nrenderMenuIcon({ column }) {\n  return `üîß ${column.id}`;\n}\n```\n\nor you can use the <HookLink name=\"useInfiniteHeaderCell\"/> hook to get the same information.\n\n```tsx {8} title=\"Customizing_the_menu_icon\"\nimport {\n  useInfiniteHeaderCell,\n} from '@infinite-table/infinite-react';\n\n/// ...\n\nrenderMenuIcon(){\n  const { column } = useInfiniteHeaderCell();\n  return `üîß ${column.id}`;\n},\n```\n\n<Sandpack title=\"Custom menu icon for the name and age columns\">\n\n<Description>\n\nHover over the header for the `Name` and `Age` columns to see the custom menu icon.\n\nAlso, the id column has `renderMenuIcon: false` set, so it doesn't show a column menu at all.\n\n</Description>\n\n```ts file=\"column-menu-icon-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf you don't want to show a column menu (icon) at all, you can set the <PropLink name=\"columns.renderMenuIcon\">column.renderMenuIcon</PropLink> prop to `false`.\n\nAlso, see the <PropLink name=\"columns.renderMenuIcon\">column.renderMenuIcon</PropLink> docs for an example on how to use the api to open the column menu.\n\n</Note>\n\n### Customizing the Filter Icon\n\nFor customizing the filter icon, use the <PropLink name=\"columns.renderFilterIcon\">column.renderFilterIcon</PropLink> function.\n\nInside that function you can either use the object passed as a parameter to get information about the `filtered` state of the column\n\n```tsx {1} title=\"Customizing_the_filter_icon\"\nrenderFilterIcon({ filtered }) {\n  return filtered ? 'üîç' : '';\n}\n```\n\nor you can use the <HookLink name=\"useInfiniteHeaderCell\"/> hook to get the same information.\n\n```tsx {8} title=\"Customizing_the_menu_icon\"\nimport {\n  useInfiniteHeaderCell,\n} from '@infinite-table/infinite-react';\n\n/// ...\n\nrenderMenuIcon(){\n  const { filtered } = useInfiniteHeaderCell();\n  return filtered ? 'üî•' : '';\n},\n```\n\nIn addition, you can use the `filtered` property in the <PropLink name=\"columns.header\">column.header</PropLink> function to determine if the column is filtered or not and render a different header label.\n\n<Note>\n\nIf specified, the <PropLink name=\"columns.renderFilterIcon\">column.renderFilterIcon</PropLink> function prop is called even if the column is not currently filtered.\n\n</Note>\n\n<Sandpack title=\"Custom filter icons for salary and name columns\">\n\n<Description>\n\nThe `salary` column will show a bolded label when filtered.\n\nThe `firstName` column will show a custom filter icon when filtered.\n\n</Description>\n\n```ts file=\"column-filter-icon-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n#### Changing the display of filters\n\nInfinite Table allows very deep cusstomization of the column header, including the filters.\n\nFor example, you might not want to display the column filters under the column header, but rather in a separate menu popover.\n\nThis section shows how to do that. You can use <PropLink name=\"showColumnFilters\">showColumnFilters=false</PropLink> to hide the filters from under the column header.\n\nNext, you can use the <PropLink name=\"columns.renderHeader\">column.renderHeader</PropLink> function to render a custom filter icon that opens a filter popover when clicked.\n\nYou don't need to re-implement the filter editor, you have acces to it via the `renderBag.filterEditor` property. The code below shows how to do this.\n\n<Sandpack title=\"Custom display of column filters\">\n\n```ts file=\"custom-column-filter-display-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Customizing the Selection Checkbox\n\nFor customizing the selection checkbox in the column header, use the <PropLink name=\"columns.renderHeaderSelectionCheckBox\">column.renderHeaderSelectionCheckBox</PropLink> function.\n\n<Note>\n\nIf you want another column, other than the group column, to show a selection checkbox, you have to also set the <PropLink name=\"columns.renderSelectionCheckBox\">column.renderSelectionCheckBox</PropLink> prop to `true`.\n\n</Note>\n\n<Sandpack title=\"Custom header checkbox selection for columns\">\n\n<Description>\n\nThe group column, as well as the `stack` column display a custom selection checkbox in the column header.\n\n</Description>\n\n```ts file=\"column-header-selection-checkbox-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/columns/column-menus",
      "routePath": "/docs/learn/columns/column-menus",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/column-menus.page.md",
      "fileName": "column-menus.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Menus",
        "description": "Columns have menus that allow quick actions - the menus can be customized or hidden altogether."
      },
      "excerpt": "All columns in the Infinite Table have a default menu, which can be customized or hidden altogether.",
      "readingTime": "3 min read",
      "content": "\nAll columns in the Infinite Table have a default menu, which can be customized or hidden altogether.\n\n## Customise the menu items\n\nTo customize the column menu (for all columns, or for a specific column), use the <PropLink name=\"getColumnMenuItems\" /> prop. This function is called with an array of menu items (which are the default items) and it should the final array of menu items - so you can return the default items as is, or you can adjust the default items to fit your needs.\n\n```tsx title=\"Customizing-column-menu\"\nfunction getColumnMenuItems(items, { column }) {\n  if (column.id === 'firstName') {\n    // you can adjust the default items for a specific column\n    items.splice(0, 0, {\n      key: 'firstName',\n      label: 'First name menu item',\n      onClick: () => {\n        console.log('Hey there!');\n      },\n    });\n  }\n\n  // or for all columns\n  items.push({\n    key: 'hello',\n    label: 'Hello World',\n    onClick: () => {\n      alert('Hello World from column ' + column.id);\n    },\n  });\n  return items;\n}\n```\n\n<Note>\n\n<PropLink name=\"getColumnMenuItems\" /> can return an empty array, in which case, the column menu will not be shown - however, people will still be able to click the menu icon to trigger the column context menu.\n\nIf you want to dynamically decide whether a column should show a menu or not, you can use the <PropLink name=\"columns.renderMenuIcon\" /> prop.\n\n</Note>\n\n<Sandpack title=\"Custom column menu items and custom menu icon\">\n\n<Description>\n\nIn this example, the currency and preferredLanguage columns have a custom icon for triggering the column context menu.\n\nIn addition, the `preferredLanguage` column has a custom header that shows a button for triggering the column context menu.\n\n</Description>\n\n```tsx file=\"$DOCS/reference/getColumnMenuItems-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nAs you can see in the demo above, you can use <PropLink name=\"getColumnMenuItems\" /> to return the default items (received as the first parameter to the function), or another totally different array. We chose to pass the default items to the function, so you can use them as a starting point and adjust them to your needs.\n\nEach item in the array you return from <PropLink name=\"getColumnMenuItems\" /> should have a `key` and a `label` property. Additionally, you can specify an `onAction` function, which will be called when the user clicks the menu item.\n\nIt's also possible to create items with submenus. For this, specify a `menu` property in the item, with an `items` array. Each item in the `items` array should have a `key` and a `label` property, as you would expect.\n\n```tsx {8} title=\"Menu_items_with_submenus\"\nfunction getColumnMenuItems(items, { column }) {\n  const items = [\n    {\n      key: 'translate',\n      label: 'Translate',\n      menu: {\n        items: [\n          {\n            key: 'translateToEnglish',\n            label: 'English',\n            onAction: () => {\n              console.log('Translate to English');\n            },\n          },\n          {\n            key: 'translateToFrench',\n            label: 'French',\n            onAction: () => {\n              console.log('Translate to French');\n            },\n          },\n        ],\n      },\n    },\n  ];\n\n  return items;\n}\n```\n\n## Custom menu icon\n\nTo customize the menu icon, use the <PropLink name=\"columns.renderMenuIcon\" /> prop. This prop can be a boolean or a function that returns a `ReactNode`.\n\n```tsx title=\"custom-menu-icon\"\nconst columns = {\n  name: {\n    field: 'firstName',\n    renderMenuIcon: () => <div>üåé</div>,\n  },\n  salary: {\n    field: 'salary',\n    renderMenuIcon: false,\n  },\n};\n```\n\n<Note>\n\nFor a custom menu icon üå† you don't have to hook up the `mousedown`/`click` in order to show or hide the menu - all this is done for you - just render your custom `ReactNode` and you're good to go.\n\n</Note>\n"
    },
    {
      "filePath": "/docs/learn/columns/column-order",
      "routePath": "/docs/learn/columns/column-order",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/column-order.page.md",
      "fileName": "column-order.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Order",
        "description": "Change column order by drag-and-drop - drag columns around and reorder them live"
      },
      "excerpt": "React `Infinite Table` allows columns to be reordered in the grid by drag-and-drop. Drag columns around (start dragging the colum header) to change their order and arrange them in the desired position.",
      "readingTime": "3 min read",
      "content": "\nReact `Infinite Table` allows columns to be reordered in the grid by drag-and-drop. Drag columns around (start dragging the colum header) to change their order and arrange them in the desired position.\n\n<Note>\n\nColumn ordering via drag & drop works by default.\n\n</Note>\n\nYou don't have to specify an initial column order or any other callback props to update the column order. The default behavior of the component is to initially display all columns that are provided in the <PropLink name=\"columns\" /> object (in the iteration order of the object keys).\n\nIf using the <PropLink name=\"defaultColumnOrder\" code={false}>default uncontrolled column order</PropLink> is not enough, try using the controlled <PropLink name=\"columnOrder\" /> prop, which gives you full control over the order of the columns - in this case, you have to update the column order as a result of user interaction, by specifying <PropLink name=\"onColumnOrderChange\" />.\n\n<Sandpack title=\"Column reordering via drag & drop with controlled `columnOrder`\">\n\n```tsx file=\"$DOCS/reference/columnOrder-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nColumn order can also be used in order to limit/modify the visible columns. Specify a limited number of columns in the <PropLink name=\"columnOrder\" /> array and only those columns will be displayed.\n\nFor more advanced control on visibility, see <PropLink name=\"columnVisibility\" />.\n\n</Note>\n\nThe <PropLink name=\"columnOrder\" /> array can contain any number of columns, even duplicate columns or random strings - the behavior is that any column ids which are not found in the <PropLink name=\"columns\" /> object are ignored, while columns mentioned multiple times will be included multiple times, as indicated in the column order. Displaying the same column twice is a perfectly valid use case.\n\n<Sandpack title=\"Advanced column order example\">\n\n<Description>\nIn this example, <PropLink name=\"columnOrder\" /> is used as a controlled property, also as a way of limiting the visible columns.\n</Description>\n\n```tsx file=\"$DOCS/reference/columnOrder-advanced-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nThe <PropLink name=\"columnOrder\" /> prop can either be an array of strings (column ids) or the boolean `true`. When `true`, all columns present in the <PropLink name=\"columns\" /> object will be displayed, in the iteration order of the object keys - in the example above, try clicking the `\"Click to reset column order\"` button.\n\n</Note>\n\nFor all of the above examples, <PropLink name=\"columnVisibility\" /> will also be taken into account, as it is the last source of truth for the visibility of a column.\n\nUsing <PropLink name=\"columnOrder\" /> in combination with <PropLink name=\"columnVisibility\" /> is very powerful - for example, you can have a specific column order even for columns which are not visible at a certain moment, so when they will be made visible, you'll know exactly where they will be displayed.\n"
    },
    {
      "filePath": "/docs/learn/columns/column-rendering",
      "routePath": "/docs/learn/columns/column-rendering",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/column-rendering.page.md",
      "fileName": "column-rendering.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Rendering",
        "description": "Customize column rendering for Infinite Table DataGrid to match your app and use custom components. Column styling and formatting, conditional rendering..."
      },
      "excerpt": "Columns render the <PropLink name=\"columns.field\">field</PropLink> value of the data they are bound to. This is the default behavior, which can be customized in a number of ways that we're exploring below.",
      "readingTime": "12 min read",
      "content": "\nColumns render the <PropLink name=\"columns.field\">field</PropLink> value of the data they are bound to. This is the default behavior, which can be customized in a number of ways that we're exploring below.\n\n<Note>\n\nIf you want to explicitly use the TypeScript type definition for columns, import the `InfiniteTableColumn` type\n\n```\nimport { InfiniteTableColumn } from '@infinite-table/infinite-react'\n```\n\nNote that it's a generic type, so when you use it, you have to bind it to your `DATA_TYPE` (the type of your data object).\n</Note>\n\n<Note>\n\nWhen using custom rendering or custom components for columns, make sure all your rendering logic is [controlled](https://reactjs.org/docs/forms.html#controlled-components) and that it doesn't have local/transient state.\n\nThis is important because `InfiniteTable` uses virtualization heavily, in both _column cells and column headers_, so **custom components can and will be unmounted and re-mounted multiple times**, during the virtualization process (triggered by user scrolling, sorting, filtering and a few other interactions).\n</Note>\n\n## Change the value using `valueGetter`\n\nThe simplest way to change what's being rendered in a column is to use the `valueGetter` prop and return a new value for the column.\n\n```tsx\nconst nameColumn: InfiniteTableColumn<Employee> = {\n  header: 'Employee Name',\n  valueGetter: ({ data }) => `${data.firstName} ${data.lastName}`,\n};\n```\n\n<Note>\n\nThe <PropLink name=\"columns.valueGetter\"/> prop is a function that takes a single argument - an object with `data` and `field` properties.\n\nNote that the <PropLink name=\"columns.valueGetter\"/> is only called for non-group rows, so the `data` property is of type `DATA_TYPE`.\n\n</Note>\n\n<Sandpack title=\"Column with custom valueGetter\">\n\n```tsx file=\"$DOCS/reference/column-valueGetter-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nThe column value getter should not return JSX or other markup, because the value return by <PropLink name=\"columns.valueGetter\"/> will be used when the column is sorted (when sorting is done client-side and not remotely). For more in-depth information on sorting see [the column sorting page](./column-sorting).\n\n</Note>\n\n## Use <PropLink name=\"columns.renderValue\">renderValue</PropLink> and <PropLink name=\"columns.render\">render</PropLink> to display custom content\n\nThe next step in customizing the rendering for a column is to use the <PropLink name=\"columns.renderValue\" /> or the <PropLink name=\"columns.render\"/> props. In those functions, you have access to more information than in the <PropLink name=\"columns.valueGetter\"/> function. For example, you have access to the current value of `groupBy` and `pivotBy` props.\n\n<PropLink name=\"columns.renderValue\">renderValue</PropLink> and <PropLink name=\"columns.renderValue\">render</PropLink> can return any value that React can render.\n\nThe <PropLink name=\"columns.renderValue\">renderValue</PropLink> and <PropLink name=\"columns.render\">render</PropLink> functions are called with an object that has the following properties:\n\n- `data` - the data object (of type `DATA_TYPE | Partial<DATA_TYPE> | null`) for the row.\n- `rowInfo` - very useful information about the current row:\n  - `rowInfo.collapsed` - if the row is collased or not.\n  - `rowInfo.groupBy` - the current group by for the row\n  - `rowInfo.indexInAll` - the index of the row in the whole data set\n  - `rowInfo.indexInGroup` - the index of the row in the current group\n  - `rowInfo.value` - the value (only for group rows) that will be rendered by default in group column cells.\n  - ... there are other useful properties that we'll document in the near future\n- `column` - the current column being rendered\n- `columnsMap` - the `Map` of columns available to the table. Note these might not be all visible. The keys in this map will be column ids.\n- `fieldsToColumn` a `Map` that links `DataSource` fields to columns. Columns bound to fields (so with <PropLink name=\"columns.field\" /> specified) will be included in this `Map`.\n- `api` - A reference to the [Infinite Table API](/docs/reference/api) object.\n\n<Note title=\"Column renderValue vs render\">\n\n<PropLink name=\"columns.render\"/> is the last function called in the rendering pipeline for a column cell, while <PropLink name=\"columns.renderValue\"/> is called before render, towards the beginning of the [rendering pipeline (read more about this below)](#rendering-pipeline).\n\nAvoid over-writing <PropLink name=\"columns.render\"/> for special columns (like group columns) unless you know what you're doing. Special columns use the `render` function to render additional content inside the column (eg: collapse/expand tool for group rows). The <PropLink name=\"columns.render\"/> function allows you to override this additional content. So if you specify this function, it's up to you to render whatever content, including the collapse/expand tool.\n\nHowever, there are easier ways to override the collapse/expand group icon, like using <PropLink name=\"columns.renderGroupIcon\"/>.\n\n</Note>\n\n<Note>\n\nInside the <PropLink name=\"columns.renderValue\"/> and <PropLink name=\"columns.render\"/> functions (and other rendering functions), you can use the <HookLink name=\"useInfiniteColumnCell\"/> hook to retrieve the same params that are passed to the render functions.\n\nThis is especially useful when inside those functions you render a custom component that needs access to the same information.\n\n```tsx\ntype Developer = { country: string; name: string; id: string };\n\nconst CountryInfo = () => {\n  const { data, rowInfo, value } = useInfiniteColumnCell<Developer>();\n\n  return <div>Country: {value}</div>;\n};\n\nconst columns = {\n  country: {\n    field: 'country',\n    renderValue: () => <CountryInfo />,\n  },\n};\n```\n\n</Note>\n\n<Sandpack title=\"Column with custom renderValue\">\n\n```tsx file=\"$DOCS/reference/column-renderValue-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nChanging the group icon using `render`. The icon can also be changed using <PropLink name=\"columns.renderGroupIcon\" />.\n\n<Sandpack title=\"Column with render - custom expand/collapse icon\">\n\n<Description>\n\nThis snippet shows overriding the group collapse/expand tool via the <PropLink name=\"columns.render\" /> function.\n\n</Description>\n\n```tsx file=\"$DOCS/reference/column-render-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Column with custom expand/collapse tool via renderGroupIcon\">\n\n<Description>\n\nThis snippet shows how you can override the group collapse/expand tool via the <PropLink name=\"columns.renderGroupIcon\" /> function.\n\n</Description>\n\n```tsx file=\"$DOCS/reference/column-renderGroupIcon-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Using hooks for custom rendering\n\nInside the <PropLink name=\"columns.render\" /> and <PropLink name=\"columns.renderValue\" /> functions, you can use hooks - both provided by `InfiniteTable` and any other `React` hooks.\n\n### Hook: <HookLink name=\"useInfiniteColumnCell\"/>\n\nWhen you're inside a rendering function for a column cell, you can use <HookLink name=\"useInfiniteColumnCell\">useInfiniteColumnCell hook</HookLink> to get access to the current cell's rendering information - the argument passed to the <PropLink name=\"columns.render\">render</PropLink> or <PropLink name=\"columns.renderValue\">renderValue</PropLink> functions.\n\n```tsx\nimport {\n  useInfiniteColumnCell,\n  InfiniteTableColumn,\n} from '@infinite-table/infintie-react';\n\nfunction CustomName() {\n  const { data, rowInfo } = useInfiniteColumnCell<Employee>();\n\n  return (\n    <>\n      <b>{data.firstName}</b>, {data.lastName}\n    </>\n  );\n}\n\nconst nameColumn: InfiniteTableColumn<Employee> = {\n  header: 'Employee Name',\n  renderValue: () => <CustomName />,\n};\n```\n\n<Sandpack title=\"Column with render & useInfiniteColumnCell\">\n\n```tsx file=\"$DOCS/reference/column-render-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Hook: <HookLink name=\"useInfiniteHeaderCell\" />\n\nFor column headers, you can use <HookLink name=\"useInfiniteHeaderCell\" /> hook to get access to the current header's rendering information - the argument passed to the <PropLink name=\"columns.header\"/> function.\n\n```tsx\nimport {\n  useInfiniteHeaderCell,\n  InfiniteTableColumn,\n} from '@infinite-table/infintie-react';\n\nfunction CustomHeader() {\n  const { column } = useInfiniteHeaderCell<Employee>();\n\n  return <b>{column.field}</b>;\n}\n\nconst nameColumn: InfiniteTableColumn<Employee> = {\n  header: 'Employee Name',\n  field: 'firstName',\n  header: () => <CustomHeader />,\n};\n```\n\n<Sandpack title=\"Column Header with render & useInfiniteHeaderCell\">\n\n```tsx file=\"$DOCS/reference/column-header-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Use <PropLink name=\"columns.components\">column.components</PropLink> to customize the column\n\nThere are cases when custom rendering via the <PropLink name=\"columns.render\" /> and <PropLink name=\"columns.renderValue\" /> props is not enough and you want to fully control the column cell and render your own custom component for that.\n\nFor such scenarios, you can specify `column.components.HeaderCell` and `column.components.ColumnCell`, which will use those components to render the DOM nodes of the column header and column cells respectively.\n\n```tsx\nimport { InfiniteTableColumn } from '@infinite-table/infintie-react';\n\nconst ColumnCell = (props: React.HTMLProps<HTMLDivElement>) => {\n  const { domRef, rowInfo } = useInfiniteColumnCell<Developer>();\n\n  return (\n    <div ref={domRef} {...props} style={{ ...props.style, color: 'red' }}>\n      {props.children}\n    </div>\n  );\n};\n\nconst HeaderCell = (props: React.HTMLProps<HTMLDivElement>) => {\n  const { domRef, sortTool } = useInfiniteHeaderCell<Developer>();\n\n  return (\n    <div ref={domRef} {...props} style={{ ...props.style, color: 'red' }}>\n      {sortTool}\n      First name\n    </div>\n  );\n};\n\nconst nameColumn: InfiniteTableColumn<Developer> = {\n  header: 'Name',\n  field: 'firstName',\n  components: {\n    ColumnCell,\n    HeaderCell,\n  },\n};\n```\n\n<Note>\n\nWhen using custom components, make sure you get `domRef` from the corresponding hook (<HookLink name=\"useInfiniteColumnCell\" /> for column cells and <HookLink name=\"useInfiniteHeaderCell\" /> for header cells) and pass it on to the final `JSX.Element` that is the DOM root of the component.\n\n```tsx\n// inside a component specified in column.components.ColumnCell\nconst { domRef } = useInfiniteColumnCell<DATA_TYPE>();\n\nreturn <div ref={domRef}>...</div>;\n```\n\nAlso you have to make sure you spread all other `props` you receive in the component, as they are `HTMLProps` that need to end-up in the DOM (eg: `className` for theming and default styles, etc).\n\nBoth <PropLink name=\"columns.components.ColumnCell\">components.ColumnCell</PropLink> and <PropLink name=\"columns.components.HeaderCell\">components.HeaderCell</PropLink> need to be declared with `props` being of type `HTMLProps<HTMLDivElement>`.\n\n</Note>\n\n<Sandpack title=\"Custom components\">\n\n```tsx file=\"$DOCS/reference/column-components-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf you're using the <HookLink name=\"useInfiniteColumnCell\" /> hook inside the <PropLink name=\"columns.render\" /> or <PropLink name=\"columns.renderValue\" /> functions (and not as part of a custom component in <PropLink name=\"columns.components.ColumnCell\" />), you don't need to pass on the `domRef` to the root of the DOM you're rendering (same is true if you're using <HookLink name=\"useInfiniteHeaderCell\" /> inside the <PropLink name=\"columns.header\" /> function).\n\n</Note>\n\nIf the above <PropLink name=\"columns.components\" /> is still not enough, read about the rendering pipeline below.\n\n## Rendering pipeline\n\nThe rendering pipeline for columns is a series of functions defined on the column that are called while rendering.\n\n<Note>\n\nAll the functions that have the word `render` in their name will be called with an object that has a `renderBag` property, which contains values that will be rendered.\n\n</Note>\n\nThe default <PropLink name=\"columns.render\" /> function (the last one in the pipeline) ends up rendering a few things:\n\n- a `value` - generally comes from the <PropLink name=\"columns.field\">field</PropLink> the column is bound to\n- a `groupIcon` - for group columns\n- a `selectionCheckBox` - for columns that have <PropLink name=\"columns.renderSelectionCheckBox\" /> defined (combined with row selection)\n\nWhen the rendering process starts for a column cell, all the above end up in the `renderBag` object.\n\n### Rendering pipeline - `renderBag.value`\n\nAs already mentioned, the `value` defaults to the value of the column <PropLink name=\"columns.field\">field</PropLink> for the current row.\n\nIf the column is not bound to a field, you can define a <PropLink name=\"columns.valueGetter\">valueGetter</PropLink>. The <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> only has access to `{data, field?}` in order to compute a value and return it.\n\nAfter the <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> is called, the <PropLink name=\"columns.valueFormatter\">valueFormatter</PropLink> is next in the rendering pipeline.\n\nThis is called with more details about the current cell\n\n```tsx\nconst column: InfiniteTableColumn<T> = {\n  // the valueGetter can be useful when rows are nested objects\n  // or you want to compose multiple values from the row\n  valueGetter: ({ data }) => {\n    return data.person.salary * 10;\n  },\n  valueFormatter: ({\n    value,\n    isGroupRow,\n    data,\n    field,\n    rowInfo,\n    rowSelected,\n    rowActive,\n  }) => {\n    // the value here is what the `valueFormatter` returned\n    return `USD ${value}`;\n  },\n};\n```\n\nAfter <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> and <PropLink name=\"columns.valueFormatter\">valueFormatter</PropLink> are called, the resulting value is the actual value used for the cell. This value will also be assigned to `renderBag.value`\n\nWhen <PropLink name=\"columns.renderValue\">renderValue</PropLink> and <PropLink name=\"columns.render\">render</PropLink> are called by `InfiniteTable`, both `value` and `renderBag` will be available as properties to the arguments object.\n\n```tsx {3,12}\nconst column: InfiniteTableColumn<T> = {\n  valueGetter: () => 'world',\n  renderValue: ({ value, renderBag, rowInfo }) => {\n    // at this stage, `value` is 'world' and `renderBag.value` has the same value, 'world'\n    return <b>{value}</b>;\n  },\n\n  render: ({ value, renderBag, rowInfo }) => {\n    // at this stage `value` is 'world'\n    // but `renderBag.value` is <b>world</b>, as this was the value returned by `renderValue`\n    return <div>Hello {renderBag.value}!</div>;\n  },\n};\n```\n\n<Note>\n\nAfter the <PropLink name=\"columns.renderValue\">renderValue</PropLink> function is called, the following are also called (if available):\n\n- <PropLink name=\"columns.renderGroupValue\">renderGroupValue</PropLink> - for group rows\n- <PropLink name=\"columns.renderLeafValue\">renderLeafValue</PropLink> - for leaf rows\n\nYou can think of them as an equivalent to <PropLink name=\"columns.renderValue\">renderValue</PropLink>, but narrowed down to group/non-group rows.\n\nInside those functions, the `renderBag.value` refers to the value returned by the <PropLink name=\"columns.renderValue\">renderValue</PropLink> function.\n\n</Note>\n\n### Rendering pipeline - `renderBag.groupIcon`\n\nIn a similar way to `renderBag.value`, the `renderBag.groupIcon` is also piped through to the <PropLink name=\"columns.render\">render</PropLink> function.\n\n```tsx {2,9}\nconst column: InfiniteTableColumn<T> = {\n  renderGroupIcon: ({ renderBag, toggleGroupRow }) => {\n    return <> [ {renderBag.groupIcon} ] </>;\n  },\n  render: ({ renderBag }) => {\n    return (\n      <>\n        {/* use the groupIcon from the renderBag */}\n        {renderBag.groupIcon}\n        {renderBag.value}\n      </>\n    );\n  },\n};\n```\n\n<Note>\n\nInside <PropLink name=\"columns.renderGroupIcon\" />, you have access to `renderBag.groupIcon`, which is basically the default group icon - so you can use that if you want, and build on that.\n\nAlso inside <PropLink name=\"columns.renderGroupIcon\" />, you have access to `toggleGroupRow` so you can properly hook the collapse/expand behaviour to your custom group icon.\n\n</Note>\n\n### Rendering pipeline - `renderBag.selectionCheckBox`\n\nLike with the previous properties of `renderBag`, you can customize the `selectionCheckBox` (used when multiple selection is configured) to be piped-through - for columns that specify <PropLink name=\"columns.renderSelectionCheckBox\" />.\n\n```tsx {2,25}\nconst column: InfiniteTableColumn<T> = {\n  renderSelectionCheckBox: ({\n    renderBag,\n    rowSelected,\n    isGroupRow,\n    toggleCurrentRowSelection,\n    toggleCurrentGroupRowSelection,\n  }) => {\n    const toggle = isGroupRow\n      ? toggleCurrentGroupRowSelection\n      : toggleCurrentRowSelection;\n\n    // you could return renderBag.groupIcon to have the default icon\n\n    const selection =\n      rowSelected === null\n        ? '-' // we're in a group row with indeterminate state if rowSelected === null\n        : rowSelected\n        ? 'x'\n        : 'o';\n\n    return <div onClick={toggle}> [ {selection} ] </div>;\n  },\n  render: ({ renderBag }) => {\n    return (\n      <>\n        {/* use the selectionCheckBox from the renderBag */}\n        {renderBag.selectionCheckBox}\n        {renderBag.groupIcon}\n        {renderBag.value}\n      </>\n    );\n  },\n};\n```\n\nTo recap, here is the full list of the functions in the rendering pipeline, in order of invocation:\n\n1. <PropLink name=\"columns.valueGetter\" /> - doesn't have access to `renderBag`\n2. <PropLink name=\"columns.valueFormatter\" /> - doesn't have access to `renderBag`\n3. <PropLink name=\"columns.renderGroupIcon\" /> - can use all properties in `renderBag`\n4. <PropLink name=\"columns.renderSelectionCheckBox\" /> - can use all properties in `renderBag`\n5. <PropLink name=\"columns.renderValue\" /> - can use all properties in `renderBag`\n6. <PropLink name=\"columns.renderGroupValue\" /> - can use all properties in `renderBag`\n7. <PropLink name=\"columns.renderLeafValue\" /> - can use all properties in `renderBag`\n8. <PropLink name=\"columns.render\" /> - can use all properties in `renderBag`\n\nAdditionally, the <PropLink name=\"columns.components.ColumnCell\" /> custom component does have access to the `renderBag` via <HookLink name=\"useInfiniteColumnCell\" />\n"
    },
    {
      "filePath": "/docs/learn/columns/column-sorting",
      "routePath": "/docs/learn/columns/column-sorting",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/column-sorting.page.md",
      "fileName": "column-sorting.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Sorting",
        "description": "Configure column sorting with single and multiple sorting and custom sort functions. Both client-side and server-side sorting is supported"
      },
      "excerpt": "Docs coming soon",
      "readingTime": "1 min read",
      "content": "\nDocs coming soon\n"
    },
    {
      "filePath": "/docs/learn/columns/column-types",
      "routePath": "/docs/learn/columns/column-types",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/column-types.page.md",
      "fileName": "column-types.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Types",
        "description": "Column types are blueprints for generalizing column configuration and code reuse."
      },
      "excerpt": "Column types allow you to specify common properties for multiple columns easily. Things like <PropLink name=\"columnTypes.minWidth\">minWidth</PropLink>, <PropLink name=\"columnTypes.maxWidth\">maxWidth</PropLink>, <PropLink name=\"columnTypes.defaultFlex\">defaultFlex</PropLink> and <PropLink name=\"columnTypes.header\">header</PropLink> are all available. For a full list, see <PropLink>columnTypes</PropLink> reference.",
      "readingTime": "3 min read",
      "content": "\nColumn types allow you to specify common properties for multiple columns easily. Things like <PropLink name=\"columnTypes.minWidth\">minWidth</PropLink>, <PropLink name=\"columnTypes.maxWidth\">maxWidth</PropLink>, <PropLink name=\"columnTypes.defaultFlex\">defaultFlex</PropLink> and <PropLink name=\"columnTypes.header\">header</PropLink> are all available. For a full list, see <PropLink>columnTypes</PropLink> reference.\n\nYou specify the type of a column via the <PropLink name=\"columns.type\">column.type</PropLink> property:\n\n```tsx\ntype Person = {\n  name: string;\n  dob: string;\n  age: number;\n}\nconst columns = {\n  age: {\n    field: 'age',\n    type: 'custom',\n  },\n  date: {\n    field: 'dob',\n    // will be type default\n  },\n  name: {\n    field: 'name',\n    // will have both of those types\n    type: ['default', 'custom']\n  }\n}\n\nconst columnTypes = {\n  default: {\n    width: 200\n  },\n  custom: {\n    align: 'center'\n  }\n}\n\n<InfiniteTable columnTypes={columnTypes} columns={columns} />\n```\n\n<Note>\n\nProperties defined in a column have precedence over the properties defined in the <PropLink code={false} name=\"columnTypes\">type</PropLink>.\n\nAlso, if a column has no <PropLink name=\"columns.type\">type</PropLink> specified, it will default to the `default` type. If you don't want a column to have the `default` type, use <PropLink name=\"columns.type\">column.type=null</PropLink> or <PropLink name=\"columns.type\">column.type=[]</PropLink>\n\nThe column <PropLink name=\"columns.type\">type</PropLink> property can be an array - in this case, types are applied in the order they are specified, later types overriding properties of earlier ones. If the `default` type is not specified in the array, it will not be applied to the column - if you want to apply it as well, use <PropLink name=\"columns.type\">type=['default', 'any', 'other', 'types', 'after']</PropLink>\n\n</Note>\n\n## Column Type properties order and precedence\n\nWhen a column has multiple column types, they are applied in order, from left to right, with later types overriding properties of earlier ones - think of the behavior as very similar to `Object.assign`.\n\nAssume a column has the following types:\n\n```tsx\nconst columns = {\n  salary: {\n    type: ['number', 'currency'],\n  },\n};\n\nconst numberFormatter = new Intl.NumberFormat();\nconst columnTypes = {\n  number: {\n    renderValue: ({ value }) => numberFormatter.format(value), // makes 12345 render as 12,345\n  },\n  currency: {\n    renderValue: ({ value }) => `USD: ${value}`, // makes 12345 render as USD: 12345\n  },\n};\n```\n\n<Note>\n\nAlthough the `salary` column has both the `number` and `currency` types, and both those types have the `renderValue` property defined, only the `currency` `renderValue` function will be called. In other words, the rendering is not piped from one column type to the next. This is applied for all properties, like `render`, `style`, etc.\n\nThe `renderValue` function (and other similar functions) has access to the `column` object, so you can manually access all the column types.\n\n</Note>\n"
    },
    {
      "filePath": "/docs/learn/columns/fixed-and-flexible-size",
      "routePath": "/docs/learn/columns/fixed-and-flexible-size",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/fixed-and-flexible-size.page.md",
      "fileName": "fixed-and-flexible-size.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Sizing"
      },
      "excerpt": "Columns are a core concept for `Infinite Table` and sizing columns is an important topic to master. Here is a summary of how columns can be sized:",
      "readingTime": "12 min read",
      "content": "\nColumns are a core concept for `Infinite Table` and sizing columns is an important topic to master. Here is a summary of how columns can be sized:\n\n- fixed-sized columns can be specified via <PropLink name=\"columns.defaultWidth\" />\n- flexible columns need <PropLink name=\"columns.defaultFlex\" />\n- <PropLink name=\"columns.minWidth\" /> specifies the minimum size for a column\n- <PropLink name=\"columns.maxWidth\" /> is for the maximum width a column can take\n- default values are available for all of the above:\n  - <PropLink name=\"columnDefaultWidth\" /> gives all columns (that are otherwise unconfigured) a default size\n  - <PropLink name=\"columnMinWidth\" /> specifies the minimum width for all columns (that don't have one)\n  - <PropLink name=\"columnMaxWidth\" /> specifies the maximum width for all columns (that don't have one)\n\nFor fine-grained controlled-behavior on column sizing, use the controlled <PropLink name=\"columnSizing\"/> prop (for uncontrolled variant, see <PropLink name=\"defaultColumnSizing\" />). If you want to get updates to columns changing size as a result of user interaction, use <PropLink name=\"onColumnSizingChange\" />.\n\n<Note>\n\nUse <PropLink name=\"columnDefaultWidth\"/> to configure the default column width. If a column is not sized otherwise, this will be applied. The default value for <PropLink name=\"columnDefaultWidth\"/> is `200` (pixels).\n\nFor setting a minimum and maximum width for all columns, use <PropLink name=\"columnMinWidth\"/> (defaults to `30`) and <PropLink name=\"columnMaxWidth\"/> (defaults to `2000`) respectively.\n\n</Note>\n\n## Understanding default column sizing\n\nThe easiest way to get started and specify a sizing behavior for columns is to use <PropLink name=\"columns.defaultWidth\">column.defaultWidth</PropLink>, <PropLink name=\"columns.defaultFlex\">column.defaultFlex</PropLink> and/or <PropLink name=\"columnDefaultWidth\" /> (including related pros for specifying limits, like <PropLink name=\"columns.minWidth\">column.minWidth</PropLink>, <PropLink name=\"columns.maxWidth\">column.maxWidth</PropLink> and <PropLink name=\"columnMinWidth\" /> / <PropLink name=\"columnMaxWidth\" />).\n\nThose properties have `default` in their name because after the initial rendering of a column, you can't change its size by updating those values - more technically, <PropLink name=\"columns.defaultWidth\">column.defaultWidth</PropLink> and <PropLink name=\"columns.defaultFlex\">column.defaultFlex</PropLink> are uncontrolled props.\n\nWe suggest you use those to get started and if you don't have care about responding to the user changing the widths of those columns via drag&drop. As long as you're not using <PropLink name=\"onColumnSizingChange\" /> to be notified of column size changes, you're probably good with those.\n\n## Controlled column sizing\n\nHowever, once you start using <PropLink name=\"onColumnSizingChange\" /> and want to have full control of column sizing (maybe you want to restore it later to the state the user had it when the app was closed), you probably want to use controlled <PropLink name=\"columnSizing\" />.\n\nThe <PropLink name=\"columnSizing\" /> prop is an object of column ids to column sizing objects. Those sizing objects can have the following properties:\n\n- <PropLink name=\"columnSizing.flex\">flex</PropLink> - use this for <b>flexible columns</b>. Behaves like the flex CSS property.\n- <PropLink name=\"columnSizing.width\">width</PropLink> - use this for <b>fixed sized columns</b>\n- <PropLink name=\"columnSizing.minWidth\">minWidth</PropLink> - specifies the minimum width of the column. Useful for flexible columns or for restricting users resizing both fixed and flexible columns.\n- <PropLink name=\"columnSizing.maxWidth\">maxWidth</PropLink> - specifies the maximum width of the column. Useful for flexible columns or for restricting users resizing both fixed and flexible columns.\n\n<Note>\n\nIf a column is not specified in the <PropLink name=\"columnSizing\" /> prop (or its uncontrolled variant), or sized otherwise (eg: via the column type), it will have a fixed size, defaulting to <PropLink name=\"columnDefaultWidth\"/> (which also defaults to `200` if no value is passed in). You can also specify a <PropLink name=\"columnMinWidth\" /> and <PropLink name=\"columnMaxWidth\" /> - those will be applied for all columns (namely for those that dont explicitly specify other min/max widths).\n\n</Note>\n\n```tsx\nconst columnSizing: InfiniteTablePropColumnSizing = {\n  country: {\n    flex: 1,\n    // minWidth is optional\n    minWidth: 200,\n  },\n  city: {\n    width: 400,\n    // and so is maxWidth\n    maxWidth: 500,\n  },\n  salary: {\n    flex: 3,\n  },\n};\n// any column not specified in the columnSizing (or defaultColumnSizing) prop\n// will have fixed width (defaulting to `columnDefaultWidth`, which in turn defaults to 200px)\n```\n\n<Note>\n\nYou might find specifying the column size outside the column object to be a bit verbose to start with, but it will be easier to manage in many cases and is much more flexible. For example, when the user resizes a column via drag & drop and you want to persist the new column sizes, you don't have to update the whole `columns` object but instead update <PropLink name=\"columnSizing\"/> alone.\nThe same principle is true for <PropLink name=\"columnPinning\" /> and other column-level props.\n\n</Note>\n\n<Note>\n\nThe `columnSizing` prop also has an uncontrolled version, namely <PropLink name=\"defaultColumnSizing\" />.\n\n</Note>\n\n## Using flexible column sizing\n\n<Note>\n\nThe way flex sizing is implemented is similar to how CSS flexbox algorithm works. Explore this section to find out more details.\n\n</Note>\n\nImagine you have `1000px` of space available to the viewport of `InfiniteTable` and you have 3 columns:\n\n- a fixed column `100px` wide - name it col `A`\n- a fixed column `300px` wide - name it col `B`\n- a flexible column with `flex: 1` - name it col `F1`\n- a flexible column with `flex: 2` - name it col `F2`\n\nThe space remaining for the flexible columns is `1000px - 400px = 600px` and the sum of all flex values is `3`, that means each `flex` unit will be `600px / 3 = 200px`.\n\nThis means columns will have the following sizes:\n\n- col `A` will be `100px`\n- col `B` will be `300px`\n- col `F1` will be `200px` ( so a flex unit)\n- col `F2` will be `400px` ( so the equivalent of `2` flex units)\n\nIf the browser changes the layout of the component, so `InfiniteTable` has only `700px` available, then a flex unit would be `(700px - 400px) / 3 = 100px`.\n\nThis means columns will have the following sizes:\n\n- col `A` will be `100px`\n- col `B` will be `300px`\n- col `F1` will be `100px` ( so a flex unit)\n- col `F2` will be `200px` ( so the equivalent of `2` flex units)\n\nThe flexbox algorithm also uses <PropLink name=\"viewportReservedWidth\" /> to determine the width of the viewport to use for sizing columns - you can use <PropLink name=\"viewportReservedWidth\">viewportReservedWidth=100</PropLink> to always have a `100px` reserved area that won't be used for flexing columns.\n\n <Sandpack title=\"Using viewportReservedWidth to reserve whitespace when you have flexible columns\">\n\n <Description>\n\nThis example has a `viewportReservedWidth` of `50px`.\n\n </Description>\n\n```tsx file=\"$DOCS/reference/viewportReservedWidth-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nTake a look at the snippet below to see column sizing at work with flexible and fixed columns.\n\n<Sandpack title=\"Using controlled columnSizing\">\n\n```tsx file=\"$DOCS/reference/columnSizing-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nYou might find <PropLink name=\"viewportReservedWidth\" /> useful for advanced configuration when you have flexible columns.\n\n</Note>\n\n<Note>\n\nWhen he user is performing a column resize (via drag & drop), <PropLink name=\"onViewportReservedWidth\" /> is called when the resize is finished (not the case for resizing with the **SHIFT** key pressed, when adjacent columns share the space between them).\n\n</Note>\n\n<Note>\n\nYou can also size (generated) group columns by using their <PropLink name=\"columns.id\">column.id</PropLink> property.\n\nFor <PropLink name=\"groupRenderStrategy\">groupRenderStrategy=\"multi-column\"</PropLink>, if no `id` is specified in the group column configuration, each column will have a generated id like this: `\"group-by-${field}\"`.\n\nFor <PropLink name=\"groupRenderStrategy\">groupRenderStrategy=\"single-column\"</PropLink>, if no `id` is specified in the <PropLink name=\"groupColumn\" /> it will default to: `\"group-by\"`.\n\n</Note>\n\n## Resizing columns via drag & drop\n\nColumns are user-resizable via drag & drop. If you don't want a column to be resizable, specify <PropLink name=\"columns.resizable\">column.resizable=false</PropLink>\n\n<Note>\n\nBy default, all columns are resizable since <PropLink name=\"resizableColumns\" /> defaults to `true`. The <PropLink name=\"resizableColumns\" /> prop controls the behavior for all columns that don't explicitly specify their <PropLink name=\"columns.resizable\">column.resizable</PropLink> property.\n\n</Note>\n\nWhen initially rendered, columns are displayed with their <PropLink name=\"columns.defaultWidth\" /> (you can also use <PropLink name=\"columnDefaultWidth\" />) or <PropLink name=\"columns.defaultFlex\" />. Flexible columns take up available space taking into account their flex value, as detailed above.\n\nWhen the user is resizing columns (or column groups), the effect is seen in real-time, so it's very easy to adjust the columns to desired widths. After the user drops the resize handle to the desired position, <PropLink name=\"onColumnSizingChange\" /> is being called, to allow the developer to react to column sizing changes. Also <PropLink name=\"onViewportReservedWidth\" /> is called as well when the resize is finished (not the case for resizing with the **SHIFT** key pressed, when adjacent columns share the space between them).\n\n<Note>\n\nWhen flexible columns are resized, they are kept flexible even after the resize. Note however that their flex values will be different to the original flex values and will reflect the new proportions each flex column is taking up at the moment of the resize.\n\nMore exactly, the new flex values will be the actual pixel widths. As an example, say there are 2 flex columns, first one with flex `1` and second one with flex `3` and they have an available space of `800px`.\n\n```ts\nconst columns = {\n  first: { flex: 1, field: 'one' },\n  second: { flex: 2, field: 'two' },\n};\n```\n\nInitially they will occupy `200px` and `600px` respectively. If the user resizes them to be of equal size, <PropLink name=\"onColumnSizingChange\" /> will be called with an object like\n\n```ts\n{\n  first: { flex: 400 },\n  second: {flex: 400 }\n}\n```\n\nsince those are the actual widths measured from the DOM. This works out well, even if the available space of the table grows, as the proportions will be the same.\n\n</Note>\n\n### Resize Restrictions\n\nWhen resizing, the user needs to drag the resize handle to adjust the columns to new sizes. While doing so, the resize handle has a (green) color to indicate everything is okay. However, when restrictions are hit (either column <PropLink name=\"columns.minWidth\">min</PropLink> or <PropLink name=\"columns.maxWidth\">max</PropLink> widths), the resize handle turns red to indicate further resizing is not possible.\n\n### Sharing space on resize\n\nBy default when resizing a specific column, the following columns are pushed to the right (when making the column wider) or moved to the left (when making the column narrower).\n\nFor sharing space between resizable columns when resizing, the user needs to **hold the SHIFT key** when grabbing the resize handle. When the handle is dropped and the resize confirmed, <PropLink name=\"onColumnSizingChange\" /> is called, but <PropLink name=\"onViewportReservedWidth\" /> is not called for this scenario, since the reserved width is preserved.\n\n### Resizing column groups\n\nJust as columns are being resized, it is also possible to resize column groups. For this, the user needs to hover over the right border of the column group and start dragging the resize handle.\n\n<Note>\n\nFor multi-level column groups, it's possible to resize any of them. Just grab the handle from the desired group and start dragging. The handle height will indicate which column group is being resized.\n\n</Note>\n\n<Note>\n\nIf a column group has at least one resizable column, it can be resized.\n\nWhen resizing, the space is shared proportionally betweem all resizable columns in the group.\n\nOnce a min/max limit has been reached for a certain column in the group, the column respects the limit and the other columns keep resizing as usual. When the min/max limit has been reached for all columns in the group, the resize handle turns red to indicate further resizing is no longer possible.\n\n</Note>\n\n<Sandpack title=\"Resizing column groups\">\n<Description>\n\nTry resizing the `Finance` and `Regional Info` column groups.\n\nThe columns in the `Finance` group can be resized an extra `30px` (they have a `maxWidth` of `130px`).\n\n</Description>\n\n```tsx file=\"$DOCS/reference/column-groups-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Customizing the resize handle colors\n\nIt's possible to customize the resize handle colors and width.\n\nFor adjusting the handle colors, use the following CSS variables:\n\n- `--infinite-resize-handle-hover-background` - the color of the resize handle when it's in a `green`/all good state.\n- `--infinite-resize-handle-constrained-hover-background` - the color of the resize handle when it has reached a min/max constraint.\n\nYou can also adjust the width of the resize handle:\n\n- `--infinite-resize-handle-width` - the width of the `green`/`red` column resize handle. Defaults to `2px`\n- `--infinite-resize-handle-active-area-width` - the width of the area you can hover over in order to grab the resize handle. Defaults to `20px`. The purpose of this active area is to make it easier to grab the resize handle.\n\n## Auto-sizing columns\n\nFor sizing columns to the width of their content, you can use <PropLink name=\"autoSizeColumnsKey\" /> to declaratively auto-size columns:\n\n- when <PropLink name=\"autoSizeColumnsKey\" /> is a `string` or `number` and the value of the prop is changed, all columns will be auto-sized.\n- when <PropLink name=\"autoSizeColumnsKey\" /> is an object, it needs to have a `key` property (of type `string` or `number`), so whenever the `key` changes, the columns will be auto-sized. Specifying an object for <PropLink name=\"autoSizeColumnsKey\" /> gives you more control over which columns are auto-sized and if the size measurements include the header or not.\n\nWhen an object is used, the following properties are available:\n\n- `key` - mandatory property, which, when changed, triggers the update\n- `includeHeader` - optional boolean, - decides whether the header will be included in the auto-sizing calculations. If not specified, `true` is assumed.\n- `columnsToSkip` - a list of column ids to skip from auto-sizing. If this is used, all columns except those in the list will be auto-sized.\n- `columnsToResize` - the list of column ids to include in auto-sizing. If this is used, only columns in the list will be auto-sized.\n\n<Sandpack title=\"Auto-sizing columns\">\n\n```tsx file=\"$DOCS/reference/autoSizeColumnsKey-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/columns/index",
      "routePath": "/docs/learn/columns/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Working with Columns",
        "description": "Define columns to configure your Infinite Table React DataGrid - fixed and flexible columns, resize, column groups and more"
      },
      "excerpt": "Columns are a central feature in `InfiniteTable`.",
      "readingTime": "4 min read",
      "content": "\nColumns are a central feature in `InfiniteTable`.\n\nYou define columns as a an object, with keys being column ids while values are the column definitions.\n\nYou then use them in the `columns` prop in your `InfiniteTable` component.\n\nThe <PropLink name=\"columns\" /> prop is typed either as\n\n- `Record<string, InfiniteTableColumn<DATA_TYPE>>`\n- or `InfiniteTablePropColumns<DATA_TYPE>`, which is an alias for the type above\n\n<Note title=\"Understanding column id\">\n\nIn `InfiniteTable`, columns are identified by their key in the <PropLink name=\"columns\" /> object. **We'll refer to this as the column id**.\nThe column ids are used in many places - like defining the <PropLink name=\"columnOrder\" code={false}>column order</PropLink>, column pinning, column visibility, etc.\n\n</Note>\n\n```ts\nexport type Employee = {\n  id: number;\n  companyName: string;\n  firstName: string;\n  lastName: string;\n  country: string;\n  city: string;\n  department: string;\n  team: string;\n  salary: number;\n\n};\n\n// InfiniteTableColumn is a generic type, you have to bind it to a specific data-type\nimport { InfiniteTableColumn } from '@infinite-table/infinite-react';\n\n// we're binding it here to the `Employee` type\n// which means the `column.field` has to be `keyof Employee`\nexport const columns: Record<string, InfiniteTableColumn<Employee>> = {\n  'firstName':\n  {\n    field: 'firstName',\n    header: 'First Name',\n  },\n  'country':\n  {\n    field: 'country',\n  },\n  'city':\n  {\n    field: 'city'\n  },\n  'salary':\n  {\n    field: 'salary',\n    type: 'number'\n  },\n}\n<InfiniteTable columns={columns} />\n```\n\n<Note>\n\nIt's very important to remember you should not pass a different reference of a prop on each render. `<InfiniteTable />` is a optimized to only re-render when props change - so if you change the props on every re-render you will get a performance penalty.\n\nYou should use `React.useCallback` / `React.useMemo` / `React.useState` to make sure you only update the props you pass down to `InfiniteTable` when you have to.\n\n</Note>\n\n<Sandpack title=\"Basic Column Configuration\">\n\n```ts file=\"basic-columns-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<YouWillLearnCard inline title=\"Learn more about customizing Column Rendering\" path=\"./columns/column-rendering\">\nFind out how to render custom content inside columns or even take full control of column cells and header.\n</YouWillLearnCard>\n\n## Column Types\n\nColumn types allow you to customize column behavior and appearance for multiple columns at once. Most of the properties available for columns are also available for column types - for a full list, see <PropLink>columnTypes</PropLink> reference.\n\nThere are two special <PropLink code={false} name=\"columns.type\">column types</PropLink> for now, but more are coming soon:\n\n- `default` - all columns have this type, if not otherwise specified. The type does not contain any configuration, but allows you to define it and apply common configuration to all columns.\n- `number` - if specified on a column (in combination with local uncontrolled sorting), the column will be sorted numerically.\n\n<YouWillLearnCard inline title=\"Learn more on Column Types\" path=\"./columns/column-types\">\nFind out how to use column types to customize the appearance and behaviour of your columns.\n</YouWillLearnCard>\n\n## Column Order\n\nThe implicit column order is the order in which columns have been defined in the <PropLink name=\"columns\" /> object. You can however control that explicitly by using the `columnOrder: string[]` prop.\n\n```tsx\n\nconst columnOrder = ['firstName','id','curency']\n\nconst App = () => {\n  return <DataSource<DATA_TYPE> primaryKey={\"id\"} dataSource={...}>\n    <InfiniteTable<DATA_TYPE>\n      columnOrder={columnOrder}\n      onColumnOrderChange={(columnOrder: string[]) => {}}\n    />\n  </DataSource>\n}\n```\n\nThe <PropLink name=\"columnOrder\" /> prop is an array of strings, representing the column ids. A column id is the key of the column in the <PropLink name=\"columns\" /> object.\n\n<Note>\n\nThe <PropLink name=\"columnOrder\" /> array can contain identifiers that are not yet defined in the <PropLink name=\"columns\" /> Map, or can contain duplicate ids. This is a feature, not a bug. We want to allow you to use the <PropLink name=\"columnOrder\" /> in a flexible way so it can define the order of current and future columns.\n\n</Note>\n\n<Note>\n<PropLink name=\"columnOrder\" /> is a controlled prop. For the uncontrolled version, see <PropLink name=\"defaultColumnOrder\" />\n\nWhen using controlled <PropLink name=\"columnOrder\" />, make sure you also update the order by using the <PropLink name=\"onColumnOrderChange\" /> callback prop.\n</Note>\n\n<Sandpack title=\"Column Order demo, with firstName col displayed twice\">\n\n```tsx file=\"$DOCS/reference/columnOrder-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nBy keeping the column order simple, namely an array of strings, ordering becomes much easier.\n\nThe alternative would be to make `columns` an array, which most DataGrids do - and whenever they are reordered, a new `columns` array would be needed.\n\n</Note>\n"
    },
    {
      "filePath": "/docs/learn/context-menus/using-context-menus",
      "routePath": "/docs/learn/context-menus/using-context-menus",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/context-menus/using-context-menus.page.md",
      "fileName": "using-context-menus.page.md",
      "folderPath": "/docs/learn/context-menus/",
      "frontmatter": {
        "title": "Using Context Menus",
        "description": "InfiniteTable DataGrid allows you to easily configure context menus for any row and cell in the table and for the whole table body."
      },
      "excerpt": "The easiest way to configure a context menu is to provide the <PropLink name=\"getCellContextMenuItems\" /> callback function and use it to return the menu items you want to show in the context menu.",
      "readingTime": "3 min read",
      "content": "\nThe easiest way to configure a context menu is to provide the <PropLink name=\"getCellContextMenuItems\" /> callback function and use it to return the menu items you want to show in the context menu.\n\n```tsx\nconst getCellContextMenuItems = ({ column, value }) => {\n  if (column.id === 'currency') {\n    return [\n      {\n        label: `Convert ${value}`,\n        key: 'currency-convert',\n      },\n    ];\n  }\n\n  if (column.id === 'age') {\n    return null;\n  }\n\n  return [\n    {\n      label: `Welcome ${value}`,\n      key: 'hi',\n    },\n  ];\n};\n\n<DataSource<Developer> data={data} primaryKey=\"id\">\n  <InfiniteTable<Developer>\n    getCellContextMenuItems={getCellContextMenuItems}\n    columns={columns}\n  />\n</DataSource>;\n```\n\n<Sandpack title=\"Using context menus\">\n\n<Description>\n\nRight-click any cell in the table to see the custom context menu.\n\n</Description>\n\n```ts file=\"basic-cells-context-menu-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nThe <PropLink name=\"getCellContextMenuItems\" /> function can return one of the following:\n\n- `null` - no custom context menu will be displayed, the default context menu will be shown (default event behavior not prevented)\n- `[]` - an empty array - no custom context menu will be displayed, but the default context menu is not shown - the default event behavior is prevented\n- `Array<MenuItem>` - an array of menu items to be displayed in the context menu - each `MenuItem` should have:\n  - a unique `key` property,\n  - a `label` property with the value to display in the menu cell - it's called `label` because this is the name of the default column in the context menu\n  - an optional `onClick` callback function to handle the click event on the menu item.\n\nIn addition, if you need to configure the context menu to have other columns rather than the default column (named `label`), you can do so by returning an object with `columns` and `items`:\n\n```tsx\nconst getCellContextMenuItems = () => {\n  return {\n    columns: [{ name: 'label' }, { name: 'lcon' }],\n    items: [\n      {\n        label: 'Welcome',\n        icon: 'üëã',\n        key: 'hi',\n        onAction: () => {\n          // do something\n        },\n        hideMenuOnAction: true,\n      },\n      {\n        label: 'Convert',\n        icon: 'üîÅ',\n        key: 'convert',\n      },\n    ],\n  };\n};\n```\n\n<Sandpack title=\"Customising columns in the context menu\">\n\n<Description>\n\nRight-click any cell in the table to see a context menu with multiple columns (`icon`, `label` and `description`).\n\n</Description>\n\n```ts file=\"custom-columns-context-menu-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Note>\n\n## Context Menus for the Table Body\n\nYou might want to show a context menu for the table body, when the user right-clicks outside of any existing cell.\n\nFor this, you can use the <PropLink name=\"getContextMenuItems\" /> prop.\n\nThis function has almost the same signature as <PropLink name=\"getCellContextMenuItems\" />, with the following differences in the object passed as first parameter:\n\n- all cell-related properties (`column`, `data`, `value`, etc) can be `undefined`\n- it contains an `event` property with the original event object for the right-click event\n\n<Sandpack title=\"Context menu for outside cells\">\n\n<Description>\n\nRight-click outside cells in the table to see a context menu for the table body.\n\n</Description>\n\n```ts file=\"table-context-menu-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Hiding the Context Menu\n\nTo hide the context menu when you click a menu item, you can use the `hideMenuOnAction` property on the menu item.\n\nAlternatively, you can use the object passed in as a parameter to the `item.onAction` callback function to hide the menu:\n\n```tsx {12}\nconst getCellContextMenuItems = () => {\n  return {\n    items: [\n      {\n        label: 'Hello',\n        key: 'hi',\n        onAction: ({ key, hideMenu }) => {\n          // do something\n          console.log('Hello');\n\n          // hide the menu\n          hideMenu();\n        },\n      },\n    ],\n  };\n};\n```\n\nThe third option is to use the <ApiLink name=\"hideContextMenu\" /> function in the [API](/docs/reference/api).\n"
    },
    {
      "filePath": "/docs/learn/getting-started/index",
      "routePath": "/docs/learn/getting-started/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/getting-started/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/learn/getting-started/",
      "frontmatter": {
        "title": "Getting Started",
        "description": "Get help starting with Infinite Table for React. Our DataGrid component helps with sorting, filtering, row/column grouping, pivoting, aggregations ..."
      },
      "excerpt": "> `Infinite Table` is a UI component for data virtualization - helps you display huge datasets of tabular data.",
      "readingTime": "4 min read",
      "content": "\n> `Infinite Table` is a UI component for data virtualization - helps you display huge datasets of tabular data.\n\nIt's built specifically for React from the ground up and with performance in mind.\n\n# Installation\n\n`Infinite Table` is available on the public [npm registry](https://www.npmjs.com/package/@infinite-table/infinite-react) - install it by running the following command:\n\n<TerminalBlock>\nnpm i @infinite-table/infinite-react\n</TerminalBlock>\n\n## Meet the Code\n\n<Snippet>\n\n<Description>\n\nThis is an example to get you started with Infinite Table with minimal setup.\n</Description>\n\n```ts file=\"meet-the-code.page.tsx\"\n\n```\n\n</Snippet>\n\n\n<Note>\n\nDon't forget to import the CSS to see the component in action!\n\n```tsx \nimport '@infinite-table/infinite-react/index.css';\n```\n</Note>\n\n## Using the Components\n\nIn the code snippet above, you notice we're using 2 components:\n\n- `DataSource` - this needs to be a parent (or ancestor, at any level) of the `InfiniteTable` component - it controls which `data` the table is rendering\n- `InfiniteTable` - the actual virtualized table component - needs to be inside a `DataSource` (can be at any level of nesting).\n\nBoth components are named exports of the `@infinite-table/infinite-react` package.\n\n## TypeScript Types\n\nOur `TypeScript` types are published as part of the package, as named exports from the root of the package.\n\nThere are 2 components that you can use and import:\n\n- `InfiniteTable`\n- `DataSource`\n\nEach of those has types provided for all the props it exposes, with the pattern of `<COMPONENT_NAME>Prop<PROP_NAME>`, so here are a few examples to clarify the rule:\n\n```ts\nimport {\n  InfiniteTablePropColumns, // or accessible as InfiniteTableProps['columns']\n  // corresponding to the `columns` prop\n  DataSourcePropGroupBy, // or accessible as DataSourceProps['groupBy']\n  // corresponding to the `groupBy` prop\n} from '@infinite-table/infinite-react';\n```\n\n<HeroCards>\n<YouWillLearnCard title=\"Learn about our TypeScript typings\" path=\"/docs/learn/getting-started/typescript-types\">\nRead more about how to use our TypeScript types.\n</YouWillLearnCard>\n\n</HeroCards>\n\n## Built for React from the ground-up\n\n`Infinite Table` is built specifically for React and is fully declarative and fully typed. When you use `Infinite Table`, it feels at-home in your React application - every prop has both a controlled and uncontrolled version so you get full control over every area of the component.\n\n<Snippet>\n\n<Description>\n\nThis is an example of how you might configure `InfiniteTable` in a real-world application and puts together several functionalities:\n\n- grouping\n- aggregation\n- pinned columns\n- sorting\n- multiple selection\n- custom cell rendering\n\n</Description>\n\n```ts file=\"$DOCS/../../src/demo.tsx\"\n\n```\n\n</Snippet>\n\n## Licensing\n\nYou can use `@infinite-table/infinite-react` in 2 ways:\n\n- with a license - requests for license quotations and additional quotations must be made by email to admin@infinite-table.com. After purchasing, you will receive a `licenseKey` which you will provide as a prop when you instantiate Infinite Table. This will make the [Powered by Infinite Table](https://infinite-table.com) footer go away.\n- without a license, but it will include a [Powered by Infinite Table](https://infinite-table.com) link in the table footer. This way you can use it for free in any product, but make sure the footer is always visible when Infinite Table is visible. For demo purposes, we don't show any license error for embeds in [codesandbox.io](https://codesandbox.io) - which are used throughout this demo site. Check the demo below to see the license footer in action.\n\n```ts live title=\"Invalid License Demo\" files=\"invalid-license.page.tsx,data.tsx\"\n```\n\n\n\n<HeroCards>\n<YouWillLearnCard title=\"More on Licensing\" path=\"/docs/learn/getting-started/licensing\">\nRead more about our licensing model and how you can use Infinite Table.\n</YouWillLearnCard>\n\n</HeroCards>\n\n## About the Docs\n\n> We're grateful for the work done by the [team behind reactjs.org](https://github.com/reactjs/reactjs.org) and the new React documentation found at [beta.reactjs.org](https://beta.reactjs.org/) - we've built our documentation on their excellent work üôè and we're grateful for that.\n\nThe documentation is versioned, and we will publish a new version of the documentation when there are any significant changes in the corresponding `@infinite-table/infinite-react` version.\n"
    },
    {
      "filePath": "/docs/learn/getting-started/licensing",
      "routePath": "/docs/learn/getting-started/licensing",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/getting-started/licensing.page.md",
      "fileName": "licensing.page.md",
      "folderPath": "/docs/learn/getting-started/",
      "frontmatter": {
        "title": "Licensing Infinite Table",
        "description": "Free Usage and Licensing with Infinite Table"
      },
      "excerpt": "## Free Usage",
      "readingTime": "1 min read",
      "content": "\n## Free Usage\n\nYou can immediately download and use [Infinite Table from the NPM registry](https://www.npmjs.com/package/@infinite-table/infinite-react) free of charge.\n\n<Note>\n\nWhen using Infinite Table for free, you have access to **all the features** of Infinite Table, but you will see a [Powered by Infinite Table](https://infinite-table.com) link in the table footer.\n\n</Note>\n\nYou can use it for free in any product, but make sure the footer is always visible when Infinite Table is visible. For demo purposes, we don't show any license error for embeds in [codesandbox.io](https://codesandbox.io) - which are used throughout this demo site. Check the demo below to see the license footer in action.\n\n<Sandpack title=\"Invalid License Demo\">\n\n```ts files=[\"invalid-license.page.tsx\",\"data.tsx\"]\n\n```\n\n</Sandpack>\n\n## Licensed Usage\n\nWe invite you to try out Infinite Table and explore all the features it has to offer. We're confident it will be a useful addition to your React applications.\n\nWe encourage companies üôå to purchase development licenses for their teams and help us improve the product and support the development of new features.\n\n<HeroCards>\n<YouWillLearnCard title=\"See Pricing\" path=\"/pricing\">\nSee our pricing page for more information on how to purchase a license.\n</YouWillLearnCard>\n\n</HeroCards>\n"
    },
    {
      "filePath": "/docs/learn/getting-started/test",
      "routePath": "/docs/learn/getting-started/test",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/getting-started/test.page.md",
      "fileName": "test.page.md",
      "folderPath": "/docs/learn/getting-started/",
      "frontmatter": {
        "title": "Getting Started Test",
        "description": "Get help starting with Infinite Table for React. Our DataGrid component helps with sorting, filtering, row/column grouping, pivoting, aggregations ..."
      },
      "excerpt": "good morning `radu` how are you?",
      "readingTime": "1 min read",
      "content": "\ngood morning `radu` how are you?\n\n```hello```\n\nhave a good day\n\n\n```ts live files=[\"$DOCS/learn/working-with-data/refetch-example.page.tsx\",\"$DOCS/learn/working-with-data/columns.ts\"]\n\n```\n"
    },
    {
      "filePath": "/docs/learn/getting-started/typescript-types",
      "routePath": "/docs/learn/getting-started/typescript-types",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/getting-started/typescript-types.page.md",
      "fileName": "typescript-types.page.md",
      "folderPath": "/docs/learn/getting-started/",
      "frontmatter": {
        "title": "TypeScript Types",
        "description": "Infinite Table types for TypeScript are published as part of the package, as named exports from the root of the package."
      },
      "excerpt": "Our `TypeScript` types are published as part of the package, as named exports from the root of the package.",
      "readingTime": "3 min read",
      "content": "\nOur `TypeScript` types are published as part of the package, as named exports from the root of the package.\n\nThe 2 main components that you can need to use and import are:\n\n- `InfiniteTable`\n- `DataSource`\n\n```tsx title=\"Importing InfiniteTable and DataSource components\"\nimport { InfiniteTable, DataSource } from '@infinite-table/infinite-react';\n```\n\n<Note>\n\nIn our TypeScript typings, those components are exported as generic components, so they need to be bound to the type of the data they are rendering.\n\n```tsx\ntype Developer = {\n  id: number;\n\n  firstName: string;\n  lastName: string;\n\n  currency: string;\n  salary: number;\n}\n\nconst App = () => {\n  return <DataSource<Developer> data={data} primaryKey=\"id\">\n    <InfiniteTable<Developer>\n      columns={{...}}\n    />\n  </DataSource>\n}\n```\n\nThroughout the documentation, we will use the `DATA_TYPE` placeholder to refer to the type of the data that the `InfiniteTable` and `DataSource` components are bound to.\n\n</Note>\n\n<Note>\n\nYou can still use `InfiniteTable` in plain JavaScript, but you won't get all the type-checking benefits.\n\n</Note>\n\nBoth `InfiniteTable` and `DataSource` components have types provided for most of the props they support. Generally the naming pattern is `<COMPONENT_NAME>Prop<PROP_NAME>`, so here are a few examples to clarify the rule:\n\n```ts\nimport type {\n  InfiniteTablePropColumns,\n  // corresponding to the `columns` prop\n  DataSourcePropGroupBy,\n  // corresponding to the `groupBy` prop\n} from '@infinite-table/infinite-react';\n```\n\n## `DataSource` Types\n\nHere are a few examples for types for the `DataSource` component:\n\n- `DataSourcePropGroupBy<DATA_TYPE>` - the type for <DPropLink name=\"groupBy\">DataSource.groupBy</DPropLink>\n\n```tsx\nimport type { DataSourcePropGroupBy } from '@infinite-table/infinite-react';\n```\n\n- `DataSourcePropAggregationReducers<DATA_TYPE>` - the type for <DPropLink name=\"aggregationReducers\">DataSource.aggregationReducers</DPropLink>\n\n```tsx\nimport type { DataSourcePropAggregationReducers } from '@infinite-table/infinite-react';\n```\n\n<Note>\n\nNot all the `DataSource` props have types exported that follow this convention, so you can always use `DataSourceProps<DATA_TYPE>` to get the type that define all the props.\n\nIn this way you can access specific prop types by name\n\n- `DataSourceProps<DATA_TYPE>['groupBy']` - the type for <DPropLink name=\"groupBy\">DataSource.groupBy</DPropLink>\n- `DataSourceProps<DATA_TYPE>['data']` - the type for <DPropLink name=\"data\">DataSource.data</DPropLink>\n- etc\n\n</Note>\n\n## `InfiniteTable` Types\n\nBelow you can find a few examples for types for the `InfiniteTable` component:\n\n- `InfiniteTablePropColumns<DATA_TYPE>` - the type for <PropLink name=\"columns\">InfiniteTable.columns</PropLink>\n\n```tsx\nimport type { InfiniteTablePropColumns } from '@infinite-table/infinite-react';\n```\n\n- `InfiniteTablePropRowStyle<DATA_TYPE>` - the type for <PropLink name=\"rowStyle\">InfiniteTable.rowStyle</PropLink>\n\n```tsx\nimport type { InfiniteTablePropRowStyle } from '@infinite-table/infinite-react';\n```\n\n- `InfiniteTablePropColumnGroups<DATA_TYPE>` - the type for <PropLink name=\"columnGroups\">InfiniteTable.columnGroups</PropLink>\n\n```tsx\nimport type { InfiniteTablePropColumnGroups } from '@infinite-table/infinite-react';\n```\n\n<Note>\n\nNot all the `InfiniteTable` props have types exported that follow this convention, so you can always use `InfiniteTableProps<DATA_TYPE>` to get the type that define all the props the `InfiniteTable` component supports.\n\nIn this way you can access specific prop types by name:\n\n- `InfiniteTableProps<DATA_TYPE>['columns']` - the type for <PropLink name=\"columns\">InfiniteTable.columns</PropLink>\n- `InfiniteTableProps<DATA_TYPE>['columnSizing']` - the type for <PropLink name=\"columnSizing\">InfiniteTable.columnSizing</PropLink>\n- etc\n\n</Note>\n\n<Note>\n\nWorth mentioning is the `InfiniteTableColumn<DATA_TYPE>` prop, which defines the type for the table <PropLink name=\"columns\" />.\n\n</Note>\n"
    },
    {
      "filePath": "/docs/learn/examples/change-datasource",
      "routePath": "/docs/learn/examples/change-datasource",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/examples/change-datasource.page.md",
      "fileName": "change-datasource.page.md",
      "folderPath": "/docs/learn/examples/",
      "frontmatter": {
        "title": "Changing the Data Source"
      },
      "excerpt": "This example show how you can change the data source and the columns of the DataGrid.",
      "readingTime": "1 min read",
      "content": "\nThis example show how you can change the data source and the columns of the DataGrid.\n\n<HeroCards>\n<YouWillLearnCard title=\"Working with Data\" path=\"/docs/learn/working-with-data\">\nFind out more about how to work with data - both client-side and server-side.\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"Working with Columns\" path=\"/docs/learn/working-with-columns\">\nSee our page on using and configuring columns. It shows you how to use and customize columns to your needs.\n</YouWillLearnCard>\n</HeroCards>\n\n<Sandpack  size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nIn this demo you can toggle between 2 data sources and 2 sets of columns.\n\n</Description>\n\n```tsx file=\"change-datasource-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nInfinite Table guarantees you that the user will NEVER see white space when scrolling horizontally or vertically.\n</Note>\n"
    },
    {
      "filePath": "/docs/learn/examples/dynamic-pivoting-example",
      "routePath": "/docs/learn/examples/dynamic-pivoting-example",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/examples/dynamic-pivoting-example.page.md",
      "fileName": "dynamic-pivoting-example.page.md",
      "folderPath": "/docs/learn/examples/",
      "frontmatter": {
        "title": "Dynamic Pivoting Example"
      },
      "excerpt": "This example showcases client-side grouping, pivoting and aggregation.",
      "readingTime": "1 min read",
      "content": "\nThis example showcases client-side grouping, pivoting and aggregation.\nThese properties are changed dynamically at run-time via the UI.\n\nIt also showcases different way of customizing columns based on dynamic conditions:\n\n- uses custom `number` and `currency` column types, to format values\n- has a custom border for rows that have `canDesign=yes`\n- the custom column type `number` has a background color based on the color input\n\n<Sandpack deps=\"react-select\" viewMode=\"preview\" size=\"lg\">\n\n```tsx files=[\"dynamic-advanced-pivoting-example.page.tsx\",\"Settings.tsx\",\"types.ts\"]\n\n```\n\n</Sandpack>\n\n## Server-side Dynamic Pivoting Example\n\nThis example is very similar with the above one, but pivoting, grouping and aggregation is done on the server-side.\n\n<Sandpack viewMode=\"preview\" size=\"lg\">\n\n```tsx files=[\"dynamic-pivoting-serverside-example.page.tsx\",\"Settings.tsx\",\"types.ts\"]\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/examples/live-updates-example",
      "routePath": "/docs/learn/examples/live-updates-example",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/examples/live-updates-example.page.md",
      "fileName": "live-updates-example.page.md",
      "folderPath": "/docs/learn/examples/",
      "frontmatter": {
        "title": "Live Updates Example"
      },
      "excerpt": "This example shows how you can update the grid data in real-time.",
      "readingTime": "1 min read",
      "content": "\nThis example shows how you can update the grid data in real-time.\n\n<HeroCards>\n<YouWillLearnCard title=\"Updating Data in Real-Time\" path=\"/docs/learn/working-with-data/updating-data-in-realtime\">\nFind out more about how to update data in real-time\n</YouWillLearnCard>\n\n</HeroCards>\n\n<Sandpack size=\"md\" viewMode=\"preview\">\n\n<Description>\n\nThe DataSource has 10k items - use the **Start/Stop** button to see updates in real-time.\n\nIn this example, we're updating 5 rows (in the visible viewport) every 30ms.\n\nThe update rate could be much higher, but we're keeping it at current levels to make it easier to see the changes.\n\n</Description>\n\n```tsx file=\"$DOCS/learn/working-with-data/realtime-updates-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/examples/performance-many-rows-and-columns",
      "routePath": "/docs/learn/examples/performance-many-rows-and-columns",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/examples/performance-many-rows-and-columns.page.md",
      "fileName": "performance-many-rows-and-columns.page.md",
      "folderPath": "/docs/learn/examples/",
      "frontmatter": {
        "title": "Performance with Many Rows and Columns"
      },
      "excerpt": "This example showcases a DataGrid with **10.000 rows** and **12 columns**.",
      "readingTime": "1 min read",
      "content": "\nThis example showcases a DataGrid with **10.000 rows** and **12 columns**.\n\n<HeroCards>\n<YouWillLearnCard title=\"Working with Data\" path=\"/docs/learn/working-with-data\">\nFind out more about how to work with data - both client-side and server-side.\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"Working with Columns\" path=\"/docs/learn/working-with-columns\">\nSee our page on using and configuring columns. It shows you how to use and customize columns to your needs.\n</YouWillLearnCard>\n</HeroCards>\n\n<Sandpack  size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nDataGrid with 10k rows and 12 columns.\n\nAdding more columns will not affect performance, as the DataGrid uses virtualization for both rows and **columns**.\n\n</Description>\n\n```tsx file=\"many-rows-and-columns-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nInfinite Table guarantees you that the user will NEVER see white space when scrolling horizontally or vertically.\n</Note>\n"
    },
    {
      "filePath": "/docs/learn/examples/using-sparklines",
      "routePath": "/docs/learn/examples/using-sparklines",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/examples/using-sparklines.page.md",
      "fileName": "using-sparklines.page.md",
      "folderPath": "/docs/learn/examples/",
      "frontmatter": {
        "title": "Sparklines Example"
      },
      "excerpt": "This example shows how to use integrate a sparkline component in a DataGrid column.",
      "readingTime": "1 min read",
      "content": "This example shows how to use integrate a sparkline component in a DataGrid column.\n\nFor this demo, we're using the [`react-sparklines`](https://www.npmjs.com/package/react-sparklines)  library.\n\nThe most important part is the <PropLink name=\"columns.renderValue\" /> property, which allows you to render a custom React component for the cell value.\n\n```tsx {11-26} title=\"Using column.renderValue to render a sparkline\"\nconst columns = {\n  // ... other columns\n  id: {\n    field: 'id',\n    defaultWidth: 100,\n  },\n  bugFixes: {\n    field: 'bugFixes',\n    header: 'Bug Fixes',\n    defaultWidth: 300,\n    renderValue: ({ value, data }) => {\n      const color =\n        data?.department === 'IT' || data?.department === 'Management'\n          ? 'tomato'\n          : '#253e56';\n      return (\n        <Sparklines\n          data={value}\n          style={{\n            width: '100%',\n          }}\n          height={30}\n        >\n          <SparklinesLine color={color} />\n        </Sparklines>\n      );\n    },\n  },\n}\n```\n\n\n<Sandpack size=\"md\" viewMode=\"preview\" deps=\"react-sparklines\" title=\"Using a sparkline component\">\n\n<Description>\nThis demo renders a sparkline and changes the color of the sparkline based on the `department` field in the row (red for IT or Management, blue for everything else).\n</Description>\n\n```tsx file=\"./using-sparklines-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/filtering/extending-existing-filters",
      "routePath": "/docs/learn/filtering/extending-existing-filters",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/filtering/extending-existing-filters.page.md",
      "fileName": "extending-existing-filters.page.md",
      "folderPath": "/docs/learn/filtering/",
      "frontmatter": {
        "title": "Extending existing filters",
        "description": "Learn how to extend existing filters and filter types for your Infinite Table React DataGrid"
      },
      "excerpt": "By default `InfiniteTable` has the following default filter types:",
      "readingTime": "3 min read",
      "content": "\nBy default `InfiniteTable` has the following default filter types:\n\n- `string`\n- `number`\n\nand each of them has a collection of operators that are supported - see <DPropLink name=\"filterTypes\" /> for the respective list of supported operators.\n\nYou may find those operators limiting - but it's easy to extend them and add new operators or even new filter types.\n\n## Adding new operators to existing filter types\n\nYou can import `defaultFilterTypes` from the root of the package.\n\n```ts title=\"Adding a new operator to the string filter type\"\nimport { defaultFilterTypes¬†} from '@infinite-table/infinite-react';\n\n// add new operators for the `string` filter type\ndefaultFilterTypes.string.operators.push({\n  name: 'notContains',\n  component: { Icon: ReactComponentForIcon }\n  label: 'Not Contains',\n  fn: ({currentValue, filterValue }) => {\n    return typeof currentValue === 'string' &&\n            typeof filterValue == 'string' &&\n            !currentValue.toLowerCase().includes(filterValue.toLowerCase())\n  }\n})\n```\n\n<Note>\n\nWhen you import the named `defaultFilterTypes` value and extend it, that will affect all `InfiniteTable` components in your application.\n\nIf you don't want that, you need to use the `filterTypes` prop of the `<DataSource />` component. Either build an entirely new object for `filterTypes`, or start by cloning `defaultFilterTypes` and extend it.\n\n</Note>\n\n<Sandpack title=\"Enhanced string filter type - new 'Not includes' operator\">\n\n<Description>\n\nThe `string` columns have a new `Not includes` operator.\n\n</Description>\n\n```ts file=\"customised-default-filter-types-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Adding new filter types\n\nIf the existing filter types are not enough, it's easy to add new ones.\n\nAs already mentioned, you can either update the value of `defaultFilterTypes` or use the `filterTypes` prop of the `<DataSource />` component. Updating the value `defaultFilterTypes` will affect all your `InfiniteTable` DataGrid components.\n\n```ts title=\"Adding a new filter type by updating defaultFilterTypes\"\nimport { defaultFilterTypes } from '@infinite-table/infinite-react';\n\ndefaultFilterTypes.bool = {\n  defaultOperator: 'eq',\n  emptyValues: [null],\n  operators: [\n    {\n      name: 'eq',\n      label: 'Equals',\n      fn: ({ currentValue, filterValue }) => currentValue === filterValue,\n    },\n  ],\n};\n```\n\n```ts title=\"Adding a new filter type by using the filterTypes prop\"\nimport { DataSource } from '@infinite-table/infinite-react';\n\n<DataSource\n  filterTypes={{\n    bool: {\n      defaultOperator: 'eq',\n      emptyValues: [null],\n      operators: [\n        {\n          name: 'eq',\n          label: 'Equals',\n          fn: ({ currentValue, filterValue }) => currentValue === filterValue,\n        },\n      ],\n    },\n  }}\n/>;\n```\n\n<Note>\n\nWhen passing `filterTypes` to the `<DataSource />` component, the object will be merged with the `defaultFilterTypes`. As a result, the existing `string` and `number` filterTypes will be preserved, unless explicitly overridden.\n\n</Note>\n\n<Sandpack title=\"Writing a `bool` filter type with a custom filter editor\">\n\n<Description>\n\nThe `canDesign` column is using a custom `bool` filter type with a custom filter editor.\n\n</Description>\n\n```ts file=\"checkbox-filter-editor-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/filtering/filtering-client-side",
      "routePath": "/docs/learn/filtering/filtering-client-side",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/filtering/filtering-client-side.page.md",
      "fileName": "filtering-client-side.page.md",
      "folderPath": "/docs/learn/filtering/",
      "frontmatter": {
        "title": "Client-side Filtering",
        "description": "Learn how to configure client-side filtering for your Infinite Table React DataGrid"
      },
      "excerpt": "The most common way to use filtering in Infinite Table is by configuring filters for columns (this works both for client-side and server-side filtering).",
      "readingTime": "5 min read",
      "content": "\nThe most common way to use filtering in Infinite Table is by configuring filters for columns (this works both for client-side and server-side filtering).\n\nIf the DataSource <DPropLink name=\"data\" /> property is a function (and not an array or a `Promise`), then the filtering will happen server-side by default.\n\n<Note>\n\nTo force client-side filtering, you can explicitly set the <DPropLink name=\"filterMode\">filterMode=\"local\"</DPropLink> property on the `<DataSource />` component.\n\nThe possible values for this prop are:\n\n- `filterMode=\"local\"` - filtering will happen client-side\n- `filterMode=\"remote\"` - filtering will happen remotely and the <DPropLink name=\"filterValue\" /> will be passed as a property to the parameter object sent to the <DPropLink name=\"data\"/> function.\n\n</Note>\n\n## Showing the Column Filters\n\nIn order to show the column filter editors in the column headers, you need to specify either the uncontrolled <DPropLink name=\"defaultFilterValue\" /> property or the controlled <DPropLink name=\"filterValue\" /> version.\n\n<Sandpack title=\"Client-side filtering in action\">\n\n<Description>\n\nThis example shows remote data with local filtering - it sets `filterMode=\"local\"` on the `<DataSource />` component.\n\nIn addition, the `filterDelay` property is set to `0` for instant feedback.\n\n</Description>\n\n```ts file=\"basic-local-filter-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf you still want filtering to be enabled with the default functionality of using the <DPropLink name=\"filterValue\" /> (or uncontrolled <DPropLink name=\"defaultFilterValue\" />), but want to hide the column filter editors, you can set the <DPropLink name=\"showColumnFilters\">showColumnFilters</DPropLink> property to `false`.\n\n</Note>\n\n## Using Filter Types\n\nAs already documented in the [Understanding Filter Types](./#understanding-filter-types) section, you can specify the types of the filters the `<DataSource />` will support, by using the <DPropLink name=\"filterTypes\" /> property.\n\nThe default filter types are `string` and `number` - read the next section to see how you can add new operators to those filter types.\n\nA filter type is basically a collection of operators available for a type of data. Each operator needs a name and a function that will be used to filter the data, when that operator is applied.\n\n```tsx {5,14} title=\"Using_filter_types_for_filterValue\"\nfilterValue={[\n  {\n    field: 'firstName',\n    filter: {\n      type: 'string',\n      operator: 'includes',\n      value: 'John'\n    }\n\n  },\n  {\n    field: 'age',\n    filter: {\n      type: 'number',\n      operator: 'gt',\n      value: 30\n    }\n  }\n]}\n```\n\nThe above filter value specifies that there are 2 filters applied:\n\n- the `firstName` column applies a filter that will only match rows with `firstName` containining the string `John`\n- the `age` column has an additional filter, that will only match rows with `age` greater than `30`\n\nIf <DPropLink name=\"filterMode\" /> is set to `local`, then the filtering will happen client-side, using the filtering functions specified by `includes` operator in the `string` filter type and the `gt` operator in the `number` filter type.\n\nHere's a snippet of code from the `string` filter type showing the `includes` operator:\n\n```tsx\noperators: [\n  {\n    name: 'includes',\n    components: { Icon: /* a React Component */ },\n    label: 'Includes',\n    fn: ({ currentValue, filterValue }) => {\n      return (\n        typeof currentValue === 'string' &&\n        typeof filterValue == 'string' &&\n        currentValue.toLowerCase().includes(filterValue.toLowerCase())\n      );\n    },\n  },\n  //...\n]\n```\n\nLet's now look at another example, of implementing a custom `salary` filter type.\n\nFor this, we override the `filterTypes` property of the `<DataSource />` component:\n\n```tsx\nconst filterTypes = {\n  salary: {\n    defaultOperator: 'gt',\n    emptyValues: ['', null, undefined],\n    operators: [ /*...*/ ]\n  }\n}\n\n<DataSource<Developer>\n  filterTypes={filterTypes}\n/>\n```\n\n<Note>\n\nWhen you specify new <DPropLink name=\"filterTypes\"/>, the default filter types of `string` and `number` are still available - unless the new object contains those keys and overrides them explicitly.\n\n</Note>\n\n<Sandpack title=\"Client-side filtering in action with custom filter type\">\n\n<Description>\n\nThe `salary` column has a custom filter type, with the following operators: `gt`, `gte`, `lt` and `lte`.\n\n</Description>\n\n```ts file=\"filter-custom-filter-type-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Customizing Default Filter Types\n\nBy default, the `string` and `number` filter types are available. You can import the default filter types like this:\n\n```ts\nimport { defaultFilterTypes } from '@infinite-table/infinite-react';\n```\n\nIf you want to make all your instances of `InfiniteTable` have new operators for those filter types, you can simply mutate the exported `defaultFilterTypes` object.\n\n<Sandpack title=\"Enhanced string filter type - new 'Not includes' operator\">\n\n<Description>\n\nThe `string` columns have a new `Not includes` operator.\n\n</Description>\n\n```ts file=\"customised-default-filter-types-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nWhen you specify new <DPropLink name=\"filterTypes\"/>, the default filter types of `string` and `number` are still available - unless the new object contains those keys and override them explicitly.\n\n</Note>\n\n## Using a Filter Delay\n\nIn order to save some resources, filtering is batched by default. This is controlled by the <DPropLink name=\"filterDelay\"/> prop, which, if not specified, defaults to `200` milliseconds. This means, any changes to the column filters, that happen inside a 200ms window (or the current value of <DPropLink name=\"filterDelay\"/>), will be debounced and only the last value will be used to trigger a filter.\n\n<Note>\n\nIf you want to prevent debouncing/batching filter values, you can set <DPropLink name=\"filterDelay\"/> to `0`.\n\n</Note>\n\n<Note>\n\nAPI calls to <ApiLink name=\"setColumnFilter\"/> or <ApiLink name=\"clearColumnFilter\"/> are not batched.\n\n</Note>\n\n## Using a Filter Function Instead of the Column Filters\n\nFor client-side rendering, it's possible that instead of showing a column filter bar, you use a custom <DPropLink name=\"filterFunction\" /> to filter the data.\n\nIn this case, the filtering will happen client-side ... of course ü§¶‚Äç‚ôÇÔ∏è.\n\n<Sandpack title=\"Custom filterFunction example\">\n\n<Description>\n\nLoads data from remote location but will only show rows that have `id > 100`.\n\n</Description>\n\n```ts file=\"filter-function-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/filtering/filtering-server-side",
      "routePath": "/docs/learn/filtering/filtering-server-side",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/filtering/filtering-server-side.page.md",
      "fileName": "filtering-server-side.page.md",
      "folderPath": "/docs/learn/filtering/",
      "frontmatter": {
        "title": "Server-side Filtering",
        "description": "Learn how to integrate server-side filtering with your InfiniteTable React DataGrid"
      },
      "excerpt": "If you're using a remote <DPropLink name=\"data\" /> prop (a function that returns a `Promise`) on the `<DataSource />` component, the filtering will happen server-side by default.",
      "readingTime": "2 min read",
      "content": "\nIf you're using a remote <DPropLink name=\"data\" /> prop (a function that returns a `Promise`) on the `<DataSource />` component, the filtering will happen server-side by default.\n\n<Note>\n\nYou can explicitly configure server-side filtering by using <DPropLink name=\"filterMode\">filterMode=\"remote\"</DPropLink>.\n\n</Note>\n\nWhen remote filtering is enabled, the <DPropLink name=\"data\" /> function prop will be called with an object argument that includes the `filterValue` property, so the filters can be sent to the server for performing the correct filtering operations.\n\n<Note>\n\nObviously the filtering can be combined with sorting, grouping, etc.\n\nIt's up to the <DPropLink name=\"data\" /> function prop to send the correct parameters to the server for remote operations.\n\nThe returned JSON can include both\n\n- a `totalCount` property (`number`) and\n- a `totalCountUnfiltered` property (also `number`) - to inform the `<DataSource />` of the size of the data, both with and without the applied filters.\n\n</Note>\n\n<Sandpack title=\"Server-side filtering example\">\n\n<Description>\n\nAll the filtering in this example happens server-side.\n\nThis example also does server-side (multiple) sorting.\n\n</Description>\n\n```ts file=\"server-side-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nWhen the filter value for a column matches the empty value - as specified in the <DPropLink name=\"filterTypes\">filterTypes.operator.emptyValues</DPropLink> - that value is not sent to the server as part of the `filterValue` array.\n</Note>\n\n<Note>\n\nWhen doing server-side filtering, it's your responsability as a developer to make sure you're sending the correct filtering parameters to the server, in a way the server understands it.\n\nThis means that the filter values, the filter type and the names of the operators are known to the server and there is a clear convention of what is supported or not.\n\n</Note>\n\n## Batch filtering\n\nIn order to reduce the number of requests sent to the server, filtering will be batched by default.\n\nBatching is controlled by the <DPropLink name=\"filterDelay\"/> prop, which, if not specified, defaults to `200` milliseconds. This means, any changes to the column filters, that happen inside a 200ms window (or the current value of <DPropLink name=\"filterDelay\"/>), will be debounced and only the last value will be sent to the server.\n\n<Note>\n\nIf you want to prevent debouncing/batching filter values, you can set <DPropLink name=\"filterDelay\"/> to `0`.\n\n</Note>\n"
    },
    {
      "filePath": "/docs/learn/filtering/index",
      "routePath": "/docs/learn/filtering/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/filtering/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/learn/filtering/",
      "frontmatter": {
        "title": "Filtering",
        "description": "Learn how to configure client-side and server-side filtering in Infinite Table for React"
      },
      "excerpt": "Filtering allows you to limit the rows available in the table.",
      "readingTime": "6 min read",
      "content": "\nFiltering allows you to limit the rows available in the table.\n\nBoth client-side and server-side filtering are available in Infinite Table - but the way the are configured is pretty similar, so this page documents the common parts, while pointing to the respective pages for the differences.\n\n## Configuring Filters for Columns\n\nThe most common way to use filtering in Infinite Table is by configuring filters for columns (this works both for client-side and server-side filtering).\n\nYou specify an uncontrolled <DPropLink name=\"defaultFilterValue\" /> on the `<DataSource />` component (or the controlled version, <DPropLink name=\"filterValue\" />) and the specified value will be used as the initial filter.\n\nBased on the <PropLink name=\"columns.type\" code={false}>column type</PropLink>, the correct filter editor is displayed in the column header, along with the correct operator icon. In the UI, you can change the operator being used for the filter.\n\n```tsx title=\"Specifying an initial filter value for the DataSource\"\n<DataSource<Developer>\n  data={...}\n  defaultFilterValue={[\n    {\n      field: 'age',\n      filter: {\n        operator: 'gt',\n        value: 30,\n        type: 'number'\n      }\n    }\n  ]}\n>\n  <InfiniteTable<Developer>\n    columns={...}\n  />\n</DataSource>\n```\n\n<Note>\n\nIf you don't need to specify some initial filters, but want the column filter bar to be visible, you need to specify `defaultFilterValue = []` (or the controlled `filterValue = []`).\n\nSpecifying any of those props will make the column filter bar visible.\n\nWhenever filters change, <DPropLink name=\"onFilterChange\" /> will be called with the new filter value - note however, it might not be called immediately, due to the <DPropLink name=\"filterDelay\" /> prop.\n\n</Note>\n\nThe above snippet will show a `number` filter for the `age` column. There are two filter types available at this stage in Infinite Table:\n\n- `string` - with the following operators available: `contains`, `eq`, `startsWith` and `endsWith`\n- `number` - with the following operators available: `eq`,`neq`, `gt`, `gte`, `lt` and `lte`\n\n## Defining Filterable Columns\n\nBy default, all columns are filterable.\n\nIf you want to make columns by default not filterable, use the <PropLink name=\"columnDefaultFilterable\" /> prop and set it to `false`.\n\nYou can specifically configure each column by using the <PropLink name=\"columns.defaultFilterable\">defaultFilterable</PropLink> property - this overrides the global <PropLink name=\"columnDefaultFilterable\" /> prop.\n\n## Defining a Filter Type for a Column\n\nBesides being filterable, a column can decide what type of filter it will display.\n\nUse the <PropLink name=\"columns.type\" /> property to specify the type of filter the column will use. Using the `type` property also configures the data type of the column, which in turn determines the sort type.\n\n<Note>\n\nIf the type of filter you want to show does not match the column <PropLink name=\"columns.type\">type</PropLink>, you can specify the filter with the <PropLink name=\"columns.filterType\">column.filterType</PropLink> property. Only use this when the type of the data differs from the type of the filter (eg: you have a numeric column, with a custom filter type).\n\n</Note>\n\n## Understanding Filter Types\n\nA filter type is a concept that defines how a certain type of data is to be filtered.\nA filter type will have\n\n- a `key` - the key used to define the filter in the <DPropLink name=\"filterTypes\" /> object\n- a `label`,\n- an array of values considered to be empty values - when any of these values is used in the filter, the filter will not be applied.\n- an array of `operators`\n- a default operator.\n\nLet's imagine you have a `DataSource` with developers, each with a `salary` column, and for that column you want to allow `>`, `>=`, `<` and `<=` comparisons (operators).\n\nFor this, you would define the following filter type:\n\n```tsx\nconst filterTypes = {\n  income: {\n    label: 'Income',\n    emptyValues: ['', null, undefined],\n    defaultOperator: 'gt',\n    operators: [\n      {\n        name: 'gt',\n        label: 'Greater than',\n        fn: ({ currentValue, filterValue, emptyValues }) => {\n          if (emptyValues.has(currentValue)) {\n            return true;\n          }\n          return currentValue > filterValue;\n        },\n      },\n      {\n        name: 'gte',\n        //...\n      },\n      {\n        name: 'lt',\n        //...\n      },\n      {\n        name: 'lte',\n        //...\n      },\n    ],\n  },\n};\n```\n\n<Note>\n\nEach operator for a certain filter type needs to at least have a `name` and `fn` defined. The `fn` property is a function that will be called when client-side filtering is enabled, with an object that has the following properties:\n\n- `currentValue` - the cell value of the current row for the column being filtered\n- `filterValue` - the value of the filter editor\n- `emptyValues` - the array of values considered to be empty values for the filter type\n- `data` - the current row data object - `typeof DATA_TYPE`\n- `index` - the index of the current row in the table - `number`\n- `dataArray` - the array of all rows originally in the table - `typeof DATA_TYPE[]`\n- `field?` - the field the current column is bound to (can be undefined if the column is not bound to a field)\n\n</Note>\n\n<Sandpack title=\"Client-side filtering in action with custom filter type\">\n\n<Description>\n\nThe `salary` column has a custom filter type, with the following operators: `gt`, `gte`, `lt` and `lte`.\n\n</Description>\n\n```ts file=\"filter-custom-filter-type-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Specifying the filter mode\n\nAs already mentioned, filtering can happen either client-side or server-side. If the DataSource <DPropLink name=\"data\" /> property is a function (and not an array or a `Promise`), then the filtering will happen server-side by default.\n\nHowever, you can explicitly specify where the filtering should happen by setting the <DPropLink name=\"filterMode\" /> property on the `<DataSource />` component - possible values are\n\n- `filterMode=\"local\"` - filtering will happen client-side\n- `filterMode=\"remote\"` - filtering will happen remotely and the <DPropLink name=\"filterValue\" /> will be passed as a property to the parameter object sent to the <DPropLink name=\"data\"/> function.\n\n<Note title=\"Filter mode ‚ö†Ô∏è\">\n\nExplicitly specify <DPropLink name=\"filterMode\" /> as either `\"local\"` or `\"remote\"` if you want to change the default behavior.\n\n</Note>\n\n## Filtering Columns Not Bound to a Field\n\nIf a column is not bound to a `field`, it can still be used for filtering, even client-side filtering, if it is configured with a <PropLink name=\"columns.valueGetter\" />.\n\n<Note>\n\nIf you don't need a default filter value, the <DPropLink name=\"filterValue\" /> that's set when the user interacts with the column filter will use the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> to filter values.\n\nIf however, you need initial filtering by that column, the <DPropLink name=\"filterValue\" /> needs to specify a `valueGetter` itself.\n\n```tsx\ndefaultFilterValue={[\n  {\n    id: 'salary',\n    valueGetter: ({ data }) => data.salary,\n    filter: {\n      operator: 'gt',\n      value: '',\n      type: 'number',\n    }\n  },\n]}\n```\n\n</Note>\n\n<Sandpack title=\"Filtering a column not bound to a field\">\n\n<Description>\n\nThe `salary` column is not bound to a `field` - however, it can still be used for filtering, as it's configured with a `valueGetter`.\n\n</Description>\n\n```ts file=\"filter-column-with-id-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Customizing the Filter Icon for Columns\n\nColumns can customize the filter icon by using the <PropLink name=\"columns.renderFilterIcon\" /> property.\n\n<Sandpack title=\"Custom filter icons for salary and name columns\">\n\n<Description>\n\nThe `salary` column will show a bolded label when filtered.\n\nThe `firstName` column will show a custom filter icon when filtered.\n\n</Description>\n\n```ts file=\"$DOCS/learn/columns/column-filter-icon-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<HeroCards>\n<YouWillLearnCard title=\"Client-side filtering\" path=\"./filtering/filtering-client-side\">\nLearn how to use filtering in the browser.\n</YouWillLearnCard>\n<YouWillLearnCard title=\"Server-side filtering\" path=\"./filtering/filtering-server-side\">\nFigure out how to use filtering with server-side integration.\n</YouWillLearnCard>\n</HeroCards>\n"
    },
    {
      "filePath": "/docs/learn/filtering/providing-a-custom-filter-editor",
      "routePath": "/docs/learn/filtering/providing-a-custom-filter-editor",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/filtering/providing-a-custom-filter-editor.page.md",
      "fileName": "providing-a-custom-filter-editor.page.md",
      "folderPath": "/docs/learn/filtering/",
      "frontmatter": {
        "title": "Providing a Custom Filter Editor",
        "description": "Writing a custom filter editor for a column in Infinite Table is straightforward."
      },
      "excerpt": "Almost certainly, our current `string` and `number` filters are not enough for you. You will definitely need to write your custom filter editor.",
      "readingTime": "3 min read",
      "content": "\nAlmost certainly, our current `string` and `number` filters are not enough for you. You will definitely need to write your custom filter editor.\n\nFortunately, doing this is straightforward - it involves using the <HookLink name=\"useInfiniteColumnFilterEditor\" /> hook.\n\nThe next snippet shows our implementation of the `number` filter editor:\n\n```tsx\nexport function NumberFilterEditor<T>() {\n  const { ariaLabel, value, setValue, className, disabled } =\n    useInfiniteColumnFilterEditor<T>();\n\n  return (\n    <input\n      aria-label={ariaLabel}\n      type=\"number\"\n      disabled={disabled}\n      value={value as any as number}\n      onChange={(event) => {\n        let value = isNaN(event.target.valueAsNumber)\n          ? event.target.value\n          : event.target.valueAsNumber;\n        setValue(value as any as T);\n      }}\n      className={className}\n    />\n  );\n}\n```\n\n<Note>\n\nThis `NumberFilterEditor` is configured in the `components.FilterEditor` property for the `number` filter type.\n\nIf you want to import the `NumberFilterEditor`, you can do so with the following code:\n\n```tsx\nimport { components } from '@infinite-table/infinite-react';\n\nconst { NumberFilterEditor, StringFilterEditor } = components;\n```\n\n</Note>\n\nAs an exercise, let's write a custom filter editor that shows a checkbox and uses that to filter the values.\n\nFirst step is to define the `bool` filter type:\n\n```tsx {6} title=\"Defining the bool filter type with one emptyValue\"\nfilterTypes={{\n  bool: {\n    label: 'Boolean',\n    defaultOperator: 'eq',\n    // when the filter checkbox is indeterminate state, that's mapped to `null`\n    emptyValues: [null],\n    operators: [\n      // operators will come here\n    ],\n  }\n}}\n```\n\nNote in the code above, we have `emptyValues: [null]` - so when the filter checkbox is in indeterminate state, it should show all the rows.\n\nNow it's time to define the operators - more exactly, just one operator, `eq`:\n\n```tsx {7} title=\"Defining the eq operator\"\nfilterTypes={{\n  bool: {\n    defaultOperator: 'eq',\n    emptyValues: [null],\n    operators: [\n      {\n        name: 'eq',\n        label: 'Equals',\n        fn: ({ currentValue, filterValue }) => currentValue === filterValue,\n      },\n    ],\n  },\n}}\n```\n\nThe last part of the `bool` filter type will be to specify the `FilterEditor` component - this can be either specified as part of the filter type or as part of the operator definition (each operator can override the `components.FilterEditor`).\n\n```tsx {6} title=\"Specifying the FilterEditor component\"\nfilterTypes={{\n  bool: {\n    defaultOperator: 'eq',\n    emptyValues: [null],\n    components: {\n      FilterEditor: BoolFilterEditor,\n      FilterOperatorSwitch: () => null,\n    },\n    operators: [\n      {\n        name: 'eq',\n        label: 'Equals',\n        fn: ({ currentValue, filterValue }) =>\n          currentValue === filterValue,\n      },\n    ],\n  },\n}}\n```\n\nNow it's time to write the actual `BoolFilterEditor` that the `bool` filter type is using:\n\n```tsx {9} title=\"BoolFilterEditor\"\nimport {\n  components,\n  useInfiniteColumnFilterEditor,\n} from '@infinite-table/infinite-react';\n\nconst { CheckBox } = components;\n\nfunction BoolFilterEditor() {\n  const { value, setValue, className } =\n    useInfiniteColumnFilterEditor<Developer>();\n  return (\n    <div className={className} style={{ textAlign: 'center' }}>\n      <CheckBox\n        checked={value}\n        onChange={(newValue) => {\n          if (value === true) {\n            // after the value was true, make it go to indeterminate state\n            newValue = null;\n          }\n          if (value === null) {\n            // from indeterminate, goto false\n            newValue = false;\n          }\n          setValue(newValue);\n        }}\n      />\n    </div>\n  );\n}\n```\n\n<Note>\n\nIn the snippet above, note how we're using the <HookLink name=\"useInfiniteColumnFilterEditor\" /> hook to get the current `value` of the filter and also to retrieve the `setValue` function that we need to call when we want to update filtering.\n\n</Note>\n\n<Sandpack title=\"Writing a `bool` filter type with a custom filter editor\">\n\n<Description>\n\nThe `canDesign` column is using a custom `bool` filter type with a custom filter editor.\n\n</Description>\n\n```ts file=\"checkbox-filter-editor-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/grouping-and-pivoting/group-aggregations",
      "routePath": "/docs/learn/grouping-and-pivoting/group-aggregations",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/grouping-and-pivoting/group-aggregations.page.md",
      "fileName": "group-aggregations.page.md",
      "folderPath": "/docs/learn/grouping-and-pivoting/",
      "frontmatter": {
        "title": "Aggregations",
        "description": "Learn how to define & use aggregations on grouped rows in Infinite Table for React."
      },
      "excerpt": "A natural next step when grouping data is **aggregating the grouped values**. We allow developers to define any number of aggregations and bind them to any column.",
      "readingTime": "8 min read",
      "content": "\nA natural next step when grouping data is **aggregating the grouped values**. We allow developers to define any number of aggregations and bind them to any column.\n\nThe aggregations are defined on the `<DataSource />` component and are easily available at render time. A client-side aggregation needs a reducer function that accumulates the values in the data array and computes the final result.\n\n<Note>\n\nThroughout the docs, we might refer to aggregations as reducers - which, more technically, they are, since they reduce an array of values (from a group) to a single value.\n\n</Note>\n\n## Client-Side Aggregations\n\nWhen using client-side aggregation, each <DataSourcePropLink name=\"aggregationReducers\" code={false}>aggregation</DataSourcePropLink> can have the following:\n\n### An initial value\n\nThe `initialValue` is optional value to use as the initial (accumulator) value for the reducer function. You can think of aggregations as an \"enhanced\" version of [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce), so initial value should sound familiar.\n\n<Note>\n\nThe `initialValue` can be a function - in this case it will be called to compute the initial value.\n\n</Note>\n\n### A reducer function\n\n`reducer` is the function to call for each value in the (grouped) data array. It is called with the following arguments:\n\n- `accumulator` - the value returned by the previous call to the reducer function, or the `initialValue` if this is the first call. You return the new accumulator value from this function.\n- `value` - the value of the current item in the data array. If the aggregation has a `field`, this is the value of that field in the current item. Otherwise, value is the result of calling the `reducer.getter(data)` function (if one exists) or null if no getter is defined.\n- `dataItem` - the current item in the data array.\n- `index` - the index of the current item in the data array.\n\n### A `field` property or a `getter` function\n\nFor simple use-cases of client-side aggregations, a `field` is the way to go. This defines the field property (from the DATA_TYPE) to which the aggregation is bound.\n\nFor more complex scenarios, the aggregation should have a `getter` function. If both a `field` and a `getter` are provided, the `getter` has higher priority and will be used.\n\nUse this `getter` function to compute the value the current item in the array brings to the aggregation.\n\n```tsx title=\"Aggregation_custom_getter_function\"\n// useful for retrieving nested values\n\ngetter: (dataItem: Developer) => data.salary.net;\n```\n\n<Note>\n\nFor using nested values inside aggregations, use the aggregation `getter` function.\n\n</Note>\n\n### A completion `done` function\n\nThe completion `done` function is optional - if specified, will be after iterating over all the values in the grouped data array. Can be used to change the final result of the aggregation. It is called with the following arguments:\n\n- `accumulator` - the value returned by the last call to the reducer function\n- `data` - the grouped data array.\n  This is useful for computing averages, for example:\n\n```tsx title=\"Done function for avg reducer\"\ndone: (acc, data) => acc / data.length;\n```\n\n### Putting it all together\n\nLet's take a look at a simple example of aggregating two columns, one to display the avg and the other one should compute the sum of the salary column for grouped rows.\n\n```tsx title=\"Average Aggregation\"\nimport { DataSource, InfiniteTable } from '@infinite-table/infinite-react';\n\nconst sum = (a: number, b: number) => a + b;\n\nconst reducers = {\n  avg: {\n    initialValue: 0,\n    field: 'age',\n    reducer: sum,\n    done: (acc, data) => Math.round(acc / data.length),\n  },\n\n  sumAgg: {\n    initialValue: 0,\n    field: 'salary',\n    reducer: sum\n  }\n}\n\nfunction App() {\n  return <DataSource<Developer>\n    aggregationReducers={reducers}\n  >\n    <InfiniteTable<Developer> {...} />\n  </DataSource>\n}\n```\n\nIn the above example, note that aggregations are an object where the keys of the object are used to identify the aggregation and the values are the aggregation configuration objects, as described above.\n\n<Note>\n\nAt run-time, you have access to the aggregation reducer results inside group rows - you can use the `rowInfo.reducerResults` object to access those values. For the example above, you change how group rows are rendered for a certain column and display the aggregation results in a custom way:\n\n```tsx {9} title=\"Custom_group_row_rendering_for_the_country_column\"\n\ncountry: {\n  field: 'country',\n\n  // define a custom renderGroupValue fn for the country column\n\n  renderGroupValue: ({ rowInfo }) => {\n    const { reducerResults = {} } = rowInfo;\n    // note the keys in the reducerResults objects match the keys in the aggregationReducers object\n    return `Avg age: ${reducerResults.avg}, total salary ${reducerResults.sumAgg}`;\n  },\n},\n```\n\n</Note>\n\n<Sandpack title=\"Sum and average aggregation example\">\n\n```ts file=\"aggregations-simple-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Server-Side Aggregations\n\nServer-side aggregations are defined in the same way as client-side aggregations (except the `reducer` function is missing), but the aggregation values are computed by the server and returned as part of the data response.\n\nFor computing the grouping and aggregations on the server, the backend needs to know the grouping and aggregation configuration. As such, Infinite Table will call the <DPropLink name=\"data\" code={false}>DataSource data</DPropLink> function with an object that contains all the required info:\n\n- `groupBy` - the array of grouping fields, as passed to the `<DataSource />` component.\n- `pivotBy` - the array of pivot fields, as passed to the `<DataSource />` component.\n- `aggregationReducers` - the value of the <DPropLink name=\"aggregationReducers\" /> prop, as configured on the `<DataSource />` component.\n- `sortInfo` - the current <DPropLink name=\"sortInfo\" code={false}>sorting information</DPropLink> for the data.\n\nFor the lazy-loading use-case, there are other useful properties you can use from the object passed into the `data` function:\n\n- `groupKeys: string[]` - the group keys for the current group - the `data` fn is generally called lazily when the user expands a group row. This info is useful for fetching the data for a specific group.\n- `lazyLoadStartIndex` - provided when batching is also enabled via the <DPropLink name=\"lazyLoad\" /> prop. This is the index of the first item in the current batch.\n- `lazyLoadBatchSize` - also used when batching is enabled. This is the number of items in the current batch.\n\nBesides the above information, if filtering is used, a `fiterValue` is also made available.\n\nIn order to showcase the server-side aggregations, let's build an example similar to the above one, but let's lazily load group data.\n\n```tsx {2} title=\"DataSourcewith lazyLoad enabled\"\n<DataSource\n  lazyLoad\n  ...\n/>\n```\n\nAs soon a grouping and aggregations are no longer computed on the client, your `data` function needs to send those configurations on the backend, so it needs to get a bit more complicated:\n\n```tsx title=\"Data_function_sending_configurations_to_the_backend\"\nconst data = ({ groupBy, aggregationReducers, sortInfo, groupKeys }) => {\n   // it's important to send the current group keys - for top level, this will be []\n  const args: string[] = [`groupKeys=${JSON.stringify(groupKeys)}`];\n\n  // turn the sorting info into an array\n  if (sortInfo && !Array.isArray(sortInfo)) {\n    sortInfo = [sortInfo];\n  }\n\n  if (sortInfo) {\n    // the backend expects the sort info to be an array of field,dir pairs\n    args.push(\n      'sortInfo=' +\n        JSON.stringify(\n          sortInfo.map((s) => ({\n            field: s.field,\n            dir: s.dir,\n          })),\n        ),\n    );\n  }\n\n  if (groupBy) {\n    // for grouping, send an array of objects with the `field` property\n    args.push(\n      'groupBy=' + JSON.stringify(groupBy.map((p) => ({ field: p.field }))),\n    );\n  }\n\n  if (aggregationReducers) {\n    args.push(\n      'reducers=' +\n        JSON.stringify(\n          // by convention, we send an array of reducers, each with `field` `name`(= \"avg\") and `id`\n          // it's up to you to decide what the backend needs\n          Object.keys(aggregationReducers).map((key) => ({\n            field: aggregationReducers[key].field,\n            id: key,\n            name: aggregationReducers[key].reducer,\n          })),\n        ),\n    );\n  }\n\n  const url = BASE_URL + `/developers10k-sql?` + args.join('&');\n  return fetch(url).then(r=>r.json())\n}\n\n<DataSource\n  data={data}\n  lazyLoad\n  ...\n/>\n```\n\nWhen fetching without grouping (or with local grouping and aggregations), the `<DataSource />` component expects a flat array of data items coming from the server.\n\nHowever, when the grouping is happening server-side, the `<DataSource />` component expects a response that has the following shape:\n\n- `data` - the root array with grouping and aggregation info. Each item in the array should have the following:\n  - `keys` - an array of the keys for the current group - eg `['USA']` or `['USA', 'New York']`\n  - `data` - an object with all the common values for the group - eg `{ country: 'USA' }` or `{ country: 'USA', city: 'New York' }`\n  - `aggregations` - an object with the aggregation values for the group - eg `{ age: 30, salary: 120300 }`. The keys in this object should match the keys in the <DPropLink name=\"aggregationReducers\" /> object.\n  - `pivot` - pivoting information for the current group - more on that on the dedicated [Pivoting page](./pivoting/overview).\n\nWhen the user is expanding the last level, in order to see the leaf rows, the shape of the response is expected to be the same as when there is no grouping - namely an array of data items or an object where the `data` property is an array of data items.\n\nLet's put all of this into a working example.\n\n<Sandpack>\n\n<Description>\n\nThis showcases grouping and aggregations on the server - both the `age` and `salary` columns have an AVG aggregation defined.\n\nGrouping is done by the `country`, `city` and `stack` columns.\n\n</Description>\n\n```tsx file=\"grouping-and-aggregations-with-lazy-load-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nWhen the user is doing a sort on the table, the `<DataSource />` is fetched from scratch, but the expanded/collapsed state is preserved, and all the required groups that need to be re-fetched are reloaded as needed (if they are not eagerly included in the served data).\n\n</Note>\n"
    },
    {
      "filePath": "/docs/learn/grouping-and-pivoting/grouping-rows",
      "routePath": "/docs/learn/grouping-and-pivoting/grouping-rows",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/grouping-and-pivoting/grouping-rows.page.md",
      "fileName": "grouping-rows.page.md",
      "folderPath": "/docs/learn/grouping-and-pivoting/",
      "frontmatter": {
        "title": "Grouping rows"
      },
      "excerpt": "You can use any `field` available in the `DataSource` to do the grouping - it can even be a `field` that is not a column.",
      "readingTime": "15 min read",
      "content": "\nYou can use any `field` available in the `DataSource` to do the grouping - it can even be a `field` that is not a column.\n\n<Note>\n\nWhen using TypeScript, both `DataSource` and `InfiniteTable` components are generic and need to be rendered/instantiated with a `DATA_TYPE` parameter. The fields in that `DATA_TYPE` can then be used for grouping.\n\n</Note>\n\n```tsx\ntype Person = {\n  name: string;\n  age: number;\n  country: string;\n  id: string;\n}\n\nconst groupBy = [{field: 'country'}]\n\n<DataSource<Person> groupBy={groupBy}>\n  <InfiniteTable<Person> />\n</DataSource>\n\n```\n\nIn the example above, we're grouping by `country`, which is a field available in the `Person` type. Specifying a field not defined in the `Person` type would be a type error.\n\nAdditionally, a `column` object can be used together with the `field` to define how the group column should be rendered.\n\n```tsx {4}\nconst groupBy = [\n  {\n    field: 'country',\n    column: {\n      // custom column configuration for group column\n      width: 150,\n      header: 'Country group',\n    },\n  },\n];\n```\n\nThe example below puts it all together.\n\nAlso see the <DataSourcePropLink name=\"groupBy\" code={false}>groupBy API reference</DataSourcePropLink> to find out more.\n\n<Sandpack title=\"Simple row grouping\">\n\n```ts file=\"row-grouping-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nIn `groupBy.column` you can use any column property - so, for example, you can define a custom `renderValue` function to customize the rendering.\n\n```tsx {5}\nconst groupBy = [\n  {\n    field: 'country',\n    column: {\n      renderValue: ({ value }) => <>Country: {value}</>,\n    },\n  },\n];\n```\n\n<Note>\n\nThe generated group column(s) - can be one for all groups or one for each group - will inherit the `style`/`className`/renderers from the columns corresponding to the group fields themselves (if those columns exist).\n\nAdditionally, there are other ways to override those inherited configurations, in order to configure the group columns:\n\n- use <PropLink name=\"groupBy.column\" /> to specify how each grouping column should look for the respective field (in case of <PropLink name=\"groupRenderStrategy\">groupRenderStrateg=\"multi-column\"</PropLink>)\n- use <PropLink name=\"groupColumn\" /> prop\n  - can be used as an object - ideal for when you have simple requirements and when <PropLink name=\"groupRenderStrategy\">groupRenderStrateg=\"single-column\"</PropLink>\n  - as a function that returns a column configuration - can be used like this in either single or multiple group render strategy\n\n</Note>\n\n## Controlling the collapse/expand state\n\nWhen you do grouping, by default, all row groups are expanded. Of course you have full control over this and you do this via the <DPropLink name=\"groupRowsState\" />/<DPropLink name=\"defaultGroupRowsState\" /> props.\n\nIf you simply want to specify the initial expanded/collapsed state, you should use the <DPropLink name=\"defaultGroupRowsState\" /> prop.\n\n```tsx title=\"Specifying the default state for group rows\"\nconst defaultGroupRowsState: DataSourcePropGroupRowsStateObject = {\n  collapsedRows: true,\n  expandedRows: [['Mexico'], ['Mexico', 'backend'], ['India']],\n};\n```\n\nThe two properties in this object are `collapsedRows` and `expandedRows`, and each can have the following values:\n - `true` - meaning that all groups have this state\n - an array of arrays - representing the exceptions to the default value\n\n\nSo if you have `collapsedRows` set to `true` and then `expandedRows` set to `[['Mexico'], ['Mexico', 'backend'], ['India']]` then all rows are collapsed by default, except the rows specified in the `expandedRows`.\n\n\n<Sandpack title=\"Everything is collapsed except a few rows\">\n\n```ts file=\"row-grouping-state-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nYou can specify expand/collapse state at any level of nesting.\n\nLet's suppose by default all rows are collapsed - if you want a node to be visible then you have to specify all its parents as expanded.\n\nSo having this\n```tsx \nconst defaultGroupRowsState = {\n  collapsedRows: true,\n  expandedRows: [['Mexico', 'backend']],\n};\n```\nwill show all rows as collapsed, and just as soon as you expand `Mexico` you will see the `backend` group row for Mexico to be expanded.\n</Note>\n\nThis data format gives you ultimate flexibility and allows you to easily restore an expand/collpase state at a later time, if you wanted to.\n\n<Note>\nIf you use the controlled <DPropLink name=\"groupRowsState\" />, make sure you update it by leveraging the <DPropLink name=\"onGroupRowsStateChange\" /> callback prop.\n</Note>\n\n\n<Sandpack title=\"Using controlled expanded/collapsed state for group rows\">\n\n```ts file=\"row-grouping-state-controlled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nIn addition to simple objects with the shape described above, the <DPropLink name=\"groupRowsState\" />/<DPropLink name=\"defaultGroupRowsState\" /> can also be instanges of `GroupRowsState` class, which is exported by the Infinite Table package. This class is simply a wrapper around those objects, but it gives you additional utility methods.\n\n<Note>\n\nThe <DPropLink name=\"onGroupRowsStateChange\" /> callback gives you an instance of <DPropLink name=\"GroupRowsState\" /> back as the single argument. If you're using plain objects, just do `groupRowsState.getState()` and you'll get the corresponding plain object for the current expand/collapse state.\n\n<TypeLink name=\"GroupRowsState\" /> give you some additional helper methods, which you can read about <TypeLink name=\"GroupRowsState\">here</TypeLink>\n</Note>\n\n## Grouping strategies\n\nMultiple grouping strategies are supported by, `InfiniteTable` DataGrid:\n\n- multi column mode - multiple group columns are generated, one for each specified group field\n- single column mode - a single group column is generated, even when there are multiple group fields\n\nYou can specify the rendering strategy explicitly by setting the <PropLink name=\"groupRenderStrategy\" /> property to any of the following: `multi-column`, `single-column`. If you don't set it explicitly, it will choose the best default based on your configuration.\n\n### Multiple groups columns\n\nWhen grouping by multiple fields, by default the component will render a group column for each group field\n\n```tsx\nconst groupBy = [\n  {\n    field: 'age',\n    column: {\n      width: 100,\n      renderValue: ({ value }) => <>Age: {value}</>,\n    },\n  },\n  {\n    field: 'companyName',\n  },\n  {\n    field: 'country',\n  },\n];\n```\n\nLet's see an example of how the component would render the table with the multi-column strategy.\n\n<Sandpack title=\"Multi-column group render strategy\">\n\n```ts files=[\"row-grouping-multi-column-example.page.tsx\",\"columns.ts\"]\n\n```\n\n</Sandpack>\n\nFor the `multi-column` strategy, you can use <PropLink name=\"hideEmptyGroupColumns\" /> in order to hide columns for groups which are currently not visible.\n\n<Sandpack title=\"Hide Empty Group Columns\">\n\n```ts files=[\"$DOCS/reference/hideEmptyGroupColumns-example.page.tsx\",\"$DOCS/reference/employee-columns.ts\"]\n\n```\n\n</Sandpack>\n\n<Note>\n\nYou can specify an `id` for group columns. This is helpful if you want to size those columns (via <PropLink name=\"columnSizing\" />) or pin them (via <PropLink name=\"columnPinning\" />) or configure them in other ways. If no `id` is specified, it will be generated like this: `\"group-by-${field}\"`\n\n</Note>\n\n### Single group column\n\nYou can group by multiple fields, yet only render a single group column. To choose this rendering strategy, specify <PropLink name=\"groupRenderStrategy\" /> property to be `single-column` (or specify <PropLink name=\"groupColumn\" /> as an object.)\n\nIn this case, you can't override the group column for each group field, as there's only one group column being generated. However, you can specify a <PropLink name=\"groupColumn\" /> property to customize the generated column.\n\n<Note>\n\nBy default the generated group column will \"inherit\" many of the properties (the column style or className or renderers) of the columns corresponding to the group fields (if such columns exist, because it's not mandatory that they are defined).\n\n</Note>\n\n<Sandpack title=\"Single-column group render strategy\">\n\n```ts files=[\"row-grouping-single-column-example.page.tsx\",\"columns.ts\"]\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf <PropLink name=\"groupColumn\" /> is specified to an object and no <PropLink name=\"groupRenderStrategy\" /> is passed, the render strategy will be `single-column`.\n\n<PropLink name=\"groupColumn\" /> can also be a function, which allows you to individually customize each group column - in case the `multi-column` strategy is used.\n\n</Note>\n\n<Note>\n\nYou can specify an `id` for the single <PropLink name=\"groupColumn\" />. This is helpful if you want to size this column (via <PropLink name=\"columnSizing\" />) or pin it (via <PropLink name=\"columnPinning\" />) or configure it in other ways. If no `id` is specified, it will default to `\"group-by\"`.\n\n</Note>\n\n## Customizing the group column\n\nThere are many ways to customize the group column(s) and we're going to show a few of them below:\n\n### Binding the group column to a `field`\n\nBy default, group columns only show values in the group rows - but they are normal columns, so why not bind them to a <PropLink name=\"columns.field\" code={false}>field</PropLink> of the `DATA_TYPE`?\n\n```tsx {6,11}\nconst groupColumn = {\n  id: 'the-group', // can specify an id\n  style: {\n    color: 'tomato',\n  },\n  field: 'firstName', // non-group rows will render the first name\n};\nconst columns = {\n  theFirstName: {\n    field: 'firstName',\n    style: {\n      // this style will also be applied in the group column,\n      // since it is bound to this same `field`\n      fontWeight: 'bold',\n    },\n  },\n};\n```\n\nThis makes the column display the value of the `field` in non-group/normal rows. Also, if you have another column bound to that `field`, the renderers/styling of that column will be used for the value of the group column, in non-group rows.\n\n<Sandpack title=\"Bind group column to a field\">\n\n```ts file=\"$DOCS/reference/bind-group-column-to-field-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Use `groupColumn` to customize rendering\n\nThe <PropLink name=\"groupColumn\" /> will inherit its own rendering and styling from the columns that are bound to the fields used in <DataSourcePropLink name=\"groupBy.field\" />. However, you can override any of those properties so you have full control over the rendering process.\n\n```tsx {3,6}\nconst groupColumn = {\n  field: 'firstName',\n  renderGroupValue: ({ value }) => {\n    return `Group: ${value}`;\n  },\n  renderLeafValue: ({ value }) => {\n    return `First name: ${value}`;\n  },\n};\n```\n\n<Sandpack title=\"Customize group column renderer\">\n\n<Description>\n\nThe column that renders the `firstName` has a custom renderer that adds a `.` at the end.\nThe group column is bound to the same `firstName` field, but specifies a different renderer, which will be used instead.\n\n</Description>\n\n```ts file=\"$DOCS/reference/group-column-custom-renderers-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<HeroCards>\n<YouWillLearnCard title=\"Column rendering\" path=\"../columns/column-rendering\">\nLearn more about customizing column rendering via multiple renderer functions.\n</YouWillLearnCard>\n</HeroCards>\n\n## Hiding columns when grouping\n\nWhen grouping is enabled, you can choose to hide some columns. Here are the two main ways to do this:\n\n- use <PropLink name=\"hideColumnWhenGrouped\" /> - this will make columns bound to the group fields be hidden when grouping is active\n- use <PropLink name=\"columns.defaultHiddenWhenGroupedBy\" /> (also available on the column types, as <PropLink name=\"columnTypes.defaultHiddenWhenGroupedBy\" />) - this is a column-level property, so you have more fine-grained control over what is hidden and when.\n\nValid values for <PropLink name=\"columns.defaultHiddenWhenGroupedBy\" /> are:\n\n- `\"*\"` - when any grouping is active, hide the column that specifies this property\n- `true` - when the field this column is bound to is used in grouping, hides this column\n- `keyof DATA_TYPE` - specify an exact field that, when grouped by, makes this column be hidden\n- `{[k in keyof DATA_TYPE]: true}` - an object that can specify more fields. When there is grouping by any of those fields, the current column gets hidden.\n\n<Sandpack title=\"Hide columns when grouping\">\n\n<Description>\n\nIn this example, the column bound to `firstName` field is set to hide when any grouping is active, since the group column is anyways found to the `firstName` field.\n\nIn addition, <PropLink name=\"hideColumnWhenGrouped\" /> is set to `true`, so the `stack` and `preferredLanguage` columns are also hidden, since they are grouped by.\n\n</Description>\n\n```ts file=\"$DOCS/reference/hide-columns-when-grouping-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Sorting the group column\n\nWhen <PropLink name=\"groupRenderStrategy\">groupRenderStrategy=\"single-column\"</PropLink> is used, the group column is sortable by default if all the columns that are involved in grouping are sortable. Sorting the group column makes the `sortInfo` have a value that looks like this:\n\n```ts\nconst sortInfo = [\n  {\n    dir: 1,\n    id: 'group-by',\n    field: ['stack', 'age'],\n    type: ['string', 'number'],\n  },\n];\n```\n\n<PropLink name=\"groupRenderStrategy\">groupRenderStrategy=\"multi-column\"</PropLink>, each group column is sortable by default if the column with the corresponding field is sortable.\n\n <Note>\n\nThe <PropLink name=\"columnDefaultSortable\" /> property can be used to override the default behavior.\n\n </Note>\n\n<Sandpack title=\"Group column with initial descending sorting\">\n\n```ts file=\"$DOCS/reference/group-column-sorted-initially-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nWhen a group column is configured and the `groupBy` fields are not bound to actual columns in the table, the group column will not be sortable by default.\n\nIf you want to make it sortable, you have to specify a <PropLink name=\"columns.sortType\" /> array, of the same length as the `groupBy` array, that specifies the sort type for each group field.\n\n</Note>\n\n## Aggregations\n\nWhen grouping, you can also aggregate the values of the grouped rows. This is done via the <DataSourcePropLink name=\"aggregationReducers\" code>DataSource.aggregationReducers</DataSourcePropLink> property. See the example below\n\n<Sandpack title=\"Grouping with aggregations\">\n\n```ts file=\"grouping-with-aggregations-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nEach <DataSourcePropLink name=\"aggregationReducers\" code={false}>reducer</DataSourcePropLink> from the `aggregationReducers` map can have the following properties:\n\n- `field` - the field to aggregate on\n- `getter(data)` - a value-getter function, if the aggregation values are are not mapped directly to a `field`\n- `initialValue` - the initial value to start with when computing the aggregation (for client-side aggregations only)\n- `reducer: string | (acc, current, data: DATA_TYPE, index)=>value` - the reducer function to use when computing the aggregation (for client-side aggregations only). For server-side aggregations, this will be a `string`\n- `done(value, arr)` - a function that is called when the aggregation is done (for client-side aggregations only) and returns the final value of the aggregation\n- `name` - useful especially in combination with <DataSourcePropLink name=\"pivotBy\" />, as it will be used as the pivot column header.\n\nIf an aggregation reducer is bound to a `field` in the dataset, and there is a column mapped to the same `field`, that column will show the corresponding aggregation value for each group row, as shown in the example above.\n\n<Note>\n\nIf you want to prevent the user to expand the last level of group rows, you can override the `render` function for the group column\n\n<Sandpack title=\"Customized group expand on last group level\">\n\n```ts file=\"grouping-with-aggregations-discard-expand-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Note>\n\n<HeroCards>\n<YouWillLearnCard title=\"Aggregations\" path=\"group-aggregations\">\nDive deeper into the aggregation reducers and how they work.\n</YouWillLearnCard>\n</HeroCards>\n\n## Server side grouping with lazy loading\n\nLazy loading becomes all the more useful when working with grouped data.\n\nThe `DataSource` <DataSourcePropLink name=\"data\"/> function is called with an object that has all the information about the current `DataSource` state(grouping/pivoting/sorting/lazy-loading, etc) - see the paragraphs above for details.\n\nServer side grouping needs two kinds of data responses in order to work properly:\n\n- response for **non-leaf row groups** - these are groups that have children. For such groups (including the top-level group), the `DataSource.data` function must return a promise that's resolved to an object with the following properties:\n  - `totalCount` - the total number of records in the group\n  - `data` - an array of objects that describes non-leaf child groups, each object has the following properties:\n    - `keys` - an array of the group keys (usually strings) that uniquely identifies the group, from the root to the current group\n    - `data` - an object that describes the common properties of the group\n    - `aggregations` - an object that describes the aggregations for the current group\n- response for **leaf rows** - these are normal rows - rows that would have been served in the non-grouped response. The resolved object should have the following properties:\n  - `data` - an array of objects that describes the rows\n  - `totalCount` - the total number of records on the server, that are part of the current group\n\nHere's an example, that assumes grouping by `country` and `city` and aggregations by `age` and `salary` (average values):\n\n```tsx\n//request:\ngroupKeys: [] // empty keys array, so it's a top-level group\ngroupBy: [{\"field\":\"country\"},{\"field\":\"city\"}]\nreducers: [{\"field\":\"salary\",\"id\":\"avgSalary\",\"name\":\"avg\"},{\"field\":\"age\",\"id\":\"avgAge\",\"name\":\"avg\"}]\n// lazyLoadStartIndex: 0, - passed if lazyLoad is configured with a batchSize\n// lazyLoadBatchSize: 20 - passed if lazyLoad is configured with a batchSize\n\n//response\n{\n  cache: true,\n  totalCount: 20,\n  data: [\n    {\n      data: {country: \"Argentina\"},\n      aggregations: {avgSalary: 20000, avgAge: 30},\n      keys: [\"Argentina\"],\n    },\n    {\n      data: {country: \"Australia\"},\n      aggregations: {avgSalary: 25000, avgAge: 35},\n      keys: [\"Australia\"],\n    }\n    //...\n  ]\n}\n```\n\nNow let's expand the first group and see how the request/response would look like:\n\n```tsx\n\n//request:\ngroupKeys: [\"Argentina\"]\ngroupBy: [{\"field\":\"country\"},{\"field\":\"city\"}]\nreducers: [{\"field\":\"salary\",\"id\":\"avgSalary\",\"name\":\"avg\"},{\"field\":\"age\",\"id\":\"avgAge\",\"name\":\"avg\"}]\n\n//response\n{\n  totalCount: 4,\n  data: [\n    {\n      data: {country: \"Argentina\", city: \"Buenos Aires\"},\n      aggregations: {avgSalary: 20000, avgAge: 30},\n      keys: [\"Argentina\", \"Buenos Aires\"],\n    },\n    {\n      data: {country: \"Argentina\", city: \"Cordoba\"},\n      aggregations: {avgSalary: 25000, avgAge: 35},\n      keys: [\"Argentina\", \"Cordoba\"],\n    },\n    //...\n  ]\n}\n```\n\nFinally, let's have a look at the leaf/normal rows and a request for them:\n\n```tsx\n\n//request\ngroupKeys: [\"Argentina\",\"Buenos Aires\"]\ngroupBy: [{\"field\":\"country\"},{\"field\":\"city\"}]\nreducers: [{\"field\":\"salary\",\"id\":\"avgSalary\",\"name\":\"avg\"},{\"field\":\"age\",\"id\":\"avgAge\",\"name\":\"avg\"}]\n\n//response\n{\n  totalCount: 20,\n  data: [\n    {\n      id: 34,\n      country: \"Argentina\",\n      city: \"Buenos Aires\",\n      age: 30,\n      salary: 20000,\n      stack: \"full-stack\",\n      firstName: \"John\",\n      //...\n    },\n    {\n      id: 35,\n      country: \"Argentina\",\n      city: \"Buenos Aires\",\n      age: 35,\n      salary: 25000,\n      stack: \"backend\",\n      firstName: \"Jane\",\n      //...\n    },\n    //...\n  ]\n}\n```\n\n<Note>\n\nWhen a row group is expanded, since `InfiniteTable` has the group `keys` from the previous response when the node was loaded, it will use the `keys` array and pass them to the `DataSource.data` function when requesting for the children of the respective group.\n\nYou know when to serve last-level rows, because in that case, the length of the `groupKeys` array will be equal to the length of the `groupBy` array.\n\n</Note>\n\n<Sandpack title=\"Server side grouping with lazy loding\">\n\n```ts file=\"server-side-grouping-with-lazy-load-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Eager loading for group row nodes\n\nWhen using lazy-loading together with batching, node data (without children) is loaded when a node (normal or grouped) comes into view. Only when a group node is expanded will its children be loaded. However, you can do this loading eagerly, by using the `dataset` property on the node you want to load.\n\n<Note>\n\nThis can be useful in combination with using `dataParams.groupRowsState` from the <DataSourcePropLink name=\"data\"/> function - so your datasource can know which groups are expanded, and thus it can serve those groups already loaded with children.\n\n</Note>\n\n```tsx {18}\n//request:\ngroupKeys: [] // empty keys array, so it's a top-level group\ngroupBy: [{\"field\":\"country\"},{\"field\":\"city\"}]\nreducers: [{\"field\":\"salary\",\"id\":\"avgSalary\",\"name\":\"avg\"},{\"field\":\"age\",\"id\":\"avgAge\",\"name\":\"avg\"}]\n// lazyLoadStartIndex: 0, - passed if lazyLoad is configured with a batchSize\n// lazyLoadBatchSize: 20 - passed if lazyLoad is configured with a batchSize\n\n//response\n{\n  cache: true,\n  totalCount: 20,\n  data: [\n    {\n      data: {country: \"Argentina\"},\n      aggregations: {avgSalary: 20000, avgAge: 30},\n      keys: [\"Argentina\"],\n      // NOTE this dataset property used for eager-loading of group nodes\n      dataset: {\n        // the shape of the dataset is the same as the one normally returned by the datasource\n        cache: true,\n        totalCount: 4,\n        data: [\n          {\n            data: {country: \"Argentina\", city: \"Buenos Aires\"},\n            aggregations: {avgSalary: 20000, avgAge: 30},\n            keys: [\"Argentina\", \"Buenos Aires\"],\n          },\n          {\n            data: {country: \"Argentina\", city: \"Cordoba\"},\n            aggregations: {avgSalary: 25000, avgAge: 35},\n            keys: [\"Argentina\", \"Cordoba\"],\n          },\n        ]\n      }\n    },\n    {\n      data: {country: \"Australia\"},\n      aggregations: {avgSalary: 25000, avgAge: 35},\n      keys: [\"Australia\"],\n    }\n    //...\n  ]\n}\n```\n"
    },
    {
      "filePath": "/docs/learn/grouping-and-pivoting/index",
      "routePath": "/docs/learn/grouping-and-pivoting/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/grouping-and-pivoting/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/learn/grouping-and-pivoting/",
      "frontmatter": {
        "title": "Grouping and Pivoting"
      },
      "excerpt": "Infinite Table comes with grouping and pivoting capabilities built-in. The `DataSource` component does the actual data grouping and pivoting - while the `InfiniteTable` component does the specialized rendering.",
      "readingTime": "1 min read",
      "content": "\nInfinite Table comes with grouping and pivoting capabilities built-in. The `DataSource` component does the actual data grouping and pivoting - while the `InfiniteTable` component does the specialized rendering.\n\n<HeroCards>\n<YouWillLearnCard title=\"Grouping Rows\" path=\"./grouping-and-pivoting/grouping-rows\">\nLearn row grouping and explore the possibilities.\n</YouWillLearnCard>\n<YouWillLearnCard title=\"Pivoting\" path=\"./grouping-and-pivoting/pivoting/overview\">\nRead thorough documentation covering pivoting and aggregation.\n</YouWillLearnCard>\n</HeroCards>\n\n<Sandpack title=\"Simple row grouping\">\n\n```ts files=[\"row-grouping-example.page.tsx\",\"columns.ts\"]\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/keyboard-navigation/keyboard-shortcuts",
      "routePath": "/docs/learn/keyboard-navigation/keyboard-shortcuts",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/keyboard-navigation/keyboard-shortcuts.page.md",
      "fileName": "keyboard-shortcuts.page.md",
      "folderPath": "/docs/learn/keyboard-navigation/",
      "frontmatter": {
        "title": "Keyboard Shorcuts",
        "description": "Infinite React DataGrid supports user-friendly keyboard shortcuts for executing custom actions.",
        "since": "3.3.3"
      },
      "excerpt": "The React DataGrid supports defining <PropLink name=\"keyboardShortcuts\" code={false}>keyboard shorcuts</PropLink> for performing custom actions.",
      "readingTime": "3 min read",
      "content": "\nThe React DataGrid supports defining <PropLink name=\"keyboardShortcuts\" code={false}>keyboard shorcuts</PropLink> for performing custom actions.\n\nA keyboard shortcut is defined as an object of the following shape:\n  \n```ts\n{\n  key: string;\n  when?: (context) => boolean | Promise<boolean>;\n  handler: (context, event) => void | Promise<void>;\n}\n```\n\nThe `key` definition is what you're used to from VS Code and other applications - it can be\n * a single character: `t`, `x`, etc...\n * a combination of characters (e.g. `Ctrl+Shift+p`,`Cmd+Shift+Enter`) - key modifiers are supported, and can be added with the `+` (plus) sign.\n * or a special key (e.g. `Enter`, `ArrowUp`, `ArrowDown`, ` ` (space), `Escape`, `Delete`, `Insert`, `PageDown`,`PageUp`,`F1`, `F2`, etc).\n\n Examples of valid shortcuts: `Cmd+Shift+e`, `Alt+Shift+Enter`, `Shift+PageDown`, `Ctrl+x`\n\n\n<Note>\n\nThere's a special key `*` that matches any key. This can be useful when you want to define a keyboard shortcut that should be triggered on any key press.\n\n</Note>\n\n<Note>\n\nAnother important key is the `Cmd|Ctrl` key, which matches both the `Cmd` key on Mac and the `Ctrl` key on Windows/Linux.\n\nExample combinations: `Cmd|Ctrl+Shift+Enter`, `Cmd|Ctrl+e`, `Cmd|Ctrl+Shift+i`.\n\n</Note>\n\n<Sandpack>\n\n<Description>\nClick on a cell and use the keyboard to navigate.\n\nPress `Shift+Enter` to show an alert with the current active cell position.\n\n</Description>\n\n```ts file=\"$DOCS/reference/keyboard-shortcuts-initial-example.page.tsx\"\n```\n</Sandpack>\n\n<Note>\n\nKeyboard shortcuts have a `when` optional property. If defined, it restricts when the `handler` function is called. The handler will only be called when the handler returns `true`.\n\n</Note>\n\n## Implementing Keyboard Shortcut Handlers\n\nBoth the `handler` function and the `when` function of a keyboard shorcut are called with an object that gives access to the following:\n - `api` - a reference to the [Infinite Table API](/docs/reference/api) object.\n - `dataSourceApi` - a reference to the [DataSource API](/docs/reference/datasource-api) object.\n - `getState` - a function that returns the current state of the grid.\n - `getDataSourceState` - a function that returns the current state of the data source.\n\nThe second parameter of the `handler` function is the `event` object that triggered the keyboard shortcut.\n\n## Predefined Keyboard Shortcuts\n\nInfinite Table DataGrid comes with some predefined keyboard shorcuts.\nyou can import from the `keyboardShortcuts` named export.\n```ts\nimport { keyboardShortcuts } from '@infinite-table/infinite-react'\n```\n\n### Instant Edit\n\n```ts {4,12}\nimport {\n  DataSource,\n  InfiniteTable,\n  keyboardShortcuts\n} from '@infinite-table/infinite-react';\n\n function App() {\n  return <DataSource<Developer> primaryKey=\"id\" data={dataSource}>\n    <InfiniteTable<Developer>\n      columns={columns}\n      keyboardShortcuts={[\n        keyboardShortcuts.instantEdit\n      ]}\n    />\n  </DataSource>\n}\n```\n\n\n<Note>\n\nFor now, the only predefined keyboard shorcut is `keyboardShortcuts.instantEdit`. This keyboard shorcut starts cell editing when any key is pressed on the active cell. This is the same behavior found in Excel/Google Sheets.\n\n</Note>\n\n<Sandpack>\n\n<Description>\n\nClick on a cell and then start typing to edit the cell.\n\n</Description>\n\n```ts file=\"$DOCS/reference/keyboard-shortcuts-instant-edit-example.page.tsx\"\n```\n</Sandpack>"
    },
    {
      "filePath": "/docs/learn/keyboard-navigation/navigating-cells",
      "routePath": "/docs/learn/keyboard-navigation/navigating-cells",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/keyboard-navigation/navigating-cells.page.md",
      "fileName": "navigating-cells.page.md",
      "folderPath": "/docs/learn/keyboard-navigation/",
      "frontmatter": {
        "title": "Keyboard Navigation for Table Cells",
        "description": "Documentation for Cell Keyboard Navigation for your React Infinite Table DataGrid component"
      },
      "excerpt": "By default, <PropLink name=\"keyboardNavigation\" code={false}>keyboard navigation</PropLink> for table cells is enabled in React Infinite Table. When a cell is clicked, it shows a highlight that indicates it is the currently active cell. From that point onwards, the user can use the keyboard to navigate the table cells.",
      "readingTime": "5 min read",
      "content": "\nBy default, <PropLink name=\"keyboardNavigation\" code={false}>keyboard navigation</PropLink> for table cells is enabled in React Infinite Table. When a cell is clicked, it shows a highlight that indicates it is the currently active cell. From that point onwards, the user can use the keyboard to navigate the table cells.\n\n<Sandpack>\n\n<Description>\n\nClick on a cell in the table and use the arrow keys to navigate around.\n\n</Description>\n\n```ts file=\"navigating-cells-initial-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\n- Use `ArrowUp` and `ArrowDown` to navigate to the previous and next cells vertically.\n- Use `ArrowLeft` and `ArrowRight` to navigate to the previous and next cells horizontally.\n\n---\n\n- Use `PageUp` and `PageDown` to navigate the cells vertically by pages (a page is considered equal to the visible row count).\n- Use `Shift+PageUp` and `Shift+PageDown` to navigate the cells horizontally by pages (a page is considered equal to the visible column count).\n\n---\n\n- Use `Home` and `End` to navigate vertically to the cell above (that's on the first row) and the cell below (that's on the last row),\n- Use `Shift+Home` and `Shift+End` to navigate horizontally to the first and respectively last cell in the current row.\n\n</Note>\n\n<YTEmbed code=\"D4_jFYkfsUI\" />\n\nKeyboard navigation is controlled by the <PropLink name=\"keyboardNavigation\" /> prop, which can be either `\"cell\"`, `\"row\"` or `false`. Navigating table cells is the default behavior.\n\n## Using a default active cell\n\nYou can also specify an initial active cell, by using <PropLink name=\"defaultActiveCellIndex\">defaultActiveCellIndex=[2,4]</PropLink>. This tells the table that there should be a default active cell, namely the one at index 2,4 (row 2, so third row; column 4, so fifth column).\n\n<Note>\n\nThe active cell should be an array of length 2, where the first number is the index of the row and the second number is the index of the column (both are zero-based).\n\n</Note>\n\n<Sandpack>\n\n<Description>\n\nThis example starts with cell `[2,0]` already active.\n\n</Description>\n\n```ts file=\"navigating-cells-uncontrolled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Listening to active cell changes\n\nYou can easily listen to changes in the cell navigation by using the <PropLink name=\"onActiveCellIndexChange\">onActiveCellIndexChange</PropLink> callback.\n\n<Note>\n\nWhen you use controlled <PropLink name=\"activeCellIndex\" />, make sure to use <PropLink name=\"onActiveCellIndexChange\">onActiveCellIndexChange</PropLink> to update the prop value, as otherwise the component will not update on navigation\n\n</Note>\n\n<Sandpack>\n\n<Description>\n\nThis example starts with cell `[2,0]` already active and uses <PropLink name=\"onActiveCellIndexChange\">onActiveCellIndexChange</PropLink> to update <PropLink name=\"activeCellIndex\" />.\n\n</Description>\n\n```ts file=\"navigating-cells-controlled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Toggling group rows\n\nWhen the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>, you can use the keyboard to collapse/expand group rows, by pressing the `Enter` key on the active row.\n\n<Note>\n\nYour active cell doesn't need to be in the group column in order for `Enter` key to collapse/expand the group row - being on a group row is enough.\n\n</Note>\n\n<Sandpack>\n\n<Description>\n\nPress the `Enter` key on the active group row to toggle it.\n\n</Description>\n\n```ts file=\"$DOCS/reference/keyboard-toggle-group-rows-cell-nav.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Selecting Rows with the Keyboard\n\nWhen <DPropLink name=\"rowSelection\" /> is enabled (read more about it in the [row selection page](../selection/row-selection)), you can use the spacebar key to select a group row (or `shift` + spacebar to do multiple selection).\n\nBy default <PropLink name=\"keyboardSelection\" /> is enabled, so you can use the **spacebar** key to select multiple rows, when <DPropLink name=\"selectionMode\">selectionMode=\"multi-row\"</DPropLink>. Using the spacebar key is equivalent to doing a mouse click, so expect the combination of **spacebar** + `cmd`/`ctrl`/`shift` modifier keys to behave just like clicking + the same modifier keys.\n\n<Sandpack title=\"Multi row selection with keyboard support\">\n\n<Description>\n\nUse spacebar + optional `cmd`/`ctrl`/`shift` modifier keys just like you would do clicking + the same modifier keys.\n\n</Description>\n\n```ts file=\"$DOCS/reference/default-selection-mode-multi-row-keyboard-toggle-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nFor selection all the rows in the table, you can use `cmd`/`ctrl` + `A` keyboard shortcut.\n\n</Note>\n\n<Note>\n\nKeyboard selection is also possible when there's a column configured with checkbox selection - [make sure you read more about it](../selection/row-selection#using-a-selection-checkbox).\n\n</Note>\n\n## Theming\n\nThere are a number of ways to customize the appearance of the element that highlights the active cell.\n\nThe easiest is to override those three CSS variables:\n\n- `--infinite-active-cell-border-color--r` - the `red` component of the border color\n- `--infinite-active-cell-border-color--g` - the `green` component of the border color\n- `--infinite-active-cell-border-color--b` - the `blue` component of the border color\n\nThe initial values for those are `77`, `149` and`215` respectively, so the border color is `rgb(77, 149, 215)`.\nIn addition, the background color of the active cell highlight element is set to the same color as the border color (computed based on the above `r`, `g` and `b` variables), but with an opacity of `0.25`, configured via the `--infinite-active-cell-background-alpha` CSS variable.\n\nWhen the table is not focused, the opacity for the background color is set to `0.1`, which is the default value of the `--infinite-active-cell-background-alpha--table-unfocused` CSS variable.\n\n<Note>\n \nTo summarize, use\n\n- `--infinite-active-cell-border-color--r`\n- `--infinite-active-cell-border-color--g`\n- `--infinite-active-cell-border-color--b`\n\nto control border and background color of the active cell highlight element.\n\n</Note>\n\nThere are other CSS variables as well, that give you fined-tuned control over both the border and background color for the active cell, if you don't want to use the above three variables to propagate the same color across both border and background.\n\n- `--infinite-active-cell-background` - the background color. If you use this, you need to set opacity yourself.\n- `--infinite-active-cell-border` - border configuration (eg:`2px solid magenta`). If you use this, it will not be propagated to the background color.\n\n<Sandpack title=\"Theming active cell highlight\">\n\n<Description>\n\nUse the color picker to configured the desired color for the active cell highlight\n\n</Description>\n\n```ts file=\"navigating-cells-theming-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/keyboard-navigation/navigating-rows",
      "routePath": "/docs/learn/keyboard-navigation/navigating-rows",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/keyboard-navigation/navigating-rows.page.md",
      "fileName": "navigating-rows.page.md",
      "folderPath": "/docs/learn/keyboard-navigation/",
      "frontmatter": {
        "title": "Keyboard Navigation for Table Rows"
      },
      "excerpt": "To enable keyboard navigation for table rows, specify <PropLink name=\"keyboardNavigation\">keyboardNavigation=\"row\"</PropLink> in your React Infinite Table component.",
      "readingTime": "5 min read",
      "content": "\nTo enable keyboard navigation for table rows, specify <PropLink name=\"keyboardNavigation\">keyboardNavigation=\"row\"</PropLink> in your React Infinite Table component.\n\nWhen row navigation is enabled, clicking a row highlights it and the user can use the arrow keys to navigate the table rows.\n\n<Sandpack>\n\n<Description>\n\nClick on the table and use the arrow keys to navigate the rows.\n\n</Description>\n\n```ts file=\"navigating-rows-initial-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\n- Use `ArrowUp` and `ArrowDown` to navigate to the previous and next row.\n- Use `PageUp` and `PageDown` to navigate the rows vertically by pages (a page is considered equal to the visible row count).\n- Use `Home` and `End` to navigate vertically to the first and last row respectively\n\n</Note>\n\nOther possible values for the <PropLink name=\"keyboardNavigation\" /> prop, besides `\"row\"`, are `\"cell\"` and `false`.\n\n## Using a default active row\n\nYou can also specify an initial active row, by using <PropLink name=\"defaultActiveRowIndex\">defaultActiveRowIndex=2</PropLink>. This tells the table that there should be a default active row, namely the one at index 2 (so the third row).\n\n<Sandpack>\n\n<Description>\n\nThis example starts with row at index `2` already active.\n\n</Description>\n\n```ts file=\"navigating-rows-uncontrolled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Listening to active row changes\n\nYou can easily listen to changes in the row navigation by using the <PropLink name=\"onActiveRowIndexChange\" /> callback.\n\n<Note>\n\nWhen you use controlled <PropLink name=\"activeRowIndex\" />, make sure to use <PropLink name=\"onActiveRowIndexChange\">onActiveRowIndexChange</PropLink> to update the prop value, as otherwise the component will not update on navigation\n\n</Note>\n\n<Sandpack>\n\n<Description>\n\nThis example starts with row at index `2` already active and uses <PropLink name=\"onActiveRowIndexChange\">onActiveRowIndexChange</PropLink> to update <PropLink name=\"activeRowIndex\" />.\n\n</Description>\n\n```ts file=\"navigating-rows-controlled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Toggling group rows\n\nWhen the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>, you can use the keyboard to collapse/expand group rows, by pressing the `Enter` key on the active row.\n\n<Note>\n\nSince you're in row navigation mode, you can also use\n\n- `‚Üê` to collapse a group row\n- `‚Üí` to expand a group row\n\n</Note>\n\n<Sandpack>\n\n<Description>\n\nPress the `Enter` key on the active group row to toggle it. `ArrowLeft` will collapse a group row and `ArrowRight` will expand a group row.\n\n</Description>\n\n```ts file=\"$DOCS/reference/keyboard-toggle-group-rows.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Selecting Rows with the Keyboard\n\nWhen <DPropLink name=\"rowSelection\" /> is enabled (read more about it in the [row selection page](../selection/row-selection)), you can use the spacebar key to select a group row (or `shift` + spacebar to do multiple selection).\n\nBy default <PropLink name=\"keyboardSelection\" /> is enabled, so you can use the **spacebar** key to select multiple rows, when <DPropLink name=\"selectionMode\">selectionMode=\"multi-row\"</DPropLink>. Using the spacebar key is equivalent to doing a mouse click, so expect the combination of **spacebar** + `cmd`/`ctrl`/`shift` modifier keys to behave just like clicking + the same modifier keys.\n\n<Sandpack title=\"Multi row selection with keyboard support\">\n\n<Description>\n\nUse spacebar + optional `cmd`/`ctrl`/`shift` modifier keys just like you would do clicking + the same modifier keys.\n\n</Description>\n\n```ts file=\"$DOCS/reference/default-selection-mode-multi-row-keyboard-toggle-example-row-navigation.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nFor selection all the rows in the table, you can use `cmd`/`ctrl` + `A` keyboard shortcut.\n\n</Note>\n\n<Note>\n\nKeyboard selection is also possible when there's a column configured with checkbox selection - [make sure you read more about it](../selection/row-selection#using-a-selection-checkbox).\n\n</Note>\n\n## Theming\n\nBy default, the style of the element that highlights the active row is the same style as that of the element that highlights the active cell.\n\nThe easiest is to override the style is via those three CSS variables:\n\n- `--infinite-active-cell-border-color--r` - the `red` component of the border color\n- `--infinite-active-cell-border-color--g` - the `green` component of the border color\n- `--infinite-active-cell-border-color--b` - the `blue` component of the border color\n\nThe initial values for those are `77`, `149` and`215` respectively, so the border color is `rgb(77, 149, 215)`.\n\nIn addition, the background color of the element that highlights the active row is set to the same color as the border color (computed based on the above `r`, `g` and `b` variables), but with an opacity of `0.25`, configured via the `--infinite-active-row-background-alpha` CSS variable.\n\nWhen the table is not focused, the opacity for the background color is set to `0.1`, which is the default value of the `--infinite-active-row-background-alpha--table-unfocused` CSS variable.\n\n<Note>\n \nTo summarize, use\n\n- `--infinite-active-cell-border-color--r`\n- `--infinite-active-cell-border-color--g`\n- `--infinite-active-cell-border-color--b`\n\nto control border and background color of the active row highlight element.\n\nNo, it's not a mistake that the element that highlights the active row is configured via the same CSS variables as the element that highlights the active cell. This is deliberate - so override CSS variables for cell, and those are propagated to the row highlight element.\n\n</Note>\n\nThere are other CSS variables as well, that give you fined-tuned control over both the border and background color for the active row, if you don't want to use the above three variables to propagate the same color across both border and background.\n\n- `--infinite-active-cell-background` - the background color. If you use this, you need to set opacity yourself. Applied for both cell and row.\n- `--infinite-active-row-background` - the background color. If you use this, you need to set opacity yourself. If this is specified, it takes precendence over `--infinite-active-cell-background`\n- `--infinite-active-cell-background` - the background color. If you use this, you need to set opacity yourself. Applied for both cell and row.\n- `--infinite-active-row-background` - the background color. If this is specified, it takes precedence over `--infinite-active-cell-background`\n- `--infinite-active-row-border` - border configuration (eg:`2px solid magenta`). If you use this, it will not be propagated to the background color.\n\nFor more details on the CSS variables, see the [CSS Variables documentation](../theming/css-variables##active-row-background).\n\n<Sandpack title=\"Theming active row highlight\">\n\n<Description>\n\nUse the color picker to configured the desired color for the active row highlight\n\n</Description>\n\n```ts file=\"navigating-rows-theming-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/editing/column-editors",
      "routePath": "/docs/learn/editing/column-editors",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/editing/column-editors.page.md",
      "fileName": "column-editors.page.md",
      "folderPath": "/docs/learn/editing/",
      "frontmatter": {
        "title": "Column Editors",
        "description": "Learn how to use configure editors for columns in Infinite Table"
      },
      "excerpt": "For now, Infinite Table comes with a default built-in editor that's rendered when editing starts on any editable cell.",
      "readingTime": "2 min read",
      "content": "\nFor now, Infinite Table comes with a default built-in editor that's rendered when editing starts on any editable cell.\n\nIt's very easy to configure columns with your own custom editors via the <PropLink name=\"columns.components.Editor\" /> property.\n\n```tsx\nconst columns: InfiniteTablePropColumns<Developer> = {\n  canDesign: {\n    field: 'canDesign',\n    defaultEditable: true,\n    components: {\n      // don't forget to provide an implementation\n      // for the BoolEditor component\n      Editor: BoolEditor,\n    },\n  },\n  id: {\n    field: 'id',\n  },\n};\n```\n\n<Note title=\"No built-in custom editors!\">\n\nFor now, we're not shipping any extra editors with Infinite Table.\n\nThere are a few reasons for that:\n\n- we want to keep our bundle size small\n- we're aware people have their own preferences - especially **select/combo boxes** and **date pickers** are very complex components on their own and there are many different popular alternatives many teams already use in their projects\n\nSo in this page and other parts of the docs, we'll use some popular alternatives, to show how to integrate them with Infinite Table.\n\n</Note>\n\n## Using Date Editors\n\nA common use-case is integrating date editors, so in the following example we'll use the [MUI X Date Picker](https://mui.com/x/react-date-pickers/date-picker/) component.\n\n<Sandpack size=\"lg\" title=\"Using MUI X Date Picker for editing dates in the DataGrid\" deps=\"@emotion/react,@emotion/styled,@mui/material,@mui/x-date-pickers,dayjs\">\n\n<Description>\n\nThis is a basic example integrating with the [MUI X Date Picker](https://mui.com/x/react-date-pickers/date-picker/) - click any cell in the **Birth Date** column to show the date picker.\n\n</Description>\n\n```ts file=\"date-editor-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Configure Editors for Column Types\n\nWhen you have more than one column that needs to use the same editor, you can use the <PropLink name=\"columnTypes\" code={false}>column types</PropLink> and associate the editor with the column type.\n\nAfter defining your generic column types, make sure you assign them to the columns that need that specific type\n\n<Sandpack size=\"lg\" title=\"Using MUI X Date Picker with custom 'date' type columns\" deps=\"@emotion/react,@emotion/styled,@mui/material,@mui/x-date-pickers,dayjs\">\n\n<Description>\n\nThis is a basic example integrating with the [MUI X Date Picker](https://mui.com/x/react-date-pickers/date-picker/) - click any cell in the **Birth Date** or **Date Hired** columns to show the date picker.\n\nThis example uses the <PropLink name=\"columnTypes\" code={false}>column types</PropLink> to give each date column the same editor and styling.\n\n</Description>\n\n```ts file=\"column-types-date-editor-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/editing/custom-editor",
      "routePath": "/docs/learn/editing/custom-editor",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/editing/custom-editor.page.md",
      "fileName": "custom-editor.page.md",
      "folderPath": "/docs/learn/editing/",
      "frontmatter": {
        "title": "Custom Editor",
        "description": "Writing a custom editor for a inline editing in Infinite Table for React"
      },
      "excerpt": "For writing a custom editor, you can use the <HookLink name=\"useInfiniteColumnEditor\" /> hook.",
      "readingTime": "2 min read",
      "content": "\nFor writing a custom editor, you can use the <HookLink name=\"useInfiniteColumnEditor\" /> hook.\n\nFor any column (or <PropLink name=\"columnTypes\" code={false}>column type</PropLink> - which can then get applied to multiple columns), you can specify a custom editor component to be used for editing the column's value, via the <PropLink name=\"columns.components.editor\">column.components.editor</PropLink> property.\n\n```tsx {10}\nconst columns: InfiniteTablePropColumns<Developer> = {\n  id: {\n    field: 'id',\n    defaultEditable: false,\n  },\n  firstName: {\n    field: 'firstName',\n    components: {\n      // this is using a custom editor component\n      editor: CustomEditor,\n    },\n  },\n  age: {\n    field: 'age',\n    type: 'number',\n    defaultEditable: false,\n  },\n  stack: { field: 'stack' },\n  currency: { field: 'currency' },\n};\n```\n\nThe editor component should use the <HookLink name=\"useInfiniteColumnEditor\"/> hook to have access to cell-related information and to confirm, cancel or reject the edit.\n\n```tsx {3} title=\"CustomEditor.tsx\"\nimport { useInfiniteColumnEditor } from '@infinite-table/infinite-react';\nconst CustomEditor = () => {\n  const { initialValue, confirmEdit, cancelEdit } = useInfiniteColumnEditor();\n\n  const domRef = React.useRef<HTMLInputElement>(null);\n\n  const onKeyDown = useCallback((event: React.KeyboardEvent) => {\n    const { key } = event;\n    if (key === 'Enter' || key === 'Tab') {\n      confirmEdit(domRef.current?.value);\n    } else if (key === 'Escape') {\n      cancelEdit();\n    } else {\n      event.stopPropagation();\n    }\n  }, []);\n\n  return (\n    <div>\n      <input\n        style={{ width: '100%' }}\n        autoFocus\n        ref={domRef}\n        defaultValue={initialValue}\n        onKeyDown={onKeyDown}\n      />\n    </div>\n  );\n};\n```\n\n<Note>\n\nInside any custom editor component, you can use the <HookLink name=\"useInfiniteColumnCell\"/> hook to get access to the cell-related information.\n\n</Note>\n\n<Sandpack title=\"Using a custom editor\" >\n\n<Description>\n\nIn this example, the `salary` column is configured with a custom editor component.\n\n</Description>\n\n```ts file=\"custom-editor-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Using Custom Date Editors\n\nA common use-case is integrating date editors, so in the following example we'll use the [MUI X Date Picker](https://mui.com/x/react-date-pickers/date-picker/) component.\n\n<Sandpack size=\"lg\" title=\"Using MUI X Date Picker for editing dates in the DataGrid\" deps=\"@emotion/react,@emotion/styled,@mui/material,@mui/x-date-pickers,dayjs\">\n\n<Description>\n\nThis is a basic example integrating with the [MUI X Date Picker](https://mui.com/x/react-date-pickers/date-picker/) - click any cell in the **Birth Date** column to show the date picker.\n\n</Description>\n\n```ts file=\"date-editor-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/editing/excel-like-editing",
      "routePath": "/docs/learn/editing/excel-like-editing",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/editing/excel-like-editing.page.md",
      "fileName": "excel-like-editing.page.md",
      "folderPath": "/docs/learn/editing/",
      "frontmatter": {
        "title": "Excel-like Editing",
        "description": "Configuring the DataGrid to use Excel-like editing via keyboard shortcuts"
      },
      "excerpt": "InfiniteTable offers support for Excel-like editing. This means users can simply start typing in an editable cell and the editor is displayed and updated immediately (no `Enter` key is required to start typing).",
      "readingTime": "2 min read",
      "content": "\nInfiniteTable offers support for Excel-like editing. This means users can simply start typing in an editable cell and the editor is displayed and updated immediately (no `Enter` key is required to start typing).\n\nThis behavior is achieved by using the [Instant Edit keyboard shorcut](/docs/learn/keyboard-navigation/keyboard-shortcuts#instant-edit).\n\n\n```ts {4,12}\nimport {\n  DataSource,\n  InfiniteTable,\n  keyboardShortcuts\n} from '@infinite-table/infinite-react';\n\n function App() {\n  return <DataSource<Developer> primaryKey=\"id\" data={dataSource}>\n    <InfiniteTable<Developer>\n      columns={columns}\n      keyboardShortcuts={[\n        keyboardShortcuts.instantEdit\n      ]}\n    />\n  </DataSource>\n}\n```\n\nThe `instantEdit` keyboard shorcut is configured (by default) to respond to any key (via the special `*` identifier which matches anything) and will start editing the cell as soon as a key is pressed. This behavior is the same as in Excel, Google Sheets, Numbers or other spreadsheet software.\n\n<Sandpack>\n\n<Description>\n\nClick on a cell and then start typing to edit the cell.\n\n</Description>\n\n```ts file=\"$DOCS/reference/keyboard-shortcuts-instant-edit-example.page.tsx\"\n```\n\n</Sandpack>\n\n\n<Note>\n\nTo confirm the editing, press the `Enter` key.\n\n</Note>\n\n## Simulating formulas with `column.valueGetter`\n\nYou can use the <PropLink name=\"columns.valueGetter\" /> property to simulate formulas in your cells.\n\nFor example, you might want to have a column that multiplies or divides a value by a constant.\n\n```ts {6}\nconst columns = {\n  salary: {\n    field: 'salary'\n  },\n  salaryK: {\n    valueGetter: ({data}) => data.salary / 1000\n  }\n}\n```\n\n\n<Sandpack>\n\n<Description>\n\nEdit the `salary` column and see the `Salary (thousands)` col update.\n\n</Description>\n\n```ts file=\"$DOCS/reference/keyboard-shortcuts-instant-edit-with-valuegetter-example.page.tsx\"\n```\n\n</Sandpack>"
    },
    {
      "filePath": "/docs/learn/editing/inline-edit-flow",
      "routePath": "/docs/learn/editing/inline-edit-flow",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/editing/inline-edit-flow.page.md",
      "fileName": "inline-edit-flow.page.md",
      "folderPath": "/docs/learn/editing/",
      "frontmatter": {
        "title": "Inline Editing Flow",
        "description": "Flow chart of inline editing - understand the flow of operations when performing edits in Infinite Table for React"
      },
      "excerpt": "Editing is described in great detail in the [Inline Editing](/docs/learn/editing/inline-editing) page - so make sure you read that first.",
      "readingTime": "2 min read",
      "content": "\nEditing is described in great detail in the [Inline Editing](/docs/learn/editing/inline-editing) page - so make sure you read that first.\n\nThis page is just a chart that describes the editing flow with the most important steps:\n\n- starting the edit - via the API or by user interaction (which triggers the API call)\n- checking if the cell is editable - async checks are also supported\n- retrieving the value to edit\n- stopping the edit - via API or by user interaction\n  - an edit can be cancelled - value discarded\n  - an edit can be rejected - value rejected with error\n  - an edit can be accepted - value accepted and passed to the persit layer\n- persisting the edit\n  - defaulting to updating data to the data source\n  - a custom persist function can be provided via <PropLink name=\"persistEdit\" />\n- notifying the user of the result of the edit\n  - `onEditCancelled`\n  - `onEditRejected`\n  - `onEditAccepted` - after accepting the edit, either the persist success or error is called\n    - `onEditPersistSuccess`\n    - `onEditPersistError`\n\n```mmd\ngraph TD;\n    startEdit-->editable;\n    editable--\"yes\"-->editable_yes;\n    editable--\"no\"-->done;\n\n    editable_yes--column.getValueToEdit--->editing_active\n\n\n    editing_active--\"stopEdit({ cancel })\"-->cancel\n    editing_active--\"stopEdit({ reject })\"-->reject\n    editing_active--\"stopEdit({ value? })\"-->should_accept_edit\n\n    cancel-->onEditCancelled\n    reject-->onEditRejected\n    onEditCancelled-->done\n\n    should_accept_edit--yes-->value_accepted\n    should_accept_edit--no-->onEditRejected\n    value_accepted --\"column.getValueToPersist(async)\"--> persist_value\n    persist_value--no--> default_persist\n    persist_value--yes--> custom_persist\n\n\n    default_persist-->onEditPersistSuccess\n    custom_persist-->onEditPersistSuccess\n    custom_persist-->onEditPersistError\n    onEditPersistSuccess-->done\n    onEditPersistError-->done\n    onEditRejected-->done\n\n\n\n    startEdit[\"API.startEdit({rowIndex, columnId})\"]\n    editable{\"editable?(async)\"}\n\n    editing_active([\"Editing active\"])\n    editable_yes([\"Yes\"])\n\n\n    cancel(\"Cancel - value discarded\")\n    reject(\"Reject - value rejected with error\")\n\n    onEditCancelled[\"onEditCancelled()\"]\n    onEditRejected[\"onEditRejected()\"]\n\n    should_accept_edit{\"shouldAcceptEdit?(async)\"}\n    value_accepted([\"onEditAccepted()\"])\n    persist_value{\"props.persistEdit defined?\"}\n\n    default_persist[\"dataSourceApi.updateData(...)\"]\n    custom_persist[\"props.persistEdit(...) async\"]\n    onEditPersistSuccess[\"onEditPersistSuccess()\"]\n    onEditPersistError[\"onEditPersistError()\"]\n```\n"
    },
    {
      "filePath": "/docs/learn/editing/inline-editing",
      "routePath": "/docs/learn/editing/inline-editing",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/editing/inline-editing.page.md",
      "fileName": "inline-editing.page.md",
      "folderPath": "/docs/learn/editing/",
      "frontmatter": {
        "title": "Inline Editing",
        "description": "Learn how to use inline editing to update your data with Infinite Table for React",
        "redirect_to": "/docs/learn/editing/overview"
      },
      "excerpt": "",
      "readingTime": "0 min read",
      "content": ""
    },
    {
      "filePath": "/docs/learn/editing/overview",
      "routePath": "/docs/learn/editing/overview",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/editing/overview.page.md",
      "fileName": "overview.page.md",
      "folderPath": "/docs/learn/editing/",
      "frontmatter": {
        "title": "Editing",
        "description": "Learn how to use inline editing to update your data with Infinite Table for React"
      },
      "excerpt": "By default, editing is not enabled.",
      "readingTime": "5 min read",
      "content": "\nBy default, editing is not enabled.\n\nTo enable editing globally, you can use the <PropLink name=\"columnDefaultEditable\" /> boolean prop on the `InfiniteTable` component. This will enable the editing on all columns.\n\nOr you can be more specific and choose to make individual columns editable via the <PropLink name=\"columns.defaultEditable\">column.defaultEditable</PropLink> prop. This overrides the global <PropLink name=\"columnDefaultEditable\" />.\n\n<Sandpack title=\"Inline Editing in action\">\n\n<Description>\n\nAll columns (except id) are editable.\n\n</Description>\n\n```ts file=\"inline-editing-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<HeroCards>\n<YouWillLearnCard title=\"Column Editors\" path=\"/docs/learn/editing/column-editors\">\nRead about how you can configure various editors for your columns.\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"Editing Flow Chart\" path=\"/docs/learn/editing/inline-edit-flow\">\nA picture is worth a thousand words - see a chart for the editing flow.\n</YouWillLearnCard>\n\n</HeroCards>\n\n<Note>\n\nThe <PropLink name=\"columns.defaultEditable\">column.defaultEditable</PropLink> property can be either a `boolean` or a `function`.\n\nIf it is a function, it will be called when an edit is triggered on the column. The function will be called with a single object that contains the following properties:\n\n- `value` - the current value of the cell (the value currently displayed, so after <PropLink name=\"columns.valueFormatter\" /> and <PropLink name=\"columns.renderValue\" /> have been applied)\n- `rawValue` - the current value of the cell, but before any formatting and custom rendering has been applied. This is either the field value from the current data object, or the result of the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `data` - the data object (of type `DATA_TYPE`) for the current row\n- `rowInfo` - the row info object that underlies the row\n- `column` - the current column on which editing is invoked\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSourceApi` - - a reference to the [DataSource API](/docs/reference/datasource-api)\n\nThe function can return a boolean value or a Promise that resolves to a boolean value - this means you can asynchronously decide whether the cell is editable or not.\n\nMaking <PropLink name=\"columns.defaultEditable\">column.defaultEditable</PropLink> a function gives you the ability to granularly control which cells are editable or not (even within the same column, based on the cell value or other values you have access to).\n\n</Note>\n\nIn addition to the flags mentioned above, you can use the <PropLink name=\"editable\" /> prop on the `InfiniteTable` component. This overrides all other properties and when it is defined, is the only source of truth for whether something is editable or not.\n\n<Note>\n\nThe <PropLink name=\"editable\" /> prop allows you to centralize editing logic in one place.\n\nIt has the same signature as the <PropLink name=\"columns.defaultEditable\">column.defaultEditable</PropLink> function.\n\n</Note>\n\n## Start Editing\n\nEditing can be started either by user interaction or programmatically via the [API](/docs/reference/api).\n\nThe user can start editing by double-clicking on a cell or by pressing the `Enter` key while the cell is active (see [Keyboard Navigation for Cells](docs/learn/keyboard-navigation/navigating-cells)).\n\nTo start editing programmatically, use the <ApiLink name=\"startEdit\">{`startEdit({ columnId, rowIndex })`}</ApiLink> method.\n\n<Sandpack title=\"Starting an Edit via the API\">\n\n```ts file=\"api-inline-editing-custom-edit-value-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nEither way, be it user interaction or API call, those actions will trigger checks to see if the cell is editable - taking into account the <PropLink name=\"columnDefaultEditable\"/>, <PropLink name=\"columns.defaultEditable\">column.defaultEditable</PropLink> or <PropLink name=\"editable\" /> props, as described in the paragraphs above. Only if the result is `true` will the cell editor be displayed.\n\n## Customize Edit Value When Editing Starts\n\nWhen editing starts, the column editor is displayed with the value that was in the cell. This (initial) edit value can be customized via the <PropLink name=\"columns.getValueToEdit\">column.getValueToEdit</PropLink> prop. This allows you to start editing with a different value than the one that is displayed in the cell - and even with a value fetched asynchronously.\n\n```tsx\nconst columns = {\n  salary: {\n    field: 'salary',\n    // this can return a Promise\n    getValueToEdit: ({ value, data, rowInfo, column }) => {\n      // suppose the value is a string like '$1000'\n      // but we want to start editing with the number 1000\n      return value.replace('$', '');\n    },\n  },\n};\n```\n\n<Sandpack title=\"Inline Editing with custom getter for edit value\">\n\n<Description>\n\nTry editing the salary column - it has a custom getter for the edit value, which removes the curency string.\n\n</Description>\n\n```ts file=\"inline-editing-custom-edit-value-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Finishing an Edit\n\nAn edit is generally finished by user interaction - either the user confirms the edit by pressing the `Enter` key or cancels it by pressing the `Escape` key.\n\nAs soon as the edit is confirmed by the user, the `InfiniteTable` needs to decide whether the edit should be accepted or not.\n\nIn order to decide (either synchronously or asynchronously) whether an edit should be accepted or not, you can use the global <PropLink name=\"shouldAcceptEdit\"/> prop or the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> alternative.\n\n<Note>\n\nWhen neither the global <PropLink name=\"shouldAcceptEdit\"/> nor the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> are defined, all edits are accepted by default.\n\n</Note>\n\n<Note>\n\nOnce an edit is accepted, the <PropLink name=\"onEditAccepted\"/> callback prop is called, if defined.\n\nWhen an edit is rejected, the <PropLink name=\"onEditRejected\"/> callback prop is called instead.\n\nThe accept/reject status of an edit is decided by using the `shouldAcceptEdit` props described above. However an edit can also be cancelled by the user pressing the `Escape` key in the cell editor - to be notified of this, use the <PropLink name=\"onEditCancelled\"/> callback prop.\n\n</Note>\n\n<Sandpack title=\"Using shouldAcceptEdit to decide whether a value is acceptable or not\">\n\n<Description>\n\nIn this example, the `salary` column is configured with a <PropLink name=\"columns.shouldAcceptEdit\">shouldAcceptEdit</PropLink> function property that rejects non-numeric values.\n\n</Description>\n\n```ts file=\"inline-editing-custom-edit-value-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Persisting an Edit\n\nBy default, accepted edits are persisted to the `DataSource` via the <DApiLink name=\"updateData\">DataSourceAPI.updateData</DApiLink> method.\n\nTo change how you persist values (which might include persisting to remote locations), use the <PropLink name=\"persistEdit\"/> function prop on the `InfiniteTable` component.\n\n<Note>\n\nThe <PropLink name=\"persistEdit\"/> function prop can return a `Promise` for async persistence. To signal that the persisting failed, reject the promise or resolve it with an `Error` object.\n\nAfter persisting the edit, if all went well, the <PropLink name=\"onEditPersistSuccess\" /> callback prop is called. If the persisting failed (was rejected), the <PropLink name=\"onEditPersistError\" /> callback prop is called instead.\n\n</Note>\n"
    },
    {
      "filePath": "/docs/learn/master-detail/caching-detail-datagrid",
      "routePath": "/docs/learn/master-detail/caching-detail-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/master-detail/caching-detail-datagrid.page.md",
      "fileName": "caching-detail-datagrid.page.md",
      "folderPath": "/docs/learn/master-detail/",
      "frontmatter": {
        "title": "Master Detail - Caching Detail DataGrid",
        "description": "Learn how to use master-detail with caching for a better user-experience"
      },
      "excerpt": "By far the most common scenario will be to render another DataGrid in the detail row.",
      "readingTime": "2 min read",
      "content": "\nBy far the most common scenario will be to render another DataGrid in the detail row.\n\nFor such cases we offer a caching mechanism that will keep the state of the detail DataGrid when the user collapses and then expands the row again.\n\n<Note>\n\nThe most important part of the state of detail DataGrid that will be cached is the data-related.\n\nMore specifically, when cached, the detail `<DataSource />` will get its data from the cache and will not call the <DPropLink name=\"data\" /> function when mounted.\n\nOther persisted parts of the state are the sorting, filtering and grouping information.\n\n</Note>\n\nTo enable caching, use the <PropLink name=\"rowDetailCache\" /> prop.\n\nIt can be one of the following:\n\n- `false` - caching is disabled - this is the default\n- `true` - enables caching for all detail DataGrids\n- `number` - the maximum number of detail DataGrids to keep in the cache. When the limit is reached, the oldest detail DataGrid will be removed from the cache.\n\n<Sandpack title=\"Master detail DataGrid with caching for 5 detail DataGrids\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nThis example will cache the last 5 detail DataGrids - meaning they won't reload when you expand them again.\nYou can try collapsing a row and then expanding it again to see the caching in action - it won't reload the data.\nBut when you open up a row that hasn't been opened before, it will load the data from the remote location.\n\n</Description>\n\n```ts file=master-detail-caching-with-default-expanded-example.page.tsx\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/master-detail/collapsing-and-expanding-rows",
      "routePath": "/docs/learn/master-detail/collapsing-and-expanding-rows",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/master-detail/collapsing-and-expanding-rows.page.md",
      "fileName": "collapsing-and-expanding-rows.page.md",
      "folderPath": "/docs/learn/master-detail/",
      "frontmatter": {
        "title": "Master Detail - Collapsing and Expanding Rows",
        "description": "Learn how to use master-detail and configure the state of the row details as expanded or collapsed"
      },
      "excerpt": "You can control the collapsed/expanded state of rows in the master-detail configuration.",
      "readingTime": "5 min read",
      "content": "\nYou can control the collapsed/expanded state of rows in the master-detail configuration.\n\nBy default, all row details are collapsed. You can very easily change this by using the <PropLink name=\"defaultRowDetailState\" /> prop.\n\n```tsx title=\"Specyfing the default row detail state\" {8}\nconst defaultRowDetailState = {\n  collapsedRows: true,\n  expandedRows: [39, 54],\n};\n\n<InfiniteTable\n  columns={...}\n  defaultRowDetailState={defaultRowDetailState}\n  rowDetailRenderer={...}\n/>\n\n```\n\n<Sandpack title=\"Master detail DataGrid with some row details expanded by default\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nSome of the rows in the master DataGrid are expanded by default.\n\nAlso, we have a default sort defined, by the `country` and `city` columns.\n\n</Description>\n\n```ts file=\"master-detail-default-expanded-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Understanding and defining the collapse/expand state for row details\n\nWhen you want to specify a different collapse/expand state of the row details (since by default they are all collapsed, and you might want to expand some of them), you need to use the <PropLink name=\"defaultRowDetailState\" /> prop, or its controlled counterpart - the <PropLink name=\"rowDetailState\" /> prop.\n\nThe <TypeLink name=\"RowDetailState\" code={false}>row detail state</TypeLink> can be defined in two ways:\n\n- either specify `collapsedRows: true` (which means all rows are collapsed by default) and specify an array of `expandedRows`, which will contain the ids of the rows that should be rendered as expanded.\n\n```tsx\nconst defaultRowDetailState = {\n  collapsedRows: true,\n  expandedRows: ['id-1', 'id-2', 'id-56'],\n};\n```\n\n- or specify `expandedRows: true` (which means all rows are expanded by default) and specify an array of `collapsedRows`, which will contain the ids of the rows that should be rendered as collapsed.\n\n```tsx\nconst rowDetailState = {\n  expandedRows: true,\n  collapsedRows: ['id-1', 'id-2', 'id-56'],\n};\n```\n\nYou can pass these objects into either the <PropLink name=\"defaultRowDetailState\" /> (uncontrolled) or the <PropLink name=\"rowDetailState\" /> (controlled).\n\n<Note>\n\nIf you're using the controlled <PropLink name=\"rowDetailState\" /> prop, you'll need to respond to user interaction by listening to <PropLink name=\"onRowDetailStateChange\" /> and updating the value of <PropLink name=\"rowDetailState\" /> accordingly.\n\n</Note>\n\n<Note>\n\nAs an alternative to using the object literals as specified above, you can import the `RowDetailState` class from `@infinite-table/infinite-react` and use it to define the state of the row details. You can pass instances of `RowDetailState` into the <PropLink name=\"defaultRowDetailState\" /> or <PropLink name=\"rowDetailState\" /> props.\n\n```tsx title=\"Passing an instance of RowDetailState to the InfiniteTable\"\nimport { RowDetailState } from '@infinite-table/infinite-react';\n\nconst rowDetailState = new RowDetailState({\n  collapsedRows: true,\n  expandedRows: [2, 3, 4],\n});\n\n<InfiniteTable<DATA_TYPE> rowDetailState={rowDetailState} />;\n```\n\n```tsx title=\"Passing an object literal to the InfiniteTable\"\n<InfiniteTable<DATA_TYPE>\n  rowDetailState={{\n    collapsedRows: true,\n    expandedRows: [2, 3, 4],\n  }}\n/>\n```\n\nSee our type definitions for <TypeLink name=\"RowDetailState\" code={false}>more details on row detail state</TypeLink>.\n\n</Note>\n\n<Sandpack title=\"Master detail DataGrid with listener for row expand/collapse\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nSome of the rows in the master DataGrid are expanded by default.\n\nWe use the controlled <PropLink name=\"rowDetailState\" /> prop to manage the state of the row details and update it by using <PropLink name=\"onRowDetailStateChange\" />.\n\n</Description>\n\n```ts file=master-detail-controlled-expanded-enhanced-example.page.tsx\n\n```\n\n</Sandpack>\n\n## Listening to row detail state changes\n\nIn order to be notified when the collapse/expand state of row details changes, you can use the <PropLink name=\"onRowDetailStateChange\" /> prop.\n\n<Note>\n\nThis function is called with only one argument - the new <PropLink name=\"rowDetailState\" />. Please note this is an instance of <TypeLink name=\"RowDetailState\"/>. If you want to use the object literal, make sure you call `getState()` on the instance of `RowDetailState`.\n\n```tsx title=\"Using the onRowDetailStateChange listener\" {11}\nfunction App() {\n  const [rowDetailState, setRowDetailState] = React.useState<RowDetailStateObject>({\n    collapsedRows: true as const,\n    expandedRows: [39, 54],\n  });\n\n  return <DataSource<DATA_TYPE> {...}>\n    <InfiniteTable<DATA_TYPE>\n      rowDetailState={rowDetailState}\n      onRowDetailStateChange={(rowDetailStateInstance) => {\n        setRowDetailState(rowDetailStateInstance.getState());\n      }}\n      columnMinWidth={50}\n      columns={masterColumns}\n      rowDetailHeight={200}\n      rowDetailRenderer={renderDetail}\n    />\n  </DataSource>\n}\n```\n\n</Note>\n\nWhen using the controlled <PropLink name=\"rowDetailState\" />, you'll need to respond to the user interaction by using the <PropLink name=\"onRowDetailStateChange\"/> listener, in order to update the controlled <PropLink name=\"rowDetailState\" />.\n\nThis allows you to manage the state of the row details yourself - making it easy to expand/collapse all rows, or to expand/collapse a specific row by simply updating the value of the <PropLink name=\"rowDetailState\" /> prop.\n\n```tsx\nconst [rowDetailState, setRowDetailState] =\n  React.useState<RowDetailStateObject>({\n    collapsedRows: true,\n    expandedRows: [39, 54],\n  });\n\nconst expandAll = () => {\n  setRowDetailState({\n    collapsedRows: [],\n    expandedRows: true,\n  });\n};\nconst collapseAll = () => {\n  setRowDetailState({\n    collapsedRows: true,\n    expandedRows: [],\n  });\n};\n\nreturn (\n  <>\n    <button onClick={expandAll}>Expand All</button>\n    <button onClick={collapseAll}>Collapse All</button>\n    <InfiniteTable<DATA_TYPE> rowDetailState={rowDetailState} />\n  </>\n);\n```\n\n<Note>\n\nIf you prefer the more imperative approach, you can still use the [Row Detail API](/docs/reference/row-detail-api) to <RowDetailApiLink name=\"expandRowDetail\">expand</RowDetailApiLink> or <RowDetailApiLink name=\"collapseRowDetail\">collapse</RowDetailApiLink> details for rows.\n\n</Note>\n\n\n## Single row expand\n\nUsing the controlled <PropLink name=\"rowDetailState\" /> prop is very powerful - it allows you to configure the expand state to only allow one row to be expanded at a time, if that's something you need.\n\nThis means that if any other row(s) are expanded and you expand a new row, the previously expanded rows will all be collapsed.\n\n\n<Sandpack title=\"Master detail only one row expanded at a time\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nIn this demo we allow only one row to be expanded at any given time.\n\nWe use the controlled <PropLink name=\"rowDetailState\" /> prop to manage the state of the row details and update it by using <PropLink name=\"onRowDetailStateChange\" />.\n\n</Description>\n\n```ts file=master-detail-one-expanded-row-example.page.tsx\n\n```\n\n</Sandpack>"
    },
    {
      "filePath": "/docs/learn/master-detail/custom-row-detail-content",
      "routePath": "/docs/learn/master-detail/custom-row-detail-content",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/master-detail/custom-row-detail-content.page.md",
      "fileName": "custom-row-detail-content.page.md",
      "folderPath": "/docs/learn/master-detail/",
      "frontmatter": {
        "title": "Master Detail with Custom Row Detail Contents",
        "description": "Learn how to use master-detail to customise your row detail contents"
      },
      "excerpt": "The Infinite Table React DataGrid allows you to render any valid JSX nodes as row details.",
      "readingTime": "3 min read",
      "content": "\nThe Infinite Table React DataGrid allows you to render any valid JSX nodes as row details.\n\nYou can render a DataGrid directly or you can nest the DataGrid at any level of nesting inside the row details.\nOr you can simply choose to render anything else - no DataGrid required.\n\n## Rendering a detail DataGrid\n\nYour row detail content can include another Infinite Table DataGrid.\n\n<Note>\n\nThe DataGrid you're rendering inside the row detail doesn't need to be the return value of the <PropLink name=\"rowDetailRenderer\" /> function - it can be nested inside other valid JSX nodes you return from the function.\n\n</Note>\n\n<Sandpack title=\"Master detail with custom content & DataGrid\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nIn this example, the row detail contains custom content, along with another Infinite Table DataGrid. You can nest a child DataGrid inside the row details at any level of nesting.\n\n</Description>\n\n```ts file=\"master-detail-custom-datagrid-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nYou'll probably want to configure the height of the row detail content. Use the <PropLink name=\"rowDetailHeight\" /> prop to do that.\n\n</Note>\n\n## Rendering a chart component as row detail\n\n\n<Sandpack title=\"Retrieving cell selection value by mapping over them\" size=\"lg\" deps=\"ag-charts-react,ag-charts-community\">\n\n```ts file=master-detail-chart-detail-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIn the above example, please note that on every render (after the detail component is mounted), we pass the same `dataSource`, `groupBy` and `aggregationReducers` props to the `<DataSource />` component. The references for all those objects are stable. We don't want to pass new references on every render, as that would cause the `<DataSource />` to reload and reprocess the data.\n\n</Note>\n\n\n## Multiple levels of nesting\n\nThe master-detail configuration for the DataGrid can contain any level of nesting.\n\nThe example below shows 3 levels of nesting - so a master DataGrid, a detail DataGrid and another third-level detail with custom content.\n\n<Sandpack title=\"Master detail with 3 levels of nesting\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nIn this example, we have 3 levels of nesting:\n\n- The master DataGrid shows cities/countries\n- The first level of detail shows developers in each city\n- The second level of detail shows custom data about each developer\n\n</Description>\n\n```ts file=\"master-detail-3-levels-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Understanding the lifecycle of the row detail component\n\nYou have to keep in mind that the content you render in the row detail can be mounted and unmounted multiple times. Whenever the user expands the row detail, it gets mounted and rendered, but then it will be unmounted when the user scrolls the content out of view. This can happen very often.\n\nAlso note that the content can be recycled - meaning the same component can be reused for different rows. If you don't want recycling to happen, make sure you use a unique key for the row detail content - you can use the `masterRowInfo.id` for that.\n\n<Note>\n\nIn practice this means that it's best if your row detail content is using controlled state and avoids using local state.\n\n</Note>\n"
    },
    {
      "filePath": "/docs/learn/master-detail/overview",
      "routePath": "/docs/learn/master-detail/overview",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/master-detail/overview.page.md",
      "fileName": "overview.page.md",
      "folderPath": "/docs/learn/master-detail/",
      "frontmatter": {
        "title": "Master Detail",
        "description": "Learn how to use master-detail rendering with the React DataGrid"
      },
      "excerpt": "The React DataGrid that Infinite Table offers has native support for master-detail rows.",
      "readingTime": "4 min read",
      "content": "\nThe React DataGrid that Infinite Table offers has native support for master-detail rows.\n\n<Note>\n\nThe single most important property for the master-detail DataGrid configuration is the <PropLink name=\"rowDetailRenderer\" /> function prop - which makes the DataGrid be considered master-detail.\n\nIn addition, make sure you have a column with the `renderRowDetailIcon: true` flag set. <PropLink name=\"columns.renderRowDetailIcon\" /> on a column makes the column display the row detail expand icon.\n\nThe row detail in the DataGrid can contain another DataGrid or any other custom content.\n</Note>\n\n<Note>\n\nIt's very imporant that the <PropLink name=\"rowDetailRenderer\" /> function prop you pass into `<InfiniteTable />` is stable and doesn't change on every render. So make sure you pass a reference to the same function every time - except of course if you want the row detail to change based on some other state.\n</Note>\n\n<Sandpack title=\"Basic master detail DataGrid example\" size=\"lg\">\n\n<Description>\n\nThis example shows a master DataGrid with cities & countries.\n\nThe details for each city shows a DataGrid with developers in that city.\n\nThe detail DataGrid is configured with remote sorting.\n\n</Description>\n\n```ts file=\"master-detail-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\nIf you want to use a component instead of the <PropLink name=\"rowDetailRenderer\" /> function, you can use the <PropLink name=\"components.RowDetail\" /> property. This works similarly and makes the DataGrid be considered master-detail. Inside the component, you can use the <HookLink name=\"useMasterRowInfo\" /> hook to get the master row information.\n\n\n\n## Loading the Detail DataSource\n\nWhen master-detail is configured and the row detail renders a DataGrid, the <DPropLink name=\"data\" /> function for the detail `<DataSource />` will be called with the `masterRowInfo` as a property available in the object passed as argument.\n\n```tsx title=\"Loading the detail DataGrid data\" {2}\nconst detailDataFn: DataSourceData<Developer> = ({\n  masterRowInfo,\n  sortInfo,\n  ...\n}) => {\n\n  return Promise.resolve([...])\n}\n\n<DataSource<Developer> data={detailDataFn}>\n  {...}\n</DataSource>\n```\n\nYou can see the live example above for more details.\n\n## Rendering a detail DataGrid\n\nUsing the <PropLink name=\"rowDetailRenderer\" /> prop, you can render any custom content for the row details.\n\nThe content doesn't need to include Infinite Table.\n\nYou can, however, render an Infinite Table React DataGrid, at any level of nesting inside the row detail content.\n\n<Sandpack title=\"Master detail with custom content & DataGrid\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nIn this example, the row detail contains custom content, along with another Infinite Table DataGrid. You can nest a child DataGrid inside the row details at any level of nesting.\n\n</Description>\n\n```ts file=\"master-detail-custom-datagrid-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Configuring the master-detail height\n\nIn order to configure the height of the row details, you can use the <PropLink name=\"rowDetailHeight\" /> prop.\n\n```tsx title=\"Configuring the row detail height\" {3}\n<InfiniteTable<City>\n  columns={masterColumns}\n  rowDetailHeight={500}\n  rowDetailRenderer={renderDetail}\n/>\n```\n\nThe default value for the <PropLink name=\"rowDetailHeight\" /> is `300` px.\n\n<PropLink name=\"rowDetailHeight\" /> can be one of the following:\n\n- `number` - the height in pixels\n- `string` - the name of a CSS variable that configures the height - eg: `--master-detail-height`\n- `(rowInfo) => number` - a function that can return a different height for each row. The sole argument is the <TypeLink name=\"InfiniteTableRowInfo\">rowInfo object</TypeLink>.\n\n<Sandpack title=\"Master detail DataGrid with custom height for row details\" size=\"lg\">\n\n<Description>\n\nThis master-detail DataGrid is configured with a custom <PropLink name=\"rowDetailHeight\" /> of `200px`.\n\n</Description>\n\n```ts file=\"master-detail-custom-detail-height-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n## Conditional row details\n\nNot all rows in a DataGrid need to have details. To configure which rows have details, you can use the <PropLink name=\"isRowDetailEnabled\" /> function prop.\n\n```tsx title=\"Using conditional row details\" {5}\n<InfiniteTable<City>\n  columns={masterColumns}\n  rowDetailHeight={500}\n  rowDetailRenderer={renderDetail}\n  isRowDetailEnabled={(rowInfo) => rowInfo.data.cityName.contains('i')}\n/>\n```\n\nThe <PropLink name=\"isRowDetailEnabled\" /> function prop is called with the <TypeLink name=\"InfiniteTableRowInfo\">rowInfo object</TypeLink> and is expected to return a boolean value.\n\n\n<Sandpack title=\"Master detail DataGrid with conditional details\" size=\"lg\">\n\n<Description>\n\nThis example shows a master DataGrid with cities & countries.\n\nNot all rows have details - every other row is configured without details via the <PropLink name=\"isRowDetailEnabled\" /> function prop.\n\n</Description>\n\n```ts file=\"master-detail-per-row-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/rows/disabled-rows",
      "routePath": "/docs/learn/rows/disabled-rows",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/rows/disabled-rows.page.md",
      "fileName": "disabled-rows.page.md",
      "folderPath": "/docs/learn/rows/",
      "frontmatter": {
        "title": "Disabled Rows"
      },
      "excerpt": "Disabling rows allows you to have some rows that are not selectable, not clickable, not reacheable via keyboard navigation and other interactions.",
      "readingTime": "2 min read",
      "content": "\nDisabling rows allows you to have some rows that are not selectable, not clickable, not reacheable via keyboard navigation and other interactions.\n\nThe `DataSource` manages the disabled state of rows, via the <DPropLink name=\"defaultRowDisabledState\" /> (uncontrolled) prop and <DPropLink name=\"rowDisabledState\" /> (controlled) prop.\n\n```tsx\n<DataSource<DATA_TYPE>\n  idProperty=\"id\"\n  data={[]}\n  defaultRowDisabledState={{\n    enabledRows: true,\n    disabledRows: ['id1', 'id4', 'id5']\n  }}\n/>\n  <InfiniteTable<DATA_TYPE>\n    {/* ... */}\n  />\n</DataSource>\n```\n\n<Note>\n\nIn addition to using the <DPropLink name=\"defaultRowDisabledState\" />/<DPropLink name=\"rowDisabledState\" /> props, you can also specify the <DPropLink name=\"isRowDisabled\" /> function prop, which overrides those other props and ultimately determines whether a row is disabled or not.\n\n</Note>\n\n<Sandpack title=\"Specify some rows as initially disabled\">\n\n```tsx file=\"initialRowDisabledState-example.page.tsx\"\n```\n\n</Sandpack>\n\n## Using disabled rows while rendering\n\nWhen rendering a cell, you have access to the row disabled state - the <TypeLink name=\"InfiniteTableRowInfo\" /> type has a `rowDisabled` property which is true if the row is disabled.\n\n<Sandpack title=\"Using the row disabled state while rendering\">\n\n<Description>\n  This example uses custom rendering for the `firstName` column to render an emoji for disabled rows.\n</Description>\n\n```tsx file=\"custom-rendering-for-disabled-rows-example.page.tsx\"\n```\n\n</Sandpack>\n\n## Using the API to enable/disable rows\n\nYou can use the `DataSourceApi` to enable or disable rows programmatically.\n\n<DApiLink name=\"setRowEnabled\" />\n\n```tsx\ndataSourceApi.setRowEnabled(rowId, enabled);\n\n```\n\n<DApiLink name=\"setRowEnabledAt\" />\n\n```tsx\ndataSourceApi.setRowEnabledAt(rowIndex, enabled);\n```\n\n<Sandpack title=\"Using the API to enable/disable rows\">\n\n<Description>\nUse the context menu on each row to toggle the disabled state of the respective row.\n</Description>\n\n```tsx file=\"using-api-to-disable-rows-example.page.tsx\"\n```\n\n</Sandpack>"
    },
    {
      "filePath": "/docs/learn/rows/styling-rows",
      "routePath": "/docs/learn/rows/styling-rows",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/rows/styling-rows.page.md",
      "fileName": "styling-rows.page.md",
      "folderPath": "/docs/learn/rows/",
      "frontmatter": {
        "title": "Styling Rows"
      },
      "excerpt": "Rows can be styled by using the `rowStyle` and the `rowClassName` props",
      "readingTime": "1 min read",
      "content": "\nRows can be styled by using the `rowStyle` and the `rowClassName` props\n\n- the <PropLink name=\"rowStyle\" /> prop can be a style `object` or a `function` that returns a style `object` or `undefined`\n- the <PropLink name=\"rowClassName\"/> prop can be a `string` (the name of a CSS class) or a `function` that returns a `string` or `undefined`\n\n```tsx title=\"Defining-a-rowStyle-function\"\nconst rowStyle: InfiniteTablePropRowStyle<Employee> = ({\n  data,\n  rowInfo,\n}: {\n  data: Employee | null;\n  rowInfo: InfiniteTableRowInfo<Employee>;\n}) => {\n  const salary = data ? data.salary : 0;\n\n  if (salary > 150_000) {\n    return { background: 'tomato' };\n  }\n  if (rowInfo.indexInAll % 10 === 0) {\n    return { background: 'lightblue', color: 'black' };\n  }\n};\n```\n\n<Note>\n\nThe <PropLink name=\"rowClassName\" /> function prop has the same signature as the <PropLink name=\"rowStyle\" /> function prop.\n\n</Note>\n\n## Row styling example\n\n<Sandpack>\n\n```ts files=[\"$DOCS/reference/rowStyle-example.page.tsx\",\"$DOCS/reference/rowStyle-example-columns.ts\"]\n\n```\n\n</Sandpack>\n\n<Note>\n\nIn the <PropLink name=\"rowStyle\" /> function, you can access the rowInfo object, which contains information about the current row. It's especially useful when you have grouping and aggregation, as it contains the aggregation values and other extra info.\n\n</Note>\n"
    },
    {
      "filePath": "/docs/learn/rows/using-row-info",
      "routePath": "/docs/learn/rows/using-row-info",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/rows/using-row-info.page.md",
      "fileName": "using-row-info.page.md",
      "folderPath": "/docs/learn/rows/",
      "frontmatter": {
        "title": "Using Rows at Runtime"
      },
      "excerpt": "At runtime, the <PropLink name=\"columns.render\" /> function and a <PropLink name=\"rowStyle\">lot</PropLink> <PropLink name=\"rowClassName\">of</PropLink> <PropLink name=\"columns.style\">other</PropLink> functions use the <TypeLink name=\"InfiniteTableRowInfo\">rowInfo</TypeLink> object to access the current row and use it to decide how to render the current cell or row.",
      "readingTime": "7 min read",
      "content": "\nAt runtime, the <PropLink name=\"columns.render\" /> function and a <PropLink name=\"rowStyle\">lot</PropLink> <PropLink name=\"rowClassName\">of</PropLink> <PropLink name=\"columns.style\">other</PropLink> functions use the <TypeLink name=\"InfiniteTableRowInfo\">rowInfo</TypeLink> object to access the current row and use it to decide how to render the current cell or row.\n\nThe `rowInfo` object has a few variations, depending on the presence or absence of grouping. See <TypeLink name=\"InfiniteTableRowInfo\" code={false}>type definition here</TypeLink>.\n\n<Note>\n\nAll those variations are discriminated in the `TypeScript` typings, so you can easily use the different types of `rowInfo` objects.\n\n</Note>\n\n## Ungrouped Scenario - normal `rowInfo`\n\nWhen there is no <DataSourcePropLink name=\"groupBy\">grouping</DataSourcePropLink>, the `rowInfo` object has the following properties:\n\n- `data` - type: `DATA_TYPE`\n- `dataSourceHasGrouping` - type: `false`\n- `isGroupRow` - type: `false`\n- `id` - type: `any`. The id of the row, as defined by the <DataSourcePropLink name=\"idProperty\" /> prop.\n- `selfLoaded` - type: `boolean`. Useful in lazy-loading scenarios, when there is batching present. If you're not in such a scenario, the value will be `false`. You can use this to show a loading indicator for the row.\n- `indexInAll` - type `number`. The index of the row in the full dataset. Called like this because for grouping scenarios, there's also an `indexInGroup`\n\n### Discriminator\n\n```ts\nrowInfo.dataSourceHasGrouping === false;\n```\n\n## Grouped scenario - normal `rowInfo`\n\nWhen there is <DataSourcePropLink name=\"groupBy\">grouping</DataSourcePropLink> defined, and the row is not a group row, the `rowInfo` object has the following properties:\n\n- `data` - type: `DATA_TYPE`\n- `dataSourceHasGrouping` - type: `true`\n- `isGroupRow` - type: `false`\n- `indexInAll` - like the above\n- `indexInGroup` - type: `number`. The index of the row in its parent group.\n- `groupKeys` - type: `any[]`, but usually it's actually `string[]`. For normal rows, the group keys will have all the keys starting from the topmost parent down to the last group row in the hierarchy (the direct parent of the current row).\n\n```txt\nExample: People grouped by country and city\n\n> Italy  - country         - groupKeys: ['Italy']\n  > Rome - city           - groupKeys: ['Italy', 'Rome']\n     - Marco    - person   - groupKeys: ['Italy', 'Rome']\n     - Luca     - person   - groupKeys: ['Italy', 'Rome']\n     - Giuseppe  - person  - groupKeys: ['Italy', 'Rome']\n```\n\n- `groupBy` - type `(keyof T)[]`. Has the same structure as groupKeys, but it will contain the fields used to group the rows.\n- `rootGroupBy` - type `(keyof T)[]`. The groupBy value of the DataSource component, mapped to the `groupBy.field`\n- `parents` - a list of `rowInfo` objects that are the parents of the current row.\n- `indexInParentGroups[]` - type: `number[]`. See below for an example\n\n```\n> Italy  - country         - indexInParentGroups: [0]\n  > Rome - city           - indexInParentGroups: [0,0]\n    - Marco    - person   - indexInParentGroups: [0,0,0]\n    - Luca     - person   - indexInParentGroups: [0,0,1]\n    - Giuseppe  - person  - indexInParentGroups: [0,0,2]\n> USA - country            - indexInParentGroups: [1]\n  > LA - city             - indexInParentGroups: [1,0]\n    - Bob  - person       - indexInParentGroups: [1,0,2]\n```\n\n- `groupCount` - type: `number`. The count of leaf rows that the current group (in this case, the parent group) contains\n- `groupNesting` - type `number`. The nesting of the parent group.\n- `collapsed` - type `boolean`.\n- `selfLoaded` - type: `boolean`. Useful in lazy-loading scenarios, when there is batching present. If you're not in such a scenario, the value will be `false`.\n\n### Discriminator\n\n```ts\nrowInfo.dataSourceHasGrouping === true && rowInfo.isGroupRow === false;\n```\n\n## Grouped scenario - group `rowInfo`\n\nWhen there is <DataSourcePropLink name=\"groupBy\">grouping</DataSourcePropLink> defined, and the row is a group row, the `rowInfo` object has the following properties:\n\n- `data` - type: `Partial<DATA_TYPE> | null`. The `data` object that might be available is the result of the <DataSourcePropLink name=\"aggregationReducers\">aggregation reducers</DataSourcePropLink>. If none are specified, `data` will be `null`\n- `dataSourceHasGrouping` - type: `true`\n- `isGroupRow` - type: `true`\n- `error` - type: `string?`. If there was an error while loading the group (when the group row is expanded), this will contain the error message. If the group row was loaded with the `cache: true` flag sent in the server response, the error will remain on the `rowInfo` object even when you collapse the group row, otherwise, if `cache: true` was not present, the `error` property will be removed on collapse.\n- `indexInAll` - like the above\n- `indexInGroup` - type: `number`. The index of the row in the its parent group.\n- `deepRowInfoArray` - an array of `rowInfo` objects. This array contains all the (uncollapsed, so visible) row infos under this group, at any level of nesting, in the order in which they are visible in the table.\n- `reducerResults` - type `Record<string, AggregationReducerResult>`. The result of the <DataSourcePropLink name=\"aggregationReducers\">aggregation reducers</DataSourcePropLink> for each field in the <DataSourcePropLink name=\"aggregationReducers\" /> prop.\n- `groupCount` - type: `number`. The count of leaf rows that the current group (in this case, the parent group) contains\n- `groupData` - type: `DATA_TYPE[]`. The array of the data of all leaf nodes (normal nodes) that are inside this group.\n\n```txt\nExample: People grouped by country and city\n\n> Italy  - country         - groupKeys: ['Italy']\n  > Rome - city           - groupKeys: ['Italy', 'Rome']\n     - Marco    - person   - groupKeys: ['Italy', 'Rome']\n     - Luca     - person   - groupKeys: ['Italy', 'Rome']\n     - Giuseppe  - person  - groupKeys: ['Italy', 'Rome']\n```\n\n- `collapsedChildrenCount` - type: `number`. The count of all leaf nodes (normal rows) inside the group that are not being visible due to collapsing (either the current row is collapsed or any of its children)\n- `directChildrenCount` - type: `number`. The count of the direct children of the current group. Direct children can be either normal rows or groups.\n- `directChildrenLoadedCount` - type: `number`. Like `directChildrenCount`, but only counts the rows that are loaded (when batched lazy loading is configured).\n- `childrenAvailable` - type: `boolean`. For lazy/batched grouping, this is true if the group has been expanded at least once. NOTE: if this is true, it doesn't mean that all the children have been loaded, it only means that at least some children have been loaded and are available. Use `directChildrenCount` and `directChildrenLoadedCount` to know if all the children have been loaded or not.\n- `childrenLoading` - type: `boolean`. Boolean flag that will be true while lazy loading direct children of the current row group. Use `directChildrenLoadedCount` and `directChildrenCount` to know if all the children have been loaded or not.\n- `childrenSelectedCount` the number of all leaf rows in the current group that are selected.\n- `groupKeys` - type: `any[]`, but usually it's actually `string[]`. For group rows, the group keys will have all the keys starting from the topmost parent down to the current group row (key for current group row is included).\n- `groupBy` - type `(keyof T)[]`. Has the same structure as groupKeys, but it will contain the fields used to group the rows.\n- `rootGroupBy` - type `(keyof T)[]`. The groupBy value of the DataSource component, mapped to the `groupBy.field`\n- `groupCount` - type: `number`. The count of leaf rows that the current group (in this case, the parent group) contains\n- `groupNesting` - type `number`. The nesting of the parent group.\n- `parents` - a list of `rowInfo` objects that are the parents of the current row.\n- `indexInParentGroups[]` - type: `number[]`. See below for an example\n\n```\n> Italy  - country         - indexInParentGroups: [0]\n  > Rome - city           - indexInParentGroups: [0,0]\n    - Marco    - person   - indexInParentGroups: [0,0,0]\n    - Luca     - person   - indexInParentGroups: [0,0,1]\n    - Giuseppe  - person  - indexInParentGroups: [0,0,2]\n> USA - country            - indexInParentGroups: [1]\n  > LA - city             - indexInParentGroups: [1,0]\n    - Bob  - person       - indexInParentGroups: [1,0,2]\n```\n\n- `collapsed` - type `boolean`.\n- `selfLoaded` - type: `boolean`. Useful in lazy-loading scenarios, when there is batching present. If you're not in such a scenario, the value will be `false`.\n\n### Discriminator\n\n```ts\nrowInfo.dataSourceHasGrouping === true && rowInfo.isGroupRow === true;\n```\n"
    },
    {
      "filePath": "/docs/learn/selection/cell-selection",
      "routePath": "/docs/learn/selection/cell-selection",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/selection/cell-selection.page.md",
      "fileName": "cell-selection.page.md",
      "folderPath": "/docs/learn/selection/",
      "frontmatter": {
        "title": "Cell Selection",
        "description": "InfiniteTable DataGrid component supports single and multiple cell selection."
      },
      "excerpt": "To use multi-cell selection, you need to configure the `<DataSource />` component with `selectionMode=\"multi-cell\"` - see <DPropLink name=\"selectionMode\" /> for details. For selecting rows, see the [Row Selection](/docs/learn/selection/row-selection) page.",
      "readingTime": "4 min read",
      "content": "\nTo use multi-cell selection, you need to configure the `<DataSource />` component with `selectionMode=\"multi-cell\"` - see <DPropLink name=\"selectionMode\" /> for details. For selecting rows, see the [Row Selection](/docs/learn/selection/row-selection) page.\n\n```tsx title=\"Configuring the selection mode\"\n<DataSource selectionMode=\"multi-cell\" />\n\n// can be \"single-row\", \"multi-row\", \"multi-cell\" or false\n```\n\n<Sandpack title=\"Multiple cell selection example\">\n\n<Description>\n\nClick cells in the grid to add to the selection.\n\nUse `Shift+Click` to select a range of cells and `Cmd/Ctrl+Click` to add single cells to the selection.\n\n</Description>\n\n```ts file=\"./cell-selection-default-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Using default selection\n\nYou can specify a default value for cell selection by using the <DPropLink name=\"defaultCellSelection\" /> prop.\n\n```tsx title=\"Using default selection\"\n\nconst defaultCellSelection = {\n  defaultSelection: false,\n  selectedCells: [\n    [3, \"stack\"], // rowId + colId\n    [5, \"stack\"], // rowId + colId\n    [0, \"firstName\"], // rowId + colId\n  ]\n}\n\n<DataSource\n  selectionMode=\"multi-cell\"\n  defaultCellSelection={defaultCellSelection}\n/>\n```\n\n<Note>\n\nCell selection uses `[rowId, colId]` cell descriptors to identify cells to be marked as selected or deselected - read more in the [Cell selection format](#cell-selection-format).\n\n</Note>\n\n<Sandpack title=\"Multiple cell selection with a default selection value\">\n\n<Description>\n\nBy default some cells are already selected in the grid below, by using the <DPropLink name=\"defaultCellSelection\" /> prop on the `<DataSource />` component.\n\n</Description>\n\n```ts file=\"./cell-selection-default-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nWhe you're using cell selection with or without any default value (via the <DPropLink name=\"defaultCellSelection\" />), you're using an uncontrolled prop. This means that the selection state is managed by the `<DataSource />` component and not by you. If you want to control the selection state yourself, you can use the controlled <DPropLink name=\"cellSelection\" /> prop instead - see [Using controlled selection](#using-controlled-selection) for details.\n\n## Cell selection format\n\nThe <DPropLink name=\"cellSelection\" /> prop is an object with the following shape:\n\n- `defaultSelection` - `boolean` - whether or not cells are selected by default.\n- either:\n  - `selectedCells`: `[rowId, colId][]` - an array of cells that should be selected (this is combined with `defaultSelection: false`)\n- or\n  - `deselectedCells`: `[rowId, colId][]` - an array of cells that should be deselected (this is combined with `defaultSelection: true`)\n\n<Note>\n\nWhen `defaultSelection` is `true`, you will only need to specify the `deselectedCells` prop.\n\nAnd when `defaultSelection` is `false`, you will only need to specify the `selectedCells` prop.\n\n</Note>\n\nIn this way, you can either specify which cells should be selected or which cells should be deselected - and have a default that matches the most common case.\n\n<Note>\n\nThe `selectedCells`/`deselectedCells` are arrays of `[rowId, colId]` tuples. The `rowId` is the `id` of the row (<DPropLink name=\"primaryKey\" code={false}>the primary key</DPropLink>), and the `colId` is the `id` of the column (the identifier of the column in the <PropLink name=\"columns\" /> prop).\n\n</Note>\n\nThe following scenarios are all possible:\n\n```tsx title=\"Just a few specified cells are selected\"\nconst defaultCellSelection = {\n  defaultSelection: false,\n  selectedCells: [\n    ['id2', 'stack'],\n    ['id2', 'stack'],\n    ['id0', 'firstName'],\n  ],\n};\n```\n\n```tsx title=\"Everything is selected, except a few cells\"\nconst defaultCellSelection = {\n  defaultSelection: true,\n  deselectedCells: [\n    ['row2', 'stack'],\n    ['row3', 'stack'],\n    ['row5', 'firstName'],\n  ],\n};\n```\n\n### Using wildcards for selection\n\nIt's also possible to use wildcards for selecting cells. This is useful if you want to select all cells in a column, or all cells in a row.\n\n```tsx title=\"Selecting all cells in a column\"\nconst defaultCellSelection = {\n  defaultSelection: false,\n  selectedCells: [\n    ['*', 'stack'],\n    ['row2', 'firstName'],\n  ],\n};\n```\n\n```tsx title=\"Selecting all cells in a row\"\nconst defaultCellSelection = {\n  defaultSelection: false,\n  selectedCells: [\n    ['row1', '*'],\n    ['row2', 'firstName'],\n  ],\n};\n```\n\n```tsx title=\"Selecting everything except a column\"\nconst defaultCellSelection = {\n  defaultSelection: true,\n  deselectedCells: [['*', 'stack']],\n};\n```\n\n## Using controlled selection\n\nWhen using the controlled <DPropLink name=\"cellSelection\" /> you have to update the value of the property yourself, by listening to the <DPropLink name=\"onCellSelectionChange\" /> event.\n\n<Sandpack title=\"Using controlled cell selection\" size=\"lg\">\n\n<Description>\n\nThis example shows how to use the <DPropLink name=\"onCellSelectionChange\" /> callback prop to listen to changes to the controlled <DPropLink name=\"cellSelection\" /> prop on the `<DataSource />` component.\n\n</Description>\n\n```ts file=\"./controlled-cell-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Using the Cell Selection API\n\nThe `<DataSource />` component also exposes a [Cell Selection API](/docs/reference/cell-selection-api), which you can use to select and deselect cells programmatically.\n\n<Sandpack title=\"Using the CellSelectionAPI to select a column\" size=\"lg\">\n\n```ts file=\"$DOCS/reference/datasource-props/controlled-cell-selection-with-api-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/selection/row-selection",
      "routePath": "/docs/learn/selection/row-selection",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/selection/row-selection.page.md",
      "fileName": "row-selection.page.md",
      "folderPath": "/docs/learn/selection/",
      "frontmatter": {
        "title": "Row Selection",
        "description": "InfiniteTable DataGrid component supports single and multiple row selection, including checkbox column selection and lazy rows selection"
      },
      "excerpt": "`InfiniteTable` offers support for both single and multiple row selection. For selecting cells, see the [Cell Selection](/docs/learn/selection/cell-selection) page.",
      "readingTime": "11 min read",
      "content": "\n`InfiniteTable` offers support for both single and multiple row selection. For selecting cells, see the [Cell Selection](/docs/learn/selection/cell-selection) page.\n\n```tsx title=\"Configure the selection mode on the DataSource component\"\n<DataSource selectionMode=\"single-row\" />\n\n// can be \"single-row\", \"multi-row\", \"multi-cell\" or false\n```\n\nMultiple row selection allows people to select rows just like they would in their MacOS Finder app, by clicking desired rows and using the cmd/shift keys as modifiers.\n\nThe DataGrid also offers support for **checkbox selection**, which is another easy way of interacting with grid rows, especially when grouped or nested data is used.\n\nRow selection (both single and multiple) is driven by the <DPropLink name=\"rowSelection\" /> prop, which will contain **primary keys of the selected rows**.\n\n<Note>\n\nThe value or values you specify for row selection are primary keys of the rows in the DataGrid.\n\nRow selection is defined on the `DataSource` component, so that's where you specify your <DPropLink name=\"rowSelection\" /> prop (or the uncontrolled version of it, namely <DPropLink name=\"defaultRowSelection\" /> and also the callback prop of <DPropLink name=\"onRowSelectionChange\" />).\n\n</Note>\n\n<Note>\n\nYou can explicitly specify the <DPropLink name=\"selectionMode\" /> as `\"single-row\"` or `\"multi-row\"` (or `false`) but it will generally be derived from the value of your <DPropLink name=\"rowSelection\" />/<PropLink name=\"defaultRowSelection\" /> prop.\n\n</Note>\n\n# Single Row Selection\n\nThis is the most basic row selection - in this case the <DPropLink name=\"rowSelection\" /> prop (or the uncontrolled variant <DPropLink name=\"defaultRowSelection\" />) will be the primary key of the selected row (a string or a number or `null` for no selection).\n\n```ts {4}\n<DataSource<DATA_TYPE>\n  primaryKey=\"id\"\n  data={[...]}\n  defaultRowSelection={4}\n>\n  <InfiniteTable {...} />\n</DataTable>\n\n```\n\n<Sandpack title=\"Uncontrolled single row selection\">\n\n<Description>\n\nSingle row selection example - click a row to see selection change. You can also use your keyboard - press the spacebar to select/deselect a row.\n\n</Description>\n\n```ts file=\"$DOCS/reference/default-single-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nRow selection is changed when the user clicks a row. Clicking a row selects it and clicking it again keeps the row selected. For deselecting the row with the mouse use `cmd`/`ctrl` + click.\n\n## Keybord support\n\nYou can also use your keyboard to select a row, as by default, <PropLink name=\"keyboardSelection\" /> is `true`. Using your keyboard, navigate to the desired row and then press the spacebar to select it. Pressing the spacebar again on the selected row will deselect it.\n\n<Note>\n\nBoth `cell` and `row` <PropLink name=\"keyboardNavigation\" /> are available and you can use either of them to perform row selection.\n\n</Note>\n\n## Controlled single row selection\n\nRow selection can be used as a <DPropLink name=\"rowSelection\" code={false}>controlled</DPropLink> or <PropLink name=\"defaultRowSelection\" code={false}>uncontrolled</PropLink> property. For the controlled version, make sure you also define your <DPropLink name=\"onRowSelectionChange\" /> callback prop to update the selection.\n\n<Sandpack title=\"Controlled single row selection\">\n\n<Description>\n\nThis example uses <DPropLink name=\"onRowSelectionChange\" /> callback prop to update the controlled <DPropLink name=\"rowSelection\" />\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-single-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n# Multi Row Selection\n\nYou can configure multiple selection for rows so users can interact with it through clicking around or via a checkbox selection column.\n\n## Using your mouse and keyboard to select rows\n\nIf you're using checkboxes for selection, users will be selecting rows via click or click + `cmd`/`ctrl` and `shift` keys, just like they are used to in their native Finder/Explorer applications.\n\n### Mouse interactions\n\nFor selecting with the mouse, the following gestures are supported (we tried to exactly replicate the logic/behaviour from MacOS Finder app, so most people should find it really intuitive):\n\n- clicking a row (with no modifier keys) will select that row, while clearing any existing selection\n- click + `cmd`/`ctrl` modifier key will toggle the selection for the clicked row while keeping any other existing selection. So if the row was not selected, it's being added to the current selection, while if the row was already selected, it's being removed from the selection\n- click + `shift` modifier key will perform a multi selection, starting from the last selection click where the `shift` key was not used.\n\n<Sandpack title=\"Multi row selection\">\n\n<Description>\n\nUse your mouse to select multiple rows. Expect click and click + `cmd`/`ctrl`/`shift` modifier keys to behave just like they are in the MacOS Finder app.\n\n</Description>\n\n```ts file=\"$DOCS/reference/default-selection-mode-multi-row-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Keyboard interactions\n\nBy default <PropLink name=\"keyboardSelection\" /> is enabled, so you can use the **spacebar** key to select multiple rows. Using the spacebar key is equivalent to doing a mouse click, so expect the combination of **spacebar** + `cmd`/`ctrl`/`shift` modifier keys to behave just like clicking + the same modifier keys.\n\n<Sandpack title=\"Multi row selection with keyboard support\">\n\n<Description>\n\nUse spacebar + optional `cmd`/`ctrl`/`shift` modifier keys just like you would do clicking + the same modifier keys.\n\n</Description>\n\n```ts file=\"$DOCS/reference/default-selection-mode-multi-row-keyboard-toggle-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nFor selecting all the rows in the table, you can use `cmd`/`ctrl` + `A` keyboard shortcut.\n\n</Note>\n\n## Using a selection checkbox\n\nSelection multiple rows is made easier when there is a checkbox column and even-more-so when there is grouping.\n\nConfiguring checkbox selection is as easy as specifying <PropLink name=\"columns.renderSelectionCheckBox\">renderSelectionCheckBox</PropLink> on any of the columns in the grid. <PropLink name=\"columns.renderSelectionCheckBox\">renderSelectionCheckBox</PropLink> can either be the boolean `true` or a render function that allows the customization of the selection checkbox.\n\n```ts {8}\nconst columns: InfiniteTablePropColumns<Developer> = {\n  id: {\n    field: 'id',\n    defaultWidth: 80,\n  },\n  country: {\n    // show the selection checkbox for this column\n    renderSelectionCheckBox: true,\n    field: 'country',\n  },\n  firstName: {\n    field: 'firstName',\n  },\n};\n```\n\n<Note>\n\nAny column can show a selection checkbox if <PropLink name=\"columns.renderSelectionCheckBox\">column.renderSelectionCheckBox</PropLink> is set to `true`.\n\nThere is nothing prevening you from providing multiple checkbox columns.\n\n</Note>\n\n<Sandpack title=\"Multi row selection with checkbox support\">\n\n<Description>\n\nUse the selection checkboxes to select rows. You can also use the spacebar key (+ optional shift modifier) to modify the selection\n\n</Description>\n\n```ts file=\"$DOCS/reference/default-checkbox-selection-multi-row-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Mouse interactions\n\nThe mouse interactions are the obvious ones you would expect from checkbox selection. Clicking a checkbox will toggle the selection for the correspondign row. Also, clicking the header checkbox will select/deselect all the rows in the table. The selection checkbox in the column header can be in an indeterminate state (when just some of the rows are selected), and when clicking it, it will become checked and select all rows.\n\n<Note>\n\nYou can use <PropLink name=\"columns.renderHeaderSelectionCheckBox\">renderHeaderSelectionCheckBox</PropLink> for a column to customize the checkbox in the column header. If no header selection checkbox is specified, <PropLink name=\"columns.renderSelectionCheckBox\">renderSelectionCheckBox</PropLink> will be used for the column header as well, just like it's used for grid rows.\n\n</Note>\n\n### Keyboard interactions\n\nWhen multi-row selection is configured to use checkboxes, you can still use your keyboard to select rows. Navigate to the desired row (you can have <PropLink name=\"keyboardNavigation\">keyboard navigation</PropLink> active for either cells or rows) and press the spacebar. If the row is not selected it will select it, otherwise it will deselect it.\n\n<Note>\n\nThe only supported modifier key when selecting a row by pressing **spacebar** is the `shift` key - it allows users to extend the selection over multiple rows, which is handy.\n\n</Note>\n\n## Specify a `rowSelection` value\n\nWhen multiple row selection is used, the <DPropLink name=\"rowSelection\" /> prop should be an object that can have the following shape:\n\n```ts\nconst rowSelection = {\n  selectedRows: [3, 6, 100, 23], // those specific rows are selected\n  defaultSelection: false, // while all other rows are deselected by default\n};\n\n// or\nconst rowSelection = {\n  deselectedRows: [3, 6, 100, 23], // those specific rows are deselected\n  defaultSelection: true, // all other rows are selected\n};\n\n// or, for grouped data - this example assumes groupBy=continent,country,city\n\n// for using this form of multi-row selection when you have grouping,\n// you have to specify DataSource.useGroupKeysForMultiRowSelection = true\nconst rowSelection = {\n  selectedRows: [\n    45, // row with id 45 is selected, no matter the group it is nested in\n    ['Europe', 'France'], // all rows in Europe/France are selected\n    ['Asia'], // all rows in Asia are selected\n  ],\n  deselectedRows: [\n    ['Europe', 'France', 'Paris'], // all rows in Paris are deselected\n  ],\n  defaultSelection: false, // all other rows are selected\n};\n```\n\nAs shown above, the `rowSelection.selectedRows` and `rowSelection.deselectedRows` arrays can either contain:\n\n- primary keys of rows (which are usually strings or numbers) - any non-array value inside `rowSelection.selectedRows`/`rowSelection.deselectedRows` is considered an id/primaryKey value for a leaf row in the grouped dataset.\n- arrays of group keys (can be combined with primary keys as well) - those arrays describe the path of the specified selected group. Please note that `rowSelection.selectedRows` can contain certain paths while `rowSelection.deselectedRows` can contain child paths of those paths ... or any other imaginable combination. For this kind of <DPropLink name=\"rowSelection\" />, you need to enable <DPropLink name=\"useGroupKeysForMultiRowSelection\" />.\n\n<Note>\n \nRow Selection only uses primary keys by default, even when you have grouped data.\n\nFor grouping however, you might want to use selection with group keys - for doing that, specify <DPropLink name=\"useGroupKeysForMultiRowSelection\">DataSource.useGroupKeysForMultiRowSelection=true</DPropLink>.\nNote that if you use selection with group keys, the selection will not be relevant/consistent when the <DPropLink name=\"groupBy\" /> changes.\n\nWhen you have both grouping and <DPropLink name=\"lazyLoad\">lazy loading</DPropLink>, <DPropLink name=\"useGroupKeysForMultiRowSelection\" /> must be enabled - read more about it in the note below.\n\n</Note>\n\n<Note>\n\nWhen <DPropLink name=\"lazyLoad\" /> is being used - this means not all available groups/rows have actually been loaded yet in the dataset - we need a way to allow you to specify that those possibly unloaded rows/groups are selected or not. In this case, the `rowSelection.selectedRows`/`rowSelection.deselectedRows` arrays should not have row primary keys as strings/numbers, but rather rows/groups specified by their full path (so <DPropLink name=\"useGroupKeysForMultiRowSelection\" /> should be set to `true`).\n\n```ts {6}\n// this example assumes groupBy=continent,country,city\nconst rowSelection = {\n  selectedRows: [\n    // row with id 45 is selected - we need this because in the lazyLoad scenario,\n    // not all parents might have been made available yet\n    ['Europe','Italy', 'Rome', 45],\n    ['Europe','France'], // all rows in Europe/France are selected\n    ['Asia'] // all rows in Asia are selected\n  ]\n  deselectedRows: [\n    ['Europe','Italy','Rome'] // all rows in Rome are deselected\n    // but note that row with id 45 is selected, so Rome will be\n    // rendered with an indeterminate selection state\n  ],\n  defaultSelection: false // all other rows are selected\n}\n```\n\nIn the example above, we know that there are 3 groups (`continent`, `country`, `city`), so any item in the array that has a 4th element is a fully specified leaf node. While lazy loading, we need this fully specified path for specific nodes, so we know which group rows to render with indeterminate selection.\n\n</Note>\n\n### Controlled selection with checkbox column\n\nWhen using the controlled <DPropLink name=\"rowSelection\" />, make sure to specify the <DPropLink name=\"onRowSelectionChange\" /> callback prop to update the selection accordingly as a result of user interaction.\n\n<Sandpack title=\"Multi row checkbox selection with grouping\" >\n\n<Description>\n\nThis example shows how you can use multiple row selection with a predefined controlled value.\n\nGo ahead and select some groups/rows and see the selection value adjust.\n\nThe example also shows how you can use the `InfiniteTableApi` to retrieve the actual ids of the selected rows.\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-multi-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Multi Selection with Lazy Load and Grouping\n\nProbably the most complex use-case for multi selection (with checkbox) is the combination of grouping and lazy-loading.\n\nIn this scenario, not all groups and/or rows are loaded at a given point in time, but we need to be able to know how to render each checkbox for each group - either checked, unchecked or indeterminate, all this depending on whether all children, at any nesting levels are selected or not.\n\nIn order to make this possible, the <DPropLink name=\"rowSelection\" /> value will only contain arrays (and not individual primary keys) in the `selectedRows` and `deselectedRows` arrays and the DataSource will be configured with <DPropLink name=\"useGroupKeysForMultiRowSelection\" />.\n\n<Sandpack title=\"Multi row checkbox selection with lazy data and grouping\" >\n\n<Description>\n\nThe `DataSet` has lazy loading and grouping.\n\nThe selection uses group keys (see <DPropLink name=\"useGroupKeysForMultiRowSelection\" />), so it can specify as selected even rows/groups that have not been loaded yet.\n\nNote in the example below that some of the group rows are partly selected, even if the leaf rows which are specified as selected in the <DPropLink name=\"rowSelection\" /> are not yet loaded.\n\n</Description>\n\n```ts file=\"$DOCS/reference/lazy-multi-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/sorting/multiple-sorting",
      "routePath": "/docs/learn/sorting/multiple-sorting",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/sorting/multiple-sorting.page.md",
      "fileName": "multiple-sorting.page.md",
      "folderPath": "/docs/learn/sorting/",
      "frontmatter": {
        "title": "Multiple Sorting",
        "description": "Docs and examples on applying multiple sorting to the DataSource for Infinite Table DataGrid"
      },
      "excerpt": "By default, if you don't specify otherwise, the DataGrid is configured with single sorting. For multiple sorting, you need to specify the sorting information as an array:",
      "readingTime": "6 min read",
      "content": "\nBy default, if you don't specify otherwise, the DataGrid is configured with single sorting. For multiple sorting, you need to specify the sorting information as an array:\n\n```tsx\n<DataSource<Developer>\n  primaryKey=\"id\"\n  data={data}\n  // we want an array here\n  defaultSortInfo={[]}\n>\n  <InfiniteTable<Developer> columns={columns} />\n</DataSource>\n```\n\n<Note>\n\nAn empty array means no sorting. However, it does specify that sorting is configured as multiple sorting, so it's useful to set it to `[]`\n\n</Note>\n\n<Sandpack title=\"Configuring multiple sorting with uncontrolled behavior\">\n\n<Description>\n\nTry clicking the `age` column and then the `firstName` column.\n\nIf the multi-sort behavior is `replace`, clicking the second column will remove the sort from the first column.\nIn order for the sorting to be additive, even if the behavior is `replace`, use the `Ctrl`/`Cmd` key while clicking the column header.\n\nIf the multi-sort behavior is `append`, clicking the second column will add it to the sort.\n\n</Description>\n\n```ts file=\"local-multi-sorting-example-defaults-with-local-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n## User interaction and multi sort behavior\n\nWhen `InfiniteTable` is configured with multiple sorting there are two supported behaviors:\n\n- `append` - when this behavior is used, clicking a column header adds that column to the alredy existing sort. If the column is already sorted, the sort direction is reversed. In order to remove a column from the sort, the user needs to click the column header in order to toggle sorting from ascending to descending and then to no sorting.\n- `replace` - the default behavior - a user clicking a column header removes any existing sorting and sets that column as sorted. In order to add a new column to the sort, the user needs to hold the `Ctrl/Cmd` key while clicking the column header.\n\n<Note>\n\nThe behavior of multiple sorting is configured via the <PropLink name=\"multiSortBehavior\" /> - the default value for this prop is `\"replace\"`.\n\n‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è The <PropLink name=\"multiSortBehavior\" /> prop is defined on the `InfiniteTable` component, not on the `DataSource` component - as it's the `InfiniteTable` that handles user interaction, even though the `DataSource` does the actual sorting.\n\n</Note>\n\n### Multi sort behavior - `append`\n\n#### Scenario 1\n\n- user clicks a column header to sort by that column - an ascending sort is added, and the column header will contain the sort index - `1`\n- if user clicks the same column, the sort direction is reversed - sort index is preserved as `1`, but descending order is set.\n- user clicks the same column again - the column is removed from the sort.\n\n#### Scenario 2\n\n- user clicks a column header to sort by that column - an ascending sort is added, and the column header will contain the sort index - `1`\n- user clicks another column - the new column is added to the sort, with ascending order and sort index `2`. The initial clicked column is still the sorted, and that sort is applied first. For equal values on column `1`, the sort by column `2` is applied.\n- user clicks column `2` again - the sort direction is reversed for the second column. So now the sort order is `1` ascending, `2` descending.\n- user clicks column `2` again - the column is removed from the sort. The sorting now only contains the first column, in ascending order.\n\n### Multi sort behavior - `replace`\n\n<Note>\n\nThis is the <PropLink code={false} name=\"multiSortBehavior\">default behavior</PropLink> for multiple sorting.\n</Note>\n\nIn the `replace` behavior, clicking a column header will remove any existing sorting and set that specific column as sorted.\n\nIn order to add a new column to the sort, the user needs to hold the `Ctrl`/`Cmd` key while clicking a column header. Holding the `Ctrl`/`Cmd` key while clicking a column header results in the same behavior as the `append`.\n\n## Controlled and uncontrolled sorting\n\nAs noted above, for multiple sorting, you need to specify an array of objects - see <TypeLink name=\"DataSourceSingleSortInfo\" /> for more on the shape of those objects:\n\n```ts\n// sort by age in descending order, then by `firstName` in ascending order\nsortInfo = [\n  { field: 'age', type: 'number', dir: -1 },\n  { field: 'firstName', dir: 1 },\n];\n\n// no sorting\nsortInfo = [];\n```\n\nThe simplest way to use multiple sorting is via the uncontrolled <DPropLink name=\"defaultSortInfo\" /> prop. Specify an empty array as the default value, and multiple sorting will be enabled.\n\nThis allows sorting by multiple fields (to which columns are bound) - you can specify however many you want - so when sorting two objects in the `DataSource`, the first `sortInfo` is used to compare the two, and then, on equal values, the next `sortInfo` is used and so on.\n\n<Note>\n\nIf you want to change the sorting from code, after the component is mounted, you need to use the controlled <DPropLink name=\"sortInfo\" /> prop.\n\nIn this case, make sure you update the <DPropLink name=\"sortInfo\" /> prop as a result of user interaction, by using the <DPropLink name=\"onSortInfoChange\" /> callback.\n\n</Note>\n\n<Sandpack title=\"Local + uncontrolled multi-sorting example\">\n\n<Description>\n\nThis table allows sorting multiple columns - initially the `country` column is sorted in descending order and the `salary` column is sorted in ascending order. `Ctrl`/`Cmd` + click the `salary` column to toggle the column sort to descending. `Ctrl`/`Cmd` clicking it a second time will remove it from the sort altogether.\n\n</Description>\n\n```ts file=\"local-uncontrolled-multi-sorting-example-with-remote-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Remote + uncontrolled multi-sorting example\">\n\n```ts file=\"remote-uncontrolled-multi-sorting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf you use uncontrolled sorting via <DataSourcePropLink name=\"defaultSortInfo\" /> there's no way to switch between single and multiple sorting after the component is mounted. If you have this use-case, you need to use the controlled <DataSourcePropLink name=\"sortInfo\" /> prop.\n\n</Note>\n\n## Remote Sorting\n\nSorting remotely makes a lot of sense when using a function as your <DataSourcePropLink name=\"data\" /> source. Whenever the sort information is changed, the function will be called with all the information needed to retrieve the data from the remote endpoint.\n\n<Note>\n\nFor remote sorting, make sure you specify <DataSourcePropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=true</DataSourcePropLink> - if you don't, the data will also be sorted locally in the browser (which most of the times will be harmless, but it means wasted CPU cycles).\n\n</Note>\n\n<Sandpack title=\"Remote + controlled multi-sorting example\">\n\n```ts file=\"remote-controlled-multi-sorting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nIn the example above, remote and controlled sorting are combined - because `shouldReloadData.sortInfo=true` is specified, the `<DataSource />` will call the `data` function whenever sorting changes, and will pass in the `dataParams` object that contains the sort information.\n"
    },
    {
      "filePath": "/docs/learn/sorting/overview",
      "routePath": "/docs/learn/sorting/overview",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/sorting/overview.page.md",
      "fileName": "overview.page.md",
      "folderPath": "/docs/learn/sorting/",
      "frontmatter": {
        "title": "Sorting",
        "description": "Docs and examples on sorting the DataSource for Infinite Table DataGrid"
      },
      "excerpt": "`InfiniteTable` comes with multiple sorting behaviours, which are described below.",
      "readingTime": "10 min read",
      "content": "\n`InfiniteTable` comes with multiple sorting behaviours, which are described below.\n\nBoth [single sorting](/docs/learn/sorting/single-sorting) and [multiple sorting](/docs/learn/sorting/multiple-sorting) are supported via the <DataSourcePropLink name=\"sortInfo\" /> and <DataSourcePropLink name=\"defaultSortInfo\" /> props.\n\n### Single Sorting\n\nFor [single sorting](/docs/learn/sorting/single-sorting), <DataSourcePropLink name=\"sortInfo\" /> (or the uncontrolled <DataSourcePropLink name=\"defaultSortInfo\" />) should an object like\n\n```ts\n// sort by `firstName`, in ascending order\nsortInfo = { field: 'firstName', dir: 1 };\n```\n\nor you can use\n\n```ts\n// no sorting\nsortInfo = null;\n```\n\nfor explicit no sorting.\n\n<Note>\n\nWhen you use controlled sorting via <DataSourcePropLink name=\"sortInfo\" />, make sure you also listen to <DataSourcePropLink name=\"onSortInfoChange\" /> for changes, to get notifications when sorting is changed by the user. Also, for controlled sorting, it's your responsibility to sort the data - read bellow in the [controlled and uncontrolled section](#controlled-and-uncontrolled-sorting).\n\n</Note>\n\nThe sort information object has the following shape (see <TypeLink name=\"DataSourceSingleSortInfo\" /> for details):\n\n- `dir` - `1 | -1` - the direction of the sorting\n- `field?` - `keyof DATA_TYPE` - the field to sort by - optional.\n- `id?` - `string` - if you don't sort by a field, you can specify an id of the column this sorting is bound to. Note that columns have a <PropLink name=\"columns.valueGetter\">valueGetter</PropLink>, which will be used when doing local sorting and the column is not bound to an exact field.\n- `type?` - the sort type - one of the keys in <DataSourcePropLink name=\"sortTypes\"/> - eg `\"string\"`, `\"number\"`, `\"date\"` - will be used for local sorting, to provide the proper comparison function.\n\n<Sandpack title=\"Local + uncontrolled single-sorting example\">\n\n<Description>\n\nThis example shows initial sorting by `salary` in ascending order. Click the header of the `salary` column to sort in descending order and then click it again to unsort.\n\n</Description>\n\n```ts file=\"local-uncontrolled-single-sorting-example-with-local-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nBy default, columns in the InfiniteTable DataGrid are sortable.\n\nIf you want to disable column sorting for all columns, use <PropLink name=\"columnDefaultSortable\">columnDefaultSortable=false</PropLink> and then you can turn it back on per-column, by setting <PropLink name=\"columns.sortable\">column.defaultSortable=true</PropLink>.\n\n</Note>\n\n### Multiple Sorting\n\nIf you want to use [multiple sorting](/docs/learn/sorting/multiple-sorting), specify an array of objects like\n\n```ts\n// sort by age in descending order, then by `firstName` in ascending order\nsortInfo = [\n  { field: 'age', type: 'number', dir: -1 },\n  { field: 'firstName', dir: 1 },\n];\n\n// no sorting\nsortInfo = [];\n```\n\nThis allows sorting by multiple fields (to which columns are bound) - you can specify however many you want - so when sorting two objects in the `DataSource`, the first `sortInfo` is used to compare the two, and then, on equal values, the next `sortInfo` is used and so on.\n\n<Sandpack title=\"Local + uncontrolled multi-sorting example\">\n\n<Description>\n\nThis table allows sorting multiple columns - initially the `country` column is sorted in descending order and the `salary` column is sorted in ascending order. Click the `salary` column to toggle the column sort to descending. Clicking it a second time will remove it from the sort altogether.\n\n</Description>\n\n```ts file=\"local-uncontrolled-multi-sorting-example-with-remote-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Remote + uncontrolled multi-sorting example\">\n\n```ts file=\"remote-uncontrolled-multi-sorting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf you use uncontrolled sorting via <DataSourcePropLink name=\"defaultSortInfo\" /> there's no way to switch between single and multiple sorting after the component is mounted. If you have this use-case, you need to use the controlled <DataSourcePropLink name=\"sortInfo\" /> prop.\n\n</Note>\n\n## Understanding local and remote sorting\n\nSorting can be done both locally in the browser and remotely on the server. When you want sorting to be performed remotely on the server, a change on the <DPropLink name=\"sortInfo\" /> should trigger a reload of the datasource. In order to achieve this, you need to specify <DPropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=true</DPropLink>.\n\nPossible values for <DPropLink name=\"shouldReloadData.sortInfo\"/> are `false` (sorting will be performed locally and won't trigger a reload of the <DPropLink name=\"data\" /> source) and `true` (sorting will be performed remotely and will trigger a reload of the data).\n\nThis allows you fine-grained control on how sorting is done, either in the client or on the server.\n\n### Uncontrolled sorting\n\nIf you use uncontrolled sorting (namely you don't care about updating the <DPropLink name=\"sortInfo\" /> yourself as a result of user interaction - via <DPropLink name=\"onSortInfoChange\" />) - then by default, the <DPropLink name=\"shouldReloadData.sortInfo\" /> is `false` unless you specify otherwise.\n\nYou can initially render the component with no sort state or you can specify a default sorting state, via the uncontrolled prop <DPropLink name=\"defaultSortInfo\" />.\n\n```tsx\n// initially render the component with ascending sorting on `firstName` field\n// also, note this is an array, so multiple sorting will be enabled\nconst defaultSortInfo = [{ field: 'firstName', dir: 1 }];\n\n<DataSource<Developer>\n  primaryKey=\"id\"\n  data={data}\n  defaultSortInfo={defaultSortInfo}\n>\n  <InfiniteTable />\n</DataSource>;\n```\n\nIf your data is remote and you want the sorting to happen on the backend, you can still use uncontrolled sorting, but you need to specify <DPropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=true</DPropLink>.\n\nUsing remote sort mode will trigger a call to the <DPropLink name=\"data\" /> function whenever sorting changes, so you can re-fetch the data from the backend, according to the new `sortInfo`.\n\nWhe `local` uncontrolled sorting is used, the `<DataSource />` sorts the data internally, based on the existing sorting information. To start with a specific `sortInfo`, use the <DataSourcePropLink name=\"defaultSortInfo\" /> prop. As the user interacts with the table, <DataSourcePropLink name=\"onSortInfoChange\" /> is being called with updated sort info and the `<DataSource />` continues to sort the data accordingly.\n\n<Note>\n\nThe <DataSourcePropLink name=\"defaultSortInfo\" /> prop is an uncontrolled prop, so it's all managed inside the `<DataSource />` component and you can't change it from the outside. If you need to control it from outside the component, use the <DataSourcePropLink name=\"sortInfo\" code={false}>controlled sortInfo</DataSourcePropLink> prop - read the next section for more details\n\n</Note>\n\n### Controlled Sorting\n\nWhen you use the controlled <DataSourcePropLink name=\"sortInfo\" /> prop, by default the <DPropLink name=\"shouldReloadData.sortInfo\" /> is set to `true`, unless you specify otherwise.\n\nAlso, be aware that when the user interacts with the DataGrid when controlled sorting is configured, the <DPropLink name=\"sortInfo\" /> prop will not update automatically - you need to listen to <DPropLink name=\"onSortInfoChange\" /> and update the <DPropLink name=\"sortInfo\" /> yourself.\n\nJust like with uncontrolled sorting, updating the controlled <DPropLink name=\"sortInfo\" /> when `shouldReloadData.sortInfo` is `true`, will trigger a call to the <DPropLink name=\"data\" /> function, so new sorted data can be re-fetched.\n\n<Note>\n\nWhen the controlled <DPropLink name=\"sortInfo\" /> is combined with <DPropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=false</DPropLink>, the `<DataSource />` will sort the data internally, on any changes of the sorting information.\n\nBut remember it's your responsibility to update the <DPropLink name=\"sortInfo\" /> prop when the user interacts with the DataGrid.\n\n</Note>\n\nBoth controlled <DataSourcePropLink name=\"sortInfo\" /> and uncontrolled <DataSourcePropLink name=\"defaultSortInfo\" /> work in combination with <DataSourcePropLink name=\"onSortInfoChange\" /> - use it to be notified when sorting changes, so you can react and update your app accordingly if needed.\n\n### Local Sorting\n\nWhen you use uncontrolled sorting locally, the `<DataSource />` will sort the data internally, based on the <DataSourcePropLink name=\"defaultSortInfo\" /> prop. Local sorting is available for any configured <DataSourcePropLink name=\"data\" /> source - be it an array or a function that returns a promise.\n\n<Note>\n\nYou can use <DataSourcePropLink name=\"onDataParamsChange\" />, which is called whenever any of the sorting, filtering, grouping or pivoting information changes.\n\n</Note>\n\n<Sandpack title=\"Local uncontrolled sorting + local data\">\n\n```ts file=\"local-uncontrolled-single-sorting-example-with-remote-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Local uncontrolled sorting + remote data\">\n\n```ts file=\"local-uncontrolled-single-sorting-example-with-remote-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Remote Sorting\n\nSorting remotely makes a lot of sense when using a function as your <DataSourcePropLink name=\"data\" /> source. Whenever the sort information is changed, the function will be called with all the information needed to retrieve the data from the remote endpoint.\n\n<Note>\n\nFor remote sorting, make sure you specify <DataSourcePropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=true</DataSourcePropLink> - if you don't, the data will also be sorted locally in the browser (which most of the times will be harmless, but it means wasted CPU cycles).\n\n</Note>\n\n<Sandpack title=\"Remote + controlled multi-sorting example\">\n\n```ts file=\"remote-controlled-multi-sorting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nIn the example above, remote and controlled sorting are combined - because `shouldReloadData.sortInfo=true` is specified, the `<DataSource />` will call the `data` function whenever sorting changes, and will pass in the `dataParams` object that contains the sort information.\n\n## Custom Sort Functions with `sortTypes`\n\nBy default, all columns are sorted as strings, even if they contain numeric values. To make numeric columns sort as numbers, you need to specify <PropLink name=\"columns.dataType\" code={false}>a `dataType` for the column</PropLink>, or, <PropLink name=\"columns.sortType\" code={false}>a column `sortType`</PropLink>.\n\nThere are 3 `dataType` values that can be used:\n\n- `\"string\"`\n- `\"number\"`\n- `\"date\"`\n\nEach dataType has its own sorting function and its own filtering operators & functions.\n\nSorting works in combination with the <PropLink name=\"sortTypes\" /> property, which is an object with keys being sort types and values being functions that compare two values of the same type.\n\n```ts\nconst sortTypes = {\n  string: (a, b) => a.localeCompare(b),\n  number: (a, b) => a - b,\n  date: (a, b) => a - b,\n};\n```\n\nThose are the three sort types supported by default.\n\n<Note>\n\nThe functions specified in the <PropLink name=\"sortTypes\" /> object need to always sort data in ascending order.\n\n</Note>\n\n<Note>\n\nA column can choose to use a specific <PropLink name=\"columns.sortType\" />, in which case, for local sorting, the corresponding sort function will be used, or, it can simply specify a <PropLink name=\"columns.dataType\">dataType</PropLink> and the `sortType` with the same name will be used (when no explicit <PropLink name=\"columns.sortType\">sortType</PropLink> is defined).\n\nTo conclude, the <PropLink name=\"columns.dataType\">dataType</PropLink> of a column will be used as the <PropLink name=\"columns.sortType\">sortType</PropLink> and <PropLink name=\"columns.filterType\">filterType</PropLink>, when those are not explicitly specified.\n\n</Note>\n\n<Sandpack  title=\"Custom sort by color - magenta will come first\">\n\n```ts file=\"$DOCS/reference/datasource-props/sortTypes-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIn this example, for the `\"color\"` column, we specified <PropLink name=\"columns.sortType\">column.sortType=\"color\"</PropLink> - we could have passed that as `column.dataType` instead, but if the grid had filtering, it wouldn't know what filters to use for \"color\" - so we used <PropLink name=\"columns.sortType\">column.sortType</PropLink> to only change how the data is sorted.\n\n</Note>\n\n<Note>\n\nWhen you provide a <DataSourcePropLink name=\"defaultSortInfo\"/> prop and the sorting information uses a custom <DataSourcePropLink name=\"sortTypes\">sortType</DataSourcePropLink>, make sure you specify that as the `type` property of the sorting info object.\n\n```tsx\ndefaultSortInfo={{\n  field: 'color',\n  dir: 1,\n  // note this custom sort type\n  type: 'color',\n}}\n```\n\nYou will need to have a property for that type in your <DataSourcePropLink name=\"sortTypes\"/> object as well.\n\n```tsx\nsortTypes={{\n  color: (a, b) => //...\n}}\n```\n\n</Note>\n\n## Replacing the sort function\n\nWhile there are many ways to customise sorting, including the <DPropLink name=\"sortTypes\" /> mentioned above, you might want to completely replace the sorting function used by the `<DataSource />` component.\n\nYou can do this by configuring the <DPropLink name=\"sortFunction\" /> prop.\n\n```tsx\nconst sortFunction = (sortInfo, dataArray) => {\n  // sort the dataArray according to the sortInfo\n  // and return the sorted array\n  // return sortedDataArray;\n};\n<DataSource<T> sortFunction={sortFunction} />;\n```\n\nThe function specified in the <DPropLink name=\"sortFunction\" /> prop is called with the <DPropLink name=\"sortInfo\" /> as the first argument and the data array as the second. It should return a sorted array, as per the <DPropLink name=\"sortInfo\" /> it was called with.\n\n<Note>\n\nWhen <DPropLink name=\"sortFunction\" /> is specified, <DPropLink name=\"shouldReloadData.sortInfo\" /> will be forced to `false`, as the sorting is done in the browser.\n</Note>\n\n<Sandpack  title=\"Using a custom sortFunction\">\n\n```ts file=\"$DOCS/reference/datasource-props/local-sortFunction-single-sorting-example-with-local-data-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/sorting/single-sorting",
      "routePath": "/docs/learn/sorting/single-sorting",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/sorting/single-sorting.page.md",
      "fileName": "single-sorting.page.md",
      "folderPath": "/docs/learn/sorting/",
      "frontmatter": {
        "title": "Single Sorting",
        "description": "Docs and examples on single-column sorting for Infinite Table DataGrid"
      },
      "excerpt": "By default, the Infinite Table is sortable - clicking a column will sort the grid by that column. Clicking again will reverse the sort and a third click on the column removes the sort altogether.",
      "readingTime": "10 min read",
      "content": "\nBy default, the Infinite Table is sortable - clicking a column will sort the grid by that column. Clicking again will reverse the sort and a third click on the column removes the sort altogether.\n\nAt any point, clicking another column header removes any existing column sort and performs a new sort by the clicked column.\n\n<Note>\n\nThis is called single sorting - only one column can be sorted at a time.\n\nTechnically, it's the `<DataSource />` that's being sorted, not the `<InfiniteTable />` component.\n\n</Note>\n\n<Sandpack title=\"Default behavior is single sorting.\">\n\n<Description>\n\nBy default, clicking a column header sorts the column.\n\n</Description>\n\n```ts file=\"local-single-sorting-example-defaults-with-local-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Apply a default sort order\n\nYou can specify a default sort order by using the <DataSourcePropLink name=\"defaultSortInfo\" /> prop - specify an object like\n\n```ts\n// sort by `firstName`, in ascending order\ndefaultSortInfo = { field: 'firstName', dir: 1 };\n```\n\n<Note>\n\n<DataSourcePropLink name=\"defaultSortInfo\" /> is an uncontrolled property, so updating the sorting by clicking a column header does not require you to respond to user actions via the <DataSourcePropLink name=\"onSortInfoChange\" />.\n\nUncontrolled sorting is managed internally by the `<DataSource />` component, so you don't need to worry about it.\n\nFor controlled sorting, make sure you use the <DataSourcePropLink name=\"sortInfo\" /> prop and the <DataSourcePropLink name=\"onSortInfoChange\" /> callback.\n\n</Note>\n\n<Sandpack title=\"Local + uncontrolled single-sorting example\">\n\n<Description>\n\nThe `age` column is sorted in ascending order.\n\n</Description>\n\n```ts file=\"local-uncontrolled-single-sorting-example-with-local-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Controlled sorting\n\nFor controlled, single sorting, use the <DataSourcePropLink name=\"sortInfo\" /> as an object like this:\n\n```ts\n// sort by `firstName`, in ascending order\nsortInfo = { field: 'firstName', dir: 1 };\n```\n\nor you can specify `null` for explicit no sorting\n\n```ts\n// no sorting\nsortInfo = null;\n```\n\n<Note>\n\nWhen you use controlled sorting via <DataSourcePropLink name=\"sortInfo\" />, make sure you also listen to <DataSourcePropLink name=\"onSortInfoChange\" /> for changes, to get notifications when sorting is changed by the user. Also, for controlled sorting, it's your responsibility to sort the data - read bellow in the [controlled and uncontrolled section](#controlled-and-uncontrolled-sorting).\n\n</Note>\n\n## Describing the sort order\n\nTo describe the sorting order, you have to use an object that has the following shape:\n\n- `dir` - `1 | -1` - the direction of the sorting\n- `field?` - `keyof DATA_TYPE` - the field to sort by - optional.\n- `id?` - `string` - if you don't sort by a field, you can specify an id of the column this sorting is bound to. Note that columns have a <PropLink name=\"columns.valueGetter\">valueGetter</PropLink>, which will be used when doing local sorting and the column is not bound to an exact field.\n- `type?` - the sort type - one of the keys in <DataSourcePropLink name=\"sortTypes\"/> - eg `\"string\"`, `\"number\"`, `\"date\"` - will be used for local sorting, to provide the proper comparison function.\n\n### Multiple Sorting\n\nIf you want to use multiple sorting, specify an array of objects like\n\n```ts\n// sort by age in descending order, then by `firstName` in ascending order\nsortInfo = [\n  { field: 'age', type: 'number', dir: -1 },\n  { field: 'firstName', dir: 1 },\n];\n\n// no sorting\nsortInfo = [];\n```\n\nThis allows sorting by multiple fields (to which columns are bound) - you can specify however many you want - so when sorting two objects in the `DataSource`, the first `sortInfo` is used to compare the two, and then, on equal values, the next `sortInfo` is used and so on.\n\n<Sandpack title=\"Local + uncontrolled multi-sorting example\">\n\n<Description>\n\nThis table allows sorting multiple columns - initially the `country` column is sorted in descending order and the `salary` column is sorted in ascending order. Click the `salary` column to toggle the column sort to descending. Clicking it a second time will remove it from the sort altogether.\n\n</Description>\n\n```ts file=\"local-uncontrolled-multi-sorting-example-with-remote-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Remote + uncontrolled multi-sorting example\">\n\n```ts file=\"remote-uncontrolled-multi-sorting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf you use uncontrolled sorting via <DataSourcePropLink name=\"defaultSortInfo\" /> there's no way to switch between single and multiple sorting after the component is mounted. If you have this use-case, you need to use the controlled <DataSourcePropLink name=\"sortInfo\" /> prop.\n\n</Note>\n\n## Understanding sort mode\n\nSorting can be done both locally in the browser and remotely on the server. For configuring where sorting is performed you need to specify the <DPropLink name=\"shouldReloadData.sortInfo\" ></DPropLink>. Possible values for <DPropLink name=\"shouldReloadData.sortInfo\"/> are `false` (for local sorting) and `true` (for remote sorting).\n\nThis allows you fine-grained control on how sorting is done, either in the client or on the server.\n\n### Uncontrolled sorting\n\nIf you use uncontrolled sorting (namely you don't care about updating the <DPropLink name=\"sortInfo\" /> yourself as a result of user interaction - via <DPropLink name=\"onSortInfoChange\" />) - then by default, the <DPropLink name=\"shouldReloadData.sortInfo\" /> is `false` (so local sorting) unless you specify otherwise.\n\nYou can initially render the component with no sort state or you can specify a default sorting state, via the uncontrolled prop <DPropLink name=\"defaultSortInfo\" />.\n\n```tsx\n// initially render the component with ascending sorting on `firstName` field\n// also, note this is an array, so multiple sorting will be enabled\nconst defaultSortInfo = [{ field: 'firstName', dir: 1 }];\n\n<DataSource<Developer>\n  primaryKey=\"id\"\n  data={data}\n  defaultSortInfo={defaultSortInfo}\n>\n  <InfiniteTable />\n</DataSource>;\n```\n\nIf your data is remote and you want the sorting to happen on the backend, you can still use uncontrolled sorting, but you need to specify <DPropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=true</DPropLink>.\n\nUsing remote sort mode will trigger a call to the <DPropLink name=\"data\" /> function whenever sorting changes, so you can re-fetch the data from the backend, according to the new `sortInfo`.\n\nWhe `local` uncontrolled sorting is used, the `<DataSource />` sorts the data internally, based on the existing sorting information. To start with a specific `sortInfo`, use the <DataSourcePropLink name=\"defaultSortInfo\" /> prop. As the user interacts with the table, <DataSourcePropLink name=\"onSortInfoChange\" /> is being called with updated sort info and the `<DataSource />` continues to sort the data accordingly.\n\n<Note>\n\nThe <DataSourcePropLink name=\"defaultSortInfo\" /> prop is an uncontrolled prop, so it's all managed inside the `<DataSource />` component and you can't change it from the outside. If you need to control it from outside the component, use the <DataSourcePropLink name=\"sortInfo\" code={false}>controlled sortInfo</DataSourcePropLink> prop - read the next section for more details\n\n</Note>\n\n### Controlled Sorting\n\nWhen you use the controlled <DataSourcePropLink name=\"sortInfo\" /> prop, by default the <DPropLink name=\"shouldReloadData.sortInfo\" /> is `true` (remote sorting), unless you specify otherwise.\n\nAlso, be aware that when the user interacts with the DataGrid when controlled sorting is configured, the <DPropLink name=\"sortInfo\" /> prop will not update automatically - you need to listen to <DPropLink name=\"onSortInfoChange\" /> and update the <DPropLink name=\"sortInfo\" /> yourself.\n\nJust like with uncontrolled sorting, updating the controlled <DPropLink name=\"sortInfo\" /> when `shouldReloadData.sortInfo=true`, will trigger a call to the <DPropLink name=\"data\" /> function, so new sorted data can be re-fetched.\n\n<Note>\n\nWhen the controlled <DPropLink name=\"sortInfo\" /> is combined with <DPropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=false</DPropLink>, the `<DataSource />` will sort the data internally, on any changes of the sorting information.\n\nBut remember it's your responsibility to update the <DPropLink name=\"sortInfo\" /> prop when the user interacts with the DataGrid.\n\n</Note>\n\nBoth controlled <DataSourcePropLink name=\"sortInfo\" /> and uncontrolled <DataSourcePropLink name=\"defaultSortInfo\" /> work in combination with <DataSourcePropLink name=\"onSortInfoChange\" /> - use it to be notified when sorting changes, so you can react and update your app accordingly if needed.\n\n### Local Sorting\n\nWhen you use uncontrolled sorting locally, the `<DataSource />` will sort the data internally, based on the <DataSourcePropLink name=\"defaultSortInfo\" /> prop. Local sorting is available for any configured <DataSourcePropLink name=\"data\" /> source - be it an array or a function that returns a promise.\n\n<Note>\n\nYou can use <DataSourcePropLink name=\"onDataParamsChange\" />, which is called whenever any of the sorting, filtering, grouping or pivoting information changes.\n\n</Note>\n\n<Sandpack title=\"Local uncontrolled sorting + local data\">\n\n```ts file=\"local-uncontrolled-single-sorting-example-with-remote-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Local uncontrolled sorting + remote data\">\n\n```ts file=\"local-uncontrolled-single-sorting-example-with-remote-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Remote Sorting\n\nSorting remotely makes a lot of sense when using a function as your <DataSourcePropLink name=\"data\" /> source. Whenever the sort information is changed, the function will be called with all the information needed to retrieve the data from the remote endpoint.\n\n<Note>\n\nFor remote sorting, make sure you specify <DataSourcePropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=true</DataSourcePropLink> - if you don't, the data will also be sorted locally in the browser (which most of the times will be harmless, but it means wasted CPU cycles).\n\n</Note>\n\n<Sandpack title=\"Remote + controlled multi-sorting example\">\n\n```ts file=\"remote-controlled-multi-sorting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nIn the example above, remote and controlled sorting are combined - because `shouldReloadData.sortInfo=true` is specified, the `<DataSource />` will call the `data` function whenever sorting changes, and will pass in the `dataParams` object that contains the sort information.\n\n## Custom Sort Functions with `sortTypes`\n\nBy default, all columns are sorted as strings, even if they contain numeric values. To make numeric columns sort as numbers, you need to specify <PropLink name=\"columns.dataType\" code={false}>a `dataType` for the column</PropLink>, or, <PropLink name=\"columns.sortType\" code={false}>a column `sortType`</PropLink>.\n\nThere are two `dataType` values that can be used:\n\n- `\"string\"`\n- `\"number\"`\n\nEach dataType has its own sorting function and its own filtering operators & functions.\n\nSorting works in combination with the <PropLink name=\"sortTypes\" /> property, which is an object with keys being sort types and values being functions that compare two values of the same type.\n\n```ts\nconst sortTypes = {\n  string: (a, b) => a.localeCompare(b),\n  number: (a, b) => a - b,\n};\n```\n\nThose are the two sort types supported by default.\n\n<Note>\n\nThe functions specified in the <PropLink name=\"sortTypes\" /> object need to always sort data in ascending order.\n</Note>\n\n<Note>\n\nA column can choose to use a specific <PropLink name=\"columns.sortType\" />, in which case, for local sorting, the corresponding sort function will be used, or, it can simply specify a <PropLink name=\"columns.dataType\">dataType</PropLink> and the `sortType` with the same name will be used (when no explicit <PropLink name=\"columns.sortType\">sortType</PropLink> is defined).\n\nTo conclude, the <PropLink name=\"columns.dataType\">dataType</PropLink> of a column will be used as the <PropLink name=\"columns.sortType\">sortType</PropLink> and <PropLink name=\"columns.filterType\">filterType</PropLink>, when those are not explicitly specified.\n\n</Note>\n\n<Sandpack  title=\"Custom sort by color - magenta will come first\">\n\n```ts file=\"$DOCS/reference/datasource-props/sortTypes-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIn this example, for the `\"color\"` column, we specified <PropLink name=\"columns.sortType\">column.sortType=\"color\"</PropLink> - we could have passed that as `column.dataType` instead, but if the grid had filtering, it wouldn't know what filters to use for \"color\" - so we used <PropLink name=\"columns.sortType\">column.sortType</PropLink> to only change how the data is sorted.\n\n</Note>\n\n<Note>\n\nWhen you provide a <DataSourcePropLink name=\"defaultSortInfo\"/> prop and the sorting information uses a custom <DataSourcePropLink name=\"sortTypes\">sortType</DataSourcePropLink>, make sure you specify that as the `type` property of the sorting info object.\n\n```tsx\ndefaultSortInfo={{\n  field: 'color',\n  dir: 1,\n  // note this custom sort type\n  type: 'color',\n}}\n```\n\nYou will need to have a property for that type in your <DataSourcePropLink name=\"sortTypes\"/> object as well.\n\n```tsx\nsortTypes={{\n  color: (a, b) => //...\n}}\n```\n\n</Note>\n\n## Replacing the sort function\n\nWhile there are many ways to customise sorting, including the <DPropLink name=\"sortTypes\" /> mentioned above, you might want to completely replace the sorting function used by the `<DataSource />` component.\n\nYou can do this by configuring the <DPropLink name=\"sortFunction\" /> prop.\n\n```tsx\nconst sortFunction = (sortInfo, dataArray) => {\n  // sort the dataArray according to the sortInfo\n  // and return the sorted array\n  // return sortedDataArray;\n};\n<DataSource<T> sortFunction={sortFunction} />;\n```\n\nThe function specified in the <DPropLink name=\"sortFunction\" /> prop is called with the <DPropLink name=\"sortInfo\" /> as the first argument and the data array as the second. It should return a sorted array, as per the <DPropLink name=\"sortInfo\" /> it was called with.\n\n<Note>\n\nWhen <DPropLink name=\"sortFunction\" /> is specified, <DPropLink name=\"shouldReloadData.sortInfo\" /> will be forced to `false`, as the sorting is done in the browser.\n</Note>\n\n<Sandpack  title=\"Using a custom sortFunction\">\n\n```ts file=\"$DOCS/reference/datasource-props/local-sortFunction-single-sorting-example-with-local-data-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/theming/css-variables",
      "routePath": "/docs/learn/theming/css-variables",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/theming/css-variables.page.md",
      "fileName": "css-variables.page.md",
      "folderPath": "/docs/learn/theming/",
      "frontmatter": {
        "title": "CSS Variables",
        "description": "Reference list of CSS variables that can be used to style the Infinite Table for React"
      },
      "excerpt": "Below you can find the complete list of CSS variables that can be used to style the component.",
      "readingTime": "9 min read",
      "content": "\nBelow you can find the complete list of CSS variables that can be used to style the component.\n\n{/* START VARS */}\n### Accent color\n\nBrand-specific accent color. This probably needs override to match your app.\n\n```css\n--infinite-accent-color\n```\n\n### Error color\n\n\n\n```css\n--infinite-error-color\n```\n\n### Color\n\nThe text color inside the component\n\n```css\n--infinite-color\n```\n\n### Space 0\n\n\n\n```css\n--infinite-space-0\n```\n\n### Space 1\n\n\n\n```css\n--infinite-space-1\n```\n\n### Space 2\n\n\n\n```css\n--infinite-space-2\n```\n\n### Space 3\n\n\n\n```css\n--infinite-space-3\n```\n\n### Space 4\n\n\n\n```css\n--infinite-space-4\n```\n\n### Space 5\n\n\n\n```css\n--infinite-space-5\n```\n\n### Space 6\n\n\n\n```css\n--infinite-space-6\n```\n\n### Space 7\n\n\n\n```css\n--infinite-space-7\n```\n\n### Space 8\n\n\n\n```css\n--infinite-space-8\n```\n\n### Space 9\n\n\n\n```css\n--infinite-space-9\n```\n\n### Space 10\n\n\n\n```css\n--infinite-space-10\n```\n\n### Font size 0\n\n\n\n```css\n--infinite-font-size-0\n```\n\n### Font size 1\n\n\n\n```css\n--infinite-font-size-1\n```\n\n### Font size 2\n\n\n\n```css\n--infinite-font-size-2\n```\n\n### Font size 3\n\n\n\n```css\n--infinite-font-size-3\n```\n\n### Font size 4\n\n\n\n```css\n--infinite-font-size-4\n```\n\n### Font size 5\n\n\n\n```css\n--infinite-font-size-5\n```\n\n### Font size 6\n\n\n\n```css\n--infinite-font-size-6\n```\n\n### Font size 7\n\n\n\n```css\n--infinite-font-size-7\n```\n\n### Font family\n\n\n\n```css\n--infinite-font-family\n```\n\n### Min height\n\n\n\n```css\n--infinite-min-height\n```\n\n### Border radius\n\n\n\n```css\n--infinite-border-radius\n```\n\n### Background\n\nThe background color for the whole component.\n\nOverriden in the `dark` theme.\n\n```css\n--infinite-background\n```\n\n### Icon size\n\n\n\n```css\n--infinite-icon-size\n```\n\n### Load mask padding\n\nThe padding used for the content inside the LoadMask.\n\n```css\n--infinite-load-mask-padding\n```\n\n### Load mask color\n\n\n\n```css\n--infinite-load-mask-color\n```\n\n### Load mask text background\n\n\n\n```css\n--infinite-load-mask-text-background\n```\n\n### Load mask overlay background\n\n\n\n```css\n--infinite-load-mask-overlay-background\n```\n\n### Load mask overlay opacity\n\n\n\n```css\n--infinite-load-mask-overlay-opacity\n```\n\n### Load mask border radius\n\n\n\n```css\n--infinite-load-mask-border-radius\n```\n\n### Header background\n\nBackground color for the header. Defaults to [`--infinie-header-cell-background`](#header-cell-background).\n\nOverriden in the `dark` theme.\n\n```css\n--infinite-header-background\n```\n\n### Header color\n\nThe text color inside the header.\n\nOverriden in the `dark` theme.\n\n```css\n--infinite-header-color\n```\n\n### Column header height\n\nThe height of the column header.\n\n```css\n--infinite-column-header-height\n```\n\n### Header cell background\n\nBackground for header cells.\n\nOverriden in the `dark` theme.\n\n```css\n--infinite-header-cell-background\n```\n\n### Header cell hover background\n\n\n\n```css\n--infinite-header-cell-hover-background\n```\n\n### Header cell padding\n\n\n\n```css\n--infinite-header-cell-padding\n```\n\n### Header cell padding x\n\n\n\n```css\n--infinite-header-cell-padding-x\n```\n\n### Header cell padding y\n\n\n\n```css\n--infinite-header-cell-padding-y\n```\n\n### Header cell icon size\n\n\n\n```css\n--infinite-header-cell-icon-size\n```\n\n### Header cell menu icon line width\n\n\n\n```css\n--infinite-header-cell-menu-icon-line-width\n```\n\n### Header cell sort icon margin\n\n\n\n```css\n--infinite-header-cell-sort-icon-margin\n```\n\n### Resize handle active area width\n\nThe width of the area you can hover over in order to grab the column resize handle.\nDefaults to `20px`.\n\nThe purpose of this active area is to make it easier to grab the resize handle.\n\n```css\n--infinite-resize-handle-active-area-width\n```\n\n### Resize handle width\n\nThe width of the colored column resize handle that is displayed on hover and on drag. Defaults to `2px`\n\n```css\n--infinite-resize-handle-width\n```\n\n### Resize handle hover background\n\nThe color of the column resize handle - the resize handle is the visible indicator that you see\nwhen hovering over the right-edge of a resizable column. Also visible on drag while doing a column resize.\n\n```css\n--infinite-resize-handle-hover-background\n```\n\n### Resize handle constrained hover background\n\nThe color of the column resize handle when it has reached a min/max constraint.\n\n```css\n--infinite-resize-handle-constrained-hover-background\n```\n\n### Filter operator padding x\n\n\n\n```css\n--infinite-filter-operator-padding-x\n```\n\n### Filter editor padding x\n\n\n\n```css\n--infinite-filter-editor-padding-x\n```\n\n### Filter editor margin x\n\n\n\n```css\n--infinite-filter-editor-margin-x\n```\n\n### Filter operator padding y\n\n\n\n```css\n--infinite-filter-operator-padding-y\n```\n\n### Filter editor padding y\n\n\n\n```css\n--infinite-filter-editor-padding-y\n```\n\n### Filter editor margin y\n\n\n\n```css\n--infinite-filter-editor-margin-y\n```\n\n### Filter editor background\n\n\n\n```css\n--infinite-filter-editor-background\n```\n\n### Filter editor border\n\n\n\n```css\n--infinite-filter-editor-border\n```\n\n### Filter editor focus border color\n\n\n\n```css\n--infinite-filter-editor-focus-border-color\n```\n\n### Filter editor border radius\n\n\n\n```css\n--infinite-filter-editor-border-radius\n```\n\n### Filter editor color\n\n\n\n```css\n--infinite-filter-editor-color\n```\n\n### Cell padding\n\n\n\n```css\n--infinite-cell-padding\n```\n\n### Cell border width\n\n\n\n```css\n--infinite-cell-border-width\n```\n\n### Cell border\n\nSpecifies the border for cells.\n\nOverriden in the `dark` theme - eg: `1px solid #2a323d`\n\n```css\n--infinite-cell-border\n```\n\n### Cell border invisible\n\n\n\n```css\n--infinite-cell-border-invisible\n```\n\n### Cell border radius\n\n\n\n```css\n--infinite-cell-border-radius\n```\n\n### Column reorder effect duration\n\n\n\n```css\n--infinite-column-reorder-effect-duration\n```\n\n### Pinned cell border\n\n\n\n```css\n--infinite-pinned-cell-border\n```\n\n### Cell color\n\nText color inside rows. Defaults to `currentColor`\n\nOverriden in `dark` theme.\n\n```css\n--infinite-cell-color\n```\n\n### Selected cell background\n\nThe background for selected cells, when cell selection is enabled.\n\nIf not specified, it will default to `var(--infinite-active-cell-background)`.\n\n```css\n--infinite-selected-cell-background\n```\n\n### Selected cell background default\n\n\n\n```css\n--infinite-selected-cell-background-default\n```\n\n### Selected cell background alpha\n\nThe opacity of the background color for the selected cell.\n\nIf not specified, it will default to the value for `var(--infinite-active-cell-background-alpha)`\n\n```css\n--infinite-selected-cell-background-alpha\n```\n\n### Selected cell background alpha table unfocused\n\nThe opacity of the background color for the selected cell, when the table is unfocused.\nIf not specified, it will default to `var(--infinite-active-cell-background-alpha--table-unfocused)`.\n\n```css\n--infinite-selected-cell-background-alpha--table-unfocused\n```\n\n### Selected cell border color\n\nThe color for border of the selected cell (when cell selection is enabled).\n Defaults to `var(--infinite-active-cell-border-color)`.\n\n```css\n--infinite-selected-cell-border-color\n```\n\n### Selected cell border width\n\nThe width of the border for the selected cell. Defaults to `var(--infinite-active-cell-border-width)`.\n\n```css\n--infinite-selected-cell-border-width\n```\n\n### Selected cell border style\n\nThe style of the border for the selected cell (eg: 'solid', 'dashed', 'dotted') - defaults to 'dashed'.\nDefaults to `var(--infinite-active-cell-border-style)`.\n\n```css\n--infinite-selected-cell-border-style\n```\n\n### Selected cell border\n\nSpecifies the border for the selected cell. Defaults to `var(--infinite-selected-cell-border-width) var(--infinite-selected-cell-border-style) var(--infinite-selected-cell-border-color)`.\n\n```css\n--infinite-selected-cell-border\n```\n\n### Active cell background alpha\n\nThe opacity of the background color for the active cell (when cell keyboard navigation is enabled).\nEg: 0.25\n\nIf `activeBackground` is not explicitly defined (this is the default), the background color of the active cell\nis the same as the border color (`activeBorderColor`), but with this modified opacity.\n\nIf `activeBorderColor` is also not defined, the accent color will be used.\n\nThis is applied when the component has focus.\n\n```css\n--infinite-active-cell-background-alpha\n```\n\n### Active cell background alpha table unfocused\n\nSame as the above, but applied when the component does not have focus.\n\n```css\n--infinite-active-cell-background-alpha--table-unfocused\n```\n\n### Active cell background\n\nThe background color of the active cell.\n\nIf not specified, it will default to `activeBorderColor` with the opacity of `activeBackgroundAlpha`.\nIf `activeBorderColor` is not specified, it will default to the accent color, with the same opacity as mentioned.\n\nHowever, specify this to explicitly override the default.\n\n```css\n--infinite-active-cell-background\n```\n\n### Active cell background default\n\n\n\n```css\n--infinite-active-cell-background-default\n```\n\n### Active cell border color\n\nThe color for border of the active cell (when cell keyboard navigation is enabled).\n\n```css\n--infinite-active-cell-border-color\n```\n\n### Active cell border width\n\nThe width of the border for the active cell.\n\n```css\n--infinite-active-cell-border-width\n```\n\n### Active cell border style\n\nThe style of the border for the active cell (eg: 'solid', 'dashed', 'dotted') - defaults to 'dashed'.\n\n```css\n--infinite-active-cell-border-style\n```\n\n### Active cell border\n\nSpecifies the border for the active cell. Defaults to `var(--infinite-active-cell-border-width) var(--infinite-active-cell-border-style) var(--infinite-active-cell-border-color)`.\n\n```css\n--infinite-active-cell-border\n```\n\n### Selection checkbox margin inline\n\n\n\n```css\n--infinite-selection-checkbox-margin-inline\n```\n\n### Menu background\n\n\n\n```css\n--infinite-menu-background\n```\n\n### Menu color\n\n\n\n```css\n--infinite-menu-color\n```\n\n### Menu padding\n\n\n\n```css\n--infinite-menu-padding\n```\n\n### Menu cell padding vertical\n\n\n\n```css\n--infinite-menu-cell-padding-vertical\n```\n\n### Menu cell padding horizontal\n\n\n\n```css\n--infinite-menu-cell-padding-horizontal\n```\n\n### Menu cell margin vertical\n\n\n\n```css\n--infinite-menu-cell-margin-vertical\n```\n\n### Menu item disabled background\n\n\n\n```css\n--infinite-menu-item-disabled-background\n```\n\n### Menu item active background\n\n\n\n```css\n--infinite-menu-item-active-background\n```\n\n### Menu item active opacity\n\n\n\n```css\n--infinite-menu-item-active-opacity\n```\n\n### Menu item pressed opacity\n\n\n\n```css\n--infinite-menu-item-pressed-opacity\n```\n\n### Menu item pressed background\n\n\n\n```css\n--infinite-menu-item-pressed-background\n```\n\n### Menu item disabled opacity\n\n\n\n```css\n--infinite-menu-item-disabled-opacity\n```\n\n### Menu border radius\n\n\n\n```css\n--infinite-menu-border-radius\n```\n\n### Menu shadow color\n\n\n\n```css\n--infinite-menu-shadow-color\n```\n\n### Rowdetail background\n\n\n\n```css\n--infinite-rowdetail-background\n```\n\n### Rowdetail padding\n\n\n\n```css\n--infinite-rowdetail-padding\n```\n\n### Rowdetail grid height\n\n\n\n```css\n--infinite-rowdetail-grid-height\n```\n\n### Row background\n\nBackground color for rows. Defaults to [`--infinite-background`](#background).\n\nOverriden in `dark` theme.\n\n```css\n--infinite-row-background\n```\n\n### Row odd background\n\nBackground color for odd rows. Even rows will use [`--infinite-row-background`](#row-background).\n\nOverriden in `dark` theme.\n\n```css\n--infinite-row-odd-background\n```\n\n### Row selected background\n\n\n\n```css\n--infinite-row-selected-background\n```\n\n### Active row background\n\nThe background color of the active row. Defaults to the value of `var(--infinite-active-cell-background)`.\n\nHowever, specify this to explicitly override the default.\n\n```css\n--infinite-active-row-background\n```\n\n### Active row border color\n\nThe border color for the active row. Defaults to the value of `var(--infinite-active-cell-border-color)`.\n\n```css\n--infinite-active-row-border-color\n```\n\n### Active row border width\n\nThe width of the border for the active row. Defaults to the value of `var(--infinite-active-cell-border-width)`.\n\n```css\n--infinite-active-row-border-width\n```\n\n### Active row border style\n\nThe style of the border for the active row (eg: 'solid', 'dashed', 'dotted') - defaults to the value of `var(--infinite-active-cell-border-style)`, which is `dashed` by default.\n\n```css\n--infinite-active-row-border-style\n```\n\n### Active row border\n\nSpecifies the border for the active row. Defaults to `var(--infinite-active-row-border-width) var(--infinite-active-row-border-style) var(--infinite-active-row-border-color)`.\n\n```css\n--infinite-active-row-border\n```\n\n### Active row background alpha\n\nThe opacity of the background color for the active row (when row keyboard navigation is enabled).\nWhen you explicitly specify `--infinite-active-row-background`, this variable will not be used.\nInstead, this variable is used when the active row background uses the color of the active cell (border).\n\nThis is applied when the component has focus.\n\nDefaults to the value of `var(--infinite-active-cell-background-alpha)`.\n\n```css\n--infinite-active-row-background-alpha\n```\n\n### Active row background alpha table unfocused\n\nSame as the above, but applied when the component does not have focus.\n\nWhen you explicitly specify `--infinite-active-row-background`, this variable will not be used.\nInstead, this variable is used when the active row background uses the color of the active cell (border).\n\nDefaults to the value of `var(--infinite-active-cell-background-alpha--table-unfocused)`.\n\n```css\n--infinite-active-row-background-alpha--table-unfocused\n```\n\n### Row hover background\n\nBackground color for rows, on hover.\n\nOverriden in the `dark` theme.\n\n```css\n--infinite-row-hover-background\n```\n\n### Row selected hover background\n\n\n\n```css\n--infinite-row-selected-hover-background\n```\n\n### Group row background\n\n\n\n```css\n--infinite-group-row-background\n```\n\n### Group row column nesting\n\n\n\n```css\n--infinite-group-row-column-nesting\n```\n\n### Row pointer events while scrolling\n\n\n\n```css\n--infinite-row-pointer-events-while-scrolling\n```{/* END VARS */}\n"
    },
    {
      "filePath": "/docs/learn/theming/index",
      "routePath": "/docs/learn/theming/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/theming/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/learn/theming/",
      "frontmatter": {
        "title": "Theming",
        "description": "Read our docs on the available themes and how you can customize the look and feel of InfiniteTable for React."
      },
      "excerpt": "`<InfiniteTable />` ships with a CSS file that you need to import in your codebase to make the component look as intended.",
      "readingTime": "3 min read",
      "content": "\n`<InfiniteTable />` ships with a CSS file that you need to import in your codebase to make the component look as intended.\n\n```ts\nimport '@infinite-table/infinite-react/index.css';\n```\n\nThis root CSS file includes the `\"default\"` theme.\n\nThe other available themes are\n\n  - `shadcn`\n  - `minimalist`\n  - `ocean`\n  - `balsam`\n\nand if you want to use any of them, you have to import their respective CSS file explicitly:\n\n```ts\nimport '@infinite-table/infinite-react/theme/shadcn.css'\nimport '@infinite-table/infinite-react/theme/balsam.css'\nimport '@infinite-table/infinite-react/theme/minimalist.css'\nimport '@infinite-table/infinite-react/theme/ocean.css'\n```\n\nEach theme CSS file includes both the **`light`** and the **`dark`** modes.\n\n<Note>\n\nVersion `6.2.0` is the first version where the root CSS file (`@infinite-table/infinite-react/index.css`) doesn't include all the themes. Previous to this version, simply importing the root CSS file gave you access to all available themes.\n\nSplitting each theme into a dedicated CSS file helps reduce the bundle size for our users, as most people will only use one theme for `<InfiniteTable />` in their apps.\n\n</Note>\n\n## Applying a theme\n\nThe following themes are currently available:\n\n - `default` - applied by default, no special configuration needed. It's included in the root CSS you need to import from `@infinite-table/infinite-react/index.css`\n - `balsam`\n - `minimalist`\n - `ocean`\n - `shadcn` - for this theme to correctly show up, make sure the shadcn CSS vars are available on page - see [shadcn theming](https://ui.shadcn.com/docs/theming) for details\n\n\nTo apply a theme (except the default one), you have to set the className `\"infinite-theme-name--THEME_NAME\"` to any parent element of the `<InfiniteTable />` component (or even on the component itself).\n\nYou will want to apply the theme name and theme mode classNames to the same element, so you'll end up with a className like `\"infinite-theme-name--minimalist infinite-theme-mode--dark\"`.\n\n```tsx title=\"Applying the minimalist theme with dark mode explicitly\"\n<body className=\"infinite-theme-mode--dark infinite-theme-name--minimalist\">\n  <DataSource {...dataSouceProps}>\n    <InfiniteTable {...props} />\n  </DataSource>\n</body>\n```\n\n\n\n<Snippet>\n\n<Description>\n\nExample configured with `minimalist` theme and `dark` mode by default.\n</Description>\n\n```tsx live title=\"Theme switching demo - defaults to minimalist theme in dark mode\" size=\"md\" viewMode=\"preview\" files=\"theme-switching-minimalist-theme-default-example.page.tsx,columns.ts\"\n```\n\n</Snippet>\n\n\n## Theme mode - light or dark\n\nAt runtime, the `light` or `dark` mode is applied based on the user OS settings for the [preferred color scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme).\n\nTo explicitly apply the light mode, apply the className `\"infinite-theme-mode--light\"` to any parent element of the `<InfiniteTable />` component.\n\nTo explicitly apply the dark mode, apply the className `\"infinite-theme-mode--dark\"` to any parent element of the `<InfiniteTable />` component.\n\n```tsx title=\"Explicitly applying light mode via container className\"\n<div className=\"infinite-theme-mode--light\">\n  <DataSource {...dataSouceProps}>\n    <InfiniteTable {...props} />\n  </DataSource>\n</div>\n```\n\nIf instead you specify a `infinite-theme-mode--dark` CSS className, the dark mode will be applied\n\n```tsx title=\"Explicitly applying dark theme via container className\"\n<body className=\"infinite-theme-mode--dark\">\n  <div>\n    <DataSource {...dataSouceProps}>\n      <InfiniteTable {...props} />\n    </DataSource>\n  </div>\n</body>\n```\n\n\n<Description>\nExample configured with `default` theme and `light` mode by default.\n</Description>\n\n```tsx live title=\"Theme switching demo - defaults to light theme\" size=\"md\" viewMode=\"preview\"  files=\"theme-switching-example.page.tsx,columns.ts\"\n\n```\n\n<Note>\n\nIf you don't explicitly have a `infinite-theme-mode--light` or `infinite-theme-mode--dark` ancestor, `InfiniteTable` will use the browser/OS preference (via `@media (prefers-color-scheme: ...)`) to apply the dark or light theme.\n\n</Note>\n\n## Available themes\n\n### Default theme\n\nThe `default` theme is applied when you don't specify any explicit theme by default.\n\n### Minimalist theme\n\nThe `minimalist` theme is inspired from minimalistic designs and is a good choice if you want to keep the UI simple and clean."
    },
    {
      "filePath": "/docs/learn/tree-grid/overview",
      "routePath": "/docs/learn/tree-grid/overview",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/tree-grid/overview.page.md",
      "fileName": "overview.page.md",
      "folderPath": "/docs/learn/tree-grid/",
      "frontmatter": {
        "title": "Using Tree Data",
        "description": "Learn how to use the Tree DataGrid to display tree data"
      },
      "excerpt": "",
      "readingTime": "5 min read",
      "content": "\n\nStarting with version `6.0.0`, Infinite Table has support for displaying tree data.\n\n<Note>\n\nTo show tree data, you have to use:\n - the `<TreeDataSource />` instead of `<DataSource />` component \n - the `<TreeGrid />` instead of `<InfiniteTable />` component.\n\nUnder the hood, those specialized components have better typing support for tree data, which will make it easier to work with them.\n</Note>\n\n<Note>\n\nTo specify which column will have the expand/collapse icon, set the <PropLink name=\"columns.renderTreeIcon\" /> prop to `true` for that column.\n\n</Note>\n\n\n<Sandpack title=\"Basic TreeGrid example\" size=\"lg\">\n\n```tsx file=\"basic-tree-grid-example.page.tsx\"\n```\n\n</Sandpack>\n\nThroughout the docs for the TreeGrid, we will use an example data source that illustrates file system data, as that will be familiar to most people.\n\n## Terminology\n\n\nWhen referring to rows in the TreeGrid, we'll prefer to use the term `\"node\"` instead of \"row\". So whenever you see `\"node\"` in the docs, you should know that it refers to a TreeGrid configuration of Infinite Table.\n\nAlso in the context of the TreeGrid, we'll use the term `\"node path\"` instead of row id. The `\"node path\"` is the array with the ids of all the parent nodes leading down to the current node. The node path includes the id of the current node.\n\n```tsx {2} title=\"Node path vs row id\"\nconst data = [\n  { id: '1', name: 'Documents',                // path: ['1']\n    children: [\n      { id: '10', name: 'Private',             // path: ['1', '10']\n        children: [\n          { id: '100', name: 'Report.docx' },  // path: ['1', '10', '100'] \n          { id: '101', name: 'Vacation.docx' },// path: ['1', '10', '101']\n        ],\n      },\n    ]\n  },\n  {\n    id: '2',\n    name: 'Downloads',                        // path: ['2']\n    children: [\n      {\n        id: '20',\n        name: 'cat.jpg',                      // path: ['2', '20']\n      },\n    ],\n  },\n];\n```\nIt's important to understand node paths, as that will be the primary way you'll interact with the TreeGrid/TreeDataSource.\n\n<Note>\n\nFor the initial version of the TreeGrid, it's safer if your node ids are unique globally, but as we refine the TreeGrid, it will be safe to use ids unique only within a node children (so unique relative to siblings).\n\n</Note>\n\n### Parent vs leaf nodes\n\nNodes with an array for their `nodesKey` property (defaults to `\"children\"`) are considered parent nodes. All other nodes are leaf nodes.\n\nWhen using the <TypeLink name=\"InfiniteTableRowInfo\" /> type, you can check for `isTreeNode` to determine if you're in a tree scenario. Also use the `isParentNode` property to check if a node is a parent node or not.\n\n## Data format for the TreeDataSource\n\nWhen using the `<TreeDataSource />` component, the data you specify in your `<DPropLink name=\"dataSource\" />` should resolve to a nested array - with the `nodesKey` containing the child items for each tree node.\n\n```tsx {2} title=\"Using the nodesKey prop to specify where the node children are\"\n<TreeDataSource\n  nodesKey=\"children\"\n  primaryKey=\"id\"\n  data={dataSource}\n/>\n```\n\nWith the `nodesKey` set to `\"children\"`, the `<TreeDataSource />` will look for the `children` property on each item in the data array, and use that to determine the child nodes for each tree node. Nodes without a `\"children\"` property are assumed to be leaf nodes.\n\n```tsx {2} title=\"Nested data structure for the TreeDataSource component\"\nconst dataSource = [\n  {\n    id: '1',\n    name: 'Documents',\n    children: [\n      {\n        id: '10',\n        name: 'Private',\n        children: [\n          {\n            id: '100',\n            name: 'Report.docx',\n          },\n          {\n            id: '101',\n            name: 'Vacation.docx',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '2',\n    name: 'Downloads',\n    children: [] // will be a parent node, with no children\n  },\n];\n```\n\n\n## Tree collapse and expand state\n\nThe `<TreeDataSource />` component allows you to fully configure & control the collapse and expand state of the tree nodes, via the <DPropLink name=\"treeExpandState\" />/<DPropLink name=\"defaultTreeExpandState\" /> props.\n\nBy default, if no expand state is specified, the tree will be rendered as fully expanded.\n\nHowever, you can choose to specify the expand state with a default value and then with specific values for node paths (or node ids)\n\n<Sandpack title=\"Using controlled tree expand state\" size=\"large\">\n\n```ts file=\"$DOCS/reference/datasource-props/tree-controlled-expandstate-example.page.tsx\"\n```\n\n</Sandpack>\n\n\nWhen using node paths for <DPropLink name=\"treeExpandState\" />, the object should have the following properties:\n\n- `defaultExpanded`: `boolean` - whether the tree nodes are expanded by default or not.\n- `collapsedPaths`: `string[]` - when `defaultExpanded` is `true`, this is a mandatory prop.\n- `expandedPaths`: `string[]` - when `defaultExpanded` is `false`, this is a mandatory prop.\n\n```tsx title=\"Example of treeExpandState with node paths\"\nconst treeExpandState = {\n  defaultExpanded: true,\n  collapsedPaths: [\n    ['1', '10'],\n    ['2', '20'],\n    ['5']\n  ],\n  expandedPaths: [\n    ['1', '4'],\n    ['5','nested node in 5'],\n  ],\n};\n```\n\n<Note>\n\nAs seen above, you can have a node specifically collapsed while other child nodes specifically expanded.\nSo you can combine the expanded/collapsed paths to achieve very complex tree layouts, which can be restored later.\n\n</Note>\n\n## Working with horizontal layout\n\nThe <PropLink name=\"wrapRowsHorizontally\" /> prop can be used to enable horizontal layout, just like non-tree DataGrids.\n\n<Sandpack title=\"TreeGrid with horizontal layout\" >\n\n```tsx file=\"tree-grid-horizontal-layout-example.page.tsx\"\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/tree-grid/tree-column",
      "routePath": "/docs/learn/tree-grid/tree-column",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/tree-grid/tree-column.page.md",
      "fileName": "tree-column.page.md",
      "folderPath": "/docs/learn/tree-grid/",
      "frontmatter": {
        "title": "Managing the tree column and expand/collapse icon",
        "description": "Learn how to render the tree expand/collapse icon and manage the tree column"
      },
      "excerpt": "When rendering a tree, you have to use the `<TreeGrid />` component instead of `<InfiniteTable />`.",
      "readingTime": "2 min read",
      "content": "\nWhen rendering a tree, you have to use the `<TreeGrid />` component instead of `<InfiniteTable />`.\n\nThe `<TreeGrid />` component is simply an `<InfiniteTable />` component with some props removed - those don't make sense for tree scenarios.\n\n\n<Note>\n\nBy default no tree column is rendered.\n\nTo specify the tree column, you have to to set the <PropLink name=\"columns.renderTreeIcon\" /> prop to `true` for your column of choice.\n\n</Note>\n\n```tsx {3} title=\"Specifying the tree column\"\nconst columns: Record<string, InfiniteTableColumn<FileSystemNode>> = {\n  name: { \n    renderTreeIcon: true,\n    field: 'name',\n    header: 'Name' \n  },\n  type: { field: 'type', header: 'Type' },\n  size: { field: 'sizeInKB', type: 'number', header: 'Size (KB)' },\n};\n```\nThis is very similar to how you specify the [selection column for multi-select configurations](/docs/learn/selection/row-selection#using-a-selection-checkbox).\n\n<Sandpack title=\"Specifying the tree column\">\n\n```tsx file=\"$DOCS/reference/treegrid-rendericon-default-example.page.tsx\"\n\n```\n</Sandpack>\n\n## Customizing the expand/collapse icon\n\nUsing the <PropLink name=\"columns.renderTreeIcon\">column.renderTreeIcon=true</PropLink> is obviously not enough to customize the expand/collapse icon.\n\nThis prop can also be a function that returns a React node.\n\n<Note>\n\nWith the default value of `true` for <PropLink name=\"columns.renderTreeIcon\" />, an icon will be rendered only for parent nodes.\n\nIf you want to render an icon for all nodes, specify a function (and differentiate between parent and leaf nodes), and it will be called regardless of whether the node is a parent or a leaf.\n\n</Note>\n\n<Sandpack title=\"Customizing the expand/collapse icon\">\n\n```tsx file=\"tree-custom-renderTreeIcon-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n\n"
    },
    {
      "filePath": "/docs/learn/tree-grid/tree-expand-and-collapse-state",
      "routePath": "/docs/learn/tree-grid/tree-expand-and-collapse-state",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/tree-grid/tree-expand-and-collapse-state.page.md",
      "fileName": "tree-expand-and-collapse-state.page.md",
      "folderPath": "/docs/learn/tree-grid/",
      "frontmatter": {
        "title": "Managing the tree expand/collapse state",
        "description": "Learn how to control which tree nodes are expanded or collapsed"
      },
      "excerpt": "By default, the tree will be rendered with all nodes expanded. This is fine for basic use cases, but as soon as you go into more complex scenarios, you will want to control which nodes are expanded or collapsed.",
      "readingTime": "3 min read",
      "content": "\nBy default, the tree will be rendered with all nodes expanded. This is fine for basic use cases, but as soon as you go into more complex scenarios, you will want to control which nodes are expanded or collapsed.\n\nThis is easy to achieve via the <DPropLink name=\"defaultTreeExpandState\" /> prop. This is an uncontrolled prop and allows you to initially specify the expand/collapse state of the tree - all subsequent user updates will result in the tree state being updated to match the UI actions.\n\n<Sandpack title=\"Specifying an initial tree expand state\" size=\"lg\">\n\n```tsx file=\"tree-default-expand-collapse-example.page.tsx\"\n```\n\n</Sandpack>\n\n## Understanding the tree expand state\n\n\nYou can specify the expand/collapse state of the tree in two ways:\n\n1. With node paths (recommended)\n\nWhen using node paths, the object should have the following properties:\n\n- `defaultExpanded`: `boolean` - whether the tree nodes are expanded by default or not.\n- `collapsedPaths`: `string[]` - when `defaultExpanded` is `true`, this is a mandatory prop.\n- `expandedPaths`: `string[]` - when `defaultExpanded` is `false`, this is a mandatory prop.\n\n```tsx title=\"Example of treeExpandState with node paths\"\nconst treeExpandState = {\n  defaultExpanded: true,\n  collapsedPaths: [\n    ['1', '10'],\n    ['2', '20'],\n    ['5']\n  ],\n  expandedPaths: [\n    ['1', '4'],\n    ['5','nested node in 5'],\n  ],\n};\n```\n\n2. With node ids\n\nWhen using node ids, the object should have the following properties:\n\n- `defaultExpanded`: `boolean` - whether the tree nodes are expanded by default or not.\n- `collapsedIds`: `string[]` - when `defaultExpanded` is `true`, this is a mandatory prop.\n- `expandedIds`: `string[]` - when `defaultExpanded` is `false`, this is a mandatory prop.\n\n\n```tsx title=\"Example of treeExpandState with node ids\"\nconst treeExpandState = {\n  defaultExpanded: true,\n  collapsedIds: ['1', '2', '5'],\n  expandedIds: ['10', '20', 'nested node in 5'],\n};\n```\n\n## Reacting to user actions\n\nYou can listen to the user interactions with the tree by using the <DPropLink name=\"onTreeExpandStateChange\">{`onTreeExpandStateChange(treeExpandState, {dataSourceApi, nodePath, nodeState})`}</DPropLink> callback. This callback is called with the new tree state whenever the user expands or collapses a node.\n\nIn addition to this callback, you can also use the following:\n\n - <DPropLink name=\"onNodeExpand\">{`onNodeExpand(nodePath, {dataSourceApi})`}</DPropLink>\n - <DPropLink name=\"onNodeCollapse\">{`onNodeCollapse(nodePath, {dataSourceApi})`}</DPropLink>\n\n<Note>\n\nThe <DPropLink name=\"onNodeExpand\" /> and <DPropLink name=\"onNodeCollapse\" /> callbacks are called when a node is expanded or collapsed, respectively - either via user interaction or by an API call. However, they will not be called when the <TreeApiLink name=\"expandAll\" /> or <TreeApiLink name=\"collapseAll\" /> methods are called.\n\n</Note>\n\n\n## Using controlled expand/collapse state\n\nIf you want maximum control over the collapse/expand state, you should use the controlled <DPropLink name=\"treeExpandState\" /> prop.\n\nThis will allow you to own the collapse/expand state entirely - but make sure you use the <DPropLink name=\"onTreeExpandStateChange\" /> callback to react to user actions or API calls being made to update the tree state.\n\n<Sandpack title=\"Using controlled expand/collapse state\" size=\"lg\">\n\n```tsx file=\"$DOCS/reference/datasource-props/tree-controlled-expandstate-example.page.tsx\"\n```\n</Sandpack>\n\n<Note>\n\nWhen using controlled <DPropLink name=\"treeExpandState\" />, you no longer need to use API calls.\n\nWhen you need to expand all nodes, simply set the <DPropLink name=\"treeExpandState\" /> to `{defaultExpanded: true, collapsedPaths: []}`.\n\nWhen you need to collapse all nodes, simply set the <DPropLink name=\"treeExpandState\" /> to `{defaultExpanded: false, expandedPaths: []}`.\n\n</Note>\n"
    },
    {
      "filePath": "/docs/learn/tree-grid/tree-icon-rendering",
      "routePath": "/docs/learn/tree-grid/tree-icon-rendering",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/tree-grid/tree-icon-rendering.page.md",
      "fileName": "tree-icon-rendering.page.md",
      "folderPath": "/docs/learn/tree-grid/",
      "frontmatter": {
        "title": "Using & rendering tree icons",
        "description": "Learn how to customize the tree icons"
      },
      "excerpt": "",
      "readingTime": "3 min read",
      "content": "\n\nTo make a column render the tree icon, you have to set <PropLink name=\"columns.renderTreeIcon\" /> to `true`. This will cause the default tree icon to be rendered for non-leaf nodes.\n\n```tsx {4} title=\"Specifying the tree icon for a column\"\nconst columns: Record<string, InfiniteTableColumn<FileSystemNode>> = {\n  name: {\n    field: 'name',\n    renderTreeIcon: true,\n  },\n  type: { field: 'type' },\n  extension: { field: 'extension' },\n  size: { field: 'sizeInKB', type: 'number' },\n};\n```\n\n<Note>\n\nIf you don't have <PropLink name=\"columns.renderTreeIcon\" /> set, there will be no tree column to render the tree icon.\n\n</Note>\n\n<Sandpack title=\"Tree icon rendering\" >\n\n```tsx file=\"tree-icon-default-example.page.tsx\"\n```\n\n</Sandpack>\n\n\n## Customizing the tree icon\n\nThere are multiple ways to customize the tree icon.\n\nFirst, you can very easily change the color of the icon. The color of the icon is controlled by the `--infinite-expand-collapse-icon-color` CSS variable, and defaults to  `--infinite-accent-color`, but you can also set it to any other color you want.\n\n```css title=\"Changing the color of the tree icon\"\n.Infinite {\n  --infinite-expand-collapse-icon-color: #6f6f6f;\n}\n```\n\n<Sandpack title=\"Customizing the tree icon color\" >\n\n```tsx file=\"tree-icon-custom-color-example.page.tsx\"\n```\n\n</Sandpack>\n\nIf you want to go further, use a function for the `column.renderTreeIcon` property - the next section will go into more detail on this.\n\n## Rendering a custom tree icon for both parent and leaf nodes\n\nWhen <PropLink name=\"columns.renderTreeIcon\" /> is `true`, the tree icon will be rendered only for parent nodes.\n\n<Note>\n\nIn your implementation of the `renderTreeIcon` function, you'll use the `rowInfo.nodeExpanded` property.\n\nNote that the property is only available for parent nodes, so you'll first have to use the `rowInfo.isParentNode` property as a TS discriminator to check if the node is a parent node.\n\n```tsx title=\"Checking if the node is a parent node\"\nconst renderTreeIcon = ({ rowInfo }) => {\n  if (!rowInfo.isParentNode) {\n    // rowInfo.nodeExpanded not available here\n    return <FileIcon />;\n  }\n  \n  // it's now OK for TS to use rowInfo.nodeExpanded\n  return  <FolderIcon open={rowInfo.nodeExpanded} onClick={toggleCurrentTreeNode} />\n};\n```\n</Note>\n\nHowever when you specify a function, it will be called for both parent and leaf nodes (if you don't want an icon for leaf nodes, simply return `null`).\n\nThis gives you maximum flexibility to icons. A common example is a file explorer, where you might want to render icons not only for folders, but also for files.\n\n<Sandpack title=\"Rendering a custom tree icon for both parent and leaf nodes\" >\n\n<Description>\n\nThis example renders a custom tree icon and uses the `toggleCurrentTreeNode` function to toggle the node state when Clicked. `toggleCurrentTreeNode` is a property of the argument passed to the `renderTreeIcon` function.\n\n</Description>\n\n```tsx file=\"tree-icon-custom-example.page.tsx\"\n```\n\n</Sandpack>\n\n\n<Note>\n\nIf you implement a custom <PropLink name=\"columns.renderTreeIcon\" /> function for your column, you can still use the default tree icon.\n\nUse `renderBag.treeIcon` property in the JSX you return (the `renderBag` is available as a property of the `cellContext` argument of the `renderTreeIcon` function).\n\n</Note>\n"
    },
    {
      "filePath": "/docs/learn/tree-grid/tree-selection",
      "routePath": "/docs/learn/tree-grid/tree-selection",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/tree-grid/tree-selection.page.md",
      "fileName": "tree-selection.page.md",
      "folderPath": "/docs/learn/tree-grid/",
      "frontmatter": {
        "title": "Using tree selection",
        "description": "Learn how to leverage the tree and specify the tree selection state"
      },
      "excerpt": "When using a tree grid, a common use-case is to allow users to select nodes, both parent and child nodes.",
      "readingTime": "3 min read",
      "content": "\nWhen using a tree grid, a common use-case is to allow users to select nodes, both parent and child nodes.\n\nThe `<TreeDataSource>` component allows you to specify an initial tree selection, via the `defaultTreeSelection` prop.\n\n<Note>\n\nWhen using <DPropLink name=\"defaultTreeSelection\" /> or its controlled counterpart <DPropLink name=\"treeSelection\" />, if no <DPropLink name=\"selectionMode\" /> is specified, the selection mode will default to `\"multi-row\"`.\n\n</Note>\n\n<Note>\n\nIf you enable selection, don't forget to specify which column should render a selection checkbox, by using <PropLink name=\"columns.renderSelectionCheckBox\">renderSelectionCheckBox=true</PropLink>.\n\n</Note>\n\n```tsx title=\"Example of tree selection value with default selection set to false\"\nimport type { TreeSelectionValue } from '@infinite-table/infinite-react';\n\n// Default selection is false, with some selected node paths: ['1'] and ['2', '20']\n// however, node ['1', '10'] is deselected\nconst treeSelectioDefaultDeselected: TreeSelectionValue = {\n  defaultSelection: false,\n  selectedPaths: [['1'], ['2', '20']],\n  deselectedPaths: [['1', '10']],\n};\n\n```\n\n```tsx title=\"Example of tree selection value with default selection set to true\"\n// Default selection is true, with some deselected node paths: ['2'] and ['3']\n// however, inside ['3'], we have a selected node ['3','30','301']\nconst treeSelectionDefaultSelected: TreeSelectionValue = {\n  defaultSelection: true,\n  deselectedPaths: [['2'], ['3']],\n  selectedPaths: [['3','30','301']],\n};\n```\n\n<Sandpack title=\"Using default tree selection\" size=\"lg\">\n\n```tsx file=\"tree-default-selection-example.page.tsx\"\n```\n\n</Sandpack>\n\n\nWhen using <DPropLink name=\"defaultTreeSelection\" code={false}>uncontrolled tree selection</DPropLink>, the `<TreeDataSource />` will manage the selection state internally, and will update it as a result of user actions. If you want to change the selection, you can use [the Tree API](/docs/reference/tree-api) to do so: <TreeApiLink name=\"selectNode\"  />, <TreeApiLink name=\"deselectNode\" />, <TreeApiLink name=\"selectAll\" />, <TreeApiLink name=\"deselectAll\" />, etc.\n\n## Reacting to user actions\n\nTo listen to selection changes, you can use the <DPropLink name=\"onTreeSelectionChange\" /> callback.\n\nThis callback is called both when the user interacts with the grid, and when you use the [Tree API](/docs/reference/tree-api) to change the selection.\n\n\n## Using controlled tree selection\n\nWhen using the controlled <DPropLink name=\"treeSelection\" /> prop, you have to make sure you update the tree selection via <DPropLink name=\"onTreeSelectionChange\" />.\n\nControlled tree selection also gives you a more declarative way to manage the selection state.\nYou no longer have to call [Tree API](/docs/reference/tree-api) methods to change the selection. Simply pass a new tree selection state object to the <DPropLink name=\"treeSelection\" /> prop and the tree grid will be updated accordingly.\n\nFor example, if you want to select all nodes, set the <DPropLink name=\"treeSelection\" /> prop to:\n\n```tsx title=\"Tree selection value to show all nodes as selected\"\n{\n  defaultSelection: true,\n  deselectedPaths: [],\n}\n```\n\nFor deselecting all nodes, the value should be:\n\n```tsx title=\"All nodes as deselected\"\n{\n  defaultSelection: false,\n  selectedPaths: [],\n}\n```\n\nUsing controlled tree selection also gives you an easy way to restore a previously saved tree selection at any point in time.\n\n<Sandpack title=\"Using controlled tree selection\" size=\"lg\">\n\n```tsx file=\"tree-controlled-selection-example.page.tsx\"\n```\n\n</Sandpack>\n\n"
    },
    {
      "filePath": "/docs/learn/working-with-data/handling-dates",
      "routePath": "/docs/learn/working-with-data/handling-dates",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/working-with-data/handling-dates.page.md",
      "fileName": "handling-dates.page.md",
      "folderPath": "/docs/learn/working-with-data/",
      "frontmatter": {
        "title": "Handling Date Objects",
        "description": "Learn how to display, manipulate and render dates with Infinite Table"
      },
      "excerpt": "InfiniteTable can handle dates just like any other data type - make sure you specify <PropLink name=\"columns.type\" code={false}>type=\"date\"</PropLink> for date columns.",
      "readingTime": "2 min read",
      "content": "\nInfiniteTable can handle dates just like any other data type - make sure you specify <PropLink name=\"columns.type\" code={false}>type=\"date\"</PropLink> for date columns.\n\nIf your date column does not specify a custom <PropLink name=\"columns.valueFormatter\" code={false}>formatter</PropLink> or <PropLink code={false} name=\"columns.renderValue\">renderer</PropLink>, by default the date will be formatted using the [`toLocaleDateString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString) method of the date object.\n\n<Note>\n\nFor date columns, make sure you specify <PropLink name=\"columns.type\">column.type=\"date\"</PropLink>.\n\nThis will ensure that the column is sorted correctly (as per the available <DPropLink name=\"sortTypes\"/>) and that the default date formatting is applied.\n\n</Note>\n\n<Sandpack title=\"Using date objects\">\n\n<Description>\n\nIn this example, the `birthDate` column contains dates and we customized the way they are displayed.\n\n```tsx\nconst renderValue = ({ value }: { value: Date }) => {\n  return <b>{value.toISOString().split('T')[0]}</b>;\n};\n```\n\nIf no custom `renderValue` was specified, the dates would have been formatted using the `Date.toLocaleDateString()`\n</Description>\n\n```ts file=\"dates-with-local-data-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Using date strings\n\n<Note>\n\nIf your dates are not `instanceof Date` but strings or numbers (timestamps) then it's better not to use the <PropLink name=\"columns.type\">column.type=\"date\"</PropLink> but rather to specify a custom <PropLink name=\"columns.type\">column.type</PropLink> along with <DPropLink name=\"sortTypes\"/>.\n</Note>\n\nFor the case when your dates are not actually dates, but date strings (the same applies to timestamps), you have to define your sorting function.\n\n```tsx\nconst sortTypes = {\n  mydatestring: (a: string, b: string) => {\n    // use your preferred date parsing library\n    // to turn a string into date and then compare the two values\n    return new Date(a).getTime() - new Date(b).getTime();\n  },\n};\n```\n\nWhen then pass the <DPropLink name=\"sortTypes\"/> to the `<DataSource />` component and configure our date column to be of type `\"mydatestring\"` (it should match the key you specified in your `sortTypes` definition).\n\n<Sandpack title=\"Using date strings\">\n\n<Description>\n\nIn this example, the `birthDate` column contains dates as strings, so we have to define a custom column.type and sort type.\n\n</Description>\n\n```ts file=\"date-strings-with-local-data-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/working-with-data/index",
      "routePath": "/docs/learn/working-with-data/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/working-with-data/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/learn/working-with-data/",
      "frontmatter": {
        "title": "Working with Data",
        "description": "Learn how to visualise and manage your data in new ways with Infinite Table"
      },
      "excerpt": "When working with data, you will mostly interact with the `<DataSource />` component, which is responsible for handling and managing the data and passing it down to the `<InfiniteTable />` component, which is the rendering engine for the DataGrid.",
      "readingTime": "4 min read",
      "content": "\nWhen working with data, you will mostly interact with the `<DataSource />` component, which is responsible for handling and managing the data and passing it down to the `<InfiniteTable />` component, which is the rendering engine for the DataGrid.\n\nSo we provide those two components (as named exports) inside `@infinite-table/infinite-react` package:\n\n- `<DataSource />` - our data-handling component\n- `<InfiniteTable />` - our virtualized component\n\nThe `<DataSource/>` component is responsible for the data the management layer.\n\n<Note>\n\nProbably the most important prop for the `<DataSource />` component is the <DPropLink name=\"idProperty\" /> prop. It specifies the property of the data object that is used as a unique identifier for data rows/items.\n\n```tsx\n<DataSource<DATA_TYPE>\n  idProperty=\"id\"\n  data={[]} // or a Promise or function returning a Promise.\n/>\n```\n\n</Note>\n\nThe `<DataSource />` is a generic React TypeScript component that can be bound to an array of items of the generic type.\n\n<Note>\n\nIn this documentation, we'll use `DATA_TYPE` when referring to the generic type. Rarely, we'll use `T`.\n\n```tsx\n<DataSource<DATA_TYPE>>\n  <InfiniteTable<DATA_TYPE> />\n</DataSource>\n```\n\nMost of our examples in these docs have a `Developer` or `Employee` TypeScript data type used as the generic type for the `<DataSource />` component.\n\n</Note>\n\n```tsx\nimport { DataSource } from '@infinite-table/infinite-react';\n\ntype Employee = {\n  id: string | number;\n  name: string;\n  salary: number;\n  department: string;\n  company: string;\n};\n\nconst employees: Employee[] = [\n  { id: 1, name: 'Bob', salary: 10_000, department: 'IT', company: 'Bobsons' },\n  {\n    id: 2,\n    name: 'Alice',\n    salary: 20_000,\n    department: 'IT',\n    company: 'Bobsons',\n  },\n  { id: 3, name: 'John', salary: 30_000, department: 'IT', company: 'Bobsons' },\n];\n\n<DataSource<Employee> primaryKey={'id'} data={employees} />;\n```\n\nIn the snippet above, we see 3 important details:\n\n1. the component is bound to the `Employee` type\n2. we use a `primaryKey` property - here it is `id`, but since the bound type is `Employee`, `primaryKey` is `keyof Employee`\n3. we pass the `employees` array as the `data` property.\n\n<Note>\n\nThe <DataSourcePropLink name=\"data\" /> prop can be either:\n\n- an array of the bound generic type - here `Employee[]`\n- a Promise tha resolves to an array like the above\n- a function that returns any of the above\n\n</Note>\n\n```ts live title=\"Data loading example with promise\" file=\"basic-example.page.tsx\"\n\n```\n\n\n## Data Loading Strategies\n\nWe're aware there are countless strategies for loading data - each with its own strengths. We decided we should focus on building what we do best, namely building virtualized components, so we encourage you to use your preferred data-fetching library/solution. This being said, we still provide you with the flexibility you need when using the `<DataSource/>`, so here's what you can use for the <DPropLink name=\"data\" /> prop of the component:\n\n- an array of the bound type\n- a Promise that resolves to an array of the bound type\n- a function that returns any of the above\n\nWhile you're loading the data, you can always render a loading indicator - pass the <DataSourcePropLink name=\"loading\" /> prop into the component (along with <PropLink name=\"loadingText\" /> prop in the `<InfiniteTable />` component if you want to customize the message).\n\n### Using fetch\n\nFor basic datasets, which have simple data requirements, using `fetch` is probably sufficient, so here is an example:\n\n<Sandpack title=\"Using fetch for remote data\">\n\n```ts files=[\"using-fetch-example.page.tsx\",\"columns.ts\"]\n\n```\n\n</Sandpack>\n\n#### Re-fetching on change\n\nIt's important to note you can re-fetch data by changing the reference you pass as the `data` prop to the `<DataSource/>` component.\n\n<Note>\n\nPassing another <DPropLink name=\"data\"/> function, will cause the component to re-execute the function and thus load new data.\n\nAlternatively, you can use the <DPropLink name=\"refetchKey\" /> prop to trigger a re-fetch - give it a new value (eg: use it as a counter, and increment it) and the component will re-fetch the data.\n\n</Note>\n\n<Sandpack title=\"Re-fetching data\">\n\n```ts files=[\"refetch-example.page.tsx\",\"columns.ts\"]\n\n```\n\n</Sandpack>\n\n## Live Updates\n\nYou can update your data in real-time by using our [DataSource API](/docs/reference/datasource-api).\n\n<HeroCards>\n<YouWillLearnCard title=\"DataSource API\" path=\"/docs/learn/working-with-data/updating-data-in-realtime\">\nRead more about how to use our API to update your data in real-time\n</YouWillLearnCard>\n\n</HeroCards>\n"
    },
    {
      "filePath": "/docs/learn/working-with-data/lazy-loading",
      "routePath": "/docs/learn/working-with-data/lazy-loading",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/working-with-data/lazy-loading.page.md",
      "fileName": "lazy-loading.page.md",
      "folderPath": "/docs/learn/working-with-data/",
      "frontmatter": {
        "title": "Lazy Loading"
      },
      "excerpt": "With `InfiniteTable` you can lazily load data on demand - loading data is triggered by the user scrolling to a certain visible row range. So when the user stopped scrolling (after <PropLink name=\"scrollStopDelay\" /> ms passed), the `DataSource` is loading the records that are in the viewport. Also, the table will render as if all the remote data is loaded into viewport - so the scroll height is correspondingly set.",
      "readingTime": "3 min read",
      "content": "\nWith `InfiniteTable` you can lazily load data on demand - loading data is triggered by the user scrolling to a certain visible row range. So when the user stopped scrolling (after <PropLink name=\"scrollStopDelay\" /> ms passed), the `DataSource` is loading the records that are in the viewport. Also, the table will render as if all the remote data is loaded into viewport - so the scroll height is correspondingly set.\n\nWe call this `\"lazy loading\"`, and it needs to be enabled by specifying the <DataSourcePropLink name=\"lazyLoad\">DataSource.lazyLoad</DataSourcePropLink> prop.\n\n<Sandpack title=\"Lazy loading ungrouped and unpivoted data\">\n\n```ts file=\"simple-lazy-load-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nThe <DataSourcePropLink name=\"lazyLoad\">DataSource.lazyLoad</DataSourcePropLink> prop can be either a boolean or an object with a `batchSize: number` property. If `batchSize` is not specified, it will load all records from the current row group (makes sense for grouped and/or pivoted data). For ungrouped and unpivoted data, make sure you set `batchSize` to a conveninent number.\n\nSimply specifying `lazyLoad=true` makes more sense for grouped (or/and pivoted) data, where you want to load all records from the current level at once. If you want configure it this way, new data will only be requested when a group row is expanded.\n\n</Note>\n\nFor lazy loading to work, the <DataSourcePropLink name=\"data\" /> function in the `<DataSource/>` component must return a Promise that resolves to an an object with `data` and `totalCount` properties.\n\n```tsx\n{\n  data: [ ... ],\n  totalCount: 10000\n}\n```\n\nThe <DPropLink name=\"data\">DataSource.data</DPropLink> function will be called with an object with the following properties:\n\n- `sortInfo` - details about current sorting state\n- `pivotBy` - an array that describes the current pivot state\n- `aggregationReducers` - an object with the aggregation to apply to the data\n- `groupBy` - array that specifies the current grouping information\n- `groupKeys` - an array of the current group keys (if grouping is enabled). This uniquely identifies the current group.\n\n- `lazyLoadStartIndex` - the index (in the total remote datasource) of the first record to be loaded\n- `lazyLoadBatchSize` - the number of records to be loaded in this batch\n\n<HeroCards>\n<YouWillLearnCard title=\"Server-side Grouping Rows\" path=\"/docs/learn/grouping-and-pivoting/grouping-rows#server-side-grouping-with-lazy-loading\">\nFind out about server-side grouping\n</YouWillLearnCard>\n<YouWillLearnCard title=\"Pivoting\" path=\"/docs/learn/grouping-and-pivoting/pivoting/overview#server-side-pivoting\">\nFind out about server-side pivoting\n</YouWillLearnCard>\n</HeroCards>\n\n## How lazy loading fetches data\n\nWhen lazy loading is enabled, and the <DPropLink name=\"sortInfo\" />  changes (eg: user clicks on a column header), the DataGrid will discard current data and call the <DPropLink name=\"data\" /> function prop again, to fetch the new data. The same happens when the <DPropLink name=\"filterValue\" /> or <DPropLink name=\"groupBy\" /> changes. This is done automatically by the component, and you don't need to do anything.\n\n<Sandpack title=\"Lazy loading grouped data\" viewMode=\"preview\">\n\n<Description>\n\nThis demo lazily loads grouped data as the user scrolls down. Expand some groups to see the lazy loading in action.\n\nWhen the user stops scrolling, after <PropLink name=\"scrollStopDelay\" /> milliseconds, the DataGrid will fetch the next batch of data from the server.\n\n</Description>\n\n```ts file=\"grouped-lazy-load-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n<Note>\n\nBatching also happens for groups - when a group is expanded, the DataGrid will fetch the first batch of data in the expanded group and then fetch additional batches as the user scrolls down. When scrolling goes beyound the group, the DataGrid is smart enough to request a batch of data from sibling groups.\n\n</Note>\n\n<Note>\n\nLazy loading when grouping is enabled needs data for non-leaf rows to be in another format (as opposed to the format used for non-grouped data or for the non-grouped scenario). See example above for details.\n\nFor more docs on this, read [Server side grouping with lazy loading](/docs/learn/grouping-and-pivoting/grouping-rows#server-side-grouping-with-lazy-loading).\n\n</Note>"
    },
    {
      "filePath": "/docs/learn/working-with-data/live-pagination",
      "routePath": "/docs/learn/working-with-data/live-pagination",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/working-with-data/live-pagination.page.md",
      "fileName": "live-pagination.page.md",
      "folderPath": "/docs/learn/working-with-data/",
      "frontmatter": {
        "title": "Live Pagination",
        "description": "Live Pagination DataSource documentation and examples for Infinite Table DataGrid"
      },
      "excerpt": "`InfiniteTable` supports live pagination in its `DataSource` via the <DataSourcePropLink name=\"livePagination\" /> prop together with <DataSourcePropLink name=\"livePaginationCursor\" />",
      "readingTime": "2 min read",
      "content": "\n`InfiniteTable` supports live pagination in its `DataSource` via the <DataSourcePropLink name=\"livePagination\" /> prop together with <DataSourcePropLink name=\"livePaginationCursor\" />\n\nSpecify `DataSource.livePagination=true` and provide a pagination cursor (a good cursor would be the id of the last item in the `DataSource`).\n\nIn addition, you have to listen to <DataSourcePropLink name=\"onDataParamsChange\" /> which will be triggered with an object that contains the following properties:\n\n- `sortInfo` - information about the current sort state\n- `groupBy` - current grouping info\n- `livePaginationCursor` - the current pagination cursor\n\nWhen `dataParams` change (you will be notified via <DataSourcePropLink name=\"onDataParamsChange\" />), you have to fetch new data using the cursor from `dataParams` object.\n\n<Note title=\"onDataParamsChange trigger\">\n\nBasically <DataSourcePropLink name=\"onDataParamsChange\" /> is triggered whenever props (and state) that affect the `DataSource` change - be it via sorting, filtering, live pagination, pivoting, etc.\n</Note>\n\nBelow you can see a live pagination demo implemented in combination with [react-query](https://react-query.tanstack.com/).\n\n<Sandpack title=\"Live pagination - with react-query\" deps=\"react-query\">\n\n```ts file=\"live-pagination-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nIn the example above, play around and scroll the table and also make sure to try sorting (eg: sort by country or city).\n\n<Note>\n\nFor demo purposes, the page size in the example above is small - it shows that `InfiniteTable` handles infinite pagination correctly by immediately triggering <DataSourcePropLink name=\"onDataParamsChange\" /> when there are not enough rows to fill the viewport.\n\nOn the other hand, when there are many rows and there is a horizontal scrollbar, it triggers <DataSourcePropLink name=\"onDataParamsChange\" /> only when the user scrolls to the end of the table.\n\nIt also handles the case when there is a vertical scrollbar and then the user resizes the viewport to make it bigger and no more vertical scrollbar is needed - again <DataSourcePropLink name=\"onDataParamsChange\" /> is triggered to request more rows.\n\n</Note>\n"
    },
    {
      "filePath": "/docs/learn/working-with-data/updating-data-in-realtime",
      "routePath": "/docs/learn/working-with-data/updating-data-in-realtime",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/working-with-data/updating-data-in-realtime.page.md",
      "fileName": "updating-data-in-realtime.page.md",
      "folderPath": "/docs/learn/working-with-data/",
      "frontmatter": {
        "title": "Updating Data in Real-Time"
      },
      "excerpt": "Real-Time updates of data are possible via the [DataSource API](/docs/reference/datasource-api).",
      "readingTime": "5 min read",
      "content": "\nReal-Time updates of data are possible via the [DataSource API](/docs/reference/datasource-api).\n\nIn this page we explain some of the complexities and features involved.\n\n## Getting a reference to the DataSource API\n\n<Note>\n\nData Updates are related to the `DataSource` component, therefore make sure you use the [DataSource API](/docs/reference/datasource-api) for this.\n\nYou can get a reference to the [DataSource API](/docs/reference/datasource-api)\n\n- either by using <DPropLink name=\"onReady\" code={false}>the DataSource onReady</DPropLink> prop\n\n```tsx\nconst onReady = (dataSourceApi) => {\n  // do something with the dataSourceApi\n};\n\n<DataSource onReady={onReady} />;\n```\n\n- or by using the <PropLink name=\"onReady\" code={false}>InfiniteTable onReady</PropLink> prop.\n\n```tsx\nconst onReady = ({ api, dataSourceApi }) => {\n  // note for InfiniteTable.onReady, you get back an object\n  // with both the InfiniteTable API (the `api` property)\n  // and the DataSource API (the `dataSourceApi` property)\n}\n\n<DataSource {...}>\n  <InfiniteTable onReady={onReady}/>\n</DataSource>\n```\n\n</Note>\n\n## Updating Rows\n\nTo update the data of a row, you need to know the `primaryKey` for that row and use the <DApiLink name=\"updateData\" /> method of the [DataSource API](/docs/reference/datasource-api).\n\n```tsx {1,3} title=\"Updating_a_single_row_using_dataSourceApi.updateData\"\ndataSourceApi.updateData({\n  // if the primaryKey is the \"id\" field, make sure to include it\n  id: 1,\n\n  // and then include any properties you want to update - in this case, the name and age\n  name: 'Bob Blue',\n  age: 35,\n});\n```\n\nTo update multiple rows, you need to pass the array of data items to the <DApiLink name=\"updateDataArray\" /> method.\n\n```tsx {1,3,8} title=\"Updating_multiple_rows\"\ndataSourceApi.updateDataArray([\n  {\n    id: 1, // if the primaryKey is the \"id\" field, make sure to include it\n    name: 'Bob Blue',\n    age: 35,\n  },\n  {\n    id: 2, // primaryKey for this row\n    name: 'Alice Green',\n    age: 25,\n  },\n]);\n```\n\n<Sandpack title=\"Live data updates with DataSourceApi.updateData\">\n\n<Description>\n\nThe DataSource has 10k items - use the **Start/Stop** button to see updates in real-time.\n\nIn this example, we're updating 5 rows (in the visible viewport) every 30ms.\n\nThe update rate could be much higher, but we're keeping it at current levels to make it easier to see the changes.\n\n</Description>\n\n```ts file=\"realtime-updates-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nFor updating multiple rows, use the <DApiLink name=\"updateDataArray\" /> method.\n\nWhen updating a row, the data object you pass to the `updateData` method needs to at least include the <DPropLink name=\"primaryKey\" /> field. Besides that field, it can include any number of properties you want to update for the specific row.\n\n</Note>\n\n## Batching updates\n\nAll the methods for updating/inserting/deleting rows exposed via the [DataSource API](/docs/reference/datasource-api) are batched by default. So you can call multiple methods on the same raf (requestAnimationFrame), and they will trigger a single render.\n\nAll the function calls made in the same raf return the same promise, which is resolved when the data is persisted to the `DataSource`\n\n```tsx title=\"Updates_made_on_the_same_raf_are_batched_together\"\nconst promise1 = dataSourceApi.updateData({\n  id: 1,\n  name: 'Bob Blue',\n});\n\nconst promise2 = dataSourceApi.updateDataArray([\n  { id: 2, name: 'Alice Green' },\n  { id: 3, name: 'John Red' },\n]);\n\npromise1 === promise2; // true\n```\n\n## Inserting Rows\n\nTo insert a new row into the `DataSource`, you need to use the <DApiLink name=\"insertData\" /> method. For inserting multiple rows at once, use the <DApiLink name=\"insertDataArray\" /> method.\n\n```tsx title=\"Inserting_a_single_row\"\ndataSourceApi.insertData(\n  {\n    id: 10,\n    name: 'Bob Blue',\n    age: 35,\n    salary: 12_000,\n    stack: 'frontend',\n    //...\n  },\n  {\n    position: 'before',\n    primaryKey: 2,\n  },\n);\n```\n\nWhen you insert new data, as a second parameter, you have to provide an object that specifies the insert `position`.\n\nValid values for the insert `position` are:\n\n- `start` | `end` - inserts the data at the beginning or end of the data source. In this case, no `primaryKey` is needed.\n\n```tsx\ndataSourceApi.insertData({ ... }, { position: 'start'})\n// or insert multiple items via\ndataSourceApi.insertDataArray([{ ... }, { ... }], { position: 'start'})\n```\n\n- `before` | `after` - inserts the data before or after the data item that has the specified primary key. **In thise case, the `primaryKey` is required.**\n\n```tsx {5,10}\ndataSourceApi.insertData(\n  { /* ... all data properties here */ },\n  {\n    position: 'before',\n    primaryKey: 2\n  }\n)\n// or insert multiple items via\ndataSourceApi.insertDataArray([{ ... }, { ... }], {\n  position: 'after',\n  primaryKey: 10\n})\n```\n\n<Sandpack title=\"Using dataSourceApi.insertData\">\n\n<Description>\n\nClick any row in the table to make it the current active row, and then use the second button to add a new row after the active row.\n\n</Description>\n\n```ts file=\"insert-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Adding rows\n\nIn addition to the <DApiLink name=\"insertData\" /> and <DApiLink name=\"insertDataArray\" /> methods, the `DataSource` also exposes the <DApiLink name=\"addData\" /> and <DApiLink name=\"addDataArray\" /> methods (same as insert with `position=end`).\n\n## Deleting Rows\n\nTo delete rows from the `DataSource` you either need to know the `primaryKey` for the row you want to delete, or you can pass the data object (or at least a partial that contains the `primaryKey`) for the row you want to delete.\n\nAll the following methods are available via the [DataSource API](/docs/reference/datasource-api):\n\n- <DApiLink name=\"removeData\" />\n- <DApiLink name=\"removeDataArray\" />\n- <DApiLink name=\"removeDataByPrimaryKey\" />\n- <DApiLink name=\"removeDataArrayByPrimaryKeys\" />\n"
    },
    {
      "filePath": "/docs/reference/api/index",
      "routePath": "/docs/reference/api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/api/",
      "frontmatter": {
        "title": "Infinite Table API",
        "layout": "API"
      },
      "excerpt": "When rendering the `InfiniteTable` component, you can get access to the API by getting it from the <PropLink name=\"onReady\" /> callback prop.",
      "readingTime": "8 min read",
      "content": "\nWhen rendering the `InfiniteTable` component, you can get access to the API by getting it from the <PropLink name=\"onReady\" /> callback prop.\n\n```tsx {2}\nconst onReady = (\n  {api, dataSourceApi}: {\n    api: InfiniteTableApi<DATA_TYPE>,\n    dataSourceApi: DataSourceApi<DATA_TYPE>\n  }) => {\n  // api is accessible here\n  // you may want to store a reference to it in a ref or somewhere in your app state\n}\n\n<InfiniteTable<DATA_TYPE>\n  columns={[...]}\n  onReady={onReady}\n/>\n```\n\nFor API on row/group selection, see the [Selection API page](/docs/reference/selection-api).\n\nSee the [Infinite Table Cell Selection API page](/docs/reference/cell-selecti-api) for the cell selection API.\nSee the [Infinite Table Column API page](/docs/reference/column-api) for the column API.\nSee the [Infinite Table Keyboard Navigation API page](/docs/reference/keyboard-navigation-api) for the keyboard navigation API.\n\nSee the [Infinite Table Row Details API page](/docs/reference/row-detail-api) for the row detail API (when master-detail is configured).\nSee the [Tree API page](/docs/reference/tree-api) for the tree API (when using the `<TreeDataSource />` component).\n\n<PropTable sort searchPlaceholder=\"Type to filter API methods\">\n\n<Prop name=\"confirmEdit\" type=\"(value?: any) => void\">\n\n> Confirms the current edit operation and closes the editor.\n\nIf the `value` parameter is provided, it will be used as the value the cell will be updated with. If the `value` parameter is not provided, the current value of the cell will be used.\n\nSee related <ApiLink name=\"cancelEdit\" /> and <ApiLink name=\"rejectEdit\" />.\n\n</Prop>\n\n<Prop name=\"cancelEdit\" type=\"() => void\">\n\n> Cancels the current edit operation and closes the editor.\n\nSee related <ApiLink name=\"confirmEdit\" /> and <ApiLink name=\"rejectEdit\" />.\n\n</Prop>\n\n<Prop name=\"hideContextMenu\" type=\"() => void\">\n\n> Hides the context menu that's currently displayed (if there's one).\n\n</Prop>\n\n<Prop name=\"rejectEdit\" type=\"(error: Error) => void\">\n\n> Rejects the current edit operation with the specified error and closes the editor.\n\nThe error will later be available to the <PropLink name=\"columns.renderValue\" /> callback prop, via the parameter of the function (also applicable for related functions that are called with same the same parameter).\n\nSee related <ApiLink name=\"confirmEdit\" /> and <ApiLink name=\"cancelEdit\" />.\n\n</Prop>\n\n<Prop name=\"clearColumnFilter\" type=\"(columnId: string) => void\">\n\n> Clears any filter for the specified column\n\n</Prop>\n\n<Prop name=\"toggleSortingForColumn\" type=\"(columnId: string, options?) => void\">\n\n> Toggles the sorting for the specified column.\n\nThis is the same method the component uses internally when the user clicks a column header.\n\nIf the column is not sorted, it gets sorted in ascending order.\n\nIf the column is sorted in ascending order, it gets sorted in descending order.\n\nIf the column is sorted in descending order, the sorting is cleared.\n\n<Note>\n\nThe `options` is optional and can have the `multiSortBehavior` property, which can be either `append` or `replace`. See related <PropLink name=\"multiSortBehavior\" /> prop. If not provided, the default behavior is used.\n\n</Note>\n\nSee related <ApiLink name=\"setSortingForColumn\" /> and <ApiLink name=\"getSortingForColumn\" />.\n\n</Prop>\n\n<Prop name=\"setSortingForColumn\" type=\"(columnId: string, dir: 1|-1|null) => void\">\n\n> Sets the sorting for the specified column.\n\nThe sort direction is specified by the `dir` parameter, which can be:\n\n- `1` for ascending\n- `-1` for descending\n- `null` for clearing the sorting.\n\nSee related <ApiLink name=\"toggleSortingForColumn\" /> and <ApiLink name=\"getSortingForColumn\" />.\n\n</Prop>\n\n<Prop name=\"getSortingForColumn\" type=\"(columnId: string)=> 1|-1|null\">\n\n> Returns the sorting currently applied to the specified column.\n\nThe return value is:\n\n- `1` for ascending\n- `-1` for descending\n- `null` for no sorting.\n\nSee related <ApiLink name=\"toggleSortingForColumn\" /> and <ApiLink name=\"setSortingForColumn\" />.\n\n</Prop>\n\n<Prop name=\"collapseGroupRow\" type=\"(groupKeys: any[]) => boolean\">\n\n> Collapses the specified group row. Returns true if the group was expanded and is now being collapsed.\n\n```tsx\napi.collapseGroupRow(['USA', 'New York']); // collapses the group with these keys\n```\n\n</Prop>\n\n<Prop name=\"expandGroupRow\" type=\"(groupKeys: any[]) => boolean\">\n\n> Expands the specified group row. Returns true if the group was collapsed and is now being expanded.\n\n```tsx\napi.expandGroupRow(['USA', 'New York']); // expands the group with these keys\n```\n\n</Prop>\n\n<Prop name=\"getCellValue\" type=\"({columnId, rowIndex?, primaryKey? }) => any\">\n\n> Returns the value for the specified cell. The value is either the raw value (as retrieved via the `field` property of the column or by calling the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink>) or the formatted value - if the column has a <PropLink name=\"columns.valueFormatter\">valueFormatter</PropLink>.\n\nCall this function with an object that has a `columnId` and either a `rowIndex` or a `primaryKey` property.\n\nSee related <ApiLink name=\"getCellValues\" />.\n\n<Note>\n\nThis function should not be called during a cell render (eg: in <PropLink name=\"columns.render\"/>/<PropLink name=\"columns.renderValue\"/> or other functions called during render).\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getCellValues\" type=\"({columnId, rowIndex?, primaryKey? }) => ({value, rawValue, formattedValue })\">\n\n> Returns an object with raw and formatted values for the specified cell.\n\nCall this function with an object that has a `columnId` and either a `rowIndex` or a `primaryKey` property.\n\nThe returned object has the following properties:\n\n- `rawValue` - the raw value of the cell - as retrieved from the <PropLink name=\"columns.field\"/> property of the column or by calling the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink>\n- `formattedValue` - the formatted value of the cell - if the column has a <PropLink name=\"columns.valueFormatter\">valueFormatter</PropLink>, it's the value returned by the formatter, otherwise it's the same as the `rawValue`\n- `value` - it's either `formattedValue` or `rawValue`. If the column has a <PropLink name=\"columns.valueFormatter\">valueFormatter</PropLink>, it's the value returned by the formatter, otherwise it's the `rawValue`\n\nSee related <ApiLink name=\"getCellValue\" />.\n\n<Note>\n\nThis function should not be called during a cell render (eg: in <PropLink name=\"columns.render\"/>/<PropLink name=\"columns.renderValue\"/> or other functions called during render).\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getColumnApi\" type=\"(colIdOrIndex: string|number) => InfiniteTableColumnAPI\">\n\n> Returns [a column API object](/docs/reference/column-api) bound to the specified column\n\nThe parameter can be either a column id or a column index (note this is not the index in all columns, but rather the index in current visible columns).\n\n</Prop>\n\n<Prop name=\"getVerticalRenderRange\" type=\"() => { renderStartIndex, renderEndIndex }\">\n\n> Returns the vertical render range of the table\n\nThe vertical render range is the range of rows that are currently rendered in the table viewport.\n\n</Prop>\n\n<Prop name=\"onReady\" type=\"({ api, dataSourceApi }) => void\">\n\n> Called when the table has been layed out and sized and is ready to be used.\n\nThis callback prop will be called with an object containing the `api` (which is an instance of `InfiniteTableApi`) and [`dataSourceApi`](/docs/reference/datasource-api) objects.\n\n</Prop>\n\n<Prop name=\"startEdit\" type=\"({ rowIndex, columnId }) => Promise<boolean>\">\n\n> Tries to start editing the cell specified by the given row index and column id.\n\nReturns a promise that resolves to `true` if editing was started, or `false` if editing was not started because the cell is not editable.\n\nSee <PropLink name=\"columns.defaultEditable\" /> for more details on how to configure a cell as editable.\n\n<Sandpack title=\"Starting an Edit via the API\">\n\n```ts file=\"api-start-edit-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"scrollCellIntoView\" type=\"(rowIndex: number; colIdOrIndex: string | number) => boolean\">\n\n> Can be used to scroll a cell into the visible viewport\n\nIf scrolling was successful and the row and column combination was found, it returns `true`, otherwise `false`. The first arg of the function is the row index, while the second one is the column id or the column index (note this is not the index in all columns, but rather the index in current visible columns).\n\n</Prop>\n\n<Prop name=\"scrollColumnIntoView\" type=\"(colId: string) => boolean\">\n\n> Can be used to scroll a column into the visible viewport\n\nIf scrolling was successful and the column was found, it returns `true`, otherwise `false`.\nThe only parameter of this method is the column id.\n\n</Prop>\n\n<Prop name=\"scrollLeft\" type=\"getter<number>|setter<number>\">\n\n> Gets or sets the `scrollLeft` value in the grid viewport\n\nCan be used as either a setter, to set the scroll left position or a getter to read the scroll left position.\n\n```ts\n// use as setter - will scroll the table viewport\napi.scrollLeft = 200;\n\n// use as getter to read the current scroll left value\nconst scrollLeft = api.scrollLeft;\n```\n\n</Prop>\n\n<Prop name=\"scrollRowIntoView\" type=\"(rowIndex: number) => boolean\">\n\n> Can be used to scroll a row into the visible viewport\n\nIf scrolling was successful and the row was found, it returns `true`, otherwise `false`\n\n</Prop>\n\n<Prop name=\"scrollTop\" type=\"getter<number>|setter<number>\">\n\n> Gets or sets the `scrollTop` value in the grid viewport\n\nCan be used as either a setter, to set the scroll top position or a getter to read the scroll top position.\n\n```ts\n// use as setter - will scroll the table viewport\napi.scrollTop = 1200;\n\n// use as getter to read the current scroll top value\nconst scrollTop = api.scrollTop;\n```\n\n</Prop>\n\n<Prop name=\"rowSelectionApi\" type=\"InfiniteTableRowSelectionApi\">\n\n> Getter for the [Row Selection API](/docs/reference/row-selection-api)\n\n</Prop>\n\n<Prop name=\"rowDetailApi\" type=\"InfiniteTableRowDetailApi\">\n\n> Getter for the [Row Detail API](/docs/reference/row-detail-api)\n\n</Prop>\n<Prop name=\"cellSelectionApi\" type=\"InfiniteTableCellSelectionApi\">\n\n> Getter for the [Cell Selection API](/docs/reference/cell-selection-api)\n\n</Prop>\n\n<Prop name=\"setColumnFilter\" type=\"(columnId: string, value: any) =>void\">\n\n> Sets a filter value for the specified column\n\n</Prop>\n\n<Prop name=\"setColumnOrder\" type=\"(columnIds: string[] | true) => void\">\n\n> Set the column order.\n\nIf `true` is specified, it resets the column order to the order the columns are specified in the <PropLink name=\"columns\" /> prop (the iteration order of that object).\n\n```ts\napi.setColumnOrder(['id', 'firstName', 'age']);\n// restore default order\napi.setColumnOrder(true);\n```\n\n</Prop>\n\n<Prop name=\"toggleGroupRow\" type=\"(groupKeys: any[]) => void\">\n\n> Toggles the collapse/expand state of the specified group row\n\n```tsx\napi.toggleGroupRow(['USA', 'New York']); // toggle the group with these keys\n```\n\n</Prop>\n\n</PropTable>\n"
    },
    {
      "filePath": "/docs/reference/cell-selection-api/index",
      "routePath": "/docs/reference/cell-selection-api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/cell-selection-api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/cell-selection-api/",
      "frontmatter": {
        "title": "Infinite Table Cell Selection API",
        "layout": "API"
      },
      "excerpt": "```tsx title=\"Configuring the selection mode to be 'multi-cell'\"",
      "readingTime": "4 min read",
      "content": "\n```tsx title=\"Configuring the selection mode to be 'multi-cell'\"\n<DataSource selectionMode=\"multi-cell\" />\n\n// can be \"single-row\", \"multi-row\", \"multi-cell\" or false\n```\n\n<Note>\n\nTo enable cell selection, you need to specify <DPropLink name=\"selectionMode\">selectionMode=\"multi-cell\"</DPropLink> on the `<DataSource />` component.\n\n</Note>\n\nYou can retrieve the cell selection api by reading it from the `api.cellSelectionApi` property.\n\n```tsx {4}\n\nconst onReady = ({api}: {api:InfiniteTableApi<DATA_TYPE>}) => {\n  // do something with it\n  api.cellSelectionApi.selectGroupRow(['USA'])\n}\n\n<InfiniteTable<DATA_TYPE>\n  columns={[...]}\n  onReady={onReady}\n/>\n```\n\nSee the [Infinite Table API page](/docs/reference/api) for the main API.\nSee the [Infinite Table Keyboard Navigation API page](/docs/reference/keyboard-navigation-api) for the keyboard navigation API.\nSee the [Infinite Table Row Selection API page](/docs/reference/row-selection-api) for the row selection API.\nSee the [Infinite Table Column API page](/docs/reference/column-api) for the column API.\n\n<PropTable sort searchPlaceholder=\"Type to filter API methods\">\n\n<Prop name=\"isCellSelected\" type=\"({rowIndex/rowId, colIndex/colId}) => boolean\">\n\n> Boolean getter to report if a cell is selected.\n\nThe accepted argument is an object with the following properties:\n\n- `rowIndex` (the index of the row) or `rowId` (the id of the row)\n- `colIndex` (the index of the column) or `colId` (the id of the column)\n\nYou can identify the cell by any of the valid combinations of `rowIndex`/`rowId` and `colIndex`/`colId`.\n\n<Note>\n\nUsing row and column indexes for selection is supported to make it easier to use the API, but in fact cells are selected by the `rowId/colId` combination.\n\nThis is important to keep in mind, as when columns are reordered or rows are sorted/filtered - the selection will be bound to the `rowId/colId` - so cells that were selected as siblings before a column reorder might not be siblings after the reorder, but they will still be rendered as selected.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"mapCellSelectionPositions\" type=\"(fn: (rowInfo, colId) => any, emptyValue)\">\n\n> Maps the selected cells using the passed fn.\n\nThis allows you to retrieve the values from the selected cells, by using a mapping function, so for each value (cell) in the selection, the passed `fn` is called, so you can return your own object with the values you need.\n\n<Sandpack title=\"Retrieving cell selection value by mapping over them\" size=\"lg\" deps=\"ag-charts-react,ag-charts-community\">\n\n```ts file=cell-selection-mapping-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"selectColumn\" type=\"(colId: string)=> void\">\n\n> Selects all cells in the specified column.\n\n<Sandpack title=\"Using `selectColumn` with controlled selection\" size=\"lg\">\n\n```ts file=\"$DOCS/reference/datasource-props/controlled-cell-selection-with-api-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"selectCell\" type=\"({ rowIndex/rowId, colIndex/colId, clear?: boolean}) => void\">\n\n> Selects the specified cell.\n\nFor the shape of the argument see related [isCellSelected](#isCellSelected).\n\nAdditionally, you can pass a `clear` property to clear the selection before selecting the cell.\n\nAlso see related [deselectCell](#deselectCell).\n\nIn order to select a cell via mouse interaction, simply click the desired cell. Clicking a cell without any modifier keys will clear the selection and select the clicked cell.\n\nYou can use `Cmd/Ctrl+Click` to add cells to the selection, or `Shift+Click` to select a range of cells.\n\n<Sandpack title=\"Selecting a cell via the Cell Selection API\">\n\n```ts file=\"select-cell-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"deselectCell\" type=\"({ rowIndex/rowId, colIndex/colId}) => void\">\n\n> Deselects the specified cell.\n\nFor the shape of the argument see related [isCellSelected](#isCellSelected).\n\nAlso see related [selectCell](#selectCell).\n\n</Prop>\n\n<Prop name=\"selectAll\" type=\"() => void\">\n\n> Selects all cells in the DataGrid.\n\nSee related [deselectAll](#deselectAll).\n\n</Prop>\n\n<Prop name=\"deselectAll\" type=\"() => void\">\n\n> Deselects all cells in the DataGrid.\n\nSee related [selectAll](#selectAll).\n\n</Prop>\n\n<Prop name=\"clear\" type=\"() => void\">\n\n> An alias for [deselectAll](#deselectAll).\n\n</Prop>\n\n<Prop name=\"selectRange\" type=\"(start, end) => void\">\n\n> Selects the specified cell range.\n\nThe `start` and `end` arguments are objects of the same shape as the argument for [isCellSelected](#isCellSelected).\n\nIn order to select a range via mouse interaction, use `Cmd/Ctrl+Click` and `Shift+Click` as you would in a spreadsheet application.\n\nClicking a cell without holding the modifier keys will clear the selection and select the clicked cell.\n\n<Sandpack title=\"Selecting a range via the Cell Selection API\">\n\n```ts file=\"select-range-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nDon't worry if the `start` or `end` are not passed in the correct order - Infinite Table will figure it out.\n\n</Note>\n\nFor deselecting a range see [deselectRange](#deselectRange).\n\n</Prop>\n\n<Prop name=\"deselectRange\" type=\"(start, end) => void\">\n\n> Deselects the specified cell range.\n\nThe `start` and `end` arguments are objects of the same shape as the argument for [isCellSelected](#isCellSelected).\n\n<Note>\n\nDon't worry if the `start` or `end` are not passed in the correct order - Infinite Table will figure it out.\n\n</Note>\n\nFor selecting a range see [selectRange](#selectRange).\n\n<Sandpack title=\"Deselecting a range via the Cell Selection API\">\n\n```ts file=\"deselect-range-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n</PropTable>\n"
    },
    {
      "filePath": "/docs/reference/column-api/index",
      "routePath": "/docs/reference/column-api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/column-api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/column-api/",
      "frontmatter": {
        "title": "Infinite Table Column API",
        "layout": "API"
      },
      "excerpt": "When rendering the `InfiniteTable` component, you can get access to the Column API through various column render props (for example, the <PropLink name=\"columns.header\" /> render prop).",
      "readingTime": "3 min read",
      "content": "\nWhen rendering the `InfiniteTable` component, you can get access to the Column API through various column render props (for example, the <PropLink name=\"columns.header\" /> render prop).\n\nFor the root API see the [API page](/docs/reference/api).\nSee the [Infinite Table Keyboard Navigation API page](/docs/reference/keyboard-navigation-api) for the keyboard navigation API.\nFor API on row/group selection, see the [Selection API page](/docs/reference/selection-api).\nSee the [Infinite Table Row Selection API page](/docs/reference/row-selection-api) for the row selection API.\nSee the [Infinite Table Row Detail API page](/docs/reference/row-detail-api) for the row detail API (when master-detail is configured).\n\n<PropTable searchPlaceholder=\"Type to filter API methods\" sort>\n\n<Prop name=\"clearSort\">\n\n> Clears the sorting for the current column.\n\nSee related <PropLink name=\"setSort\" /> prop.\n\nCalling this will trigger <DPropLink name=\"onSortInfoChange\" />\n\n</Prop>\n\n<Prop name=\"hideContextMenu\" type=\"() => void\">\n\n> Hides the column context menu, if visible.\n\nFor showing the menu, see <PropLink name=\"showContextMenu\"/>. To toggle the menu, see <PropLink name=\"toggleContextMenu\"/>.\n\n</Prop>\n\n<Prop name=\"setSort\" type=\"(sortDir: 1|-1|null) => void\">\n\n> Sets the sort direction for the current column.\n\nTo clear the sort, pass `null` as the argument. See related <PropLink name=\"clearSort\"/>\n\nCalling this will trigger <DPropLink name=\"onSortInfoChange\" />.\n\n</Prop>\n\n<Prop name=\"toggleSort\" type=\"(options?) => void\">\n\n> Toggles the sorting for the current column. Aliased to <ApiLink name=\"toggleSortingForColumn\" />.\n\nThis is the same method the component uses internally when the user clicks a column header.\n\nIf the column is not sorted, it gets sorted in ascending order.\n\nIf the column is sorted in ascending order, it gets sorted in descending order.\n\nIf the column is sorted in descending order, the sorting is cleared.\n\n<Note>\n\nThe `options` is optional and can have the `multiSortBehavior` property, which can be either `append` or `replace`. See related <PropLink name=\"multiSortBehavior\" /> prop. If not provided, the default behavior is used.\n\n</Note>\n\nSee related <ColumnApiLink name=\"setSort\" /> and <ColumnApiLink name=\"getSortingForColumn\" />.\n\n</Prop>\n\n<Prop name=\"setSort\" type=\"(dir: 1|-1|null) => void\">\n\n> Sets the sorting for the current column. Aliased to <ApiLink name=\"setSortingForColumn\" />.\n\nThe sort direction is specified by the `dir` parameter, which can be:\n\n- `1` for ascending\n- `-1` for descending\n- `null` for clearing the sorting.\n\nSee related <ColumnApiLink name=\"toggleSort\" /> and <ColumnApiLink name=\"getSortDir\" />.\n\n</Prop>\n\n<Prop name=\"getSortDir\" type=\"()=> 1|-1|null\">\n\n> Returns the sorting currently applied to the current column. Aliased to <ApiLink name=\"getSortingForColumn\" />.\n\nThe return value is:\n\n- `1` for ascending\n- `-1` for descending\n- `null` for no sorting.\n\nSee related <ColumnApiLink name=\"toggleSortingForColumn\" /> and <ColumnApiLink name=\"setSortingForColumn\" />.\n\n</Prop>\n\n<Prop name=\"clearSort\" type=\"() => void\">\n\n> Clears the sorting for the current column.\n\nIt is the same as calling <ColumnApiLink name=\"setSort\" /> with `null` as the argument.\n\n</Prop>\n\n<Prop name=\"isSortable\" type=\"()=> boolean\">\n\n> Returns whether the current column is sortable.\n\nSee related <PropLink name=\"columnDefaultSortable\" />, <PropLink name=\"columns.defaultSortable\" />, <PropLink name=\"columnTypes.defaultSortable\" /> and <PropLink name=\"sortable\" />\n\n</Prop>\n\n<Prop name=\"showContextMenu\" type=\"() => void\">\n\n> Shows the column context menu, if not already visible.\n\nFor hiding the menu, see <PropLink name=\"hideContextMenu\"/>. To toggle the menu, see <PropLink name=\"toggleContextMenu\"/>.\n\n</Prop>\n\n<Prop name=\"toggleContextMenu\" type=\"() => void\">\n\n> Toggles the column context menu.\n\nFor showing the menu, see <PropLink name=\"showContextMenu\"/>. For hiding the menu, see <PropLink name=\"hideContextMenu\"/>.\n\n<Sandpack title=\"Custom header with button to trigger the column context menu using the Column API\">\n\n<Description>\n\nThe `preferredLanguage` column has a custom header that shows a button for triggering the column context menu using the Column API.\n\n</Description>\n\n```ts file=\"$DOCS/reference/getColumnMenuItems-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n</PropTable>\n"
    },
    {
      "filePath": "/docs/reference/datasource-api/index",
      "routePath": "/docs/reference/datasource-api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/datasource-api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/datasource-api/",
      "frontmatter": {
        "title": "DataSource API",
        "layout": "API"
      },
      "excerpt": "When rendering the `DataSource` component, you can get access to the API by getting it from the <DPropLink name=\"onReady\" /> callback prop.",
      "readingTime": "16 min read",
      "content": "\nWhen rendering the `DataSource` component, you can get access to the API by getting it from the <DPropLink name=\"onReady\" /> callback prop.\n\n```tsx {3}\n<DataSource<DATA_TYPE>\n  onReady={(api: DataSourceApi<DATA_TYPE>) => {\n    // api is accessible here\n    // you may want to store a reference to it in a ref or somewhere in your app state\n  }}\n/>\n```\n\nYou can also get it from the `InfiniteTable` <PropLink name=\"onReady\" /> callback prop:\n\n```tsx {4}\n<InfiniteTable<DATA_TYPE>\n  columns={[...]}\n  onReady={(\n    {api, dataSourceApi}: {\n      api: InfiniteTableApi<DATA_TYPE>,\n      dataSourceApi: DataSourceApi<DATAT_TYPE>\n    }) => {\n\n    // both api and dataSourceApi are accessible here\n  }}\n/>\n```\n\nFor API on row/group selection, see the [Selection API page](/docs/reference/selection-api).\n\n<PropTable sort searchPlaceholder=\"Type to filter API methods\">\n\n<Prop name=\"isRowDisabledAt\" type=\"(rowIndex: number) => boolean\">\n\n> Returns `true` if the row at the specified index is disabled, `false` otherwise.\n\nSee the <DPropLink name=\"rowDisabledState\" /> prop for more information.\n\nFor checking if a row is disabled by its primary key, see the <DApiLink name=\"isRowDisabled\" /> method.\n\nFor changing the enable/disable state for the row, see the <DApiLink name=\"setRowEnabledAt\" />.\n\n<Sandpack title=\"Changing the enable/disable state for a row\">\n\n```ts file=\"../datasource-props/rowDisabledState-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"isRowDisabled\" type=\"(primaryKey: any) => boolean\">\n\n> Returns `true` if the row with the specified primary key is disabled, `false` otherwise.\n\nSee the <DPropLink name=\"rowDisabledState\" /> prop for more information.\n\nFor checking if a row is disabled by its index, see the <DApiLink name=\"isRowDisabledAt\" /> method.\n\nFor changing the enable/disable state for the row, see the <DApiLink name=\"setRowEnabled\" />.\n\n<Sandpack title=\"Changing the enable/disable state for a row\">\n\n```ts file=\"../datasource-props/rowDisabledState-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"setRowEnabled\" type=\"(primaryKey: any, enabled: boolean) => void\">\n\n> Sets the enable/disable state for the row with the specified primary key.\n\nSee the <DPropLink name=\"rowDisabledState\" /> prop for more information.\n\nFor setting the enable/disable state for a row by its index, see the <DApiLink name=\"setRowEnabledAt\" /> method.\n\n<Sandpack title=\"Changing the enable/disable state for a row\">\n\n```ts file=\"../datasource-props/rowDisabledState-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"treeApi\" type=\"TreeApi<DATA_TYPE>\">\n\n> A reference to the [Tree API](/docs/reference/tree-api).\n\nWhen using the `<TreeDataSource />` component, this property will be available on the `DataSourceApi` instance.\n\n</Prop>\n<Prop name=\"setRowEnabledAt\" type=\"(rowIndex: number, enabled: boolean) => void\">\n\n> Sets the enable/disable state for the row at the specified index.\n\nSee the <DPropLink name=\"rowDisabledState\" /> prop for more information.\n\nFor setting the enable/disable state for a row by its primary key, see the <DApiLink name=\"setRowEnabled\" /> method.\n\n<Sandpack title=\"Changing the enable/disable state for a row\">\n\n```ts file=\"../datasource-props/rowDisabledState-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"replaceAllData\" type=\"(data: DATA_TYPE[], options?: DataSourceCRUDParam) => Promise\">\n\n> Replaces all data in the DataSource with the provided data.\n\nClears the current data array in the `<DataSource />` and replaces it with the provided data.\n\nWhen calling this, if there are pending data mutations, they will be discarded.\n\nSee related <DApiLink name=\"clearAllData\" /> method.\n\n</Prop>\n\n<Prop name=\"clearAllData\" type=\"() => Promise\">\n\n> Clears all data in the DataSource.\n\nSee related <DApiLink name=\"replaceAllData\" /> method.\n\n</Prop>\n\n<Prop name=\"addData\" type=\"(data: DATA_TYPE) => Promise\">\n\n> Adds the specified data at the end of the data source.\n\nThe given data param should be of type `DATA_TYPE` (the TypeScript generic data type that the `DataSource` was bound to).\n\nFor adding an array of data, see the <DApiLink name=\"addDataArray\" /> method.\n\n<Note>\n\nIf the component has <DPropLink name=\"sortInfo\" code={false}>sorting</DPropLink>, the added data might not be displayed at the end of the data source.\n\n</Note>\n\nThis method batches data updates and waits for a request animation frame until it persists the data to the `DataSource`. This means you can execute multiple calls to `addData` (or <DPropLink name=\"updateData\"/>, <DPropLink name=\"removeData\"/>, <DPropLink name=\"insertData\"/>) in the same frame and they will be batched and persisted together.\n\nThe return value is a `Promise` that resolves when the data has been added. When multiple `addData` (and friends) calls are executed in the same frame, the result of those calls is a reference to the same promise.\n\n```ts\nconst promise1 = dataSourceApi.add({ ... })\nconst promise2 = dataSourceApi.add({ ... })\nconst promise3 = dataSourceApi.insertData({ ... }, { position: 'before', primaryKey: 4 })\n\n// promise1, promise2 and promise3 are the same promise\n// as the calls are run in the same raf and batched together\n// promise1 === promise2\n// promise1 === promise3\n```\n\nFor adding an array of data, see the <DApiLink name=\"addDataArray\" /> method.\nFor inserting data at a specific position, see the <DApiLink name=\"insertData\" /> method.\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n<Sandpack title=\"Using DataSourceApi.addData to update the DataSource\">\n\n```ts file=\"addData-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"addDataArray\" type=\"(data: DATA_TYPE[]) => Promise\">\n\n> Adds an array of data at the end of the data source\n\nSee related <DApiLink name=\"addData\" /> method.\n\nFor adding at the beginning of the data source, see the <DApiLink name=\"insertDataArray\" /> method.\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n</Prop>\n\n<Prop name=\"getDataByNodePath\" type=\"(nodePath: NodePath) => DATA_TYPE | null\">\n\n> Retrieves the data object for the specified node path.\n\n<Sandpack title=\"Retrieving data by node path\">\n\n```tsx file=\"tree-getDataByNodePath-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"getDataByPrimaryKey\" type=\"(primaryKey: string | number) => DATA_TYPE | null\">\n\n> Retrieves the data object for the specified primary key.\n\nYou can call this method to retrieve objects from the data source even when they have been filtered out via <DPropLink name=\"filterValue\" /> or <DPropLink name=\"filterFunction\" />, as long as they are present in the initial data.\n\n<Note>\n\nThe alternative API method <DApiLink name=\"getRowInfoByPrimaryKey\" /> can only be used to retrieve <TypeLink name=\"InfiniteTableRowInfo\" code={false}>row info objects</TypeLink> of rows that are not filtered out - so only rows that match the filtering, if one is present.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getIndexByPrimaryKey\" type=\"(id: any) => number\">\n> Retrieves the index of a row by its primary key. If the row is not found, returns `-1`. See related <DApiLink name=\"getPrimaryKeyByIndex\" />\n\n<Note>\n\nThe primary key you pass in needs to exist in the current data set. If you pass in a primary key that has been filtered out or that's not in the data set, the method will return `-1`.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getPrimaryKeyByIndex\" type=\"(index: number) => any | undefined \">\n\n> Retrieves the primary key of a row by its current index. If the row is not found, returns `undefined`. See related <DApiLink name=\"getIndexByPrimaryKey\" />\n\n<Note>\n\nThe index needs to be of an existing row, after all filtering is applied. If you pass in an non-existent index, the method will return `undefined`.\n\n</Note>\n\n</Prop>\n\n\n<Prop name=\"getDataByNodePath\" type=\"(nodePath: any[]) => DATA_TYPE | null\">\n\n> Retrieves the data object for the node with the specified path. If the node is not found, returns `null`. See related <DApiLink name=\"getDataByIndex\" />. See related <DApiLink name=\"getRowInfoByNodePath\" />.\n\n<Note>\n\nThe node path needs to be of an existing node. If you pass in a non-existent (or filtered out) node path, the method will return `null`.\n\n</Note>\n\n<Sandpack title=\"Retrieving data by node path\">\n\n```tsx file=\"tree-getDataByNodePath-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n\n<Prop name=\"getRowInfoByNodePath\" type=\"(nodePath: any[]) => InfiniteTableRowInfo<DATA_TYPE> | null\">\n\n> Retrieves the <TypeLink name=\"InfiniteTableRowInfo\" code={false}>row info object</TypeLink> for the node with the specified path. If the node is not found, returns `null`. See related <DApiLink name=\"getDataByNodePath\" />.\n\n<Note>\n\nThe node path needs to be of an existing node. If you pass in a non-existent (or filtered out) node path, the method will return `null`.\n\n</Note>\n\n\n</Prop>\n\n<Prop name=\"getRowInfoByIndex\" type=\"(index: number) => InfiniteTableRowInfo<DATA_TYPE> | null\">\n\n> Retrieves the <TypeLink name=\"InfiniteTableRowInfo\" code={false}>row info object</TypeLink> for the row at the specified index. If none found, returns `null`. See related <DApiLink name=\"getRowInfoByPrimaryKey\" />.\n\n</Prop>\n\n<Prop name=\"getRowInfoByPrimaryKey\" type=\"(id: any) => InfiniteTableRowInfo<DATA_TYPE> | null\">\n\n> Retrieves the <TypeLink name=\"InfiniteTableRowInfo\" code={false}>row info object</TypeLink> for the row with the specified primary key. If none found, returns `null`.\n\nThis method will only find row info objects for rows that are currently in the dataset and matching the filtering, if one is present. Can also be called for group rows.\n\n<Note>\n\nSee related <DApiLink name=\"getDataByPrimaryKey\" /> method, which retrieves the raw data object for the specified primary key, even if it has been filtered out.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getRowInfoArray\" type=\"() => InfiniteTableRowInfo[]\">\n\n> Returns the current row info array. See <TypeLink name=\"InfiniteTableRowInfo\" code={false}>the type definition of the row info object</TypeLink>.\n\nThe row info array represents the current state of the DataSource. This array may contain more items than the actual data array fetched initially by the DataSource. This is because it includes group rows, when grouping is defined, as well as unfetched rows in some advanced scenarios.\n\n</Prop>\n\n<Prop name=\"insertData\" type=\"(data: DATA_TYPE, { position, primaryKey }) => Promise\">\n\n> Inserts the given data at the specified position relative to the given primary key.\n\nThe `position` can be one of the following:\n\n- `start` | `end` - inserts the data at the beginning or end of the data source. In this case, no `primaryKey` is needed.\n- `before` | `after` - inserts the data before or after the data item that has the specified primary key. **In thise case, the `primaryKey` is required.**\n\nWe're intentionally not encouraging inserting at a specified `index`, as the index of rows in the visible viewport can change as the user sorts, filters or groups the data.\n\nFor inserting an array of data, see the <DApiLink name=\"insertDataArray\" /> method.\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n<Sandpack title=\"Inserting data at various locations\">\n\n<Description>\n\nClick any row in the table to make it the current active row, and then use the second button to add a new row after the active row.\n\n</Description>\n\n```ts file=\"insert-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"insertDataArray\" type=\"(data: DATA_TYPE[], { position, primaryKey?, nodePath?, waitForNode? }) => Promise\">\n\n> Inserts an array of data at the specified position (and relative to the given primary key or node path).\n\nJust like the <DApiLink name=\"insertData\" /> method, the `position` can be one of the following:\n\n- `start` | `end` - inserts the data at the beginning or end of the data source. In this case, no `primaryKey` is needed. If `nodePath` is provided, `\"start\"` means insert the data at the start of the children array of that node; `\"end\"` means insert the data at the end of the children array of that node.\n- `before` | `after` - inserts the data before or after the data item that has the specified primary key / node path. **In thise case, the `primaryKey` or the `nodePath` is required.**\n\nAll the data items passed to this method will be inserted (in the order in the array) at the specified position.\n\n<Note>\n\nWhen using this method for tree nodes, `waitForNode` defaults to `true` (you can specify a boolean value, or a number to override the default timeout). When `waitForNode` is `true`, the method will insert the data in the respective node's children array, after making sure the node exists.\n\n</Note>\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n</Prop>\n\n<Prop name=\"updateDataArrayByNodePath\" type=\"({data, nodePath}[]) => Promise\">\n\n> Updates the data for the nodes specified by the node paths.\n\nThe first parameter should be an array of objects, where each object has a `data` property (the data to update) and a `nodePath` property (the path of the node to update).\n\n\n```tsx title=\"Updating an aray of tree nodes\"\ndataSourceApi.updateDataArrayByNodePath([\n  {\n    data: {\n      fileName: 'Vacation.pdf',\n      sizeInKB: 1000,\n    },\n    nodePath: ['1', '10'],\n  },\n  {\n    data: {\n      fileName: 'Report.docx',\n      sizeInKB: 2000,\n    },\n    nodePath: ['1', '11'],\n  },\n]);\n```\n\n</Prop>\n\n\n<Prop name=\"updateChildrenByNodePath\" type=\"(children: DATA_TYPE[] | any | (children, data) => DATA_TYPE[] | any, nodePath: NodePath) => Promise, options?\">\n\n> Updates the children of the node specified by the node path.\n\nThe first parameter can be an array (or `null` or `undefined`) or a function that returns an array (or `null` or `undefined`).\n\nThe second parameter is the node path.\n\nWhen a function is passed as the first parameter, it will be called with the children of the node. The return value will be used as the new children of the node. This gives you an opportunity to update the children based on the current children state.\n\n```tsx title=\"Updating the children of a tree node\"\ndataSourceApi.updateChildrenByNodePath(\n  (currentChildren) => {\n    return [\n      ...(currentChildren || []),\n      {\n        name: 'untitled.txt',\n        id: '8',\n      },\n    ];\n  },\n  ['1', '3'],\n);\n```\n\n<Note>\n\nWhen using a function, it will be called with the current children of the node (1st parameter) and also with the node data object (2nd parameter).\n\n</Note>\n\n<Note>\n\nAs a third parameter, you can pass in an options object, which supports the `waitForNode` property (`boolean` or `number` to override the default timeout). When `waitForNode` is `true`, the method will update the children of the node, after making sure the node exists (and waiting for the specified timeout if needed).\n\n</Note>\n\n</Prop>\n\n<Prop name=\"waitForNodePath\" type=\"(nodePath: NodePath, options?: { timeout?: number }) => Promise<boolean>\">\n\n> Returns a promise that tells if the node path exists.\n\nCalling this method will give you a promise that will tell you if the node path exists or not.\n\nIf the `DataSource` can find the node path either immediately or before the specified timeout expires, the promise will resolve to `true`, otherwise it will resolve to `false`.\n\nIf no `timeout` is specified, it will default to `1000`ms.\n\n</Prop>\n\n<Prop name=\"updateDataByNodePath\" type=\"(data: Partial<DATA_TYPE>, nodePath: NodePath, options?) => Promise\">\n\n> Updates the data for the node specified by the node path.\n\n<Note>\n\nIf the primary keys in your `<TreeDataSource />` are unique globally (not just within the same node), you can still use the <DPropLink name=\"updateData\" /> method.\n\n</Note>\n\n\n```tsx title=\"Updating a tree node by path\"\ndataSourceApi.updateDataByNodePath({\n  fileName: 'New Name',\n  sizeInKB: 1000,\n}, ['1', '10']);\n```\n\n<Sandpack title=\"Updating a tree node by path\" size=\"lg\">\n\n```ts file=\"tree-updateDataByPath-example.page.tsx\"\n```\n\n</Sandpack>\n\n<Note>\n\nThe third parameter is an options object, which can have a `waitForNode` property (either `boolean` or `number` - use a `number` to override the default timeout). NOTE: if you don't pass it, it defaults to `1000ms`.\n\nWhen `waitForNode` is used, if the node does not exist yet, it will wait for the specified timeout and then update the data.\n\n</Note>\n</Prop>\n\n\n<Prop name=\"removeDataByNodePath\" type=\"(nodePath: NodePath) => Promise\">\n\n> Removes the node specified by the specified node path.\n\n<Note>\n\nIf the primary keys in your `<TreeDataSource />` are unique globally (not just within the same node), you can still use the <DPropLink name=\"removeDataByPrimaryKey\" /> method.\n\n</Note>\n\n\n```tsx title=\"Removing a tree node by path\"\ndataSourceApi.removeDataByNodePath(['1', '10']);\n```\n\n<Sandpack title=\"Removing a tree node by path\" size=\"lg\">\n\n```ts file=\"tree-removeDataByNodePath-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"updateData\" type=\"(data: Partial<DATA_TYPE>, options?) => Promise\">\n\n> Updates the data item to match the given data object. For updating tree nodes by path, see the <DApiLink name=\"updateDataByNodePath\" /> method.\n\n<Note>\n\nThe data object must have a primary key that matches the primary key of the data item that you want to update. Besides the primary key, it can contain any number of properties that you want to update.\n\n</Note>\n\n```ts\ndataSourceApi.updateData({\n  // if the primaryKey is the id, make sure to include it\n  id: 1,\n\n  // and then include any properties you want to update - in this case, the name and age\n  name: 'John Doe',\n  age: 30,\n});\n```\n\n<Sandpack title=\"Updating a row\">\n\n```ts file=\"simple-updateData-example.page.tsx\"\n```\n\n</Sandpack>\n\nFor updating an array of data, see the <DApiLink name=\"updateDataArray\" /> method.\n\n<Note>\n\nThe second parameter is an options object, which can have a `waitForNode` property (either `boolean` or `number` - use a `number` to override the default timeout). NOTE: if you don't pass it, it defaults to `1000ms`.\n\nWhen `waitForNode` is used, if the node does not exist yet, it will wait for the specified timeout and then update the data.\n\n</Note>\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n<Sandpack title=\"Live data updates with DataSourceApi.updateData\">\n\n<Description>\n\nThe DataSource has 10k items.\n\nIn this example, we're updating 5 rows (in the visible viewport) every 30ms.\n\nThe update rate could be much higher, but we're keeping it at current levels to make it easier to see the changes.\n\n</Description>\n\n```ts file=\"live-updates-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"updateDataArray\" type=\"(data: Partial<DATA_TYPE>[], options?) => Promise\">\n\n> Updates an array of data items to match the given data objects.\n\nSee related <DApiLink name=\"updateData\" /> method.\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n</Prop>\n\n<Prop name=\"onReady\" type=\"(api: DataSourceApi) => void\">\n\n> Called only once, after the DataSource component has been mounted.\n\nThis callback prop will be called with an `DataSourceApi` instance. For retrieving the [`InfiniteTableApi`](/docs/reference/api), see the `InfiniteTable` <PropLink name=\"onReady\" /> callback prop.\n\n</Prop>\n\n<Prop name=\"removeData\" type=\"(data: Partial<DATA_TYPE>) => Promise\">\n\n> Removes the data item that matches the given data object.\n\nThe data object must at least have a primary key that matches the primary key of the data item that you want to remove. All the other properties are ignored.\n\nFor removing an array of data, see the <DApiLink name=\"removeDataArray\" /> method.\n\nIf you only want to remove by a primary key, you can call <DApiLink name=\"removeDataByPrimaryKey\" /> instead.\nIf you have an array of primary keys, you can call <DApiLink name=\"removeDataArrayByPrimaryKeys\" /> instead.\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n</Prop>\n\n<Prop name=\"getOriginalDataArray\" type=\"() => DATA_TYPE[]\">\n\n> Returns the data array that was last loaded by the `DataSource`\n\nThis is the array loaded by the `DataSource`, before any filtering, sorting or grouping is applied.\n\n</Prop>\n\n<Prop name=\"removeDataArray\" type=\"(data: Partial<DATA_TYPE>[]) => Promise\">\n\n> Removes the data items that match the given data objects.\n\nThe data objects must at least have a primary key that matches the primary key of the data item that you want to remove. All the other properties are ignored.\n\nFor removing only one item, see the <DApiLink name=\"removeData\" /> method.\n\nIf you only want to remove by a primary key, you can call <DApiLink name=\"removeDataByPrimaryKey\" /> instead.\nIf you have an array of primary keys, you can call <DApiLink name=\"removeDataArrayByPrimaryKeys\" /> instead.\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n</Prop>\n\n<Prop name=\"removeDataArrayByPrimaryKeys\" type=\"(primaryKeys: (string | number)[]) => Promise\">\n\n> Removes the data items with the specified primary keys.\n\nFor removing only one data item, see the <DApiLink name=\"removeDataByPrimaryKey\" /> method.\n\nIf you have a data object, you can call <DApiLink name=\"removeData\" /> instead.\nIf you have an array of data objects, you can call <DApiLink name=\"removeDataArray\" /> instead.\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n</Prop>\n\n<Prop name=\"removeDataByPrimaryKey\" type=\"(primaryKey: string | number) => Promise\">\n\n> Removes the data item with the specified primary key.\n\nFor removing an array of data, see the <DApiLink name=\"removeDataArrayByPrimaryKeys\" /> method.\n\nIf you have a data object, you can call <DApiLink name=\"removeData\" /> instead.\nIf you have an array of data objects, you can call <DApiLink name=\"removeDataArray\" /> instead.\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n</Prop>\n\n</PropTable>\n"
    },
    {
      "filePath": "/docs/reference/datasource-props/index",
      "routePath": "/docs/reference/datasource-props/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/datasource-props/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/datasource-props/",
      "frontmatter": {
        "title": "DataSource Props",
        "layout": "API",
        "description": "Props Reference page for your DataSource in Infinite Table - with complete examples"
      },
      "excerpt": "In the API Reference below we'll use **`DATA_TYPE`** to refer to the TypeScript type that represents the data the component is bound to.",
      "readingTime": "39 min read",
      "content": "\nIn the API Reference below we'll use **`DATA_TYPE`** to refer to the TypeScript type that represents the data the component is bound to.\n\n<PropTable sort searchPlaceholder=\"Type to filter DataSource Props\">\n\n<Prop name=\"primaryKey\" type=\"string | (data: DATA_TYPE) => string\">\n\n> The name of the id/primary key property of an item in the <DPropLink name=\"data\" /> array. The value of this property needs to be unique.\n\nThis is probably one of the most important properties of the `<DataSource />` component, as it is used to identify items in the <DPropLink name=\"data\" /> array.\n\n<Note>\n\nUnlike with other DataGrid components, with `InfiniteTable` you don't need to have a column mapped to the primary key field.\n\nThe primary key is used internally by the component and is not displayed in the grid if you don't explicitly have a column bound to that field.\n\n</Note>\n\nIf the primary key is not unique, Infinite Table DataGrid won't work properly.\n\n<Sandpack title=\"Simple demo of using primaryKey\">\n\n```ts file=\"data-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nThe primary key can be either a string (the name of a property in the data object), or a function that returns a string.\n\nUsing functions (for more dynamic primary keys) is supported, but hasn't been tested extensively - so please report any issues you might encounter.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"treeExpandState\" type=\"TreeExpandStateValue\">\n\n> Specifies the expand/collapse state of the tree nodes. See <TypeLink name=\"TreeExpandStateValue\" /> for the shape of this object. For the uncontrolled version, see <DPropLink name=\"defaultTreeExpandState\" />.\n\nIf no `treeExpandState` prop is specified, the tree will be rendered as fully expanded by default.\n\nWhen using the controlled version, make sure to update the `treeExpandState` prop by using the <DPropLink name=\"onTreeExpandStateChange\" /> callback.\n\n<Sandpack title=\"Using controlled tree expand state\" size=\"large\">\n\n```ts file=\"tree-controlled-expandstate-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onTreeExpandStateChange\" type=\"(treeExpandState: TreeExpandStateValue, {dataSourceApi,nodePath, nodeState}) => void\">\n\n> Called when the tree expand state changes.\n\nWhen the user interacts with the tree (by expanding or collapsing a node), this callback is called with the new tree state.\n\nThe first parameter is the new tree state, and the second parameter is an object with the following properties:\n\n- `dataSourceApi` - the <TypeLink name=\"DataSourceApi\">DataSource API</TypeLink> instance\n- `nodePath` - the path of the node that changed state. If the state was produced by an <TreeApiLink name=\"expandAll\" /> or <TreeApiLink name=\"collapseAll\" /> call, this will be `null`.\n- `nodeState` - the new state of the node (`\"collapsed\"` or `\"expanded\"`)\n\n\n<Sandpack title=\"Using the onTreeExpandStateChange callback\">\n\n```ts file=\"tree-controlled-expandstate-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onNodeExpand\" type=\"(nodePath: NodePath, {dataSourceApi}) => void\">\n\n> Called when a node is expanded. See related <DPropLink name=\"onNodeCollapse\" /> and <DPropLink name=\"onTreeExpandStateChange\" /> props.\n\n\n<Note>\n\nThe <DPropLink name=\"onNodeExpand\" /> and <DPropLink name=\"onNodeCollapse\" /> callbacks are called when a node is expanded or collapsed, respectively - either via user interaction or by an API call. However, they will not be called when the <TreeApiLink name=\"expandAll\" /> or <TreeApiLink name=\"collapseAll\" /> methods are called.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"isNodeExpanded\" type=\"(rowInfo: InfiniteTable_Tree_RowInfoParentNode<DATA_TYPE>, treeExpandState: TreeExpandState) => boolean\">\n\n> Decides if the current (non-leaf) node is expanded. \n\nThe inverse prop, <DPropLink name=\"isNodeCollapsed\" /> is also available. Only one of these props can be specified.\n\n<Note>\n\nIf this prop is specified, <DPropLink name=\"treeSelectionState\" /> is ignored.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"isNodeCollapsed\" type=\"(rowInfo: InfiniteTable_Tree_RowInfoParentNode<DATA_TYPE>, treeExpandState: TreeExpandState) => boolean\">\n\n> Decides if the current (non-leaf) node is collapsed. See related <DPropLink name=\"treeExpandState\" /> prop.\n\nThe inverse prop, <DPropLink name=\"isNodeExpanded\" /> is also available. Only one of these props can be specified.\n\n<Note>\n\nIf this prop is specified, <DPropLink name=\"treeSelectionState\" /> is ignored.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"isNodeReadOnly\" type=\"(rowInfo: InfiniteTable_Tree_RowInfoParentNode<DATA_TYPE>) => boolean\">\n\n> Decides if the current (non-leaf) node can be expanded or collapsed and if the tree icon is disabled.\n\nBy default, parent nodes with `children: []` are read-only, meaning they won't respond to expand/collapse clicks.\n\nHowever, if you specify a custom `isNodeReadOnly` function, you can change this behavior.\n\n<Note>\n\nWhen a node is read-only, the <TreeApiLink name=\"expandNode\" /> and <TreeApiLink name=\"collapseNode\" /> methods need the `options.force` flag to be set to `true` in order to override the read-only restriction.\n\nHowever, <TreeApiLink name=\"expandAll\" /> and <TreeApiLink name=\"collapseAll\" /> will work regardless of the `isNodeReadOnly` setting.\n\nFor full control over the expand/collapse state of read-only nodes, you can use the <DPropLink name=\"isNodeExpanded\" />/<DPropLink name=\"isNodeCollapsed\" /> props.\n\n</Note>\n\n<Sandpack title=\"Using a custom isNodeReadOnly function\">\n\n```ts file=\"tree-isNodeReadOnly-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n<Prop name=\"onNodeCollapse\" type=\"(nodePath: NodePath, {dataSourceApi}) => void\">\n\n> Called when a node is collapsed. See related <DPropLink name=\"onNodeExpand\" /> and <DPropLink name=\"onTreeExpandStateChange\" /> props.\n\n\n<Note>\n\nThe <DPropLink name=\"onNodeExpand\" /> and <DPropLink name=\"onNodeCollapse\" /> callbacks are called when a node is expanded or collapsed, respectively - either via user interaction or by an API call. However, they will not be called when the <TreeApiLink name=\"expandAll\" /> or <TreeApiLink name=\"collapseAll\" /> methods are called.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"nodesKey\" type=\"string\" default=\"children\">\n\n> The name of the property in the data object that contains the child nodes for each tree node.\n\nOnly available when you're using the `<TreeDataSource />` component.\n\nIf not specified, it defaults to `\"children\"`.\n\n<Note>\n\nEach node gets a `nodePath` property, which is the array with the ids of all the parent nodes leading down to the current node. The node path includes the id of the current node\n\n</Note>\n\n\n```tsx {2} title=\"Node path vs row id\"\nconst data = [\n  { id: '1', name: 'Documents',                // path: ['1']\n    children: [\n      { id: '10', name: 'Private',             // path: ['1', '10']\n        children: [\n          { id: '100', name: 'Report.docx' },  // path: ['1', '10', '100'] \n          { id: '101', name: 'Vacation.docx' },// path: ['1', '10', '101']\n        ],\n      },\n    ]\n  },\n  {\n    id: '2',\n    name: 'Downloads',                        // path: ['2']\n    children: [\n      {\n        id: '20',\n        name: 'cat.jpg',                      // path: ['2', '20']\n      },\n    ],\n  },\n];\n```\n\n<Sandpack title=\"Using a custom nodesKey prop\">\n\n```ts file=\"tree-nodesKey-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"defaultTreeExpandState\" type=\"TreeExpandStateValue\">\n\n> Specifies the expand/collapse state of the tree nodes. See <TypeLink name=\"TreeExpandStateValue\" /> for the shape of this object. For the controlled version, see <DPropLink name=\"treeExpandState\" />.\n\n\n\n<Sandpack title=\"Using uncontrolled tree expand state\" size=\"large\">\n\n```ts file=\"tree-uncontrolled-expandstate-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n\n\n<Prop name=\"isRowDisabled\" type=\"(rowInfo: InfiniteTableRowInfo<T>) => boolean\">\n\n> This function ultimately decides the disabled state of a row. It overrides both <DPropLink name=\"defaultRowDisabledState\" />/<DPropLink name=\"rowDisabledState\" /> props.\n\nIt's called with a single argument - the <TypeLink name=\"InfiniteTableRowInfo\">row info object</TypeLink> for the row in question.\n\nIt should return `true` if the row is disabled, and `false` otherwise.\n\n<Note>\n\nWhen this prop is used, <DPropLink name=\"onRowDisabledStateChange\" /> will not be called.\n\n</Note>\n\n</Prop>\n\n\n<Prop name=\"defaultRowDisabledState\" type=\"{enabledRows,disabledRows}\">\n\n> The uncontrolled prop for managing row enabled/disabled state. For the controlled version see <DPropLink name=\"rowDisabledState\" />. For listening to row disabled state changes, see <DPropLink name=\"onRowDisabledStateChange\" />.\n\nThe value for this prop is an object with two properties:\n\n- `enabledRows` - either `true` or an array of row ids that are enabled. When `true` is passed, `disabledRows` should be an array of row ids that are disabled.\n- `disabledRows` - either `true` or an array of row ids that are disabled. When `true` is passed, `enabledRows` should be an array of row ids that are enabled.\n\n<Note>\n\nThe values in the `enabledRows`/`disabledRows` arrays are row ids, and not indexes.\n\n</Note>\n\n\n<Note>\n\nThis prop can be overriden by using the <DPropLink name=\"isRowDisabled\" /> prop.\n\n</Note>\n\nHere's an example of how to use the `defaultRowDisabledState` prop:\n\n<Sandpack title=\"Using uncontrolled row disabled state\">\n\n<Description>\n\nRows with ids `1`, `3`, `4` and `5` are disabled.\n\n</Description>\n\n```ts file=\"defaultRowDisabledState-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"rowDisabledState\" type=\"{enabledRows,disabledRows}\">\n\n> Manages row enabled/disabled state. For the uncontrolled version see <DPropLink name=\"defaultRowDisabledState\" />. For listening to row disabled state changes, see <DPropLink name=\"onRowDisabledStateChange\" />.\n\nThe value for this prop is an object with two properties:\n\n- `enabledRows` - either `true` or an array of row ids that are enabled. When `true` is passed, `disabledRows` should be an array of row ids that are disabled.\n- `disabledRows` - either `true` or an array of row ids that are disabled. When `true` is passed, `enabledRows` should be an array of row ids that are enabled.\n\n<Note>\nWhen using this controlled prop, you will need to update the `rowDisabledState` prop by using the <DPropLink name=\"onRowDisabledStateChange\" /> callback.\n</Note>\n\n<Note>\n\nThis prop can be overriden by using the <DPropLink name=\"isRowDisabled\" /> prop.\n\n</Note>\n\n<Sandpack title=\"Using controlled row disabled state\">\n\n<Description>\n\nRows with ids `1`, `3`, `4` and `5` are disabled initially.\n\nRight click rows and use the context menu to enable/disable rows.\n\n</Description>\n\n```ts file=\"rowDisabledState-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"treeSelection\" type=\"TreeSelectionValue\">\n\n> Determines what nodes are selected and deselected. For the uncontrolled version see <DPropLink name=\"defaultTreeSelection\" />.\n\nThe value of this prop determines if a node is selected or not.\n\nSee <TypeLink name=\"TreeSelectionValue\" /> for details on the shape of this object.\n\n\n<Sandpack title=\"Using controlled tree selection\" size=\"lg\">\n\n```ts file=\"tree-controlled-selectedstate-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onTreeSelectionChange\" type=\"(treeSelection: TreeSelectionValue, context) => void\">\n\n> Called when the tree selection changes. See <DPropLink name=\"treeSelection\" />.\n\n<Sandpack title=\"Reacting to tree selection changes\" size=\"lg\">\n\n```ts file=\"tree-controlled-selectedstate-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nWhen using `multi-row` <DPropLink name=\"selectionMode\" />, the signature of this callback is:\n\n - `treeSelection` - the new <TypeLink name=\"TreeSelectionValue\">tree selection state</TypeLink>\n - `context` - an object with the following properties:\n   - `selectionMode` - will be `\"multi-row\"`\n   - `lastUpdatedNodePath` - the path of the node that was last updated (either via user action or api call). Will be `null` of the action that triggered this callback was <TreeApiLink name=\"selectAll\" /> or <TreeApiLink name=\"deselectAll\" />.\n   - `dataSourceApi` - the [DataSource API](/docs/reference/datasource-api) instance\n\n</Prop>\n\n<Prop name=\"defaultTreeSelection\" type=\"TreeSelectionValue\">\n\n> Determines what nodes are selected and deselected. For the controlled version see <DPropLink name=\"treeSelection\" />.\n\nThe value of this prop determines if a node is selected or not.\n\nSee <TypeLink name=\"TreeSelectionValue\" /> for details on the shape of this object.\n\n\n<Sandpack title=\"Using uncontrolled tree selection\" size=\"lg\">\n\n```ts file=\"tree-uncontrolled-selectedstate-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onRowDisabledStateChange\" type=\"(rowDisabledState) => void\">\n\n> Called when the row disabled state changes.\n\nIt's called with just 1 argument (`rowDisabledState`), which is an instance of the `RowDisabledState` class. To get a literal object that represents the row disabled state, call the `rowDisabledState.getState()` method.\n\n```tsx {3,19}\nimport {\n  DataSource,\n  RowDisabledStateObject,\n} from '@infinite-table/infinite-react';\nfunction App() {\n  const [rowDisabledState, setRowDisabledState] = React.useState<\n    RowDisabledStateObject<number>\n  >({\n    enabledRows: true,\n    disabledRows: [1, 3, 4, 5],\n  });\n  return (\n    <>\n      <DataSource<Developer>\n        data={data}\n        primaryKey=\"id\"\n        rowDisabledState={rowDisabledState}\n        onRowDisabledStateChange={(rowState) => {\n          setRowDisabledState(rowState.getState());\n        }}\n      />\n    </>\n  );\n}\n```\n\n<Note>\nWhen using the controlled <DPropLink name=\"rowDisabledState\" /> prop, you will need to update the `rowDisabledState` by using this callback.\n</Note>\n\n<Sandpack title=\"Using the onRowDisabledStateChange callback to update row disabled state\">\n\n<Description>\n\nRows with ids `1`, `3`, `4` and `5` are disabled initially.\n\nRight click rows and use the context menu to enable/disable rows.\n\n</Description>\n\n```ts file=\"rowDisabledState-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n\n\n<Prop name=\"aggregationReducers\" type=\"Record<string, DataSourceAggregationReducer>\">\n\n> Specifies the functions to use for aggregating data. The object is a map where the keys are ids for aggregations and values are object of the shape described below.\n\nThe `DataSourceAggregationReducer` type can have the following properties\n\n- `initialValue` - type `any`, mandatory for client-side aggregations. It can be a function, in which case, it will be called to compute the initial value for the aggregation. Otherwise, the initial value will be used as is.\n- `field` - the field to aggregate on. Optional - if not specified, make sure you specify `getter`\n- `getter`: `(data:T)=> any` - a getter function, called with the current `data` object.\n- `reducer`: `string | (accumulator, value, data: T) => any` - either a string (for server-side aggregations) or a mandatory aggregation function for client-side aggregations.\n- `done`: `(accumulator, arr: T[]) => any` - a function that is called to finish the aggregation after all values have been accumulated. The function should return the final value of the aggregation. Only used for client-side aggregations.\n- `name` - useful especially in combination with <DataSourcePropLink name=\"pivotBy\" />, as it will be used as the pivot column header.\n- `pivotColumn` - if specified, will configure the pivot column generated for this aggregation. This object has the same shape as a normal <PropLink name=\"columns\">column</PropLink>, but supports an extra `inheritFromColumn` property, which can either be a `string` (a column id), or a `boolean`. The default behavior for a pivot column is to inherit the configuration of the initial column that has the same `field` property. `inheritFromColumn` allows you to specify another column to inherit from, or, if `false` is passed, the pivot column will not inherit from any other column.\n\n<Sandpack title=\"Aggregation demo - see `salary` column\">\n\n```ts files=[\"groupBy-example.page.tsx\",\"columns.ts\"]\n\n```\n\n</Sandpack>\n\nAggregation reducers can be used in combination with grouping and pivoting. The example below shows aggregations used with server-side pivoting\n\n<Sandpack title=\"Aggregations used together with server-side pivoting\">\n\n```ts file=\"$DOCS/learn/grouping-and-pivoting/pivoting/remote-pivoting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nPivot columns generated for aggregations will inehrit from initial columns - the example shows how to leverage this behavior and how to extend it\n\n<Sandpack title=\"Pivot columns inherit from original columns bound to the same field\">\n\n```ts file=\"$DOCS/learn/grouping-and-pivoting/pivoting/pivot-column-inherit-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"data\" type=\"DATA_TYPE[]|Promise<DATA_TYPE[]|(params:DataSourceDataParams) => DATA_TYPE[]|Promise<DATA_TYPE[]>\">\n\n> Specifies the data the component is bound to.\n\nCan be one of the following:\n\n- an array of the bound type - eg: `Employee[]`\n- a Promise tha resolves to an array like the above\n- a function that returns an any of the above\n\n<Note>\n\nIf the `data` prop is a function, it will be called with an object of type <TypeLink name=\"DataSourceDataParams\" />. <TypeLink name=\"DataSourceDataParams\" code={false}>Click to see more details.</TypeLink>\n\n</Note>\n\n<Sandpack title=\"Data loading example with promise\">\n\n```ts file=\"data-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIt's important to note you can re-fetch data by changing the reference you pass as the `data` prop to the `<DataSource/>` component. Passing another `data` function, will cause the component to re-execute the function and thus load new data.\n\n</Note>\n\n<Sandpack title=\"Re-fetching data\">\n\n```ts files=[\"$DOCS/learn/working-with-data/refetch-example.page.tsx\",\"$DOCS/learn/working-with-data/columns.ts\"]\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"defaultFilterValue\" type=\"{field?, id?, filter: {type, operator, value}[]\">\n\n> Uncontrolled prop used for filtering. Can be used for both [client-side](/docs/learn/filtering/filtering-client-side) and [server-side](/docs/learn/filtering/filtering-server-side) filtering.\n\nIf you want to show the column filter editors, you have to either specify this property, or the controlled <DPropLink name=\"filterValue\" /> - even if you have no initial filters. For no initial filters, use `defaultFilterValue=[]`.\n\nFor the controlled version, and more details on the shape of the objects in the array, see <DPropLink name=\"filterValue\" />.\n\n<Sandpack  title=\"Initial filtering applied via defaultFilterValue\">\n\n```ts file=\"defaultFilterValue-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nYou can control the visibility of the column filters by using the <PropLink name=\"showColumnFilters\" /> prop.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"defaultRowSelection\" type=\"string|number|null|object\">\n\n> Describes the selected row(s) in the `DataSource`\n\nSee more docs in the controlled version of this prop, <PropLink name=\"rowSelection\" />\n\nFor single selection, the prop will be of type: `number | string | null`. Use `null` for empty selection in single selection mode.\n\nFor multiple selection, the prop will have the following shape:\n\n```ts\nconst rowSelection = {\n  selectedRows: [3, 6, 100, 23], // those specific rows are selected\n  defaultSelection: false, // all rows deselected by default\n};\n\n// or\nconst rowSelection = {\n  deselectedRows: [3, 6, 100, 23], // those specific rows are deselected\n  defaultSelection: true, // all other rows are selected\n};\n\n// or, for grouped data - this example assumes groupBy=continent,country,city\nconst rowSelection = {\n  selectedRows: [\n    45, // row with id 45 is selected, no matter the group\n    ['Europe', 'France'], // all rows in Europe/France are selected\n    ['Asia'], // all rows in Asia are selected\n  ],\n  deselectedRows: [\n    ['Europe', 'France', 'Paris'], // all rows in Paris are deselected\n  ],\n  defaultSelection: false, // all other rows are selected\n};\n```\n\nFor using group keys in the selection value, see related <DPropLink name=\"useGroupKeysForMultiRowSelection\" />\n\n<Sandpack  title=\"Uncontrolled, multiple row selection with checkbox column\">\n\n```ts file=\"$DOCS/reference/uncontrolled-multiple-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"defaultSortInfo\" type=\"DataSourceSingleSortInfo<T>|DataSourceSingleSortInfo<T>[]|null\">\n\n> Information for sorting the data. This is an uncontrolled prop.\n\nFor detailed explanations, see <DataSourcePropLink name=\"sortInfo\" /> (controlled property).\n\n<Note>\n\nWhen you provide a `defaultSortInfo` prop and the sorting information uses a custom <DataSourcePropLink name=\"sortTypes\">sortType</DataSourcePropLink>, make sure you specify that as the `type` property of the sorting info object.\n\n```tsx\ndefaultSortInfo={{\n  field: 'color',\n  dir: 1,\n  // note this custom sort type\n  type: 'color',\n}}\n```\n\nYou will need to have a property for that type in your <DataSourcePropLink name=\"sortTypes\"/> object as well.\n\n```tsx\nsortTypes={{\n  color: (a, b) => //...\n}}\n```\n\n</Note>\n\n<Sandpack title=\"Local uncontrolled single sorting\">\n\n```ts file=\"$DOCS/learn/sorting/local-uncontrolled-single-sorting-example-with-remote-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack  title=\"Custom sort by color - magenta will come first\">\n\n```ts file=\"./customSortType-with-uncontrolled-sortInfo-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"filterDelay\" type=\"number\" defaultValue={200}>\n\n> The delay in milliseconds before the filter is applied. This is useful when you want to wait for the user to finish typing before applying the filter.\n\nThis is especially useful in order to reduce the number of requests sent to the server, when <DPropLink name=\"filterMode\">remote filtering</DPropLink> is used.\n\nIf not specified, defaults to `200` milliseconds. This means, any changes to the column filters, that happen inside a 200ms window (or the current value of <DPropLink name=\"filterDelay\"/>), will be debounced and only the last value will be sent to the server.\n\n<Note>\n\nIf you want to prevent debouncing/batching filter values, you can set <DPropLink name=\"filterDelay\"/> to `0`.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"batchOperationDelay\" type=\"number\">\n\n> The delay in milliseconds to wait before mutations are applied. This is useful to batch multiple mutations together.\n\nIf not specified, a `requestAnimationFrame` will be used to batch mutations.\n\nThe following mutative operations are batched:\n \n - <DApiLink name=\"addData\" />\n - <DApiLink name=\"addDataArray\" />\n - <DApiLink name=\"insertData\" />\n - <DApiLink name=\"insertDataArray\" />\n - <DApiLink name=\"updateData\" />\n - <DApiLink name=\"updateDataArray\" />\n - <DApiLink name=\"removeData\" />\n - <DApiLink name=\"removeDataArray\" />\n - <DApiLink name=\"removeDataByPrimaryKey\" />\n - <DApiLink name=\"removeDataArrayByPrimaryKeys\" />\n - <DApiLink name=\"replaceAllData\" />\n - <DApiLink name=\"clearAllData\" />\n\n</Prop>\n\n<Prop name=\"treeFilterFunction\" type=\"({ data, filterTreeNode, primaryKey }) => DATA_TYPE | boolean\">\n\n> A function to be used for filtering a `TreeDataSource`.\n\nThe function should return a boolean value or a data object.\n\n- when returning `false` the current data object will be filtered out.\n- when returning `true`, the current data object will be included in the filtered data, with no changes.\n- when returning a data object, the object will be used instead of the current data object for the row. This means that you can modify the data object to only include some of its children (which match a specific criteria)\n\n<Note>\n\nThe `treeFilterFunction` is called with an object that has a `filterTreeNode` function property. This function is a helper function you can use to continue the filtering further down the tree on the current (non-leaf) node.\n\nThis function will call the filtering function for each child of the current node. If all the children are filtered out, the current node will be filtered out as well. If there are any children that match the criteria, a clone of the current node will be returned with only the matching children.\n\nYou can opt to not use this helper function, and instead implement your own filtering logic. In this case, make sure you don't mutate data objects but rather return cloned versions of them.\n\n</Note>\n\n<Sandpack title=\"Tree filtering via treeFilterFunction\">\n\n```ts file=tree-filter-function-example.page.tsx\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"filterFunction\" type=\"({ data, dataArray, index, primaryKey }) => boolean\">\n\n> A function to be used for client-side filtering.\n\nUsing this function will not show any special filtering UI for columns.\n\n<Note>\n\nFor filtering when using a `TreeGrid`, see <DPropLink name=\"treeFilterFunction\" />.\n\n</Note>\n\n<Sandpack title=\"Custom filterFunction example\">\n\n<Description>\n\nLoads data from remote location but will only show rows that have `id > 100`.\n\n</Description>\n\n```ts file=\"custom-filter-function-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"shouldReloadData.filterValue\" type=\"boolean\">\n\n> Explicitly configures where filtering will take place and if changes in the <DataSourcePropLink name=\"filterValue\" /> should trigger a reload of the data source - applicable when <DPropLink name=\"data\" /> is a function.\n Replaces the deprecated <DPropLink name=\"filterMode\" />\n\n- `false` (the default) - filtering will be done on the client side and the <DPropLink name=\"data\" /> function will not be invoked again.\n- `true` - filtering will be done on the server side - the <DPropLink name=\"data\" /> function will be called with an object that includes the `filterValue` property, so it can be sent to the server\n\n</Prop>\n\n<Prop name=\"filterMode\" type=\"'local'|'remote'\" deprecated>\n\n> Explicitly configures where filtering will take place. Update to use the <DPropLink name=\"shouldReloadData.filterValue\" /> prop.\n\n- `'local'` - filtering will be done on the client side\n- `'remote'` - filtering will be done on the server side - the <DPropLink name=\"data\" /> function will be called with an object that includes the `filterValue` property, so it can be sent to the server\n\n</Prop>\n\n<Prop name=\"filterTypes\" type=\"Record<string,{operators,emptyValues, defaultOperator}>\">\n\n> Specifies the available types of filters for the columns.\n\nA filter type is a concept that defines how a certain type of data is to be filtered.\nA filter type will have a key, used to define the filter in the `filterTypes` object, and also the following properties:\n\n- `label`\n- `emptyValues` - an array of values considered to be empty values - when any of these values is used in the filter, the filter will match all records.\n- `operators` - an array of operator this filter type supports\n- `defaultOperator` - the default operator for the filter type\n- `components` - an object that describes the custom components to be used for the filter type\n  - `FilterEditor` - a custom filter editor component for this filter type\n  - `FilterOperatorSwitch` - a custom component that is displayed at the left of the `FilterEditor` and can be used for switching between operators - only needed for very very advanced use-cases.\n\nLet's imagine you have a `DataSource` with developers, each with a `salary` column, and for that column you want to allow `>`, `>=`, `<` and `<=` comparisons (operators).\n\nFor this, you would define the following filter type:\n\n```tsx\nconst filterTypes = {\n  income: {\n    label: 'Income',\n    emptyValues: ['', null, undefined],\n    defaultOperator: 'gt',\n    operators: [\n      {\n        name: 'gt',\n        label: 'Greater than',\n        fn: ({ currentValue, filterValue }) => {\n          return currentValue > filterValue;\n        },\n      },\n      {\n        name: 'gte',\n        //...\n      },\n      {\n        name: 'lt',\n        //...\n      },\n      {\n        name: 'lte',\n        //...\n      },\n    ],\n  },\n};\n```\n\n<Note>\n\nEach operator for a certain filter type needs to at least have a `name` and `fn` defined. The `fn` property is a function that will be called when client-side filtering is enabled, with an object that has the following properties:\n\n- `currentValue` - the cell value of the current row for the column being filtered\n- `filterValue` - the value of the filter editor\n- `emptyValues` - the array of values considered to be empty values for the filter type\n- `data` - the current row data object - `typeof DATA_TYPE`\n- `index` - the index of the current row in the table - `number`\n- `dataArray` - the array of all rows originally in the table - `typeof DATA_TYPE[]`\n- `field?` - the field the current column is bound to (can be undefined if the column is not bound to a field)\n\n</Note>\n\n<Sandpack title=\"Custom filter type used for the salary column\">\n\n<Description>\n\nThe `salary` column has a custom filter type, with the following operators: `gt`, `gte`, `lt` and `lte`.\n\n</Description>\n\n```ts file=\"filter-types-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nBy default, the `string` and `number` filter types are available. You can import the default filter types like this:\n\n```ts\nimport { defaultFilterTypes } from '@infinite-table/infinite-react';\n```\n\nIf you want to make all your instances of `InfiniteTable` have new operators for those filter types, you can simply mutate the exported `defaultFilterTypes` object.\n\n<Sandpack title=\"Enhanced string filter type - new 'Not includes' operator\">\n\n<Description>\n\nThe `string` columns have a new `Not includes` operator.\n\n</Description>\n\n```ts file=\"default-filter-types-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Note>\n\n<Note>\n\nWhen you specify new <DPropLink name=\"filterTypes\"/>, the default filter types of `string` and `number` are still available - unless the new object contains those keys and overrides them explicitly.\n\n</Note>\n\nThe current implementation of the default filter types is the following:\n\n```tsx\nexport const defaultFilterTypes: Record<string, DataSourceFilterType<T>> = {\n    string: {\n      label: 'Text',\n      emptyValues: [''],\n      defaultOperator: 'includes',\n      components: {\n        FilterEditor: StringFilterEditor,\n      },\n      operators: [\n        {\n          name: 'includes',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          label: 'includes',\n          fn: ({ currentValue, filterValue }) => {\n            return (\n              typeof currentValue === 'string' &&\n              typeof filterValue == 'string' &&\n              currentValue.toLowerCase().includes(filterValue.toLowerCase())\n            );\n          },\n        },\n        {\n          label: 'Equals',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          name: 'eq',\n          fn: ({ currentValue: value, filterValue }) => {\n            return typeof value === 'string' && value === filterValue;\n          },\n        },\n        {\n          name: 'startsWith',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          label: 'Starts With',\n          fn: ({ currentValue: value, filterValue }) => {\n            return value.startsWith(filterValue);\n          },\n        },\n        {\n          name: 'endsWith',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          label: 'Ends With',\n          fn: ({ currentValue: value, filterValue }) => {\n            return value.endsWith(filterValue);\n          },\n        },\n      ],\n    },\n    number: {\n      label: 'Number',\n      emptyValues: ['', null, undefined],\n      defaultOperator: 'eq',\n      components: {\n        FilterEditor: NumberFilterEditor,\n      },\n      operators: [\n        {\n          label: 'Equals',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          name: 'eq',\n          fn: ({ currentValue, filterValue }) => {\n            return currentValue == filterValue;\n          },\n        },\n        {\n          label: 'Not Equals',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          name: 'neq',\n          fn: ({ currentValue, filterValue }) => {\n            return currentValue != filterValue;\n          },\n        },\n        {\n          name: 'gt',\n          label: 'Greater Than',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          fn: ({ currentValue, filterValue, emptyValues }) => {\n            if (emptyValues.includes(currentValue)) {\n              return true;\n            }\n            return currentValue > filterValue;\n          },\n        },\n        {\n          name: 'gte',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          label: 'Greater Than or Equal',\n          fn: ({ currentValue, filterValue, emptyValues }) => {\n            if (emptyValues.includes(currentValue)) {\n              return true;\n            }\n            return currentValue >= filterValue;\n          },\n        },\n        {\n          name: 'lt',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          label: 'Less Than',\n          fn: ({ currentValue, filterValue, emptyValues }) => {\n            if (emptyValues.includes(currentValue)) {\n              return true;\n            }\n            return currentValue < filterValue;\n          },\n        },\n        {\n          name: 'lte',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          label: 'Less Than or Equal',\n          fn: ({ currentValue, filterValue, emptyValues }) => {\n            if (emptyValues.includes(currentValue)) {\n              return true;\n            }\n            return currentValue <= filterValue;\n          },\n        }\n      ],\n    },\n  };\n```\n\n</Prop>\n\n<Prop name=\"filterTypes.components.FilterEditor\">\n\n> A custom React component to be used as an editor for the current filter type\n\nEvery filter type can define the following `components`\n\n- `FilterEditor` - a React component to be used as an editor for the current filter type\n- `FilterOperatorSwitch` - a custom component that is displayed at the left of the `FilterEditor` and can be used for switching between operators - only needed for very very advanced use-cases.\n\n<Note>\n\nFilter type operators can override the `FilterEditor` component - they can specify the following components:\n\n- `FilterEditor` - if specified, it overrides the `FilterEditor` of the filter type\n- `Icon` - a React component to be used as an icon for the operator - displayed by the menu triggered when clicking on the `FilterOperatorSwitch` component\n\n</Note>\n\n<Sandpack title=\"Demo of a custom filter editor\">\n\n<Description>\n\nThe `canDesign` column is using a custom `bool` filter type with a custom filter editor.\n\nThe checkbox has indeterminate state, which will match all values in the data source.\n\n</Description>\n\n```ts file=\"$DOCS/reference/hooks/custom-filter-editor-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"filterValue\" type=\"{field?, id?, filter: {type, operator, value}[]\">\n\n> Controlled prop used for filtering. Can be used for both [client-side](/docs/learn/filtering/filtering-client-side) and [server-side](/docs/learn/filtering/filtering-server-side) filtering.\n\nFor the uncontrolled version, see <DPropLink name=\"defaultFilterValue\" />\n\nIf you want to show the column filter editors, you have to either specify this property, or the uncontrolled <DPropLink name=\"defaultFilterValue\" /> - even if you have no initial filters. For no initial filters, use `filterValue=[]`.\n\nThe objects in this array have the following shape:\n\n- `filter` - an object describing the filter\n  - `filter.value` - the value to filter by\n  - `filter.type` - the current type of the filter (eg: `string`, `number` or another custom type you specify in the <DPropLink name=\"filterTypes\">filterTypes</DPropLink> prop)\n  - `filter.operator` - the name of the operator being applied\n- `field` - the field being filtered - generally matched with a column. This is optional, as some columns can have no field.\n- `id` - the id of the column being filtered. This is optional - for columns bound to a field, the `field` should be used instead of the `id`.\n- `disabled` - whether this filter is applied or not\n\n<Sandpack  title=\"Controlled filters with onFilterValueChange\">\n\n```ts file=\"onFilterValueChange-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nYou can control the visibility of the column filters by using the <PropLink name=\"showColumnFilters\" /> prop.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"lazyLoad\" type=\"boolean|{batchSize:number}\" defaultValue={false}>\n\n> Whether the datasource will load data lazily - useful for server-side grouping and pivoting. If set to `true` or to an object (with `batchSize` property), the <DataSourcePropLink name=\"data\" /> prop must be a function that returns a promise.\n\n<Sandpack title=\"Server-side pivoting with full lazy load\">\n\n```ts file=\"$DOCS/learn/grouping-and-pivoting/pivoting/remote-pivoting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"groupRowsState\" type=\"{collapsedRows:true|[][], expandedRows:true|[][]}\">\n\n> Controls the expand/collapse state of group rows, when <DPropLink name=\"groupBy\" /> is used\n\n\nSee related <DPropLink name=\"defaultGroupRowsState\" />, <DPropLink name=\"onGroupRowsStateChange\" /> and <DPropLink name=\"groupBy\" />\n\n\n```tsx title=\"Specifying the state for group rows\"\nconst groupRowsState: DataSourcePropGroupRowsStateObject = {\n  collapsedRows: true,\n  expandedRows: [['Mexico'], ['Mexico', 'backend'], ['India']],\n};\n```\n\nThe two properties in this object are `collapsedRows` and `expandedRows`, and each can have the following values:\n - `true` - meaning that all groups have this state\n - an array of arrays - representing the exceptions to the default value\n\n\nSo if you have `collapsedRows` set to `true` and then `expandedRows` set to `[['Mexico'], ['Mexico', 'backend'], ['India']]` then all rows are collapsed by default, except the rows specified in the `expandedRows`.\n\n<Sandpack title=\"Using controlled expanded/collapsed state for group rows\">\n\n```ts file=\"./group-rows-state-controlled-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onGroupRowsStateChange\" type=\"(state: GroupRowsState) => void\">\n\n> Callback prop when the <DPropLink name=\"groupRowsState\" /> changes.\n\nSee related <DPropLink name=\"groupRowsState\" /> and <DPropLink name=\"groupBy\" />\n\nThis function is called with an object that's an instance of <TypeLink name=\"GroupRowsState\" />, when the user interacts with group rows and expands/collapses them.\n\nIf you want to get a plain object from this instance, call the `.getState()` method.\n\nSee <TypeLink name=\"GroupRowsState\" /> reference to find out all the utility methods this instance gives you.\n\n</Prop>\n\n<Prop name=\"defaultGroupRowsState\" type=\"{collapsedRows:true|[][], expandedRows:true|[][]}\">\n\n> Specifies the initial expand/collapse state of group rows, when <DPropLink name=\"groupBy\" /> is used\n\n\nFor the controlled version, see related <DPropLink name=\"groupRowsState\" />.\n\n\n```tsx title=\"Specifying the initial state for group rows\"\nconst defaultGroupRowsState: DataSourcePropGroupRowsStateObject = {\n  expandedRows: true,\n  collapsedRows: [['Mexico'], ['Mexico', 'backend'], ['India']],\n};\n```\n\nThe two properties in this object are `collapsedRows` and `expandedRows`, and each can have the following values:\n - `true` - meaning that all groups have this state\n - an array of arrays - representing the exceptions to the default value\n\n\nSo if you have `expandedRows` set to `true` and then `collapsedRows` set to `[['Mexico'], ['Mexico', 'backend'], ['India']]` then all rows are expanded by default, except the rows specified in the `collapsedRows`.\n\n<Sandpack title=\"Specifying initial expanded/collapsed state for group rows\">\n```ts file=\"./group-rows-initial-state-example.page.tsx\"\n```\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"groupBy\">\n\n> An array of objects with `field` properties, that control how rows are being grouped.\n\nEach item in the array can have the following properties:\n\n- field - `keyof DATA_TYPE`\n- column - config object for the group <PropLink name=\"column\">column</PropLink> - see <DPropLink name=\"groupBy.column\" />.\n\n<Note>\n\nWhen using <PropLink name=\"groupRenderStrategy\" code={false}>groupRenderStrategy=\"multi-column\"</PropLink>, it can be very useful for each group to configure it's own column - use <DPropLink name=\"groupBy.column\" /> for this.\n</Note>\n\nSee <TypeLink name=\"DataSourcePropGroupBy\" /> for the type definition.\n\n<Sandpack>\n\n```ts files=[\"groupBy-example.page.tsx\",\"columns.ts\"]\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"pivotBy\" type=\"DataSourcePivotBy<DATA_TYPE>[]\">\n\n> An array of objects with `field` properties that control how pivoting works. Pivoting is very often associated with aggregations, so see related <DPropLink name=\"aggregationReducers\" /> for more details.\n\nEach item in the array can have the following properties:\n\n- field - `keyof DATA_TYPE`\n- column - config object or function for generated pivot columns.\n\n<Note>\n\nFor more details on the type of the items in this array prop, see <TypeLink name=\"DataSourcePivotBy\" />.\n\n</Note>\n\n<Sandpack title=\"Pivoting with customized pivot column\">\n\n```ts file=\"$DOCS/learn/grouping-and-pivoting/pivoting/pivoting-customize-column-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n \n<Prop name=\"groupBy.column\" type=\"Partial<InfiniteTableColumn<T>>\">\n\n> An object that configures how the column for the current group should look like\n\nIf <PropLink name=\"groupColumn\"/> is specified, it overrides this property (the objects actually get merged, with `groupColumn` having higher priority and being merged last).\n\n<Note>\n\nIf you are using a <PropLink name=\"groupRenderStrategy\" code={false}>groupRenderStrategy=\"single-column\"</PropLink>, then using `groupBy.column` should not be used, as you could have many groups with conflicting column configuration.\n\nIn this case, use the <PropLink name=\"groupColumn\"/> prop.\n\n</Note>\n\n<Sandpack>\n\n<Description>\n\nThis example uses `groupBy.column` to configure the generated columns corresponding to each group.\n\n</Description>\n\n```ts files=[\"groupBy-multi-with-column-example.page.tsx\",\"columns.ts\"]\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"livePagination\" type=\"boolean\">\n\n> Whether the component should use live pagination.\n\nUse this in combination with <DataSourcePropLink name=\"livePaginationCursor\" /> and <DataSourcePropLink name=\"onDataParamsChange\" />\n\n<Sandpack  title=\"Live pagination - with react-query\">\n\n```ts file=\"$DOCS/learn/working-with-data/live-pagination-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onDataMutations\" type=\"({ mutations, dataArray, primaryKeyField }) => void\">\n\n> Callback prop to be called when the data changes via the DataSource API.\n\nCalled when any of the following methods have been called in the `DataSource` api\n\n- <DApiLink name=\"updateData\" />\n- <DApiLink name=\"updateDataArray\" />\n\n- <DApiLink name=\"removeData\" />\n- <DApiLink name=\"removeDataArray\" />\n\n- <DApiLink name=\"removeDataByPrimaryKey\" />\n- <DApiLink name=\"removeDataArrayByPrimaryKeys\" />\n\n- <DApiLink name=\"insertData\" />\n- <DApiLink name=\"insertDataArray\" />\n\n- <DApiLink name=\"addData\" />\n- <DApiLink name=\"addDataArray\" />\n\nThis callback is called with an object that has the following properties:\n\n- `primaryKeyField` - the field configured as the primary key for the `<DataSource />`\n- `mutations` - a `Map` with mutations. The keys in the map are primary keys of the mutated data\n\nThe values in the mutations are object descriptors of mutations, that have the following shape:\n\n- `type`: `'insert'|'update'|'delete'`\n- `originalData`: `DATA_TYPE | null` - the original data before the mutation. In case of `insert`, it will be `null`\n- `data`: `Partial<DATA_TYPE>` - the updates to be performed on the data. In case of `delete`, it will be `undefined`. This is an object that will contain the primary key, and the updated values for the data (not necessarily the full object, except for `insert`, where it will be of type `DATA_TYPE`).\n\n</Prop>\n\n<Prop name=\"livePaginationCursor\" type=\"string|number|((params) =>string|number)\" defaulValue={undefined}>\n\n> A cursor value for live pagination. A good value for this is the id of the last item in the <DataSourcePropLink name=\"data\" /> array. It can also be defined as a function\n\nUse this in combination with <DataSourcePropLink name=\"livePagination\" /> and <DataSourcePropLink name=\"onDataParamsChange\" />\n\n<Note>\n\nWhen this is a function, it is called with a parameter object that has the following properties:\n\n- `array` - the current array of data\n- `lastItem` - the last item in the array\n- `length` - the length of the data array\n\n</Note>\n\n<Sandpack  title=\"Live pagination - with react-query\" deps=\"react-query\">\n\n```ts file=\"$DOCS/learn/working-with-data/live-pagination-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onDataParamsChange\" type=\"(dataParams: DataSourceDataParams<DATA_TYPE:>)=>void\">\n\n> A function to be called when data-related state changes.\n\nCan be used to implement <DataSourcePropLink name=\"livePagination\" />\n\nThe function is called with an object that has the following properties:\n\n- `sortInfo` - current sort information - see <DataSourcePropLink name=\"sortInfo\" /> for details\n- `groupBy` - current grouping information - see <DataSourcePropLink name=\"groupBy\" /> for details\n- `filterValue` - current filtering information - see <DataSourcePropLink name=\"filterValue\" /> for details\n- `livePaginationCursor` - the value for the live pagination cursor - see <DataSourcePropLink name=\"livePaginationCursor\" /> for details\n- `changes` - an object that can help you figure out what change caused `onDataParamsChange` to be called.\n\n<Sandpack  title=\"Live pagination - with react-query\" deps=\"react-query\">\n\n```ts file=\"$DOCS/learn/working-with-data/live-pagination-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"onFilterValueChange\" type=\"({field?, id?, filter: {type, operator, value}[]) => void\">\n\n> Callback prop called when the <DPropLink name=\"filterValue\" /> changes.\n\nThis might not be called immediately, as there might be a <DPropLink name=\"filterDelay\"/> set.\n\n<Sandpack  title=\"Controlled filters with onFilterValueChange\">\n\n```ts file=\"onFilterValueChange-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onLivePaginationCursorChange\" type=\"(cursor)=> void\">\n\n> A function to be called when the <DataSourcePropLink name=\"livePaginationCursor\" /> changes.\n\nAlso see related <DataSourcePropLink name=\"onDataParamsChange\" />.\n\n</Prop>\n\n<Prop name=\"onReady\" type=\"(dataSourceApi: DataSourceApi<DATA_TYPE>) => void\">\n\n> The callback that is called when the `DataSource` is ready. The [`dataSourceApi`](/docs/reference/datasource-api) is passed as the first argument.\n\n</Prop>\n\n<Prop name=\"onCellSelectionChange\" type=\"(cellSelection, selectionMode='multi-cell') => void\">\n\n> A function to be called when the <DPropLink name=\"cellSelection\" /> changes.\n\n<Sandpack  title=\"Controlled cell selection with onCellSelectionChange\" size=\"lg\">\n\n<Description>\n\nUse your mouse to select/deselect cells.\n\n</Description>\n\n```ts file=\"$DOCS/learn/selection/controlled-cell-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onRowSelectionChange\" type=\"(rowSelection, selectionMode='single-row'|'multi-row') => void\">\n\n> A function to be called when the <DPropLink name=\"rowSelection\" /> changes.\n\n<Sandpack  title=\"Controlled row selection with onRowSelectionChange\">\n\n<Description>\n\nUse your mouse or keyboard (press the spacebar) to select/deselect a single row.\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-single-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Multi row checkbox selection with grouping\" >\n\n<Description>\n\nThis example shows how you can use multiple row selection with a predefined controlled value.\n\nGo ahead and select some groups/rows and see the selection value adjust.\n\nThe example also shows how you can use the `InfiniteTableApi` to retrieve the actual ids of the selected rows.\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-multi-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"onSortInfoChange\" type=\"(sortInfo | null) => void\">\n\n> Called when sorting changes on the DataSource.\n\nThe sorting can change either via a user interaction or by calling an API method (from the [root API](api) or the [Column API](column-api)).\n\nSee related <DataSourcePropLink name=\"sortInfo\" /> for controlled sorting and <DataSourcePropLink name=\"defaultSortInfo\" /> for uncontrolled sorting.\n\n</Prop>\n\n<Prop name=\"refetchKey\" type=\"string|number|object\">\n\n> A value that can be used to trigger a re-fetch of the data.\n\nBy updating the value of this prop (eg: you can use it as a counter, and increment it) the `<DataSource />` component reloads it's <DPropLink name=\"data\" /> if it's defined as a function. More specifically, the `data` function is called again and the result will replace the current data.\n\n<Sandpack title=\"Re-fetching data via refetchKey updates\" >\n\n<Description>\n\nThis example shows how you can use the `refetchKey` to trigger reloading the data\n\n</Description>\n\n```ts file=\"refetchKey-example.page.tsx\"\n\n```\n\n</Sandpack>\n \n</Prop>\n\n<Prop name=\"rowSelection\" type=\"string|number|null|object\">\n\n> Describes the selected row(s) in the `DataSource`\n\nFor single selection, the prop will be of type: `number | string | null`. Use `null` for empty selection in single selection mode.\n\nFor multiple selection, the prop will have the following shape:\n\n```ts\nconst rowSelection = {\n  selectedRows: [3, 6, 100, 23], // those specific rows are selected\n  defaultSelection: false, // all rows deselected by default\n};\n\n// or\nconst rowSelection = {\n  deselectedRows: [3, 6, 100, 23], // those specific rows are deselected\n  defaultSelection: true, // all other rows are selected\n};\n\n// or, for grouped data - this example assumes groupBy=continent,country,city\nconst rowSelection = {\n  selectedRows: [\n    45, // row with id 45 is selected, no matter the group\n    ['Europe', 'France'], // all rows in Europe/France are selected\n    ['Asia'], // all rows in Asia are selected\n  ],\n  deselectedRows: [\n    ['Europe', 'France', 'Paris'], // all rows in Paris are deselected\n  ],\n  defaultSelection: false, // all other rows are selected\n};\n```\n\nFor using group keys in the selection value, see related <DPropLink name=\"useGroupKeysForMultiRowSelection\" />\n\n<Sandpack  title=\"Single row selection (controlled) with onRowSelectionChange\">\n\n<Description>\n\nUse your mouse or keyboard (press the spacebar) to select/deselect a single row.\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-single-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nWhen <DPropLink name=\"lazyLoad\" /> is being used - this means not all available groups/rows have actually been loaded yet in the dataset - we need a way to allow you to specify that those possibly unloaded rows/groups are selected or not. In this case, the `rowSelection.selectedRows`/`rowSelection.deselectedRows` arrays should not have row primary keys as strings/numbers, but rather rows/groups specified by their full path (so <DPropLink name=\"useGroupKeysForMultiRowSelection\" /> should be set to `true`).\n\n```ts {6}\n// this example assumes groupBy=continent,country,city\nconst rowSelection = {\n  selectedRows: [\n    // row with id 45 is selected - we need this because in the lazyLoad scenario,\n    // not all parents might have been made available yet\n    ['Europe','Italy', 'Rome', 45],\n    ['Europe','France'], // all rows in Europe/France are selected\n    ['Asia'] // all rows in Asia are selected\n  ]\n  deselectedRows: [\n    ['Europe','Italy','Rome'] // all rows in Rome are deselected\n    // but note that row with id 45 is selected, so Rome will be rendered with an indeterminate selection state\n  ],\n  defaultSelection: false // all other rows are selected\n}\n```\n\nIn the example above, we know that there are 3 groups (`continent`, `country`, `city`), so any item in the array that has a 4th element is a fully specified leaf node. While lazy loading, we need this fully specified path for specific nodes, so we know which group rows to render with indeterminate selection.\n\n</Note>\n\n<Note>\n\nThe <DPropLink name=\"useGroupKeysForMultiRowSelection\" /> prop can be used for both lazy and non-lazy `DataSource` components.\n\n</Note>\n\n<Sandpack title=\"Multi row checkbox selection with grouping\" >\n\n<Description>\n\nThis example shows how you can use multiple row selection with a predefined controlled value.\n\nGo ahead and select some groups/rows and see the selection value adjust.\n\nThe example also shows how you can use the `InfiniteTableApi` to retrieve the actual ids of the selected rows.\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-multi-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"selectionMode\" type=\"'single-row'|'multi-row'|'multi-cell'|false\">\n\n> Specifies the type of selection that should be enabled.\n\n<HeroCards>\n<YouWillLearnCard title=\"Row Selection Docs\" path=\"/docs/learn/selection/row-selection\">\n\nRead more on row selection (`multi-row` and `single-row`).\n\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"Cell Selection Docs\" path=\"/docs/learn/selection/cell-selection\">\n\nRead more on cell selection (`multi-cell` and `single-cell`).\n\n</YouWillLearnCard>\n\n</HeroCards>\n\n<Sandpack title=\"Choose your selection mode between multi cell or multi row\">\n\n```ts file=\"selectionMode-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"sortFunction\" type=\"(sortInfo:DataSourceSingleSortInfo<T>[], arr: T[]) => T[]\">\n\n> Custom sorting function to replace the `multisort` function used by default.\n\nThe function specified in the <DPropLink name=\"sortFunction\" /> prop is called with the <DPropLink name=\"sortInfo\" /> as the first argument and the data array as the second. It should return a sorted array, as per the <DPropLink name=\"sortInfo\" /> it was called with.\n\n<Note>\n\nWhen <DPropLink name=\"sortFunction\" /> is specified, <DPropLink name=\"shouldReloadData.sortInfo\" /> will be forced to `false`, as the sorting is done in the browser.\n</Note>\n\n<Note>\n\nThe `@infinite-table/infinite-react` package exports a `multisort` function - this is the default function used for local sorting.\n\n```ts\nimport { multisort } from '@infinite-table/infinite-react';\n\nconst arr: Developer[] = [\n  /*...*/\n];\nconst sortInfo = [\n  {\n    field: 'age',\n    dir: -1,\n  },\n  {\n    field: 'name',\n    dir: 1,\n  },\n];\nmultisort(sortInfo, arr);\n```\n\nIf you want to implement your own custom sort function, the `multisort` fn is a good starting point you can use.\n\n</Note>\n\n<Sandpack  title=\"Using a custom sortFunction\">\n\n```ts file=\"$DOCS/reference/datasource-props/local-sortFunction-single-sorting-example-with-local-data-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"sortInfo\" type=\"DataSourceSingleSortInfo<T>|DataSourceSingleSortInfo<T>[]|null\">\n\n> Information for sorting the data. This is a controlled prop.\n\nAlso see related <DataSourcePropLink name=\"defaultSortInfo\" /> (uncontrolled version), <DataSourcePropLink name=\"shouldReloadData.sortInfo\" />, <PropLink name=\"sortable\" /> and <PropLink name=\"columns.sortable\" />.\n\nSorting can be single (only one field/column can be sorted at a time) or multiple (multiple fields/columns can be sorted at the same time). Therefore, this property an be an array of objects or a single object (or null) - the shape of the objects (of type `DataSourceSingleSortInfo<T>`)is the following.\n\n- `dir` - `1 | -1` - the direction of the sorting\n- `field`? - `keyof DATA_TYPE` - the field to sort\n- `id`? - `string` - if you don't sort by a field, you can specify an id of the column this sorting is bound to. Note that columns have a <PropLink name=\"columns.valueGetter\">valueGetter</PropLink>, which will be used when doing local sorting and the column is not bound to an exact field.\n- `type` - the sort type - one of the keys in <DataSourcePropLink name=\"sortTypes\"/> - eg `\"string\"`, `\"number\"` - will be used for local sorting, to provide the proper comparison function.\n\nWhen you want to use multiple sorting, but have no default sort order/information, use `[]` (the empty array) to denote multiple sorting should be enabled.\n\nIf no `sortInfo` is provided, by default, when clicking a sortable column, single sorting will be applied.\n\n<Note>\n\nFor configuring if a column is sortable or not, see <PropLink name=\"columns.sortable\" /> and <PropLink name=\"sortable\" />. By default, all columns are sortable.\n\n</Note>\n\n<Sandpack title=\"Remote + controlled multi sorting\">\n\n```ts file=\"$DOCS/learn/sorting/remote-controlled-multi-sorting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n\n\n<Prop name=\"shouldReloadData.sortInfo\" type=\"boolean\">\n\n> Specifies if changes in the <DataSourcePropLink name=\"sortInfo\" /> should trigger a reload of the data source - applicable when <DPropLink name=\"data\" /> is a function. Replaces the deprecated <DPropLink name=\"sortMode\" />.\n\nSee related <DataSourcePropLink name=\"sortInfo\" /> and <DataSourcePropLink name=\"defaultSortInfo\" />.\n\nWhen set to `false` (the default), the data is sorted locally (in the browser) after the data-source is loaded. When set to `true`, the data should be sorted by the server (or by the data-source function that serves the data).\n\nSee [the Sorting page](/docs/learn/sorting/overview) for more details.\n\nFor configuring the sorting behavior when multiple sorting is enabled, see <PropLink name=\"multiSortBehavior\" />.\n\n</Prop>\n\n<Prop name=\"shouldReloadData\" type=\"{ sortInfo, groupBy, filterValue, pivotBy }\">\n\n> Specifies which changes in the data-related props should trigger a reload of the data source - applicable when <DPropLink name=\"data\" /> is a function.\n\nSee <DPropLink name=\"shouldReloadData.sortInfo\" />.\nSee <DPropLink name=\"shouldReloadData.groupBy\" />.\nSee <DPropLink name=\"shouldReloadData.filterValue\" />.\nSee <DPropLink name=\"shouldReloadData.pivotBy\" />.\n\n</Prop>\n\n\n<Prop name=\"sortMode\" type=\"'local'|'remote'\" deprecated>\n\n> Specifies where the sorting should be done. Use <DPropLink name=\"shouldReloadData.sortInfo\" /> instead.\n\nSee related <DPropLink name=\"sortInfo\" /> and <DPropLink name=\"defaultSortInfo\" />.\n\nWhen set to `'local'`, the data is sorted locally (in the browser) after the data-source is loaded. When set to `'remote'`, the data should be sorted by the server (or by the data-source function that serves the data).\n\nSee [the Sorting page](/docs/learn/sorting/overview) for more details.\n\nFor configuring the sorting behavior when multiple sorting is enabled, see <PropLink name=\"multiSortBehavior\" />.\n\n</Prop>\n\n<Prop name=\"sortTypes\" type=\"Record<string, ((a,b) => number)>\">\n\n> Describes the available sorting functions used for local sorting. The object you provide will be merged into the default sort types.\n\nCurrently there are two `sortTypes` available:\n\n- `\"string\"`\n- `\"number\"`\n- `\"date\"`\n\nThose values can be used for the <PropLink name=\"columns.sortType\">column.sortType</PropLink> and <PropLink name=\"columns.sortType\">column.dataType</PropLink> properties.\n\n```ts\n// default implementation\nconst sortTypes = {\n  string: (a, b) => a.localeCompare(b),\n  number: (a, b) => a - b,\n  date: (a, b) => a - b,\n};\n```\n\nWhen a column does not explicitly specify the <PropLink name=\"columns.sortType\">column.sortType</PropLink>, the <PropLink name=\"columns.dataType\">column.dataType</PropLink> will be used instead. And if no <PropLink name=\"columns.dataType\">column.dataType</PropLink> is defined, it will default to `string`.\n\nYou can add new sort types to the DataSource and InfiniteTable components by specifying this property - the object will be merged into the default sort types.\n\n<Sandpack  title=\"Custom sort by color - magenta will come first\">\n\n```ts file=\"./sortTypes-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIn this example, for the `\"color\"` column, we specified <PropLink name=\"columns.sortType\">column.sortType=\"color\"</PropLink> - we could have passed that as `column.dataType` instead, but if the grid had filtering, it wouldn't know what filters to use for \"color\" - so we used<PropLink name=\"columns.sortType\">column.sortType</PropLink> to only change how the data is sorted.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"useGroupKeysForMultiRowSelection\" type=\"boolean\" defaultValue={false}>\n\n> Specifies whether <DPropLink name=\"rowSelection\" /> contains group keys or only row ids/primary keys.\n\nWhen this is `true`, you might want to use the [getSelectedPrimaryKeys](./selection-api#getSelectedPrimaryKeys) method.\n\n<Sandpack title=\"Multi row checkbox selection using group keys\" >\n\n<Description>\n\nThis example shows how you can use have row selection with group keys instead of just the primary keys of rows.\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-multi-row-selection-example-with-group-keys.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n</PropTable>\n"
    },
    {
      "filePath": "/docs/reference/hooks/index",
      "routePath": "/docs/reference/hooks/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/hooks/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/hooks/",
      "frontmatter": {
        "title": "Infinite Table Hooks",
        "layout": "API",
        "description": "Hooks Reference page for Infinite Table - with complete examples"
      },
      "excerpt": "Infinite Table exposes a few custom hooks that can be used to customize the component and its behavior. Most of the hooks will be useful when you want to implement custom components for `InfiniteTable` - like custom cells, headers, cell editors, etc.",
      "readingTime": "4 min read",
      "content": "\nInfinite Table exposes a few custom hooks that can be used to customize the component and its behavior. Most of the hooks will be useful when you want to implement custom components for `InfiniteTable` - like custom cells, headers, cell editors, etc.\n\nSee below for the full list of hooks exposed by `InfiniteTable`, each with examples and code snippets.\n\n<PropTable sort searchPlaceholder=\"Type to filter hooks\">\n\n<Prop name=\"useMasterRowInfo\" returnTypeLink=\"InfiniteTableRowInfo\">\n\n> Gives you access to the master row info in the current <PropLink name=\"components.RowDetail\" code={false} >RowDetail</PropLink> component.\n\n\n<Sandpack title=\"Basic master detail DataGrid example\" size=\"lg\">\n\n<Description>\n\nThis example shows a master DataGrid with cities & countries.\n\nThe details for each city shows a DataGrid with developers in that city.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-component-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n</Prop>\n<Prop name=\"useInfiniteColumnCell\" returnTypeLink=\"InfiniteColumnEditorContextType\">\n\n> Use it inside the <PropLink name=\"columns.render\" /> or <PropLink name=\"column.components.ColumnCell\" /> (or <PropLink name=\"columns.renderValue\" code={false}>other</PropLink> rendering functions) to retrieve information about the cell that is being rendered.\n\n```ts\nimport { useInfiniteColumnCell } from '@infinite-table/infinite-react';\n```\n\nFor custom column header components, see related <HookLink name=\"useInfiniteHeaderCell\" />.\n\nWhen using this hook inside a <PropLink name=\"columns.components.ColumnCell\" code={false}>custom column cell component</PropLink>, make sure you get `domRef` from the hook result and pass it on to the final `JSX.Element` that is the DOM root of the component.\n\n```tsx\nconst CustomCellComponent = (props: React.HTMLProps<HTMLDivElement>) => {\n  const { domRef, ...other } = useInfiniteColumnCell<Developer>();\n\n  return (\n    <div ref={domRef} {...props} style={{ ...props.style, color: 'red' }}>\n      {props.children}\n    </div>\n  );\n};\n```\n\nYou should not pass the `domRef` along when using the hook inside the <PropLink name=\"columns.render\" /> or <PropLink name=\"columns.renderValue\" /> function.\n\n<Sandpack title=\"Column with render & useInfiniteColumnCell\">\n\n```tsx file=\"$DOCS/reference/column-render-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"useInfiniteColumnEditor\" >\n\n> Allows you to write a custom editor to be used for [editing](/docs/learn/editing/overview). The hook returns an <TypeLink name=\"InfiniteColumnEditorContextType\" /> object shape.\n\nInside this hook, you can also call <HookLink name=\"useInfiniteColumnCell\" /> to get access to the cell-related information.\n\nSee related <PropLink name=\"columns.components.Editor\" />\n\n<Note>\n\nWhen writing a custom editor, it's probably good to stop the propagation of the `KeyDown` event, so that the table doesn't react to the key presses (and do navigation and other stuff).\n\n</Note>\n\n<Sandpack title=\"Column with custom editor\">\n\n<Description>\n\nTry editing the `salary` column - it has a custom editor\n\n</Description>\n\n```tsx file=\"custom-editor-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"useInfiniteColumnFilterEditor\" type=\"() => ({ column, value, setValue, className, filtered,... })\">\n\n> Used to write custom filter editors for columns.\n\nThe return value of this hook is an object with the following properties:\n\n- `value` - the value that should be passed to the filter editor\n- `setValue(value)` - the functon you have to call to update the filtering for the current column\n- `column` - the current column\n- `operatorName`: `string` - the name of the operator currently being applied\n- `className` - a CSS class name to apply to the filter editor, for default styling\n- `filtered` - a boolean indicating whether the column is currently filtered or not\n- `disabled` - a boolean indicating whether the filter editor should be rendered as disabled or not\n- `filterTypeKey`: `string` - the key of the filter type\n- `filterType` - the filter type object for the current column\n- `filterTypes` - a reference to the <DPropLink name=\"filterTypes\" /> object as configured in the `DataSource`\n\n<Sandpack title=\"Demo of a custom filter editor\">\n\n<Description>\n\nThe `canDesign` column is using a custom `bool` filter type with a custom filter editor.\n\nThe checkbox has indeterminate state, which will match all values in the data source.\n\n</Description>\n\n```ts file=\"custom-filter-editor-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"useInfiniteHeaderCell\" >\n\n> Used inside <PropLink name=\"columns.header\" /> or <PropLink name=\"column.components.HeaderCell\" />\n\n```ts\nimport { useInfiniteHeaderCell } from '@infinite-table/infinite-react';\n```\n\nFor custom column cell components, see related <HookLink name=\"useInfiniteColumnCell\" />.\n\nWhen using this hook inside a <PropLink name=\"columns.components.HeaderCell\" code={false}>custom column header component</PropLink>, make sure you get `domRef` from the hook result and pass it on to the final `JSX.Element` that is the DOM root of the component.\n\n```tsx\nconst CustomHeaderComponent = (props: React.HTMLProps<HTMLDivElement>) => {\n  const { domRef, ...other } = useInfiniteHeaderCell<Developer>();\n\n  return (\n    <div ref={domRef} {...props} style={{ ...props.style, color: 'red' }}>\n      {props.children}\n    </div>\n  );\n};\n```\n\nYou should not pass the `domRef` along when using the hook inside the\n<PropLink name=\"columns.header\" /> function.\n\n<Sandpack title=\"Column with custom header & useInfiniteHeaderCell\">\n\n```tsx file=\"$DOCS/reference/column-header-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n</PropTable>\n"
    },
    {
      "filePath": "/docs/reference/keyboard-navigation-api/index",
      "routePath": "/docs/reference/keyboard-navigation-api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/keyboard-navigation-api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/keyboard-navigation-api/",
      "frontmatter": {
        "title": "Infinite Table Keyboard Navigation API",
        "layout": "API"
      },
      "excerpt": "Available starting with version `6.1.1`.",
      "readingTime": "3 min read",
      "content": "\nAvailable starting with version `6.1.1`.\n\nSee the [Keyboard Navigation](/docs/learn/keyboard-navigation/navigating-cells) page for more details.\n\n```tsx title=\"Configuring the keyboard navigation to be 'cell'\"\n<InfiniteTable keyboardNavigation=\"cell\" />\n\n// can be \"cell\" (default), \"row\" or false\n```\n\nYou can retrieve the keyboard navigation api by reading it from the `api.keyboardNavigationApi` property.\n\n```tsx {4}\n\nconst onReady = ({api}: {api:InfiniteTableApi<DATA_TYPE>}) => {\n  // do something with it\n  api.keyboardNavigationApi.gotoCell({direction: 'top'})\n}\n\n<InfiniteTable<DATA_TYPE>\n  columns={[...]}\n  onReady={onReady}\n/>\n```\n\nSee the [Infinite Table API page](/docs/reference/api) for the main API.\nSee the [Infinite Table Cell Selection API page](/docs/reference/cell-selection-api) for the row selection API.\nSee the [Infinite Table Row Selection API page](/docs/reference/row-selection-api) for the row selection API.\nSee the [Infinite Table Column API page](/docs/reference/column-api) for the column API.\n\n<PropTable sort searchPlaceholder=\"Type to filter API methods\">\n\n<Prop name=\"setKeyboardNavigation\" type=\"(keyboardNavigation: 'cell'|'row'|false) => void\">\n\n> Sets the keyboard navigation mode. See <PropLink name=\"keyboardNavigation\" />\n\nThe sole argument is of the same type as the <PropLink name=\"keyboardNavigation\" />\n\nSee the [Keyboard Navigation](/docs/learn/keyboard-navigation/navigating-cells) page for more details.\n\n<Note>\n\nIf you are using controlled <PropLink name=\"activeCellIndex\" /> or <PropLink name=\"activeRowIndex\" />, make sure you update the values by using the <PropLink name=\"onActiveCellIndexChange\" /> and <PropLink name=\"onActiveRowIndexChange\" /> callbacks respectively.\n\n</Note>\n\n</Prop>\n\n\n<Prop name=\"setActiveCellIndex\" type=\"(activeCellIndex: [number, number]) => void\">\n\n> Sets the value for <PropLink name=\"defaultActiveCellIndex\" />/<PropLink name=\"activeCellIndex\" />\nSee related <KeyNavApiLink name=\"gotoCell\" />\n\n\n<Note>\n\nIf you are using controlled <PropLink name=\"activeCellIndex\" /> make sure you update the controlled value by using the <PropLink name=\"onActiveCellIndexChange\" /> callback prop.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"setActiveRowIndex\" type=\"(activeRowIndex: number) => void\">\n\n> Sets the value for <PropLink name=\"defaultActiveRowIndex\" />/<PropLink name=\"activeRowIndex\" />\n\n\n<Note>\n\nIf you are using controlled <PropLink name=\"activeRow\" />, make sure you update the values by using the <PropLink name=\"onActiveRowIndexChange\" /> callback prop.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"gotoNextRow\" type=\"()=> number | false\">\n\n> Changes the active row index to the next row. See related <KeyNavApiLink name=\"gotoPreviousRow\" />, <KeyNavApiLink name=\"setActiveRowIndex\" />\n\nReturns `false` if the action was not successful (eg: already at the last row), otherwise the new active row index.\n\nThis sets the value for <PropLink name=\"activeCellIndex\" />\n\n</Prop>\n\n\n<Prop name=\"gotoPreviousRow\" type=\"()=> number | false\">\n\n> Changes the active row index to the prev row. See related <KeyNavApiLink name=\"gotoNextRow\" />, <KeyNavApiLink name=\"setActiveRowIndex\" />\n\nReturns `false` if the action was not successful (eg: already at the first row), otherwise the new active row index.\n\nThis sets the value for <PropLink name=\"activeCellIndex\" />\n\n</Prop>\n\n<Prop name=\"gotoCell\" type=\"({direction: 'top' | 'bottom' | 'left' | 'right' }) => [number, number] | false\">\n\n> Changes the active cell index, by navigating to the specified direction (equivalent to pressing the arrow keys).\nSee related <KeyNavApiLink name=\"setActiveCellIndex\" />\n\n<Sandpack title=\"Using KeyboardNavigationApi.gotoCell\">\n\n```tsx file=\"goto-cell-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n</Prop>\n\n</PropTable>\n"
    },
    {
      "filePath": "/docs/reference/row-detail-api/index",
      "routePath": "/docs/reference/row-detail-api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/row-detail-api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/row-detail-api/",
      "frontmatter": {
        "title": "Infinite Table Row Details API",
        "layout": "API"
      },
      "excerpt": "This API can be used when [master-detail](/docs/learn/master-detail/overview) is configured in the DataGrid.",
      "readingTime": "2 min read",
      "content": "\nThis API can be used when [master-detail](/docs/learn/master-detail/overview) is configured in the DataGrid.\n\nYou can retrieve the row details api by reading it from the `api.rowDetailApi` property.\n\n```tsx {4}\n\nconst onReady = ({api}: {api:InfiniteTableApi<DATA_TYPE>}) => {\n  // do something with it\n  api.rowDetailApi.collapseAllDetails()\n}\n\n<InfiniteTable<DATA_TYPE>\n  columns={[...]}\n  onReady={onReady}\n/>\n```\n\nSee the [Infinite Table API page](/docs/reference/api) for the main API.\nSee the [Infinite Table Cell Selection API page](/docs/reference/cell-selection-api) for the row selection API.\nSee the [Infinite Table Row Selection API page](/docs/reference/row-selection-api) for the row selection API.\nSee the [Infinite Table Column API page](/docs/reference/column-api) for the column API.\n\n<PropTable sort searchPlaceholder=\"Type to filter API methods\">\n\n<Prop name=\"collapseAllDetails\" type=\"() => void\">\n\n> Collapses all row details.\n\n<Sandpack title=\"Master detail DataGrid with collapse all button\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nSome of the rows in the master DataGrid are expanded by default.\n\nYou can collapse them via the Row Detail API.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-api-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"expandAllDetails\" type=\"() => void\">\n\n> Expands all row details.\n\n<Sandpack title=\"Master detail DataGrid with expand all button\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nClick the `Expand All` button to expand all row details.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-api-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"isRowDetailCollapsed\" type=\"(rowId: any)=> boolean\">\n\n> Checks if the row detail is collapsed for the row with the specified primary key.\n\n</Prop>\n\n<Prop name=\"isRowDetailExpanded\" type=\"(rowId: any)=> boolean\">\n\n> Checks if the row detail is expanded for the row with the specified primary key.\n\n</Prop>\n\n<Prop name=\"collapseRowDetail\" type=\"(rowId: any) => void\">\n\n> Collapses the detail for the row with the specified primary key.\n\n</Prop>\n\n<Prop name=\"expandRowDetail\" type=\"(rowId: any)=> boolean\">\n\n> Expands the detail for the row with the specified primary key.\n\n</Prop>\n\n<Prop name=\"toggleRowDetail\" type=\"(rowId: any)=> boolean\">\n\n> Toggles the expand/collapse state of the row detail, for the row with the specified primary key.\n\n</Prop>\n\n</PropTable>\n"
    },
    {
      "filePath": "/docs/reference/row-selection-api/index",
      "routePath": "/docs/reference/row-selection-api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/row-selection-api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/row-selection-api/",
      "frontmatter": {
        "title": "Infinite Table Row Selection API",
        "layout": "API"
      },
      "excerpt": "```tsx title=\"Configuring the selection mode to be 'multi-row'\"",
      "readingTime": "7 min read",
      "content": "\n```tsx title=\"Configuring the selection mode to be 'multi-row'\"\n<DataSource selectionMode=\"multi-row\" />\n\n// can be \"single-row\", \"multi-row\", \"multi-cell\" or false\n```\n\n<Note>\n\nTo enable multi-row selection, you need to specify <DPropLink name=\"selectionMode\">selectionMode=\"multi-row\"</DPropLink> on the `<DataSource />` component.\n\n</Note>\n\nYou can retrieve the row selection api by reading it from the `api.rowSelectionApi` property.\n\n```tsx {4}\n\nconst onReady = ({api}: {api:InfiniteTableApi<DATA_TYPE>}) => {\n  // do something with it\n  api.rowSelectionApi.selectGroupRow(['USA'])\n}\n\n<InfiniteTable<DATA_TYPE>\n  columns={[...]}\n  onReady={onReady}\n/>\n```\n\nSee the [Infinite Table API page](/docs/reference/api) for the main API.\nSee the [Infinite Table Cell Selection API page](/docs/reference/cell-selecti-api) for the cell selection API.\nSee the [Infinite Table Column API page](/docs/reference/column-api) for the column API.\nSee the [Infinite Table Row Detail API page](/docs/reference/row-detail-api) for the row detail API (when master-detail is configured).\n\n<PropTable sort searchPlaceholder=\"Type to filter API methods\">\n\n<Prop name=\"allRowsSelected\" type=\"boolean\">\n\n> Boolean getter to report whether all the rows are selected or not\n\n</Prop>\n\n<Prop name=\"deselectGroupRow\" type=\"(groupKeys: any[]) => void\">\n\n> Deselects the group row that is identified by the given group keys. Only makes sense when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor selecting a group row, see related [selectGroupRow](#selectGroupRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting group rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to exclude the group row from the selection.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"deselectRow\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Deselects the specified row. Optionally provide the group keys, if you have access to them.\n\nSee note from [isRowSelected](#isRowSelected) for whether you need to provide the `groupKeys` or not.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor selecting the row, see related [selectRow](#selectRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of deselecting rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to remove the row you want from the selection.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"deselectAll\" type=\"() => void\">\n\n> Deselects all the rows in the DataSource.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor selecting all rows, see related [selectAll](#selectAll).\n\n<Note>\n\nMost often, you don't need to use this imperative way of deselecting all rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> (when multiple row selection is enabled) to a value of\n\n```tsx\n{ defaultSelection: false, selectedRows: []}\n```\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getGroupRowSelectionState\" type=\"(groupKeys: any[], rowSelection?: DataSourceRowSelection) => true|false|null\">\n\n> Returns the state of a group row - only applicable when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>\n\nThe returned values can be:\n\n- `true` - the group row and all its children are selected, at any level of nesting\n- `false` - the group row and all its children are deselected, at any level of nesting\n- `null` - the group row has some (not all) children selected, at any level of nesting\n\nBaiscally, `true` means the group row and all children are selected, `false` means the group row is not selected and doesn't have any selected children, while `null` is the indeterminate state, where just some (but not all) of the children of the group are selected.\n\nIf you provide a the value of a `rowSelection`, it will be used as the source of truth for selection. If no value for `rowSelection` is provided, it will use the current row selection.\n\n<Note>\n\nIf you don't provide a value for the `rowSelection` and are calling this method in the <DPropLink name=\"onRowSelectionChange\" /> callback prop, you might be one step behind the selection. In such a case, make sure you pass to this function the value you receive in the <DPropLink name=\"onRowSelectionChange\" /> callback.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getSelectedPrimaryKeys\" type=\"(rowSelection?: DataSourceRowSelection) => (string|number)[]\">\n\n> Retrieves the ids (primary keys) of the selected rows, when the selection contains group keys instead of primary keys (so when <DPropLink name=\"useGroupKeysForMultiRowSelection\" /> is `true` and the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>).\n\nIf you provide a the value of a `rowSelection`, it will be used as the source of truth for retrieving the row ids. If no value for `rowSelection` is provided, it will use the current row selection.\n\n<Note>\n\nThis will not work properly when the `DataSource` is configured with <DPropLink name=\"lazyLoad\" code={false}>lazy loading</DPropLink>, since it cannot give you primary keys of rows not yet loaded.\n\n</Note>\n\n<Note>\n\nIf you don't provide a value for the `rowSelection` and are calling this method in the <DPropLink name=\"onRowSelectionChange\" /> callback prop, you might be one step behind the selection. In such a case, make sure you pass to this function the value you receive in the <DPropLink name=\"onRowSelectionChange\" /> callback.\n\n</Note>\n\n<Sandpack title=\"Using getSelectedPrimaryKeys in multi row checkbox selection with grouping\" >\n\n<Description>\n\nThis example shows how you can use getSelectedPrimaryKeys with multiple row selection to retrieve the actual ids of the selected rows.\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-multi-row-selection-example-with-group-keys.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"isRowSelected\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Checks if a row specified by its primary key is selected or not. Optionally provide the group keys, if you have access to them.\n\n<Note>\nThe group keys are not mandatory, and they are useful only when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>.\n\nEven if you don't pass them, the component will try to retrieve them from its internal state - note though that in lazy-load scenarios, not all rows/groups may have been loaded, so in this case, you have to make sure you provide the `groupKeys` when calling this method.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"isRowDeselected\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Checks if a row specified by its primary key is deselected or not. Optionally provide the group keys, if you have access to them.\n\nSee note from [isRowSelected](#isRowSelected)\n\n</Prop>\n\n<Prop name=\"selectAll\" type=\"() => void\">\n\n> Selects all the rows in the DataSource.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting all rows, see related [deselectAll](#deselectAll).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> (when multiple row selection is enabled) to a value of\n\n```tsx\n{ defaultSelection: true, deselectedRows: []}\n```\n\n</Note>\n\n</Prop>\n\n<Prop name=\"selectGroupRow\" type=\"(groupKeys: any[]) => void\">\n\n> Selects the group row that is identified by the given group keys. Only makes sense when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting a group row, see related [deselectGroupRow](#deselectGroupRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting group rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to include the group row you want to select.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"selectRow\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Selects the specified row. Optionally provide the group keys, if you have access to them.\n\nSee note from [isRowSelected](#isRowSelected) for whether you need to provide the `groupKeys` or not.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting the row, see related [deselectRow](#deselectRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to include the row you want in the selection.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"toggleGroupRowSelection\" type=\"(groupKeys: any[]) => void\">\n\n> Toggles the selection of the group row that is identified by the given group keys. Only makes sense when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting a group row, see related [deselectGroupRow](#deselectGroupRow).\nFor selecting a group row, see related [selectGroupRow](#selectGroupRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting group rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to include the group row you want to select.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"toggleRowSelection\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Toggles the selection of the specified row. Optionally provide the group keys, if you have access to them.\n\nSee note from [isRowSelected](#isRowSelected) for whether you need to provide the `groupKeys` or not.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting the row, see related [deselectRow](#deselectRow).\nFor selecting the row, see related [selectRow](#selectRow).\nFor toggling the selection for a group row, see related [toggleGroupRowSelection](#toggleGroupRowSelection).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to include or exclude the given row.\n\n</Note>\n\n</Prop>\n\n</PropTable>\n"
    },
    {
      "filePath": "/docs/reference/selection-api/index",
      "routePath": "/docs/reference/selection-api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/selection-api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/selection-api/",
      "frontmatter": {
        "title": "Infinite Table Selection API",
        "layout": "API",
        "redirect_to": "/docs/reference/row-selection-api"
      },
      "excerpt": "When rendering the `InfiniteTable` component, you can get access to the [API](./api/) by getting it from the <PropLink name=\"onReady\" /> callback prop. You can retrieve the selection api by reading it from the `api.selectionApi` property.",
      "readingTime": "7 min read",
      "content": "\nWhen rendering the `InfiniteTable` component, you can get access to the [API](./api/) by getting it from the <PropLink name=\"onReady\" /> callback prop. You can retrieve the selection api by reading it from the `api.selectionApi` property.\n\n```tsx {4}\n\nconst onReady = ({api}: {api:InfiniteTableApi<DATA_TYPE>}) => {\n  // do something with it\n  api.selectionApi.selectGroupRow(['USA'])\n}\n\n<InfiniteTable<DATA_TYPE>\n  columns={[...]}\n  onReady={onReady}\n/>\n```\n\nFor the root API, see the [Infinite Table API page](/docs/reference/api).\nFor column API, see the [Infinite Table Column API page](/docs/reference/column-api).\n\n<PropTable searchPlaceholder=\"Type to filter API methods\">\n\n<Prop name=\"allRowsSelected\" type=\"boolean\">\n\n> Boolean getter to report whether all the rows are selected or not\n\n</Prop>\n\n<Prop name=\"deselectGroupRow\" type=\"(groupKeys: any[]) => void\">\n\n> Deselects the group row that is identified by the given group keys. Only makes sense when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor selecting a group row, see related [selectGroupRow](#selectGroupRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting group rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to exclude the group row from the selection.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"deselectRow\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Deselects the specified row. Optionally provide the group keys, if you have access to them.\n\nSee note from [isRowSelected](#isRowSelected) for whether you need to provide the `groupKeys` or not.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor selecting the row, see related [selectRow](#selectRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of deselecting rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to remove the row you want from the selection.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"deselectAll\" type=\"() => void\">\n\n> Deselects all the rows in the DataSource.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor selecting all rows, see related [selectAll](#selectAll).\n\n<Note>\n\nMost often, you don't need to use this imperative way of deselecting all rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> (when multiple row selection is enabled) to a value of\n\n```tsx\n{ defaultSelection: false, selectedRows: []}\n```\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getGroupRowSelectionState\" type=\"(groupKeys: any[], rowSelection?: DataSourceRowSelection) => true|false|null\">\n\n> Returns the state of a group row - only applicable when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>\n\nThe returned values can be:\n\n- `true` - the group row and all its children are selected, at any level of nesting\n- `false` - the group row and all its children are deselected, at any level of nesting\n- `null` - the group row has some (not all) children selected, at any level of nesting\n\nBaiscally, `true` means the group row and all children are selected, `false` means the group row is not selected and doesn't have any selected children, while `null` is the indeterminate state, where just some (but not all) of the children of the group are selected.\n\nIf you provide a the value of a `rowSelection`, it will be used as the source of truth for selection. If no value for `rowSelection` is provided, it will use the current row selection.\n\n<Note>\n\nIf you don't provide a value for the `rowSelection` and are calling this method in the <DPropLink name=\"onRowSelectionChange\" /> callback prop, you might be one step behind the selection. In such a case, make sure you pass to this function the value you receive in the <DPropLink name=\"onRowSelectionChange\" /> callback.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getSelectedPrimaryKeys\" type=\"(rowSelection?: DataSourceRowSelection) => (string|number)[]\">\n\n> Retrieves the ids (primary keys) of the selected rows, when the selection contains group keys instead of primary keys (so when <DPropLink name=\"useGroupKeysForMultiRowSelection\" /> is `true` and the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>).\n\nIf you provide a the value of a `rowSelection`, it will be used as the source of truth for retrieving the row ids. If no value for `rowSelection` is provided, it will use the current row selection.\n\n<Note>\n\nThis will not work properly when the `DataSource` is configured with <DPropLink name=\"lazyLoad\" code={false}>lazy loading</DPropLink>, since it cannot give you primary keys of rows not yet loaded.\n\n</Note>\n\n<Note>\n\nIf you don't provide a value for the `rowSelection` and are calling this method in the <DPropLink name=\"onRowSelectionChange\" /> callback prop, you might be one step behind the selection. In such a case, make sure you pass to this function the value you receive in the <DPropLink name=\"onRowSelectionChange\" /> callback.\n\n</Note>\n\n<Sandpack title=\"Using getSelectedPrimaryKeys in multi row checkbox selection with grouping\" >\n\n<Description>\n\nThis example shows how you can use getSelectedPrimaryKeys with multiple row selection to retrieve the actual ids of the selected rows.\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-multi-row-selection-example-with-group-keys.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"isRowSelected\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Checks if a row specified by its primary key is selected or not. Optionally provide the group keys, if you have access to them.\n\n<Note>\nThe group keys are not mandatory, and they are useful only when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>.\n\nEven if you don't pass them, the component will try to retrieve them from its internal state - note though that in lazy-load scenarios, not all rows/groups may have been loaded, so in this case, you have to make sure you provide the `groupKeys` when calling this method.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"isRowDeselected\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Checks if a row specified by its primary key is deselected or not. Optionally provide the group keys, if you have access to them.\n\nSee note from [isRowSelected](#isRowSelected)\n\n</Prop>\n\n<Prop name=\"selectAll\" type=\"() => void\">\n\n> Selects all the rows in the DataSource.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting all rows, see related [deselectAll](#deselectAll).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> (when multiple row selection is enabled) to a value of\n\n```tsx\n{ defaultSelection: true, deselectedRows: []}\n```\n\n</Note>\n\n</Prop>\n\n<Prop name=\"selectGroupRow\" type=\"(groupKeys: any[]) => void\">\n\n> Selects the group row that is identified by the given group keys. Only makes sense when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting a group row, see related [deselectGroupRow](#deselectGroupRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting group rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to include the group row you want to select.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"selectRow\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Selects the specified row. Optionally provide the group keys, if you have access to them.\n\nSee note from [isRowSelected](#isRowSelected) for whether you need to provide the `groupKeys` or not.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting the row, see related [deselectRow](#deselectRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to include the row you want in the selection.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"toggleGroupRowSelection\" type=\"(groupKeys: any[]) => void\">\n\n> Toggles the selection of the group row that is identified by the given group keys. Only makes sense when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting a group row, see related [deselectGroupRow](#deselectGroupRow).\nFor selecting a group row, see related [selectGroupRow](#selectGroupRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting group rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to include the group row you want to select.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"toggleRowSelection\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Toggles the selection of the specified row. Optionally provide the group keys, if you have access to them.\n\nSee note from [isRowSelected](#isRowSelected) for whether you need to provide the `groupKeys` or not.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting the row, see related [deselectRow](#deselectRow).\nFor selecting the row, see related [selectRow](#selectRow).\nFor toggling the selection for a group row, see related [toggleGroupRowSelection](#toggleGroupRowSelection).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to include or exclude the given row.\n\n</Note>\n\n</Prop>\n\n</PropTable>\n"
    },
    {
      "filePath": "/docs/reference/tree-api/index",
      "routePath": "/docs/reference/tree-api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/tree-api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/tree-api/",
      "frontmatter": {
        "title": "Tree API",
        "layout": "API"
      },
      "excerpt": "When rendering the `TreeDataSource` component, you can get access to the Tree API by reading it from the [DataSource API](/docs/reference/datasource-api) <DApiLink name=\"treeApi\" /> property.",
      "readingTime": "3 min read",
      "content": "\nWhen rendering the `TreeDataSource` component, you can get access to the Tree API by reading it from the [DataSource API](/docs/reference/datasource-api) <DApiLink name=\"treeApi\" /> property.\n\n```tsx {3}\n<DataSource<DATA_TYPE>\n  onReady={(api: DataSourceApi<DATA_TYPE>) => {\n    api.treeApi // <----\n    // treeApi is accessible here\n    // you may want to store a reference to it in a ref or somewhere in your app state\n    \n  }}\n/>\n```\n\nFor updating tree nodes, see the following methods:\n\n- <DApiLink name=\"updateDataByNodePath\" />\n- <DApiLink name=\"removeDataByNodePath\" />\n\n<PropTable sort searchPlaceholder=\"Type to filter API methods\">\n\n<Prop name=\"expandAll\" type=\"() => void\">\n\n> Expands all the nodes in the tree. See related <TreeApiLink name=\"collapseAll\" /> prop.\n\n<Sandpack title=\"Expanding all nodes\" size=\"lg\">\n\n```tsx file=\"tree-expandall-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"selectAll\" type=\"() => void\">\n\n> Selects all the nodes in the tree. See related <TreeApiLink name=\"deselectAll\" /> prop.\n\nThis works if the tree has selection enabled. See [tree selection](/docs/learn/tree-grid/tree-selection) for more details.\n\n<Sandpack title=\"Selecting all nodes via Tree API\" size=\"lg\">\n\n```tsx file=\"tree-selectall-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"selectNode\" type=\"(nodePath: NodePath) => void\">\n\n> Selects the node with the given node path. See related <TreeApiLink name=\"deselectNode\" /> and <TreeApiLink name=\"toggleNodeSelection\" /> methods.\n\n\n<Sandpack title=\"Selecting a node via Tree API\" size=\"lg\">\n\n```tsx file=\"tree-selectnode-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"deselectNode\" type=\"(nodePath: NodePath) => void\">\n\n> Deselects the node with the given node path. See related <TreeApiLink name=\"selectNode\" /> and <TreeApiLink name=\"toggleNodeSelection\" /> methods.\n\n<Sandpack title=\"Deselecting a node via Tree API\" size=\"lg\">\n\n```tsx file=\"tree-selectnode-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n\n<Prop name=\"toggleNodeSelection\" type=\"(nodePath: NodePath) => void\">\n\n> Toggles the selection state of the node with the given node path. See related <TreeApiLink name=\"selectNode\" /> and <TreeApiLink name=\"deselectNode\" /> methods.\n\n<Sandpack title=\"Toggling a node's selection state via Tree API\" size=\"lg\">\n\n```tsx file=\"tree-selectnode-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"deselectAll\" type=\"() => void\">\n\n> Deselects all the nodes in the tree. See related <TreeApiLink name=\"selectAll\" /> prop.\n\n\nThis works if the tree has selection enabled. See [tree selection](/docs/learn/tree-grid/tree-selection) for more details.\n\n<Sandpack title=\"Deselecting all nodes via Tree API\" size=\"lg\">\n\n```tsx file=\"tree-selectall-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"collapseAll\" type=\"() => void\">\n\n> Collapses all the nodes in the tree. See related <TreeApiLink name=\"expandAll\" /> prop.\n\n<Sandpack title=\"Collapsing all nodes\" size=\"lg\">\n\n```tsx file=\"tree-expandall-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n\n<Prop name=\"isNodeExpanded\" type=\"(nodePath: NodePath) => boolean\">\n\n> Returns `true` if the node is expanded, `false` otherwise.\n\n<Sandpack title=\"Checking if a node is expanded\" size=\"lg\">\n\n```tsx file=\"tree-toggleNodeExpandState-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"toggleNode\" type=\"(nodePath: NodePath, options?: {force?: boolean}) => void\">\n\n> Toggles the node with the give node path.\n\nIf the node at the given path is expanded, it will be collapsed and vice versa.\n\nSee related <TreeApiLink name=\"expandNode\" /> and <TreeApiLink name=\"collapseNode\" /> methods.\n\n</Prop>\n\n<Prop name=\"expandNode\" type=\"(nodePath: NodePath, options?: {force?: boolean}) => void\">\n\n> Expands the node with the given node path. See related <TreeApiLink name=\"collapseNode\" /> and <TreeApiLink name=\"toggleNode\" /> methods.\n\nExpands the node. Does not affect other child nodes.\n\n<Sandpack title=\"Expanding a node\" size=\"lg\">\n\n```tsx file=\"tree-toggleNodeExpandState-example.page.tsx\"\n```\n\n</Sandpack>\n\n<Note>\n\nIf `options.force` is `true`, the node will be expanded even if <DPropLink name=\"isNodeReadOnly\" /> is `true` for the given node.\n\n</Note>\n</Prop>\n\n<Prop name=\"collapseNode\" type=\"(nodePath: NodePath, options?: {force?: boolean}) => void\">\n\n> Collapses the node with the given node path. See related <TreeApiLink name=\"expandNode\" /> and <TreeApiLink name=\"toggleNode\" /> methods.\n\nCollapses the node. Does not affect other child nodes.\n\n<Sandpack title=\"Collapsing a node\" size=\"lg\">\n\n```tsx file=\"tree-toggleNodeExpandState-example.page.tsx\"\n```\n\n</Sandpack>\n\n<Note>\n\nIf `options.force` is `true`, the node will be collapsed even if <DPropLink name=\"isNodeReadOnly\" /> is `true` for the given node.\n\n</Note>\n</Prop>\n\n</PropTable>\n"
    },
    {
      "filePath": "/docs/reference/type-definitions/index",
      "routePath": "/docs/reference/type-definitions/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/type-definitions/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/type-definitions/",
      "frontmatter": {
        "title": "Infinite Table Type Definitions",
        "description": "TypeScript type definitions for Infinite Table"
      },
      "excerpt": "These are the public type definitions for `InfiniteTable` and related components, that you can import with named imports from the `@infinite-table/infinite-react` package.",
      "readingTime": "20 min read",
      "content": "\nThese are the public type definitions for `InfiniteTable` and related components, that you can import with named imports from the `@infinite-table/infinite-react` package.\n\n```tsx title=\"Importing the type for rowInfo\"\nimport type { InfiniteTableRowInfo } from '@infinite-table/infinite-react';\n```\n\n<Note title=\"Naming convention ‚ö†Ô∏è\">\n\nThe types of all properties in the `InfiniteTable` and `DataSource` components respect the following naming convention: `<ComponentName>Prop<PropName>`\n\nSo, for example, the type for <DPropLink name=\"groupBy\" /> is <TypeLink name=\"DataSourcePropGroupBy\" />\n\n</Note>\n\n<PropTable searchPlaceholder=\"Type to filter type definitions\" sort>\n\n<Prop name=\"TreeSelectionValue\">\n\n> Represents the selection state of the tree nodes. See <DPropLink name=\"treeSelection\" /> for more details.\n\n```ts\nimport type { TreeSelectionValue } from '@infinite-table/infinite-react';\n```\n\nThe selection value is an object with the following properties:\n\n- `defaultSelection`: `boolean` - whether the tree nodes are selected by default or not.\n- `selectedPaths?`: `NodePath[]` - the paths of the selected nodes. Mandatory if `defaultSelection` is `false`.\n- `deselectedPaths`: `NodePath[]` - the paths of the deselected nodes. Mandatory if `defaultSelection` is `true`.\n\n```tsx title=\"Example of tree selection value\"\nconst treeSelection: TreeSelectionValue = {\n  defaultSelection: false,\n  selectedPaths: [['1'], ['2', '20']],\n  deselectedPaths: [['1','10']],\n};\n// node ['1'] will be selected but indeterminate\n// since ['1','10'] is in the deselectedPaths\n// node ['2','20'] will be fully selected\n```\n\n</Prop>\n\n<Prop name=\"TreeExpandStateValue\">\n\n> Represents the expand/collapse state of the tree nodes. See <DPropLink name=\"treeExpandState\" /> for more details.\n\n```ts\nimport type { TreeExpandStateValue } from '@infinite-table/infinite-react';\n```\n\nYou can specify the expand/collapse state of the tree nodes in two ways:\n\n1. With node paths (recommended)\n\nWhen using node paths, the object should have the following properties:\n\n- `defaultExpanded`: `boolean` - whether the tree nodes are expanded by default or not.\n- `collapsedPaths`: `string[]` - when `defaultExpanded` is `true`, this is a mandatory prop.\n- `expandedPaths`: `string[]` - when `defaultExpanded` is `false`, this is a mandatory prop.\n\n```tsx title=\"Example of treeExpandState with node paths\"\nconst treeExpandState = {\n  defaultExpanded: true,\n  collapsedPaths: [\n    ['1', '10'],\n    ['2', '20'],\n    ['5']\n  ],\n  expandedPaths: [\n    ['1', '4'],\n    ['5','nested node in 5'],\n  ],\n};\n```\n\n2. With node ids\n\nWhen using node ids, the object should have the following properties:\n\n- `defaultExpanded`: `boolean` - whether the tree nodes are expanded by default or not.\n- `collapsedIds`: `string[]` - when `defaultExpanded` is `true`, this is a mandatory prop.\n- `expandedIds`: `string[]` - when `defaultExpanded` is `false`, this is a mandatory prop.\n\n\n```tsx title=\"Example of treeExpandState with node ids\"\nconst treeExpandState = {\n  defaultExpanded: true,\n  collapsedIds: ['1', '2', '5'],\n  expandedIds: ['10', '20', 'nested node in 5'],\n};\n```\n\n</Prop>\n\n<Prop name=\"RowDetailState\">\n\n> Represents the collapse/expand state of row details - when [master-detail is configured](/docs/learn/master-detail/overview). Also see <PropLink name=\"rowDetailRenderer\" /> for the most important property in the master-detail configuration.\n\nThis class can be instantiated and the value passed to the <PropLink name=\"rowDetailState\" /> prop (or its uncontrolled variant, <PropLink name=\"defaultRowDetailState\" />).\n\n```tsx title=\"Passing an instance of RowDetailState to the InfiniteTable\"\nconst rowDetailState = new RowDetailState({\n  collapsedRows: true,\n  expandedRows: [2, 3, 4],\n});\n\n<InfiniteTable<DATA_TYPE> rowDetailState={rowDetailState} />;\n```\n\n```tsx title=\"Passing an object literal to the InfiniteTable\"\n<InfiniteTable<DATA_TYPE>\n  rowDetailState={{\n    collapsedRows: true,\n    expandedRows: [2, 3, 4],\n  }}\n/>\n```\n\n<Note>\n\nThe instance is only useful if you want to interrogate the object, with methods like `areAllCollapsed()`, `areAllExpanded()`, `isRowDetailsExpanded(rowId)` and so on.\n\nWhen using the <PropLink name=\"onRowDetailStateChange\" /> callback, it's called with an instance of this class - if you want to use the object literal, make sure you call `rowDetailState.getState()` to get the plain object.\n</Note>\n\nThe <PropLink name=\"rowDetailState\"/> and <PropLink name=\"defaultRowDetailState\"/> accept both an object literal and an instance of this class.\n\nThe object literal has the following properties:\n\n- `collapsedRows`: `boolean | any[]` - if `true`, all row details are collapsed. If an array, it contains the row ids of the rows that are collapsed.\n- `expandedRows`: `boolean | any[]` - if `true`, all row details are expanded. If an array, it contains the row ids of the rows that are expanded.\n\nYou can create an instance using the object literal notation and you can get the object literal from the instance using the `getState` method:\n\n```tsx\nconst rowDetailState = new RowDetailState({\n  collapsedRows: true,\n  expandedRows: [2, 3, 4],\n});\nconst clone = new RowDetailState(rowDetailState);\n\nconst state = rowDetailState.getState();\n```\n\nYou can mark rows as expanded/collapsed even after creating the instance:\n\n```tsx\nconst rowDetailState = new RowDetailState({\n  collapsedRows: true,\n  expandedRows: [2, 3, 4],\n});\nrowDetailState.expandRowDetails(5);\nrowDetailState.collapseRowDetails(2);\n\n// now you can pass this instance back to the InfiniteTable component\n```\n\n</Prop>\n\n<Prop name=\"DataSourceDataParams\" generic>\n\n> The type for the object passed into the <DPropLink name=\"data\" /> function prop of the `DataSource` component.\n\nWhen the <DPropLink name=\"data\" /> function is called, it will be called with an object of this type.\n\nThe following properties are available on this object:\n\n- `sortInfo?` - <TypeLink name=\"DataSourcePropSortInfo\" /> - the current sort info for the grid.\n- `groupBy?` - an array of <TypeLink name=\"DataSourceGroupBy\" /> - the current group by for the grid.\n- `pivotBy?` - an array of <TypeLink name=\"DataSourcePivotBy\" /> - the current pivot by for the grid.\n- `filterValue?` - an array of <TypeLink name=\"DataSourceFilterValueItem\" /> - the current filter value for the grid.\n- `masterRowInfo?` - <TypeLink name=\"InfiniteTableRowInfo\" /> - only available if the DataSource is a detail DataSource - meaning there is a master DataGrid, and the DataSource is used to load the detail DataGrid.\n\n</Prop>\n\n<Prop name=\"DataSourceFilterValueItem\">\n\n> The type for the items in the <DPropLink name=\"filterValue\" /> array prop of the `DataSource` component.\n\n</Prop>\n\n<Prop name=\"GroupRowsState\">\n\n> Describes the collapse/expand state for group rows, when [grouping is used](/docs/learn/grouping-and-pivoting/grouping-rows). \n\nThis is a class, and instances of it can be used as a value for the <PropLink name=\"groupRowsState\" />/<PropLink name=\"defaultGroupRowsState\" /> props.\n\nIt's the sole argument available in the <DPropLink name=\"onGroupRowsStateChange\" /> callback.\n\nIt gives you the following additional utility methods:\n\n - `getState()`\n - `areAllExpanded()`\n - `areAllCollapsed()`\n - `expandAll()`\n - `collapseAll()`\n - `isGroupRowExpanded(keys: any[][])`\n - `isGroupRowCollapsed(keys: any[][])`\n - `expandGroupRow(keys: any[][])`\n - `collapseGroupRow(keys: any[][])`\n - `toggleGroupRow(keys: any[][])`\n\n\nTo create an instance, pass a plain object that describes the <PropLink name=\"groupRowsState\" />/<PropLink name=\"defaultGroupRowsState\" /> value:\n\n\n```tsx\nconst state = new GroupRowsState({\n  expandedRows: true,\n  collapsedRows: [\n    ['Europe']\n    ['Europe','France'],\n    ['Italy']\n  ]\n})\n\nconsole.log(state.getState())\n// will log the above object that was used \n// as the sole argument for the constructor\n\n```\n\n<Note>\n\nWhen you call those methods, be aware you're not updating the React state! So you'll have to clone the object, call the method on the clone and then update the React state - in the code below, notice the `onClick` code for the `Expand all`/`Collapse all` buttons.\n\n<Sandpack title=\"Using the expandAll/collapseAll methods with cloning the GroupRowsState instance\">\n\n```ts file=\"using-group-rows-state-controlled-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Note>\n</Prop>\n\n\n<Prop name=\"DataSourcePivotBy\" generic>\n\n> Describes a pivot value for the grid.\n\nThis is the type for the items in the <DPropLink name=\"pivotBy\" /> array prop of the `DataSource` component.\n\nThe most important property in this type is the `field` - which will be `keyof DATA_TYPE` - the field to pivot by.\n\nAnother important property in this type is the `column`. It will be used to configure the generated pivot columns:\n\n- if it's an object literal, it will be applied to all generated columns\n- if it's a function, it will be called for each generated column, and the return value will be used to configure the column.\n\n```tsx\nconst pivotBy: DataSourcePivotBy<Developer>[] = [\n  { field: 'country' },\n  {\n    field: 'canDesign',\n    column: ({ column: pivotCol }) => {\n      const lastKey =\n        pivotCol.pivotGroupKeys[pivotCol.pivotGroupKeys.length - 1];\n\n      return {\n        header: lastKey === 'yes' ? 'üíÖ Designer' : 'üíª Non-designer',\n      };\n    },\n  },\n];\n```\n\n</Prop>\n\n<Prop name=\"InfiniteTableColumnHeaderParam\" generic>\n\n> Represents runtime information passed to rendering and styling functions called when rendering the column headers\n\nThis object is passed to <PropLink name=\"headerClassName\" />, <PropLink name=\"headerStyle\" />, <PropLink name=\"header\" /> and <PropLink name=\"renderHeader\" /> functions.\n\nIt is an object with the following properties:\n\n- `column` - see <TypeLink name=\"InfiniteTableComputedColumn\" /> for details\n- `columnSortInfo` - the current sort info for the column. it will be an object of type <TypeLink name=\"DataSourceSingleSortInfo\" /> or `null`.\n- `filtered: boolean` - if the column is currently filtered or not\n- `api` - [`InfiniteTableApi`](/docs/reference/api) - the api object.\n- `columnApi` - [`InfiniteTableColumnApi`](/docs/reference/column-api) - the column api object.\n- `renderBag` - an object with various JSX values, the default elements rendered by the Infinite Table for the column header. It contains the following properties:\n  - `header` - the default column header text\n  - `sortIcon` - the default sort icon\n  - `menuIcon` - the default column menu icon\n  - `filterIcon` - the default column filter icon\n  - `selectionCheckBox` - the default column selection checkbox\n\n```tsx title=\"Example column.renderHeader function\"\nconst renderHeader = ({ renderBag }) => {\n  return (\n    <b style={{ display: 'flex', color: 'tomato', alignItems: 'center' }}>\n      ({renderBag.header}) {renderBag.sortIcon}\n    </b>\n  );\n};\nconst columns = {\n  salary: {\n    field: 'salary',\n    type: 'number',\n    renderHeader,\n  },\n};\n```\n\n</Prop>\n\n<Prop name=\"InfiniteTableColumnStylingFnParams\" generic>\n\n> Represents runtime information passed to many styling functions called when rendering the column cells\n\nThis object is passed at runtime during the rendering of column cells.\n\nIt is an object with the following properties:\n\n- `column` - see <TypeLink name=\"InfiniteTableComputedColumn\" /> for details\n- `rowInfo` - see <TypeLink name=\"InfiniteTableRowInfo\" /> for details\n- `data` - the data object for the current row. The type of this object is `DATA_TYPE | Partial<DATA_TYPE> | null`. For regular rows, it will be of type `DATA_TYPE`, while for group rows it will be `Partial<DATA_TYPE>`. For rows not yet loaded (because of batching being used), it will be `null`.\n- `value` - the underlying value of the current cell - will generally be `data[column.field]`, if the column is bound to a `field` property\n- `inEdit`: `boolean`\n- `editError`: `Error`\n- `rowSelected`: `boolean | null;`\n- `rowActive`: `boolean | null`\n- `rowHasSelectedCells`: `boolean` - if the current row has selected cells or not\n\n<Note>\n\nThe following functions all have this as first argument:\n\n- <PropLink name=\"columns.style\" />\n- <PropLink name=\"columns.className\" />\n\n</Note>\n\n</Prop>\n<Prop name=\"InfiniteTableStylingFnParams\" generic>\n\n> Represents runtime information passed to many styling functions called when rendering rows/cells\n\nThis object is passed at runtime during the rendering of grid rows/cells.\n\nIt is an object with the following properties:\n\n- `rowInfo` - see <TypeLink name=\"InfiniteTableRowInfo\" /> for details\n- `rowIndex`: `number` - the index of the row\n- `rowHasSelectedCells`: `boolean` - if the current row has selected cells or not\n\n<Note>\n\nThe following functions all have this as first argument:\n\n- <PropLink name=\"rowStyle\" />\n- <PropLink name=\"rowClassName\" />\n- <PropLink name=\"rowProps\" />\n\n</Note>\n</Prop>\n\n<Prop name=\"DataSourceSingleSortInfo\" generic>\n\n> Represents information on a specific sort. Contains info about the field to sort by, the sort direction, and the sort type.\n\nThis is the referenced by the <DPropLink name=\"sortInfo\" /> prop.\n\nBasically the <DPropLink name=\"sortInfo\" /> prop can be either an array of <TypeLink name=\"DataSourceSingleSortInfo\" /> objects, or a single <TypeLink name=\"DataSourceSingleSortInfo\" /> object (or null).\n\nThese are the type properties:\n\n- `dir`: `1 | -1` - 1 means ascending sort order; -1 means descending sort order.\n- `field?`: `keyof DATA_TYPE` - the field to sort by.\n- `id?`: `string` - an id for the sort info. When a column is not bound to a `field`, use the column id as the `id` property of the sort info, if you need to specify a default sort order by that column. Note that columns have a <PropLink name=\"columns.valueGetter\">valueGetter</PropLink>, which will be used when doing local sorting and the column is not bound to an exact field.\n- `type?`: `string` - the sort type to apply. See <DPropLink name=\"sortType\" /> for more details. For example, you can use `\"string\"` or `\"number\"` or `\"date\"`\n\n</Prop>\n\n<Prop name=\"DataSourcePropSortInfo\" generic>\n\n> The type of the <DPropLink name=\"sortInfo\" /> DataSource prop.\n\nValid types for this prop are:\n\n- `null`\n- <TypeLink name=\"DataSourceSingleSortInfo\" />\n- <TypeLink name=\"DataSourceSingleSortInfo\" />[]\n\n</Prop>\n\n<Prop name=\"DataSourcePropGroupBy\" generic>\n\n> The type of the <DPropLink name=\"groupBy\" /> prop. Basically this type is an array of <TypeLink name=\"DataSourceGroupBy\" />.\n\n</Prop>\n\n<Prop name=\"InfiniteTableComputedColumn\" generic>\n\n> This represents an enhanced column definition for a column. A computed column is basically a column with more information computed at runtime, based on everything Infinite Table can aggregate about it.\n\nThis type also includes the properties of the `InfinteTableColumn` type: <PropLink name=\"columns.id\" />, <PropLink name=\"columns.field\" />, <PropLink name=\"columns.valueGetter\" />, etc.\n\nAdditional type properties:\n\n- `id`: `string` - the id of the column. This is the same as the <PropLink name=\"columns.id\" /> prop.\n- `computedEditable`: `boolean| Function` - whether this column is ediable or not. See <PropLink name=\"columns.defaultEditable\" /> for more details.\n- `computedWidth`: `number` - the actual calculated width of the column (in pixels) that will be used for rendering. This is computed based on the <PropLink name=\"columns.defaultWidth\" />, <PropLink name=\"columns.defaultFlex\" /> and other min/max constraints.\n- `computedPinned`: `false | \"start\" | \"end\"`\n- `computedSortInfo`: <TypeLink name=\"DataSourceSingleSortInfo\" /> or null - the sort info for this column.\n- `computedSorted`: `boolean` - whether this column is currently sorted or not.\n- `computedSortedAsc`: `boolean` - whether this column is currently sorted ascending or not.\n- `computedSortedDesc`: `boolean` - whether this column is currently sorted descending or not.\n- `computedFiltered`: `boolean` - whether this column is currently filtered or not.\n- ... and more (docs coming soon)\n\n</Prop>\n\n<Prop  name=\"InfiniteTableColumnCellContextType\" generic>\n\n> The type for the parameter of <PropLink name=\"columns.renderValue\"/> (and related rendering functions) and also for the object you get back when you call <HookLink name=\"useInfiniteColumnCell\" />\n\nThese are the type properties:\n\n- `isGroupRow`: `boolean` - whether the current row is a group row or not.\n- `data`: `DATA_TYPE` | `Partial<DATA_TYPE>` | `null` - the data object for the current row.\n  Because the DataSource can be grouped, the `data` object can be either the original data object, or a partial data object (containing the aggregated values - in case of a group row), or null. You can use `isGroupRow` to discriminate between these cases. If `isGroupRow` is `false`, then `data` is of type `DATA_TYPE`.\n- `rowInfo`: <TypeLink name=\"InfiniteTableRowInfo\" />. See that type for more details.\n- `rawValue`: `string` | `number` | other - the raw value for the cell - as computed from the <PropLink name=\"columns.field\" code={false}>column field</PropLink> or <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `value`: `Renderable` - the current value to render for the cell. This is based on the `rawValue`, but if a <PropLink name=\"columns.valueFormatter\" code={false}>column valueFormatter</PropLink> exists, it will be the result of that.\n- `column`: <TypeLink name=\"InfiniteTableComputedColumn\" /> - the (computed) column definition for the current cell.\n- `columnsMap`: a map collection of <TypeLink name=\"InfiniteTableComputedColumn\" /> objects, keyed by column id.\n- `fieldsToColumn`: a map collection of <TypeLink name=\"InfiniteTableComputedColumn\" /> objects, keyed by the column field. If a column is not bound to a field, it will not be included in this map.\n- `align`: the computed value of the <PropLink name=\"columns.align\">align</PropLink> prop for the current cell. This will be `\"start\"`, `\"center\"` or `\"end\"`.\n- `api`: [`InfiniteTableApi`](/docs/reference/api) - the api object.\n- `rowInfo`: <TypeLink name=\"InfiniteTableRowInfo\" /> - the row info for the current row.\n- `rowIndex`: `number` - the index of the current row.\n- `renderBag`: See [column rendering](/docs/learn/columns/column-rendering#rendering-pipeline) for more details.\n- `toggleCurrentGroupRow`: `() => void` - a function that can be used to toggle the current row, if it's a group row.\n- `toggleCurrentTreeNode`: `() => void` - a function that can be used to toggle the expand/collapse state of the current tree node (only available when rendering [a tree grid](/docs/learn/tree-grid/overview)).\n- `rootGroupBy`: <TypeLink name=\"DataSourceGroupBy\" /> - the group by specified in the <DPropLink name=\"groupBy\" /> prop of the `DataSource`.\n- `groupByForColumn`: available for group columns. When <PropLink name=\"groupRenderStrategy\" /> is `\"multi-column\"`, this will be a single <TypeLink name=\"DataSourcePropGroupBy\" />, for each of the generated group columns. When <PropLink name=\"groupRenderStrategy\" /> is `\"single-column\"`, this will be an array of <TypeLink name=\"DataSourcePropGroupBy\" /> objects - it will be available only in the single group column that will be generated.\n\n</Prop>\n\n<Prop  name=\"InfiniteColumnEditorContextType\" generic>\n\n> The type for the object you get back when you call <HookLink name=\"useInfiniteColumnEditor\" />\n\nThese are the type properties:\n\n- `api`: [`InfiniteTableApi`](/docs/reference/api) - the api object.\n- `initialValue`: `any` - the initial value for the editor.\n- `value`: `any` - the current value for the editor. Initially will be the same as `initialValue`. If you use this value, then your editor is \"controlled\", so make sure that when the editor is changed, you call the `setValue` function with the new value.\n- `setValue`: `(value: any) => void` - should be called to update the value in the cell editor. Calling this does not complete the edit.\n- `confirmEdit`: a reference to <ApiLink name=\"confirmEdit\"  code={false}>InfiniteTableApi.confirmEdit</ApiLink>. If you have called `setValue` while editing (meaning your editor was controlled), you don't have to pass any parameters to this function. - the last value of the editor will be used. If your editor is uncontrolled and you haven't called `setValue`, you need to call `confirmEdit` with the value that you want to confirm for the edit.\n\n- `cancelEdit`: a reference to <ApiLink name=\"cancelEdit\" code={false}>InfiniteTableApi.cancelEdit</ApiLink>. Call this to cancel the edit and close the editor. Doesn't require any parameters.\n- `rejectEdit`: a reference to <ApiLink name=\"rejectEdit\" code={false}>InfiniteTableApi.rejectEdit</ApiLink>. Call this to reject the edit and close the editor. You can pass an `Error` object when calling this function to specify the reason for the rejection.\n- `readOnly`: `boolean` - whether the cell is read-only or not.\n\n<Note>\n\nInside the <HookLink name=\"useInfiniteColumnEditor\" /> hook, you can still call <HookLink name=\"useInfiniteColumnCell\" /> to get access to the cell-related information.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"DataSourceGroupBy\" generic>\n\n> The type for the objects in the <DPropLink name=\"groupBy\" /> array. See related <TypeLink name=\"DataSourcePropGroupBy\" />\n\n<Note>\n\nThe type is generic, and the generic type parameter is the type of the data in the grid. In this documentation, either `DATA_TYPE` or `T` will be used to refer to the generic type parameter.\n\n</Note>\n\nThese are the type properties:\n\n- `field` - `keyof DATA_TYPE`. The field to group by.\n- `column`: `Partial<InfiniteTableColumn>`\n- `toKey?`: `(value: any, data: DATA_TYPE) => any` - a function that can be used to decide the bucket where each data object from the data set will be placed. If not provided, the `field` value will be used.\n\n</Prop>\n\n<Prop name=\"InfiniteTableRowInfo\" generic>\n\n> Type for `rowInfo` object representing rows in the table. See [Using RowInfo](/docs/learn/rows/using-row-info) for more details.\n\n<Note>\n\nThe type is generic, and the generic type parameter is the type of the data in the grid. In this documentation, either `DATA_TYPE` or `T` will be used to refer to the generic type parameter.\n\n</Note>\n\nMany methods in Infinite Table are called with `rowInfo` objects that are typed to <TypeLink name=\"InfiniteTableRowInfo\" />. (see <PropLink name=\"columns.style\" />, <PropLink name=\"rowStyle\" />, <PropLink name=\"rowClassName\" />, <PropLink name=\"persistEdit\" />, <PropLink name=\"onEditAccepted\" /> and many others)\n\nThis is a discriminated type, based on the `dataSourceHasGrouping` boolean property and the `isGroupRow` boolean property. This means that the type of the object will change based on the value of those properties.\n\n```ts\n\nexport type InfiniteTableRowInfo<T> =\n  // dataSourceHasGrouping = false, isGroupRow = false\n  | InfiniteTable_NoGrouping_RowInfoNormal<T>;\n\n  // dataSourceHasGrouping = true, isGroupRow = false\n  | InfiniteTable_HasGrouping_RowInfoNormal<T>\n\n   // dataSourceHasGrouping = true, isGroupRow = true\n  | InfiniteTable_HasGrouping_RowInfoGroup<T>\n\n  // tree scenarios - leaf node\n  | InfiniteTable_Tree_RowInfoLeafNode<T>\n\n  // tree scenarios - parent node\n  | InfiniteTable_Tree_RowInfoParentNode<T>;\n\n```\n\nThe common properties of the type (in all discriminated cases) are:\n\n- `id` - the primary key of the row, as retrieved using the <DPropLink name=\"idProperty\" /> prop.\n- `indexInAll` - the index in all currently visible rows.\n- `rowSelected` - whether the row is selected or not - `boolean | null`.\n- `rowDisabled` - whether the row is disabled or not - `boolean`.\n\n### InfiniteTable_NoGrouping_RowInfoNormal\n\nThis type has `dataSourceHasGrouping` set to `false` and `isGroupRow` set to `false`.\n\nAdditional properties to the ones already mentioned above:\n\n- `data` - the data for the underlying row, of type `DATA_TYPE`.\n- `isGroupRow` - `false`\n- `isTreeNode` - `false`\n- `dataSourceHasGrouping` - `false`\n- `selfLoaded` - `boolean` - useful when lazy loading is configured.\n\n### InfiniteTable_HasGrouping_RowInfoNormal\n\nThis type has `dataSourceHasGrouping` set to `true` and `isGroupRow` set to `false`. So we're in a scenario where grouping is configured via <DPropLink name=\"groupBy\" />, but the current row is not a group row.\n\nAdditional properties this type exposes:\n\n- `data` - the data for the underlying row, of type `DATA_TYPE`.\n- `dataSourceHasGrouping` - `true`\n- `isGroupRow` - `false`\n- `isTreeNode` - `false`\n- `indexInGroup` - type: `number`. The index of the row in its parent group.\n- `groupKeys` - type: `any[]`, but usually it's actually `string[]`. For normal rows, the group keys will have all the keys starting from the topmost parent down to the last group row in the hierarchy (the direct parent of the current row).\n- `groupBy` - type `(keyof T)[]`. Has the same structure as groupKeys, but it will contain the fields used to group the rows.\n- `rootGroupBy` - type `(keyof T)[]`. The groupBy value of the DataSource component, mapped to the `groupBy.field`\n- `parents` - a list of `rowInfo` objects that are the parents of the current row.\n- `indexInParentGroups[]` - type: `number[]`. See below for an example\n- `groupCount` - type: `number`. The count of leaf rows that the current group (in this case, the parent group) contains\n- `groupNesting` - type `number`. The nesting of the parent group.\n- `collapsed` - type `boolean`.\n- `selfLoaded` - type: `boolean`. Useful in lazy-loading scenarios, when there is batching present. If you're not in such a scenario, the value will be `false`.\n\n### InfiniteTable_HasGrouping_RowInfoGroup\n\nThis type has `dataSourceHasGrouping` set to `true` and `isGroupRow` set to `true`. So we're in a scenario where grouping is configured via <DPropLink name=\"groupBy\" /> and the current row is a group row.\n\nAdditional properties this type exposes:\n\n- `data` - the data for the underlying row, of type `Partial<DATA_TYPE> | null`. If there are [aggregations configured](/docs/learn/grouping-and-pivoting/group-aggregations), then `data` will be an object that contains those aggregated values (so the shape of the object will be `Partial<DATA_TYPE>`). When no aggregations, `data` will be `null`\n- `dataSourceHasGrouping` - `true`\n- `isGroupRow` - `true`\n- `isTreeNode` - `false`\n- `error` - type: `string?`. If there was an error while loading the group (when the group row is expanded), this will contain the error message. If the group row was loaded with the `cache: true` flag sent in the server response, the error will remain on the `rowInfo` object even when you collapse the group row, otherwise, if `cache: true` was not present, the `error` property will be removed on collapse.\n- `indexInGroup` - type: `number`. The index of the row in the its parent group.\n- `deepRowInfoArray` - an array of `rowInfo` objects. This array contains all the (uncollapsed, so visible) row infos under this group, at any level of nesting, in the order in which they are visible in the table.\n- `reducerResults` - type `Record<string, AggregationReducerResult>`. The result of the <DataSourcePropLink name=\"aggregationReducers\">aggregation reducers</DataSourcePropLink> for each field in the <DataSourcePropLink name=\"aggregationReducers\" /> prop.\n- `groupCount` - type: `number`. The count of leaf rows that the current group (in this case, the parent group) contains\n- `groupData` - type: `DATA_TYPE[]`. The array of the data of all leaf nodes (normal nodes) that are inside this group.\n\n### InfiniteTable_Tree_RowInfoBase\n\nThe base type for row nodes when using the `<TreeDataSource />` component.\n\n- `nodePath`: `any[]` - the path for the current row info\n- `isTreeNode`: `true`\n- `isParentNode`: `boolean`\n- `indexInParent`: `number`\n- `treeNesting`: `number` - the nesting level of the current node.\n\n### InfiniteTable_Tree_RowInfoParentNode\n\nThe type used for parent nodes in tree scenarios.\n\nIn addition to the properties already available via `InfiniteTable_Tree_RowInfoBase`,  it adds the following properties:\n\n- `isParentNode` - `true`\n- `isTreeNode` - `true`\n- `totalLeafNodesCount` - `number`\n- `collapsedLeafNodesCount` - `number`\n\n### InfiniteTable_Tree_RowInfoLeafNode\n\nThe type used for leaf nodes in tree scenarios.\n\nIn addition to the properties already available via `InfiniteTable_Tree_RowInfoBase`,  it adds the following properties:\n\n- `isParentNode` - `false`\n- `isTreeNode` - `true`\n\n</Prop>\n\n</PropTable>\n"
    },
    {
      "filePath": "/blog/2021/12/10/infinite-launch",
      "routePath": "/blog/2021/12/10/infinite-launch",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2021/12/10/infinite-launch.page.md",
      "fileName": "infinite-launch.page.md",
      "folderPath": "/blog/2021/12/10/",
      "frontmatter": {
        "title": "Infinite Table Alpha Launch üöÄ",
        "author": [
          "admin"
        ],
        "date": "2021-12-10T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "Today we are announcing the alpha version (`0.0.7`) of `Infinite Table` ready to be used by early adopters - you can take it from npm",
      "readingTime": "1 min read",
      "content": "\nToday we are announcing the alpha version (`0.0.7`) of `Infinite Table` ready to be used by early adopters - you can take it from npm\n\n<TerminalBlock>\nnpm i @infinite-table/infinite-react\n</TerminalBlock>\n\nWe're thrilled by the work done by the whole team and this is the result of years of their combined experience and passion üéâ!\n\n### Future plans\n\nWe have big plans for the future of `Infinite Table` - first we want to finish the current react implementation and see it widely used and wildly successful and then we can move on to other frontend libraries/frameworks.\n\nThe **virtualization engine** we've built for this component is library agnostic so we'll have to port the **rendering** part to other platforms - which could prove to be a not-so-difficult task with all the experience we have in building this.\n\n# üöÄ\n"
    },
    {
      "filePath": "/blog/2023/01/26/filtering-data-with-infinite-table-for-react",
      "routePath": "/blog/2023/01/26/filtering-data-with-infinite-table-for-react",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2023/01/26/filtering-data-with-infinite-table-for-react.page.md",
      "fileName": "filtering-data-with-infinite-table-for-react.page.md",
      "folderPath": "/blog/2023/01/26/",
      "frontmatter": {
        "title": "Filtering Data with Infinite Table for React",
        "description": "Learn how to filter data both client-side and server-side with Infinite Table for React",
        "author": [
          "admin"
        ],
        "date": "2023-01-26T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "_Today we shipped cutting-edge column filtering functionality, that enables intuitive client-side and server-side filtering_",
      "readingTime": "5 min read",
      "content": "\n_Today we shipped cutting-edge column filtering functionality, that enables intuitive client-side and server-side filtering_\n\n<Note title=\"Why use Infinite Table filters?\">\n\n1Ô∏è‚É£ Narrow down your data with your own filter types and operators\n\n2Ô∏è‚É£ Works both client-side and server-side\n\n3Ô∏è‚É£ Easy customization of filters and filter editors\n\n4Ô∏è‚É£ Optimized for performance\n\n5Ô∏è‚É£ Easy to use across multiple columns\n\n</Note>\n\nFilters were, by far, the most requested feature to add to Infinite Table after our initial launch.\n\nThe recently-released version `1.1.0` of Infinite Table for React introduces support for column filters, which work both client-side and server-side.\n\nIn order to enable filtering - specify the <DPropLink name=\"defaultFilterValue\"/> property on the `<DataSource />` component, as shown below:\n\n```tsx {4} title=\"Enabling_filters_on_the_DataSource\"\n<DataSource<Developer> data={/* ... */} primaryKey=\"id\" defaultFilterValue={[]}>\n  <InfiniteTable<Developer> columns={columns} />\n</DataSource>\n```\n\nThis configures the `<DataSource />` component with an empty array of filters; columns will pick this up and each will display a filter editor in the column header.\n\nOf course, you can define some initial filters:\n\n```tsx title=\"Initial_filters:_filter_by_age_greater_than_40\"\ndefaultFilterValue={[\n  {\n    field: 'age',\n    filter: {\n      type: 'number',\n      operator: 'gt',\n      value: 40\n    }\n  }\n]}\n```\n\nYou can see how all of this looks like when we put it all together in the examples below.\n\n## Local and Remote Filtering\n\nBecause the `<DataSource />` <DPropLink name=\"data\" /> prop is a function that returns a `Promise` with remote data, the filtering will happen server-side by default.\n\n<CSEmbed title=\"Server-side filtering 10k records\" id=\"infinite-table-with-remote-filters-i8b4wx\" />\n\nWhen using remote filtering, it's your responsability to send the DataSource <DPropLink name=\"filterValue\"/> to the backend (you get this object as a parameter in your <DPropLink name=\"data\"/> function). This value includes for each column the value in the filter editor, the column filter type and the operator in use. In this case, the frontend and the backend need to agree on the operator names and what each one means.\n\n<Note title=\"Data reloads when filters change\">\n\nWhenever filters change, when remote filtering is configured, the <DPropLink name=\"data\" /> function prop is called again, with an object that has the `filterValue` correctly set to the current filters (together with `sortInfo` and other data-related props like `groupBy`, etc).\n</Note>\n\nHowever, we can use the <DPropLink name=\"filterMode\"/> to force client-side filtering:\n\n```tsx\n<DataSource<Developer> filterMode=\"local\" filterDelay={0} />\n```\n\nWe also specify the <DPropLink name=\"filterDelay\">filterDelay=0</DPropLink> in order to perform filtering immediately, without debouncing and batching filter changes, for a quicker response ‚ö°Ô∏è üèé\n\n<CSEmbed title=\"Client-side filtering 10k records\" id=\"infinite-table-with-client-side-filters-sqbdbu\" />\n\n<Note title=\"Using local filtering\">\n\nEven if your data is loaded from a remote source, using `filterMode=\"local\"` will perform all filtering on the client-side - so you don't need to send the `filterValue` to the server in your `data` function.\n\n</Note>\n\n## Defining Filter Types and Custom Filter Editors\n\nCurrently there are 2 filter types available in Infinite Table:\n\n- `string`\n- `number`\n\nConceptually, you can think of filter types similar to data types - generally if two columns will have the same data type, they will display the same filter.\n\nEach filter type supports a number of operators and each operator has a name and can define it's own filtering function, which will be used when local filtering is used.\n\n<CSEmbed title=\"Custom filter type and filter editor for canDesign column\" id=\"infinite-table-filters-with-custom-editor-and-filter-type-ptlq2v\"/>\n\nThe example above, besides showing how to define <DPropLink name=\"filterTypes\" code={false}>a custom filter type</DPropLink>, also shows how to define a custom filter editor.\n\n<Note title=\"Providing a Custom Filter Editor\">\n\nFor defining a custom filter editor to be used in a filter type, we need to write a new React component that uses the <HookLink name=\"useInfiniteColumnFilterEditor\" /> hook.\n\n```tsx\nimport { useInfiniteColumnFilterEditor } from '@infinite-table/infinite-react';\n\nexport function BoolFilterEditor() {\n  const { value, setValue } = useInfiniteColumnFilterEditor<Developer>();\n  return <>{/* ... */}</>;\n}\n```\n\nThis custom hook allows you to get the current `value` of the filter and also to retrieve the `setValue` function that we need to call when we want to update filtering.\n\nRead more about this [in the docs - how to provide a custom editor](/docs/learn/filtering/providing-a-custom-filter-editor).\n\n</Note>\n\n## Customise Filterable Columns and Filter Icons\n\nMaybe you don't want all your columns to be filterable.\n\nFor controlling which columns are filterable and which are not, use the <PropLink name=\"columns.defaultFilterable\" /> property.\n\nThis overrides the global <PropLink name=\"columnDefaultFilterable\" /> prop.\n\nWe have also made it easy for you to customize the filter icon that is displayed in the column header.\n\n<CSEmbed title=\"Custom filter icons for firstName and salary columns\" id=\"infinite-table-custom-filter-icon-jc7jr8\" />\n\nYou change the filter icon by using the <PropLink name=\"columns.renderFilterIcon\" /> prop - for full control, it's being called even when the column is not filtered, but you have a `filtered` property on the argument the function is called with.\n\nIn the example above, the `salary` column is configured to render no filter icon, but the `header` is customized to be bolded when the column is filtered.\n\n## Ready for Your Challenge!\n\nWe listened to your requests for advanced filtering.\n\nAnd we believe that we've come up with something that's really powerful and customizable.\n\nNow it's your turn to try it out and show us what you can build with it! üöÄ\n\nIf you have any questions, feel free to reach out to us on [Twitter](https://twitter.com/infinite_table) or in the [GitHub Discussions](https://github.com/infinite-table/infinite-react/discussions).\n\nMake sure you try out filtering in Infinite Table for yourself ([and consult our extensive docs](/docs/learn/filtering) if required).\n\n<HeroCards>\n<YouWillLearnCard title=\"Client-side filtering\" path=\"/docs/learn/filtering/filtering-client-side\">\nLearn how to use filtering in the browser.\n</YouWillLearnCard>\n<YouWillLearnCard title=\"Server-side filtering\" path=\"/docs/learn/filtering/filtering-server-side\">\nFigure out how to use filtering with server-side integration.\n</YouWillLearnCard>\n</HeroCards>\n"
    },
    {
      "filePath": "/blog/2023/02/16/using-menus-in-infinite-table",
      "routePath": "/blog/2023/02/16/using-menus-in-infinite-table",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2023/02/16/using-menus-in-infinite-table.page.md",
      "fileName": "using-menus-in-infinite-table.page.md",
      "folderPath": "/blog/2023/02/16/",
      "frontmatter": {
        "title": "Using Menus in Infinite Table",
        "description": "Find out how to use menus in Infinite Table to customise the DataGrid to fit your needs: custom context menus, column menus and more.",
        "author": [
          "admin"
        ],
        "date": "2023-02-16T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "_With version 1.1.0, our DataGrid now includes support for context menus, which are fully configurable so you can create custom menus for any cell in the table._",
      "readingTime": "7 min read",
      "content": "\n_With version 1.1.0, our DataGrid now includes support for context menus, which are fully configurable so you can create custom menus for any cell in the table._\n\n<Note title=\"Context menus in Infinite Table\">\n\n1Ô∏è‚É£ are fully configurable\n\n2Ô∏è‚É£ adjust their position based on the available space\n\n3Ô∏è‚É£ can be used to create custom menus for any cell in the table\n\n4Ô∏è‚É£ give you full access to the information in the cell or the whole DataGrid\n\n</Note>\n\n## How it works\n\nIn Infinite Table you can configure a context menu to be displayed when you right-click a cell by using the <PropLink name=\"getCellContextMenuItems\" /> prop. Simply specify a function that returns an array of objects, each with `label` and `key` properties. Each object in the array is a row in the context menu - with the `label` being the displayed content and the `key` being a unique identifier for the menu row.\n\n```tsx title=\"Configuring_a_context_menu\"\nconst getCellContextMenuItems = ({ column, data, value }) => {\n  if (column.id === 'currency') {\n    return [\n      {\n        label: `Convert ${value}`,\n        key: 'currency-convert',\n        onAction: (key, item) => {\n          alert('clicked ' + item.key);\n        },\n      },\n    ];\n  }\n\n  if (column.id === 'age') {\n    return null;\n  }\n\n  return [\n    {\n      label: `Welcome ${value}`,\n      key: 'hi',\n    },\n  ];\n};\n\n<DataSource<Developer> data={data} primaryKey=\"id\">\n  <InfiniteTable<Developer>\n    getCellContextMenuItems={getCellContextMenuItems}\n    columns={columns}\n  />\n</DataSource>;\n```\n\nIn the <PropLink name=\"getCellContextMenuItems\" /> function prop, you have access to all the information you need, in the first argument of the function:\n\n- `column` - the column on which the user right-clicked\n- `data` - the data object for the row the user right-clicked\n- `value` - the value of the cell on which the context menu has been triggered. This is generally `data[column.field]`, but it can be different if the column has a <PropLink name=\"columns.valueGetter\" /> or <PropLink name=\"columns.valueFormatter\" />\n- `rowInfo` - an object that contains more information about the row, like the `id` (the primary key) and the row index\n- `isGroupRow`\n- and more\n\n<Note>\n\nIf <PropLink name=\"getCellContextMenuItems\" /> is specified and returns `null`, no custom context menu will be displayed, instead the default browser context menu will be shown (in this case, we do not call `preventDefault()` on the event object).\n\nIf <PropLink name=\"getCellContextMenuItems\" /> returns an empty array, the default browser context menu will not be shown (in this case, we are calling `preventDefault()` on the event object), but also no custom context menu will be displayed, as there are no menu items to show.\n\n</Note>\n\n<Note title=\"Responding to user actions\">\n\nEach item on the context menu can specify an `onAction` function, which will be called when the user clicks on the menu item. The function will receive the `key` and the `item` as arguments.\n\nIn addition, since the menu items are returned from inside the `getCellContextMenuItems` function, the `onAction` callback has access to the same information as the `getCellContextMenuItems` function.\n</Note>\n\n<CSEmbed title=\"Context menu for all cells\" id=\"cell-context-menus-ibtnn0\" />\n\n## Configuring the context menu to have multiple columns\n\nIn the above example, notice each context menu item has only one cell, where the `label` property is displayed.\n\nHowever, Infinite Table for React allows you to create more complex menus, with multiple columns.\n\nIn order to do this, use the same <PropLink name=\"getCellContextMenuItems\"/> prop, but return an object, with `columns` and `items`\n\n```tsx\nconst getCellContextMenuItems = () => {\n  return {\n    columns: [{ name: 'label' }, { name: 'lcon' }],\n    items: [\n      {\n        label: 'Welcome',\n        icon: 'üëã',\n        key: 'hi',\n      },\n      {\n        label: 'Convert',\n        icon: 'üîÅ',\n        key: 'convert',\n      },\n    ],\n  };\n};\n```\n\n<Note>\n\nWhen <PropLink name=\"getCellContextMenuItems\"/> is used to configure the column menus, each column `name` should have a corresponding property in the objects returned in the `items` array (each object also needs to keep the `key` property).\n\nAlso, we recommend keeping a column named `label`.\n\n</Note>\n\n<CSEmbed id=\"custom-columns-for-context-menus-hcsz9e\" title=\"Customising columns in the context menu\n\" />\n\n## Smart positioning\n\nContext menus in Infinite Table are smart enough to adjust their position based on the available space relative to the mouse-click coordinates. The menu will always try to fit inside the grid viewport and to look for the best position that will not cause the menu to be cut off or overflow outside the DataGrid.\n\nThe same algorithm is applied to column menus and also to filter menus (the menu displayed when a filter is shown and the user wants to change the filter operator).\n\n## Context menus outside cells, for the table body\n\nThere are scenarios when you want to display a context menu even when you right-click outside a cell, but inside the table body - for those cases, you can use <PropLink name=\"getContextMenuItems\" /> (in fact, you can use the <PropLink name=\"getContextMenuItems\" /> prop for all context menus).\n\nThe signature of <PropLink name=\"getContextMenuItems\" /> is almost identical with that of <PropLink name=\"getCellContextMenuItems\"/>, with the exception that cell-related information can be undefined - if the user didn't right-click a cell, but somewhere else in the table body.\n\n<CSEmbed id=\"table-context-menus-0h2qzf\" title=\"Context menus outside cells, for the table body\"/>\n\nIn the example above, if you click outside a cell, a menu with a single item will be displayed - `Add Item`. If you click on a cell, the menu will be different, and will show information about the clicked cell.\n\n## Column menus\n\nBesides context menus, the DataGrid also supports menus for columns, that allow you to sort/unsort, pin/unpin, clear filtering and toggle column visibility.\n\nJust like context menus, the column menus can also be fully customised, by using the <PropLink name=\"getColumnMenuItems\" /> prop.\n\n```tsx title=\"Customizing-column-menu\"\nfunction getColumnMenuItems(items, { column }) {\n  if (column.id === 'firstName') {\n    // you can adjust the default items for a specific column\n    items.splice(0, 0, {\n      key: 'firstName',\n      label: 'First name menu item',\n      onClick: () => {\n        console.log('Hey there!');\n      },\n    });\n  }\n\n  // or for all columns\n  items.push({\n    key: 'hello',\n    label: 'Hello World',\n    onClick: () => {\n      alert('Hello World from column ' + column.id);\n    },\n  });\n  return items;\n}\n```\n\n<Note>\n\nThe first argument passed to the <PropLink name=\"getColumnMenuItems\" /> prop is the array of items that is displayed by default in the column menu.\n\nYou can either modify this array and return it or you can return another totally different array.\n\n</Note>\n\n<CSEmbed id=\"custom-column-menus-93jsyb\" />\n\nAs with context menus, positioning column menus is also smart - the menu will always try to fit inside the grid viewport, so it will align to the right or the left of the column, depending on the available space.\n\n## Conclusion\n\nIn this article, we've explained just some of the scenarios that are now possible with Infinite Table for React, by using the new context and column menus.\n\n<HeroCards>\n<YouWillLearnCard title=\"Working with Context Menus\" path=\"/docs/learn/context-menus/using-context-menus\">\nLearn more about working with context menus.\n</YouWillLearnCard>\n<YouWillLearnCard title=\"Using Column Menus\" path=\"/docs/learn/columns/column-menus\">\nConfiguring column menus to fit your needs - read more.\n</YouWillLearnCard>\n</HeroCards>\n\nWe hope you'll use these functionalities to build amazing DataGrids for your applications, that are fully tailored to your needs.\n\nIf you find any issues or have any questions, please reach out to us on [Twitter](https://twitter.com/infinite_table) or in the [GitHub Discussions](https://github.com/infinite-table/infinite-react/discussions) or [issues](https://github.com/infinite-table/infinite-react/issues).\n\nWe're happy to help and improve how you work with the component - we want to make it very easy and straight-forward to use it and are looking for ways to simplify our APIs to **achieve more with less**.\n"
    },
    {
      "filePath": "/blog/2023/07/14/version-2-0-0",
      "routePath": "/blog/2023/07/14/version-2-0-0",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2023/07/14/version-2-0-0.page.md",
      "fileName": "version-2-0-0.page.md",
      "folderPath": "/blog/2023/07/14/",
      "frontmatter": {
        "title": "Infinite Table DataGrid for React reaches version 2.0.0",
        "description": "With version 2.0.0 InfiniteTable DataGrid for React brings lots of fixes and enhancements including support for sorting group columns, better APIs, improved pivoting, smarter column menus and more.",
        "author": [
          "admin"
        ],
        "date": "2023-07-14T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "Version `2.0.0` is a release that allowed us to polish many areas of the component and consolidate its existing features and APIs.",
      "readingTime": "4 min read",
      "content": "\nVersion `2.0.0` is a release that allowed us to polish many areas of the component and consolidate its existing features and APIs.\n\nWe hope this makes your experience with Infinite Table as your React DataGrid of choice even better.\n\nThough it doesn't add major new features, this version does improve the overall experience of using the component. In this article we're detailing the most important improvements this release brings.\n\n<Note title=\"Version 2.0.0 highlights üéâ\">\n\n1Ô∏è‚É£ [better support for sorting group columns](#1-better-support-for-sorting-group-columns)\n2Ô∏è‚É£ [allows configuring the behavior when multiple sorting is enabled](#2-multi-sort-behavior)\n3Ô∏è‚É£ [smarter column menus](#3-smarter-column-menus)\n4Ô∏è‚É£ [improved support for boolean pivot columns](#4-improved-support-for-boolean-pivot-columns)\n5Ô∏è‚É£ [better and more exhaustive APIs](#5-better-and-more-exhaustive-apis)\n\n</Note>\n\n<YTEmbed url=\"https://www.youtube.com/embed/rhoj66cPzYM\" />\n\n## 1Ô∏è‚É£ Better support for sorting group columns\n\nBefore version `2.0.0`, group columns were sortable, but only if the configured `groupBy` fields were bound to actual columns.\n\nThis release enables you to make group columns sortable even when other columns are not defined. For this to work, you have to specify a <PropLink name=\"columns.sortType\">sortType</PropLink> as an array, so the column knows how to sort the group values.\n\n```tsx title=\"Configuring sortType for group columns\"\n<InfiniteTable<Developer>\n  groupColumn={{\n    sortType: ['string', 'number'],\n    field: 'firstName',\n    defaultWidth: 150,\n  }}\n  groupRenderStrategy=\"single-column\"\n  columns={columns}\n  columnDefaultWidth={120}\n/>\n```\n\n<CSEmbed title=\"Sorting group columns is now possible\" id=\"sorting-group-columns-forked-gv5n3z\" />\n\n## 2Ô∏è‚É£ Multi sort behavior\n\nWe have introduced <PropLink name=\"multiSortBehavior\" /> to allow you to configure how the component behaves when multiple sorting is enabled. Two options are available:\n\n- `append` - when this behavior is used, clicking a column header adds that column to the alredy existing sort. If the column is already sorted, the sort direction is reversed. In order to remove a column from the sort, the user needs to click the column header in order to toggle sorting from ascending to descending and then to no sorting.\n\n- `replace` - the default behavior - a user clicking a column header removes any existing sorting and sets that column as sorted. In order to add a new column to the sort, the user needs to hold the `Ctrl/Cmd` key while clicking the column header.\n\n<PropLink name=\"multiSortBehavior\">multiSortBehavior=\"replace\"</PropLink> is the new default behavior, and also a more natural one, so we recommend using it.\n\n<CSEmbed title=\"Click column headers to see multi sort behavior in action - try clicking 'preferredLanguage' and 'salary'\" id=\"spring-snowflake-mh6wpl\" />\n\n## 3Ô∏è‚É£ Smarter column menus\n\nColumn menus are now smarter - in previous versions of Infinite Table, users were able to hide the column that had the menu opened, and the menu would hang in its initial position.\n\nWhen this happens, in version `2.0.0`, the menu realigns itself to other existing columns, thus providing a better user experience.\n\n## 4Ô∏è‚É£ Improved support for boolean pivot columns\n\nIt's pretty common to pivot by boolean columns, and this is now fully supported in Infinite Table. Previous to version `2.0.0`, the column headers for boolean pivot columns were not rendered correctly.\n\n<CSEmbed title=\"Boolean pivot columns are now supported\" id=\"lively-microservice-xtyyk7\" />\n\n## 5Ô∏è‚É£ Better and more exhaustive APIs\n\nWe have improved our APIs, with new methods and fixes. Among other things, we've polished our [Column API](/docs/reference/column-api) to offer you the ability to do more with your columns. Previously there were things that were only possible to do if you had access to the internal state of the component, but now we've moved more things to the API.\n\nFor example, our column sorting code is now centralised, and using <ColumnApiLink name=\"toggleSort\" /> gives you the same action as clicking a column header (this was not the case previously).\n\nWe've added quite a few more methods to our APIs, here's some of the most important ones:\n\n- ColumnAPI.<ColumnApiLink name=\"toggleSort\" />\n- ColumnAPI.<ColumnApiLink name=\"setSort\" />\n- ColumnAPI.<ColumnApiLink name=\"getSortDir\" />\n- ColumnAPI.<ColumnApiLink name=\"clearSort\" />\n- ColumnAPI.<ColumnApiLink name=\"isSortable\" />\n\n## Conclusion\n\nWe've been working on version `2.0.0` for a few months now and we hope you'll enjoy all the little details that make this version a better product, with all the improvements it brings in various areas of the component.\n\nWe'd love to hear your feedback, so please reach out to us via email at <a href=\"mailto:admin@infinite-table.com\" className=\" text-glow \" > admin@infinite-table.com </a> or follow us [@get_infinite](https://twitter.com/get_infinite) to keep up-to-date with news about the product.\n\nThank you üôå\n"
    },
    {
      "filePath": "/blog/2023/01/16/infinite-table-is-here",
      "routePath": "/blog/2023/01/16/infinite-table-is-here",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2023/01/16/infinite-table-is-here.page.md",
      "fileName": "infinite-table-is-here.page.md",
      "folderPath": "/blog/2023/01/16/",
      "frontmatter": {
        "title": "üì£ Infinite Table is Here üéâ",
        "description": "Infinite Table is ready for prime time. With version 1.0.0 we're releasing a DataGrid that's feature packed and ready to be used in enterprise-grade apps",
        "author": [
          "admin"
        ],
        "date": "2023-01-16T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "_Infinite Table React is ready for prime time._",
      "readingTime": "7 min read",
      "content": "\n_Infinite Table React is ready for prime time._\n\n_With version 1.0.0 we're releasing a DataGrid that's feature packed and ready to be used in the wild!_\n\n<Note title=\"Why use Infinite Table?\">\n\n1Ô∏è‚É£ seriously fast\n\n2Ô∏è‚É£ no empty or white rows while scrolling\n\n3Ô∏è‚É£ packed with features\n\n4Ô∏è‚É£ built from the ground up for React\n\n5Ô∏è‚É£ clear, concise and easily composable props & API\n\n</Note>\n\nWe think you'll love Infinite Table.\n\nThis is the DataGrid we would have loved to use more than 15 years ago when [we started working with tables in the browser](/blog/2022/11/08/why-another-datagrid).\n\nAnd now it's finally here üéâ.\n\n### Built from the Ground Up with React & TypeScript\n\n#### React all the Way\n\nInfinite Table feels native to React, not as a after-thought, but built with React fully in mind.\n\nIt's declarative all the way and exposes everything as props, both controlled and uncontrolled.\n\nIf you don't like the default behavior of a prop, use the controlled version and implement your own logic and handling - see for example the [following props related to column order](/docs/reference/infinite-table-props#search=columnorder):\n\n- <PropLink name=\"columnOrder\" /> - controlled property for managing order of columns\n- <PropLink name=\"defaultColumnOrder\" /> - uncontrolled version of the above\n- <PropLink name=\"onColumnOrderChange\" /> - callback prop for notifications and for updating controlled column order\n\n#### Fully Controlled\n\nReact introduced controlled components to the wider community and we've been using them for years.\n\nIt's where the power of React lies - giving the developer the flexibility to fully control (when needed) every input point of an app or component.\n\nAll the props which Infinite Table exposes, have both controlled and uncontrolled versions. This allows you to start using the component very quickly and without much effort, but also with the all-important flexibility to fully control the component when needed, as your app grows and you need more control over the DataGrid.\n\n#### TypeScript & Generic Components\n\nInfinite Table is also built with TypeScript, giving you all the benefits of a great type system.\n\nIn addition, the exposed components are exported as generic components, so you can specify the type of the data you're working with, for improved type safety.\n\n```tsx\nimport { InfiniteTable, DataSource } from '@infinite-table/infinite-react'\n\ntype Person = { id: number, name: string, age: number}\n\nconst data: Person[] = [\n  { id: 1, name: 'John', age: 25 },\n  //...\n];\nconst columns = {\n  id: { field: 'id' },\n  name: { field: 'name' },\n}\n\n// ready to render\n<DataSource<Person> data={data} primaryKey=\"id\">\n  <InfiniteTable<Person> columns={columns} />\n</DataSource>\n```\n\n### Why Use Infinite Table, cont.\n\n#### Fast - virtualization\n\nInfinite Table is fast by leveraging **virtualization** both **vertically** (for rows) and **horizontally** (for columns).\n\nThis means DOM nodes are created only for the visible cells, thus reducing the number of DOM nodes and associated memory strain and improving performance.\n\n#### No white space while scrolling - clever layout & rendering\n\nIn addition to virtualization, we use clever layout & rendering techniques to avoid white space while scrolling.\n\nWhen you scroll, the table will not show any empty rows or white space - no matter how fast you're scrolling!\n\n<Note>\n\nWe think this is one of the features that sets us apart from other components.\n\nWe've spent a lot of time and effort making sure no whitespace is visible while scrolling the table.\n\n</Note>\n\n### Batteries Included\n\nWe want you to be productive immediately and stop worrying about the basics. Infinite Table comes with a lot of features out of the box, so you can focus on the important stuff.\n\nIt helps you display huge datasets and get the most out of your data by providing you the right tools to enjoy these features:\n\n- [<img src=\"/icons/sorting.svg\" style={{display: 'inline-block'}} /> sorting](/docs/learn/sorting/overview)\n- [<img src=\"/icons/row-grouping.svg\" style={{display: 'inline-block'}} /> row grouping](/docs/learn/grouping-and-pivoting/grouping-rows) - both server-side and client-side\n- [<img src=\"/icons/pivoting.svg\" style={{display: 'inline-block'}} /> pivoting](/docs/learn/grouping-and-pivoting/pivoting/overview) - both server-side and client-side\n- [<img src=\"/icons/aggregations.svg\" style={{display: 'inline-block'}} /> aggregations](/docs/learn/grouping-and-pivoting/grouping-rows#aggregations)\n- [<img src=\"/icons/live-pagination.svg\" style={{display: 'inline-block'}} /> live pagination](/docs/learn/working-with-data/live-pagination)\n- [<img src=\"/icons/lazy-loading.svg\" style={{display: 'inline-block'}} /> lazy loading](/docs/learn/working-with-data/lazy-loading)\n- [<img src=\"/icons/keyboard-navigation.svg\" style={{display: 'inline-block'}} /> keyboard navigation](/docs/learn/keyboard-navigation/navigating-cells)\n- [<img src=\"/icons/fixed-flex-cols.svg\" style={{display: 'inline-block'}} /> fixed and flexible columns](/docs/learn/columns/fixed-and-flexible-size)\n- [<img src=\"/icons/column-grouping.svg\" style={{display: 'inline-block'}} /> column grouping](/docs/learn/column-groups)\n- [<img src=\"/icons/theming.svg\" style={{display: 'inline-block'}} /> theming](/docs/learn/theming)\n- ... and many others\n\nInfinite Table is built for companies and individuals who want to ship ‚Äî faster üèé!\n\n### (Almost) No External Dependencies\n\nWe've implemented everything from scratch and only directly depend on 2 packages (we'll probably get rid of them as well in the future) - all our dependecy graph totals a mere 3 packages.\n\n<Note>\n\nWe've reduced external dependencies for 2 main reasons:\n\n- avoid security issues with dependencies (or dependencies of dependencies...you know it) - remember left-pad?\n- keep the bundle size small\n\n</Note>\n\n### Composable API - with a small surface\n\nWhen building a component of this scale, there are two major opposing forces:\n\n- adding functionality\n- keeping the component (and the API) simple\n\nWe're continually trying to reconcile both with Infinite Table, so we've built everything with composition in mind.\n\n<Note>\n\nA practical example of composition is favouring function props instead of boolean flags or objects. Why implement a feature under a boolean flag or a static object when you can expose a functionality via a function prop? The function prop can be used to handle more cases than any boolean flag could ever handle!\n\n</Note>\n\nA good example of composability is the <PropLink name=\"groupColumn\" /> prop which controls the columns that are generated for grouping.\n\nIt can be either a column object or a function:\n\n- when it's a column object, it makes the table render a single column for grouping (as if <PropLink name=\"groupRenderStrategy\" /> was set to `\"single-column\"`)\n- when it's a function, it behaves like <PropLink name=\"groupRenderStrategy\" /> is set to `\"multi-column\"` and it's being called for each of the generated columns.\n\n```tsx title=\"Group_column_as_an_object\"\n<InfiniteTable\n  //...\n  groupColumn={{\n    header: 'Groups',\n  }}\n/>\n```\n\nvs\n\n```tsx title=\"Group_column_as_a_function\"\n<InfiniteTable\n  //...\n  groupColumn={() => {\n    // this allows you to affect all generated group columns in a single place\n    // especially useful when the generated columns are dynamic or generated via a pivot\n    return {...}\n  }}\n/>\n```\n\nOur experience with other DataGrid components taught us that the more features you add, the more complex your API becomes.\n\nSo we tried to keep the API surface as small as possible, while still offering a rich set of declarative props as building blocks that can be composed to accomplish more complex functionalities.\n\n### Built for the community, available on NPM\n\nWe're thrilled to share Infinite Table with the world.\n\nWe wanted to make it very easy for everyone to [get started](/docs/learn/getting-started) with it, so all you require is just an npm install:\n\n<TerminalBlock>\nnpm i @infinite-table/infinite-react\n</TerminalBlock>\n\nThe component will show a footer with a [Powered by Infinite Table](https://infinite-table.com) link displayed. However, all the functionalities are still available and fully working. So if you keep the link visible, you can use the component for free in any setup!\n\nAlthough you can use Infinite Table for free, we encourage you to [purchase a license](/pricing) - buying a license will remove the footer link. This will help us keep delivering new features and improvements to the component and support you and your team going forward!\n\n<HeroCards>\n<YouWillLearnCard title=\"Start right now!\" path=\"/docs/learn/getting-started\">\nGet started with Infinite Table and learn how to use it in your project.\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"Get a license\" path=\"/pricing\" buttonLabel=\"Buy a License\">\nGet Infinite Table for your project and team!\n</YouWillLearnCard>\n</HeroCards>\n"
    },
    {
      "filePath": "/blog/2023/10/05/building-a-datagrid-with-the-right-tools",
      "routePath": "/blog/2023/10/05/building-a-datagrid-with-the-right-tools",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2023/10/05/building-a-datagrid-with-the-right-tools.page.md",
      "fileName": "building-a-datagrid-with-the-right-tools.page.md",
      "folderPath": "/blog/2023/10/05/",
      "frontmatter": {
        "title": "Building a DataGrid with the right tools",
        "author": "admin",
        "date": "2023-10-05T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "Building for the browser has historically been very tedious. In the old days you had to resort to all sorts of hacks for getting the right layout - anyone remembers conditional comments targeting IE6-9? üòÖ",
      "readingTime": "8 min read",
      "content": "\nBuilding for the browser has historically been very tedious. In the old days you had to resort to all sorts of hacks for getting the right layout - anyone remembers conditional comments targeting IE6-9? üòÖ\n\nYeah, we don't miss those days either.\n\nThings have evolved in the last few years, and the amount of goodies JS/CSS/HTML/layout goodies we now take for granted is staggering. New CSS features like flex/grid/custom properties really make a difference. Also browser performance has improved a LOT, and today we can do things in the browser that were unthinkable just a few years ago.\n\nHowever, not everything is easier now than it was back in the browser-war days. Handling all kinds of devices, managing changing dependencies, configuring build tools, choosing the right styling approach, proper E2E testing, keeping a small bundle size, CI pipelines, etc. are all things that can (and will) go wrong if you don't have the right tools.\n\n## TypeScript\n\nIt's obvious today to just go with `TypeScript`, but a few years ago, it was not as obvious. We've been using TypeScript for quite a few years now, and we're very happy with it. We can never imagine going back to plain JS.\n\n## React\n\nBuilding on top of `React` has given us an amazing component model that's very composable and easy to reason about - and the ecosystem is huge.\n\nRead about our journey in the [Why another DataGrid?](/blog/2022/11/08/why-another-datagrid) blog post. Back when React was launching, many of our team members were writing DataGrids - either in vanilla JS or using some libraries (`jQuery` anyone? - we don't miss browser incompatibilities).\n\n## CSS Variables and Vanilla Extract\n\nAs a `DataGrid` Infinite Table is built on top of CSS variables - we're going all in with CSS variables. They have a few gotchas in very advanced cases, but all-in-all they're amazing - and especially for performance.\n\nWe're not short of [CSS variables that we expose - see the full list](/docs/learn/theming/css-variables).\n\nUsing them has been pivotal not only to the ease of theming, but also to the performance of the DataGrid.\nBeing able to change a CSS custom property on a single DOM element and then reuse it across many elements that are children of the first one is a huge performance win. Our DataGrid performance would not be the same without CSS variables.\n\n### Vanilla Extract\n\nThe single tool that has made our life a lot easier working with CSS is [Vanilla Extract](https://vanilla-extract.style/). If you're developing a component library, you should definitely use it! Not so much for simple & static apps - there are other styling solutions that are easier to use, like [tailwindCSS](https://tailwindcss.com/). But for component libraries, **Vanilla Extract is amazing**!\n\nDid we mention it's amazing? üòÖ\nThe fact that you can use TypeScript with it, can use \"Find All References\", see where everything is used is a huge win. You're not writing readonly CSS anymore - because that tends to be the case with most CSS. People are afraid to change it or remove old CSS code, just in case those rules are still being used or referenced somehow. This way, CSS only grows with time, and this is a code smell.\n\nWith Vanilla Extract, you get to forget about that. You know what's being used and what's not.\n\nAlso, hashing class names to avoid collisions is nice - and something now very common in the modern JS ecosystem. It all started with CSS modules, and now it's everywhere, Vanilla Extract included.\n\nOther great features we use extensively are:\n\n- public facing CSS variables - their names are stable\n- private CSS variables - their names are hashed\n- sharing CSS values with the TS codebase is a dream come true.\n- Vanilla Extract recipes - generating and applying CSS classes based on a combination of properties. It's enough that you have 2-3 properties, each with a few values, and managing their combinations can be a pain. Vanilla Extract recipes manage this in a very elegant way.\n\n## End-to-end testing with Playwright and NextJS\n\nRemember the days of Selenium? All those flaky tests, the slow execution, the hard to debug issues? They're gone!\n\n[Playwright](https://playwright.dev/) all the way! 300+ tests and going strong! Yes, you read that right! We have more than 300 tests making sure the all the DataGrid features are working as expected. Sorting, filtering, row grouping, column groups, pivoting, aggregations, lazy loading, live pagination, keyboard navigation, cell and row selection, theming - they're all tested! And we're not talking about unit tests, but end-to-end tests. We're testing the DataGrid in the browser, with real data just like real users would.\n\nPlaywright is an amazing tool, but we're not using it standalone. Paired with a [NextJS](https://nextjs.org/) app, with file-system based routing, we've created files/routes for each functionality. Each NextJS file in turn has a Playwright test file with the same name, but a different extension.\n\nThis has the benefit that it's always very obvious which test is running against which page. The test and the route always have the same file name, just the extension is different. The test source-code doesn't explicitly contain code that navigates to a specific page, all this is done under the hood, using this simple convention.\n\nThis way, we have a very clear separation of concerns, and it's very easy to add new tests. We just create a new file in the `pages` folder, and a new test file sibling to it. Another amazing benefit is that we can start the NextJS app and point our browser to whatever page we want to see or debug and it's there. We can very easily do the actions the test is doing and see if we get the expected results. This is a huge win for debugging.\n\n## A tailored state management\n\nWe've built a very simple yet highly effective state management solution for our DataGrid. It's built to make updating the internal state of the DataGrid as easy as possible - we want a simple API, with clear actions. Our actions map almost 1-to-1 to the DataGrid properties, which makes it very obvious to know who changed what.\n\nWe can't overstate how important it is to have a clear data flow through the DataGrid. This is because the DataGrid is by far the most complex UI component you'll ever use (and we'll ever build). You can't possibly go beyond that - at least not in common business apps, where you have the normal UI controls you can expect, like inputs, buttons, dropdowns, etc. Just the ComboBox can come near the complexity of the DataGrid, but it's still far behind.\n\nIt's important to be able to tame all this complexity - otherwise it can slow down the development process and bring it to a halt, making it difficult to add new features or fix bugs. With our current model, even though the DataGrid grew in complexity and features, we never felt our velocity dropping! We enjoy that!\n\n## No dependencies\n\nWe're very proud of the fact that we have no dependencies in our DataGrid. When you install our package, you only install our package - and nothing else. Nothing that can go wrong due to version conflicts, missing dependencies, npm issues ([remember left-pad](https://www.davidhaney.io/npm-left-pad-have-we-forgotten-how-to-program/)?).\n\nYes, we still depend on packages in our dev process, but we're striving to keep that small as well. It's already complex enough to keep TS, React, NextJS, npm (with workspaces), aliases, esbuild, tsup, playwright all working together in harmony. But we've got through it, and we're very happy with the result. It was worth it!\n\n## Separating concerns\n\nWe've separated our DataGrid into 2 main parts:\n\n- the `<DataSource />` component - handles data loading and processing\n- the `<InfiniteTable />` component - handles the rendering\n\nThis was a brilliant idea! It's new? No! It's not our invention, but we're happy we decided to apply it.\n\nIt adds a better separation between the two big parts of the DataGrid. This also helps tame some of the complexity, while adding clarity to the codebase. It's easier to reason about the code when you know that the `<DataSource />` component is responsible for data loading and processing, while the `<InfiniteTable />` component is ONLY responsible for rendering.\n\n## Conclusion\n\nWe're not sorry for choosing any of the above tools or approaches when building the InfiniteTable DataGrid component.\n\nOur developer velocity is high, and we're able to add new features and fix bugs at a fast pace. We're happy with the result and we're confident that we'll be able to keep this pace in the future.\n\nThe right tools get the right job done! They make a lot easier. Looking back, we only regret we didn't have those tools 5 years ago - but hey, things are moving in the right direction, and we're happy to be part of this journey.\n\nWhat are your tools for developer productivity?\n"
    },
    {
      "filePath": "/blog/2023/12/11/quick-guide-filtering-the-datagrid",
      "routePath": "/blog/2023/12/11/quick-guide-filtering-the-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2023/12/11/quick-guide-filtering-the-datagrid.page.md",
      "fileName": "quick-guide-filtering-the-datagrid.page.md",
      "folderPath": "/blog/2023/12/11/",
      "frontmatter": {
        "title": "Quick Guide - Filtering the DataGrid",
        "author": "admin",
        "draft": true,
        "date": "2023-12-11T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "This is the first article in a series of quick guides that will help you get started with the DataGrid, each focusing on a specific feature. In this article, we will learn how to use filtering in the DataGrid.",
      "readingTime": "1 min read",
      "content": "\nThis is the first article in a series of quick guides that will help you get started with the DataGrid, each focusing on a specific feature. In this article, we will learn how to use filtering in the DataGrid.\n\n### Applying Filters on the DataSource\n\nYou apply filters on the `DataSource` component\n\n```tsx {4-11} title=\"Specifying an initial filter value for the DataSource\"\n<DataSource<Developer>\n  data={...}\n  primaryKey=\"id\"\n  defaultFilterValue={[\n    field: 'salary',\n    filter: {\n      operator: 'gt',\n      value: 50000,\n      type: 'number',\n    },\n  ]}\n/>\n```\n"
    },
    {
      "filePath": "/blog/2022/06/15/infinite-launch-beta",
      "routePath": "/blog/2022/06/15/infinite-launch-beta",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2022/06/15/infinite-launch-beta.page.md",
      "fileName": "infinite-launch-beta.page.md",
      "folderPath": "/blog/2022/06/15/",
      "frontmatter": {
        "title": "Infinite Table Beta Launch üöÄ",
        "author": [
          "admin"
        ],
        "date": "2022-06-15T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "Today we are announcing the beta version (`0.3.12`) of `Infinite Table` ready to be used by early adopters.",
      "readingTime": "1 min read",
      "content": "\nToday we are announcing the beta version (`0.3.12`) of `Infinite Table` ready to be used by early adopters.\n\n## What the version offers\n\n- improved performance\n- improved light and dark themes\n- keyboard navigation for cells and rows\n- support for custom sorting\n- support for custom column rendering\n- and lots more!\n\n### Future plans\n\nWe intend to publish regular beta versions of `Infinite Table` in preparation for our formal launch planned for **September 2022**.\n\n# üöÄ\n"
    },
    {
      "filePath": "/blog/2022/06/24/navigating-your-datagrid",
      "routePath": "/blog/2022/06/24/navigating-your-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2022/06/24/navigating-your-datagrid.page.md",
      "fileName": "navigating-your-datagrid.page.md",
      "folderPath": "/blog/2022/06/24/",
      "frontmatter": {
        "title": "DataGrid Keyboard Navigation",
        "author": [
          "admin"
        ],
        "excerpt": "With version `0.3.6` Infinite Table added keyboard navigation to your favorite React DataGrid component.",
        "date": "2022-06-24T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "With version `0.3.6` Infinite Table added keyboard navigation to your favorite React DataGrid component.",
      "readingTime": "4 min read",
      "content": "\nUsing your keyboard to navigate around an app is crucial to moving fast and being productive.\n\nWith version `0.3.6` Infinite Table added keyboard navigation to your favorite React DataGrid component.\n\n## Navigating table cells\n\nBy default, navigation is enabled for table cells - that means, as soon as the user clicks a cell, it becomes active and from that point on-wards, the user can use **arrow keys**, **page up/down** and **home/end** keys to navigate.\n\nCheck out our [documentation for keyboard navigation](/docs/learn/keyboard-navigation/navigating-cells) to see more demos and a complete reference guide.\n\n<Note>\n\nPro tip: when in cell navigation mode, you can use the **`Shift` key** to navigate horizontally in combination with **page up/down** and **home/end keys**.\n\n</Note>\n\nIn the example below, click a table cell and then use arrow keys to see keyboard navigation in action\n\n<CSEmbed id=\"cell-keyboard-navigation-d3qrx1\" title=\"Keyboard navigation is enabled by default\">\n\n<Description>\n\nClick any cell in the grid and start navigating around using arrow keys.\n\n</Description>\n</CSEmbed>\n\nAnother nice feature of keyboard navigation for cells is that you can specify a default active cell - you do so by using `defaultActiveCell=[2,0]` - meaning the cell on row 2 and column 0 should be active initially.\n\n<CSEmbed title=\"Default cell selection\" id=\"infinite-table-default-cell-selection-ohx8e3\">\n<Description>\n\nIn this example, the cell at position `[1, 1]` (so second row and second column) is selected by default.\n\n</Description>\n\n</CSEmbed>\n\n## Navigating table rows\n\nBesides cell navigation, row navigation is also available. Switch to row navigation mode by specifying `keyboardNavigation=\"row\"` - the rest is similar: user clicks a row, which becomes the active row. Using arrow keys, page up/down and home/end works as expected.\n\nHaving a default row set as active is also possible, via <PropLink name=\"defaultActiveRowIndex\">defaultActiveRowIndex={2}</PropLink> - this means the row at index `2` should be initially rendered as active.\n\n<CSEmbed id=\"infinite-table-keyboard-navigation-for-rows-with-default-selection-ve1nbk\" title=\"Keyboard navigation for rows with default selection\">\n\n<Description>\n\nIn this example, keyboard navigation for rows is enabled, with row at index 2 being active by default.\n\n</Description>\n\n</CSEmbed>\n\n## Controlling active row/cell\n\nBoth cell and row navigation can be used as React uncontrolled and controlled behaviors.\n\nIn the controlled version, you have to use <PropLink name=\"onActiveCellIndexChange\" /> (or <PropLink name=\"onActiveRowIndexChange\"/>) to respond to navigation changes and update the corresponding index.\n\nThe example below demoes controlled cell navigation - initially starting with no active cell, and it updates the active cell as a result to user changes. This means you as a developer are responsible for updating the value when needed, as you no longer wish to leave this update to happen internally in the table. This makes controlled behavior excellent for advanced use-cases when you want to implement custom navigation logic.\n\n<CSEmbed id=\"infinite-table-controlled-cell-navigation-kjl4qx\" title=\"Controlled cell navigation\">\n\n</CSEmbed>\n\n## Turning off keyboard navigation\n\nDisabling keyboard navigation is done by specifying <PropLink name=\"keyboardNavigation\">keyboardNavigation=false</PropLink> - this ensures the user can no longer interact with the table rows or cells via the keyboard.\n\n## Theming\n\nThere are a number of ways to customise the appearance of the element that highlights the active cell.\n\nThe easiest is to override those three CSS variables:\n\n- `--infinite-active-cell-border-color--r` - the red component of the border color\n- `--infinite-active-cell-border-color--g` - the green component of the border color\n- `--infinite-active-cell-border-color--b` - the blue component of the border color\n\nThe initial values for those are 77, 149 and215 respectively, so the border color is `rgb(77, 149, 215)`.\nIn addition, the background color of the active cell highlight element is set to the same color as the border color (computed based on the above r, g and b variables), but with an opacity of `0.25`, configured via the `--infinite-active-cell-background-alpha` CSS variable.\n\nWhen the table is not focused, the opacity for the background color is set to `0.1`, which is the default value of the `--infinite-active-cell-background-alpha--table-unfocused` CSS variable.\n\nTo summarize, use:\n\n- `--infinite-active-cell-border-color--r`\n- `--infinite-active-cell-border-color--g`\n- `--infinite-active-cell-border-color--b`\n  to control border and background color of the active cell highlight element.\n\nSee below a demo on how easy it is to customize the colors for the active element highlighter\n\n<CSEmbed id=\"infinite-table-theming-keyboard-navigation-htukio\" title=\"Theming keyboard navigation\">\n\n</CSEmbed>\n\n## Enjoy\n\nThanks for following us thus far - we appreciate feedback, so please to let us know if keyboard navigation is useful for you or how we could make it better.\n\nPlease follow us [@get_infinite](https://twitter.com/get_infinite) to keep up-to-date with news about the product. Thank you.\n"
    },
    {
      "filePath": "/blog/2023/10/02/version-3-0-0",
      "routePath": "/blog/2023/10/02/version-3-0-0",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2023/10/02/version-3-0-0.page.md",
      "fileName": "version-3-0-0.page.md",
      "folderPath": "/blog/2023/10/02/",
      "frontmatter": {
        "title": "Infinite Table React DataGrid version 3.0.0 released",
        "description": "InfiniteTable DataGrid for React version 3.0.0 brings many small fixes and enhancements, along with a major new feature: cell selection",
        "author": [
          "admin"
        ],
        "date": "2023-10-02T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "Version `3.0.0` is a release that brings a long awaited feature: cell selection. This allows the user to perform fined-grained cell selection, either via the <DPropLink name=\"cellSelection\"/> prop or via the [Cell Selection API](/docs/reference/cell-selection-api).",
      "readingTime": "4 min read",
      "content": "\nVersion `3.0.0` is a release that brings a long awaited feature: cell selection. This allows the user to perform fined-grained cell selection, either via the <DPropLink name=\"cellSelection\"/> prop or via the [Cell Selection API](/docs/reference/cell-selection-api).\n\n<Note title=\"Version 3.0.0 highlights üéâ\">\n\n1Ô∏è‚É£ [support for single and multiple cell selection](#1-support-for-single-and-multiple-cell-selection)\n2Ô∏è‚É£ [cell selection using wildcards](#2-cell-selection-using-wildcards)\n3Ô∏è‚É£ [cell selection API](#3-cell-selection-api)\n\n</Note>\n\n## 1Ô∏è‚É£ Support for single and multiple cell selection\n\nIt's been a [long-requested feature to implement cell selection](https://github.com/infinite-table/infinite-react/issues/120).\n\nWe knew we needed to implement it, but we wanted to do it right while keeping it easy to understand.\n\nIn fact, we prepared some things in advance - namely <DPropLink name=\"selectionMode\" /> was there, it just needed to accept a new value: `\"multi-cell\"`.\n\n```tsx title=\"Configuring multi-cell selection\"\n<DataSource<Developer>\n  selectionMode=\"multi-cell\" // <--- THIS\n  primaryKey=\"id\"\n  data={[...]}\n/>\n```\n\nThe line above is all you need to do to enable cell selection. This allows the user to `Click` or `Cmd/Ctrl+Click` to select a specific cell and `Shift+Click` to select a range of cells. It's exactly the behavior you'd expect from a spreadsheet application.\n\nTry `Cmd/Ctrl+Click`ing in the DataGrid cells below to see multiple cell selection in action.\n\n<CSEmbed title=\"SelectionMode set to 'multi-cell' to allow cell selection\" id=\"sorting-group-columns-forked-qnvwwh\" />\n\n### Using a default selection\n\nIf you want to render the DataGrid with a default selection, you can use the <DPropLink name=\"defaultCellSelection\" /> prop.\n\n```tsx\nconst defaultCellSelection = {\n  defaultSelection: false,\n  selectedCells: [\n    [3, 'hobby'],\n    [4, 'firstName'],\n    [4, 'hobby'],\n    [4, 'preferredLanguage'],\n    [4, 'salary'],\n  ],\n};\n```\n\nThe format for the uncontrolled <DPropLink name=\"defaultCellSelection\" /> (and also for the controlled <DPropLink name=\"cellSelection\" />) is an object with two properties:\n\n- `defaultSelection` - `boolean` - whether or not cells are selected by default.\n- and either\n  - `selectedCells` - `[string|number, string][]` - only needed when `defaultSelection` is `false`\n- or\n  - `deselectedCells` - `[string|number, string][]` - only needed when `defaultSelection` is `true`\n\nThe value for `selectedCells` and `deselectedCells` should be an array of `[rowId, colId]` tuples.\n\nThe `rowId` is the `id` of the row (<DPropLink name=\"primaryKey\" code={false}>the primary key</DPropLink>), and the `colId` is the `id` of the column (the identifier of the column in the <PropLink name=\"columns\" /> prop).\n\nThis object shape for the <DPropLink name=\"defaultCellSelection\" />/<DPropLink name=\"cellSelection\" /> props allows you full flexibility in specifying the selection. You can specify a single cell, a range of cells, or even a non-contiguous selection. You can default to everything being selected, or everything being deselected and then enumerate your specific exceptions.\n\n<CSEmbed title=\"Specifying a default cell selection in Infinite Table\" id=\"cell-selection-with-default-value-in-infinite-table-fzdhwr\" />\n\n## 2Ô∏è‚É£ Cell Selection using wildcards\n\nThe above examples show how to select specific cells, but what if you want to select all cells in a column, or all cells in a row?\n\nWell, that turns out to be straightforward as well. You can use the `*` wildcard to select all cells in a column or all cells in a row.\n\n```tsx title=\"All cells in row with id rowId3 and all cells in hobby column are selected\"\nconst defaultCellSelection = {\n  defaultSelection: false,\n  selectedCells: [\n    ['*', 'hobby'],\n    ['rowId3', '*'],\n  ],\n}\n<DataSource selectionMode=\"multi-cell\" defaultCellSelection={defaultCellSelection} />\n```\n\n<CSEmbed title=\"Cell selection using wildcards\" id=\"cell-selection-with-wildcards-in-infinite-table-48rs75\" />\n\nWildcard selection is really powerful and it allows you to select lots of cells without the need to enumerate them all.\n\nFor example, you can easily select all cells except a few.\n\n### Listening to selection changes\n\nYou can listen to selection changes by using the <DPropLink name=\"onCellSelectionChange\" /> prop.\n\nIf you're using controlled cell selection, you have to update the <DPropLink name=\"cellSelection\" /> prop yourself in response to user interaction - so <DPropLink name=\"onCellSelectionChange\" /> will be your way of listening to selection changes.\n\n## 3Ô∏è‚É£ Cell Selection API\n\nIn addition to managing cell selection declaratively, which we encourage, you can also use the [Cell Selection API](/docs/reference/cell-selection-api) to imperatively update the current selection.\n\nWe offer the following methods:\n\n- <CellApiLink name=\"selectCell\" /> - selects a single cell, while allowing you to keep or to clear previous selection\n- <CellApiLink name=\"deselectCell\" /> - deselects the specified cell\n- <CellApiLink name=\"selectColumn\" /> - selects a whole column in the DataGrid\n- <CellApiLink name=\"deselectColumn\" /> - deselects the specified column\n- <CellApiLink name=\"selectRange\" /> - selects a range of cells\n- <CellApiLink name=\"deselectRange\" /> - deselects the specified range of cells\n- <CellApiLink name=\"selectAll\" /> - selects all cells in the DataGrid\n- <CellApiLink name=\"clear\" /> - clears selection (deselects all cells in the DataGrid)\n- <CellApiLink name=\"isCellSelected\" /> - checks if the specified cell is selected or not\n\n## Conclusion\n\nWe'd love to hear your feedback - what do you think we've got right and what's missing. Please reach out to us via email at <a href=\"mailto:admin@infinite-table.com\" className=\" text-glow \" > admin@infinite-table.com </a> or follow us [@get_infinite](https://twitter.com/get_infinite) to keep up-to-date with news about the product.\n\nTalk soon üôå\n"
    },
    {
      "filePath": "/blog/2022/09/01/infinite-table-monthly-update-august-2022",
      "routePath": "/blog/2022/09/01/infinite-table-monthly-update-august-2022",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2022/09/01/infinite-table-monthly-update-august-2022.page.md",
      "fileName": "infinite-table-monthly-update-august-2022.page.md",
      "folderPath": "/blog/2022/09/01/",
      "frontmatter": {
        "title": "Quarterly Update - Summer 2022",
        "description": "Infinite Table update for Summper 2022 - row selection, column rendering, group columns",
        "author": [
          "admin"
        ],
        "date": "2022-09-01T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "Over the summer, we continued our work on preparing for our official release, focusing mainly on adding new functionalities and documenting them thoroughly, together with enhancements to existing features.",
      "readingTime": "7 min read",
      "content": "\nOver the summer, we continued our work on preparing for our official release, focusing mainly on adding new functionalities and documenting them thoroughly, together with enhancements to existing features.\n\n## Summary\n\nWe have implemented a few new functionalities, including:\n\n- [row selection is now available üéâ](#row-selection)\n- [column rendering pipeline](#column-rendering-pipeline)\n- [group columns are now sortable üîÉ](#sortable-group-columns)\n\nAnd we have updated some of the existing features:\n\n- [group columns inherit](#enhanced-group-columns) styles and configuration\n- [column hiding when grouping](#column-hiding-when-grouping)\n- [group columns can be bound to a field](#group-columns-bound-to-a-field)\n- [using the column valueGetter in sorting](#column-valuegetter-in-sorting)\n\n<Note title=\"Coming soon\">\n\nWe started working on column and context menus.\nWe will first release fully customizable **column** menus to show/hide columns and to easily perform other operations on columns.\nThis will be followed by **context** menus where you will be able to define your own custom actions on rows/cells in the table.\n\n---\n\nDon't worry, the menus will be fully customizable, the menu items are fully replaceable with whatever you need, or you will be able to swap our menu component with a custom one of your own.\n\n</Note>\n\n## New Features\n\nHere's what we shipped over the summer:\n\n### Row Selection\n\nRow selection can be single or multiple, with or without a checkbox, with or without grouping and for a lazy or non-lazy `DataSource` - üòÖ that was a long enumeration, but seriously, we think we got something great out there.\n\nYou can specify the selection via the <DPropLink name=\"rowSelection\" /> (controlled) or <DPropLink name=\"defaultRowSelection\" /> (uncontrolled) props, and listen to changes via the <DPropLink name=\"onRowSelectionChange\" /> callback prop.\n\n<CSEmbed id=\"infinite-table-multi-row-checkbox-selection-with-grouping-i9wi88\" title=\"Multi row checkbox selection with grouping\" >\n\n<Description>\n\n- Example shows how you can use multiple row selection with a predefined controlled value.\n\n- Go ahead and select some groups/rows and see the selection value adjust.\n\n- Example also shows how you can use the [InfiniteTableApi](/docs/reference/api) to retrieve the actual ids of the selected rows.\n\n</Description>\n\n</CSEmbed>\n\n<YouWillLearnCard inline title=\"Find out more on row selection\" path=\"/docs/learn/selection/row-selection\">\n\nSingle vs multiple selection, grouped or ungrouped data, checkbox selection, lazy selection - read about all the possible combinations you can use to fit your needs.\n\n</YouWillLearnCard>\n\n### Column Rendering Pipeline\n\nThe rendering pipeline for columns is a series of functions defined on the column that are called while rendering.\n\n<Note>\n\nAll the functions that have the word `render` in their name will be called with an object that has a `renderBag` property, which contains values that will be rendered.\n\n</Note>\n\nThe default <PropLink name=\"columns.render\" /> function (the last one in the pipeline) ends up rendering a few things:\n\n- a `value` - generally comes from the <PropLink name=\"columns.field\">field</PropLink> the column is bound to\n- a `groupIcon` - for group columns\n- a `selectionCheckBox` - for columns that have <PropLink name=\"columns.renderSelectionCheckBox\" /> defined (combined with row selection)\n\nWhen the rendering process starts for a column cell, all the above end up in the `renderBag` object.\n\nFor example:\n\n```tsx {3,12}\nconst column: InfiniteTableColumn<T> = {\n  valueGetter: () => 'world',\n  renderValue: ({ value, renderBag, rowInfo }) => {\n    // at this stage, `value` is 'world' and `renderBag.value` has the same value, 'world'\n    return <b>{value}</b>;\n  },\n\n  render: ({ value, renderBag, rowInfo }) => {\n    // at this stage `value` is 'world'\n    // but `renderBag.value` is <b>world</b>, as this was the value returned by `renderValue`\n    return <div>Hello {renderBag.value}!</div>;\n  },\n};\n```\n\n<YouWillLearnCard  title=\"Find out more on column rendering\" path=\"/docs/learn/columns/column-rendering#rendering-pipeline\">\n\nRead about how using the rendering pipeline helps your write less code.\n\n</YouWillLearnCard>\n\nHere is the full list of the functions in the rendering pipeline, in order of invocation:\n\n1.<PropLink name=\"columns.valueGetter\" /> - doesn't have access to `renderBag` 2.<PropLink name=\"columns.valueFormatter\" /> - doesn't have access to `renderBag` 3.<PropLink name=\"columns.renderGroupIcon\" /> - can use all properties in `renderBag` 4.<PropLink name=\"columns.renderSelectionCheckBox\" /> - can use all properties in `renderBag` 5.<PropLink name=\"columns.renderValue\" /> - can use all properties in `renderBag` 6.<PropLink name=\"columns.renderGroupValue\" /> - can use all properties in `renderBag` 7.<PropLink name=\"columns.renderLeafValue\" /> - can use all properties in `renderBag` 8.<PropLink name=\"columns.render\" /> - can use all properties in `renderBag`\n\nAdditionally, the <PropLink name=\"columns.components.ColumnCell\" /> custom component has access to the `renderBag` via <HookLink name=\"useInfiniteColumnCell\" />\n\n### Sortable Group Columns\n\nWhen <PropLink name=\"groupRenderStrategy\">groupRenderStrategy=\"single-column\"</PropLink> is used, the group column is sortable by default if all the columns that are involved in grouping are sortable.\n\nSorting the group column makes the `sortInfo` have a value that looks like this:\n\n```ts\nconst sortInfo = [{ field: ['stack', 'age'], dir: 1, id: 'group-by' }];\n```\n\nWhen <PropLink name=\"groupRenderStrategy\">groupRenderStrategy=\"multi-column\"</PropLink>, each group column is sortable by default if the column with the corresponding field is sortable.\n\n <Note>\n\nIn both single and multi group column render strategy, you can use the <PropLink name=\"columns.sortable\" /> property to override the default behavior.\n\n </Note>\n\n## Updated Features\n\nHere‚Äôs a list of Infinite Table functionalities that we enhanced in the last month:\n\n### Enhanced Group Columns\n\nGroup columns now inherit configuration from the columns bound to the field they are grouped by - if such columns exist.\n\n<CSEmbed id=\"infinite-table-group-column-inherits-style-from-related-column-v16qfg\" title=\"Group column inherits style from related column\">\n\n<Description>\n\nIn this example, the group column inherits the styling of the `country` column, because the `country` field is used for grouping.\n\n</Description>\n\n</CSEmbed>\n\n<Note>\n\nThe generated group column(s) - can be one for all groups or one for each group - will inherit the `style`/`className`/renderers from the columns corresponding to the group fields themselves (if those columns exist).\n\nAdditionally, there are other ways to override those inherited configurations, in order to configure the group columns:\n\n- use <DPropLink name=\"groupBy.column\" /> to specify how each grouping column should look for the respective field (in case of <PropLink name=\"groupRenderStrategy\">groupRenderStrateg=\"multi-column\"</PropLink>)\n- use <PropLink name=\"groupColumn\" /> prop\n  - can be used as an object - ideal for when you have simple requirements and when <PropLink name=\"groupRenderStrategy\">groupRenderStrateg=\"single-column\"</PropLink>\n  - as a function that returns a column configuration - can be used like this in either single or multiple group render strategy\n\n</Note>\n\n### Column Hiding when Grouping\n\nWhen grouping is enabled, you can choose to hide some columns. Here are the two main ways to do this:\n\n- use <PropLink name=\"hideColumnWhenGrouped\" /> - this will make columns bound to the group fields be hidden when grouping is active\n- use <PropLink name=\"columns.defaultHiddenWhenGroupedBy\" /> (also available on the column types, as <PropLink name=\"columnTypes.defaultHiddenWhenGroupedBy\" />) - this is a column-level property, so you have more fine-grained control over what is hidden and when.\n\nValid values for <PropLink name=\"columns.defaultHiddenWhenGroupedBy\" /> are:\n\n- `\"*\"` - when any grouping is active, hide the column that specifies this property\n- `true` - when the field this column is bound to is used in grouping, hides this column\n- `keyof DATA_TYPE` - specify an exact field that, when grouped by, makes this column be hidden\n- `{[k in keyof DATA_TYPE]: true}` - an object that can specify more fields. When there is grouping by any of those fields, the current column gets hidden.\n\n<CSEmbed id=\"infinite-table-hide-columns-when-grouping-41o64x\" title=\"Hide columns when grouping\">\n\n<Description>\n\nIn this example, the column bound to `firstName` field is set to hide when any grouping is active, since the group column is anyways found to the `firstName` field.\n\nIn addition, <PropLink name=\"hideColumnWhenGrouped\" /> is set to `true`, so the `stack` and `preferredLanguage` columns are also hidden, since they are grouped by.\n\n</Description>\n\n</CSEmbed >\n\n### Group Columns Bound to a Field\n\nGroup columns can now be bound to a field, by leveraging the (obviously ...) <PropLink name=\"columns.field\" /> property. This will make the group column render the value of that field for non-group rows.\n\n<CSEmbed id=\"infinite-table-group-column-bound-to-field-6mjpzr\" title=\"Group columns with field\">\n\n</CSEmbed>\n\nIn addition, you can now use <PropLink name=\"columns.renderGroupValue\" /> and <PropLink name=\"columns.renderLeafValue\" /> for configuring the rendered value for grouped vs non-grouped rows.\n\n### Column valueGetter in Sorting\n\nColumns allow you to define a <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> to change the value they are rendering (e.g. useful when the `DataSet` has nested objects).\n\nPreviously, this value returned by <PropLink name=\"columns.valueGetter\" /> was not used when sorting the table. With the latest update, the value returned by <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> is correctly used when sorting the grid locally.\n"
    },
    {
      "filePath": "/blog/2022/08/01/infinite-table-monthly-update-july-2022",
      "routePath": "/blog/2022/08/01/infinite-table-monthly-update-july-2022",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2022/08/01/infinite-table-monthly-update-july-2022.page.md",
      "fileName": "infinite-table-monthly-update-july-2022.page.md",
      "folderPath": "/blog/2022/08/01/",
      "frontmatter": {
        "title": "Quarterly Update - Spring 2022",
        "description": "Infinite Table update for Spring 2022",
        "author": [
          "admin"
        ],
        "excerpt": "Infinite Table update for Spring 2022",
        "date": "2022-08-01T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "Infinite Table update for Spring 2022",
      "readingTime": "4 min read",
      "content": "\nThis spring, we've been hard at work preparing for our Autumn release.\n\nWe have implemented a few new functionalities:\n\n- [column resizing](#column-resizing) is now available\n- [column reordering](#column-reordering) can be achieved via drag & drop\n- [keyboard navigation](#keyboard-navigation) with support for both row and cell navigation\n\nAnd we have updated some of the existing features:\n\n- [lazy grouping](#lazy-grouping)\n  - expands lazy loaded rows correctly and\n  - also the server response can contain multiple levels of `children`, which basically allows the backend to send more data for groups you don't want to load lazily\n- [column groups](#column-grouping) are now improved with support for proportional column resizing\n- [pivot columns](#pivoting) are now easier to style and customize\n\n<Note title=\"Coming soon\">\n\nAt the end of the spring, we started working on row and cell selection and we've made good progress on it.\n\nRow selection is already implemented for non-lazy group data and we're working on integrating it with lazy group data (e.g groups lazily loaded from the server). Of course, it will have integration with checkbox selection.\n\nMultiple row selection will have 2 ways to select data:\n\n- via mouse/keyboard interaction - we've emulated the behavior you're used to from your Finder in MacOS.\n- via checkbox - this is especially useful when the table is configured with grouping.\n\n</Note>\n\n## New Features\n\n### Column Resizing\n\nBy default columns are now resizable. You can control this at column level via <PropLink name=\"columns.resizable\">column.resizable</PropLink> or at grid level via <PropLink name=\"resizableColumns\" />.\n\n<YouWillLearnCard inline title=\"Find out more on column resizing\" path=\"/docs/learn/columns/fixed-and-flexible-size\">\n\nRead more about how you can configure column resizing to fit your needs.\n\n</YouWillLearnCard>\n\n<CSEmbed id=\"infinite-table-resizable-columns-example-gq0fnv\" title=\"Resizable columns example\">\n\n<Description>\nFor resizable columns, hover the mouse between column headers to grab & drag the resize handle.\n\nHold SHIFT when grabbing in order to **share space on resize**.\n</Description>\n\n</CSEmbed>\n\nA nice feature is support for SHIFT resizing - which will share space on resize between adjacent columns - try it in the example above.\n\n### Column Reordering\n\n<YouWillLearnCard inline title=\"Read more on column order\" path=\"/docs/learn/columns/column-order\">\n\nColumn order is a core functionality of `InfiniteTable` - read how you can leverage it in your app.\n\n</YouWillLearnCard>\n\nThe default column order is the order in which columns appear in the columns object, but you can specify a <PropLink name=\"defaultColumnOrder\" /> or tightly control it via the controlled property <PropLink name=\"columnOrder\" /> - use <PropLink name=\"onColumnOrderChange\" /> to get notifications when columns are reordered by the user.\n\n<CSEmbed title=\"Column order\" id=\"infinite-table-column-order-advanced-example-ro12mu\">\n\n</CSEmbed>\n\n### Keyboard Navigation\n\nBoth cell and row navigation is supported - use <PropLink name=\"keyboardNavigation\" /> to configure it. By default, cell navigation is enabled.\n\n<CSEmbed title=\"Keyboard navigation\" id=\"infinite-table-keyboard-navigating-cells-uncontrolled-tvwkmq\">\n\n<Description>\n\nThis example starts with cell `[2,0]` already active.\n\n</Description>\n\n</CSEmbed>\n\n## Updated Features\n\n### Lazy grouping\n\nServer side grouping has support for lazy loading - `InfiniteTable` will automatically load lazy rows that are configured as expanded.\n\n<CSEmbed id=\"infinite-table-lazy-grouping-with-expanded-rows-pkihtt\" title=\"Lazy loaded rows are properly expanded\">\n\n<Description>\n\nIn this example, `France` is specified as expanded, so as soon as it is rendered, `InfiniteTable` will also request its children.\n\n</Description>\n\n</CSEmbed>\n\nAnother nice feature is the ability for a group node to also contain its direct children in the server response, which basically allows the backend to eagerly load data for certain groups.\n\n<YouWillLearnCard inline title=\"More on lazy grouping\" path=\"/docs/learn/grouping-and-pivoting/grouping-rows#server-side-grouping-with-lazy-loading\">\n\nLazy grouping (with or without batching) is an advanced feature that allows you to integrate with huge datasets without loading them into the browser.\n\n</YouWillLearnCard>\n\n### Column grouping\n\nColumn grouping was enhanced with support for pinned columns. Now you can use them in combination.\n\n<YouWillLearnCard inline title=\"More on column groups\" path=\"/docs/learn/columns/column-grouping\">\n\nColumn groups is a powerful way to arrange columns to fit your business requirements - read how easy it is to define them.\n\n</YouWillLearnCard>\n\n<CSEmbed id=\"infinite-table-column-groups-with-pinning-ks16dp\" title=\"Column groups with pinning\">\n\n<Description>\n\nNote the `country` column is pinned at the start of the table but is also part of a column group\n\n</Description>\n\n</CSEmbed>\n\n### Pivoting\n\nPivot columns are now easier to style and benefit from piped rendering to allow maximum customization.\n\n<YouWillLearnCard inline title=\"Pivoting docs\" path=\"/docs/learn/grouping-and-pivoting/pivoting/overview\">\n\nPivoting is probably our most advanced use-case. We offer full support for server-side pivoting and aggregations.\n\n</YouWillLearnCard>\n\n<CSEmbed id=\"infinite-table-custom-rendering-for-pivot-p2ern7\" title=\"Customized pivot columns\">\n\n<Description>\n\nPivot columns for the `canDesign` field are customized.\n\n</Description>\n\n</CSEmbed>\n"
    },
    {
      "filePath": "/blog/2022/11/01/infinite-table-monthly-update-october-2022",
      "routePath": "/blog/2022/11/01/infinite-table-monthly-update-october-2022",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2022/11/01/infinite-table-monthly-update-october-2022.page.md",
      "fileName": "infinite-table-monthly-update-october-2022.page.md",
      "folderPath": "/blog/2022/11/01/",
      "frontmatter": {
        "title": "Quarterly Update - Autumn 2022",
        "description": "Infinite Table update for Autumn 2022 - grid menus and new website",
        "author": [
          "admin"
        ],
        "date": "2022-11-01T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "_In the autumn our focus was implementing a dedicated Menu component so it can be used for column menus and row context menu._",
      "readingTime": "2 min read",
      "content": "\n_In the autumn our focus was implementing a dedicated Menu component so it can be used for column menus and row context menu._\n\n_In addition to that, we've been working on a new design for our website and getting everything ready for the release._\n\n## Summary\n\nSome new functionalities we added to InfiniteTable include:\n\n- column menus\n- support for tab navigation\n\n<Note title=\"Get a free license\">\n\nWe redesigned our website in preparation for our **v1** release and public launch.\n\nTo receive your free 3-month license, please email us at [admin@infinite-table.com](mailto:admin@infinite-table.com) while we're still working our way through to `1.0.0`\n\n</Note>\n\n## New Features\n\nHere's what we worked on in the last two months:\n\n### Menu component\n\nWe've built a brand new Menu component for Infinite Table, which we're using as a column menu and in the very near future will be used for row context menus.\n\n![Grid with menu](/blogs/grid-with-menu.png)\n\nOur policy is to develop all our components in-house and own them in order not to introduce third-party dependencies and vulnerabilities. It also helps us keep the overall bundle size small (since we're sharing some utilities) so your apps are leaner.\n\nWe have to confess menus are tricky - we made ours support any level of nesting. They're tricky because of the nesting, the smart alignment and containment they need to provide in order to be truly useful. The Infinite Menu can be aligned to different targets and using a multitude of anchoring positions, always taking into account the position with the most available space in relation to a container or a specified area. This makes it really flexible and powerful - we think you'll want to use it as standalone as well once it's documented.\n\n### Tab navigation\n\nPrevious versions of Infinite Table did not have support for tab navigation due to our heavy virtualized rendering (the visual order of the cells was not the same as the DOM order). With the latest release, Infinite Table can now handle tab navigation correctly. Column cells that render `<input />` fields or any other focusable elements can now be reached with tab navigation if the column specifies a <PropLink name=\"columns.contentFocusable\" /> prop.\n"
    },
    {
      "filePath": "/blog/2022/11/08/why-another-datagrid",
      "routePath": "/blog/2022/11/08/why-another-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2022/11/08/why-another-datagrid.page.md",
      "fileName": "why-another-datagrid.page.md",
      "folderPath": "/blog/2022/11/08/",
      "frontmatter": {
        "title": "Why Another React DataGrid?",
        "description": "Why is another DataGrid needed? A short history of datagrids and why Infinite Table is different",
        "author": [
          "admin"
        ],
        "date": "2022-11-08T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "We've been working on finding better ways to display tabular data for over 2 decades now and collectively we have 35+ years of experience working on this.",
      "readingTime": "18 min read",
      "content": "\nWe've been working on finding better ways to display tabular data for over 2 decades now and collectively we have 35+ years of experience working on this.\n\nIt all began on the desktop with a great range of DataGrids and then we moved to the web and the `<table />` component - yeah, we've been around for quite some while - all the while dealing with the same problems and requirements again and again.\n\nThis is the story of how we got to where we are today....\n\n## A (personal) History of DataGrids\n\n<Note >\n\nThis article is not meant to be a complete history of DataGrids.\n\nRather, it's personal reflections on the long journey the Infinite Table team have experienced while using and building components for displaying tabular data, culminating in Infinite Table, the modern declarative DataGrid for React.\n\n</Note>\n\n## Desktop Components\n\nDataGrids have been around as long as any of us can remember.\n\nThey are a vital tool which allows business users to visualise, edit, manage and personalise their data.\n\nBefore Tim Berners-Lee and his colleagues changed the world for ever (and for a couple of decades after), \"serious\" business applications lived on the desktop.\n\nThis was accompanied and facilitated by a plethora of great DataGrids from the likes of DevExpress, Telerik, Syncfusion, Infragistics and others.\n\nThese products defined the feature-set that users came to expect in a DataGrid - row grouping, formatting, multiple sorting, pivoting etc.\n\nAnd which any DataGrid worth its salt today needs to offer today.\n\nFor 2 decades and more these DataGrid repeatedly proved their worth in multiple changing desktop formats - MFC, WinForms, WPF and others.\n\n## Enter the Browser\n\nAnd then the browser came along and, in time, everything changed.\n\nWhile it really took until HTML5 to convince most power users to move from the desktop to the web, the need to display tabular data in the browser was there right from the start.\n\nInitially the only way to show tabular data in the browser was to use the `<table />` component, and it was this piece of code that made it happen:\n\n```css\ntable-layout: fixed;\n```\n\nthis is telling the browser ([see MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout#values)) that it shouldn't compute the space available for all rows & cells in the table before rendering but instead size the columns based on the content of the first row. This is speeding up the rendering time by quite a lot, and it's the early solution to the problem of rendering large data-sets.\n\nHowever, it was not perfect, and rendering **large** datasets was still a **huge** problem. Also, no fancy resizable / reorderable / stackable columns were available - at least not by default.\n\nThese shortcomings were obvious to developers dealing with massive datasets, so various groups and companies started coming up with solutions. One such solution came from Yahoo! as part of their larger widget library called `YUI` (it was back in the days when Y! was a big deal).\n\n### YUI DataTable\n\nEnter YUI era - launched in 2006, the Yahoo! User Interface Library was a step forward in reusability and component architecture. With the release of YUI 3, it received a modernized set of components, and the [YUI DataTable](https://clarle.github.io/yui3/yui/docs/datatable/) was probably the most advanced DataGrid solution out there. The component had a templating engine under the hood and allowed developers to customize some parts of the table. For its time, it was packed with functionality and was a great solution for many use-cases.\n\nIt had a rich API, exposing lots of events, callbacks and methods for things like moving columns around, getting the data record for a given row, adding rows and columns, etc - all imperative code. The API was powerful and allowed developers to build complex solutions, but it was all stateful and imperative - something very normal for its epoch, but something we've learned to avoid in the last few years.\n\nHere's some code showcasing the YUI DataTable\n\n```js {6} title=\"YUI DataTable with sorting\"\nvar table = new Y.DataTable({\n  columns: [\n    { key: 'item', width: '125px' },\n    {\n      key: 'cost',\n      formatter: '¬£: {value}',\n      sortable: true,\n    },\n  ],\n  sortable: true,\n  data: data,\n}).render('#example');\n\n// to programatically sort\ntable.sort({ cost: 'asc' });\n```\n\nNotice in the code above, the component had support for custom formatters via a template (in the style of Mustache templates). YUI DataTable was a great component, certainly lacking some features by modern standards, but it was amazingly rich for its time. In some respects, it's still better than some of the modern DataGrids out there. The major missing piece is virtualization for both rows and columns in the table.\n\nA nice feature YUI DataTable had was the ability to separate the DataSource component and the data loading into a separate abstraction layer, so it would be somewhat decoupled from the main UI component.\n\n```js\nvar dataSource = new Y.DataSource.IO({\n  source: '/restaurants/fetch.php?',\n});\n\ndataSource.plug(Y.Plugin.DataSourceXMLSchema, {\n  schema: {\n    resultListLocator: 'Result',\n    resultFields: [{ key: 'Title' }, { key: 'Phone' }, { key: 'Rating' }],\n  },\n});\nvar table = new Y.DataTable({\n  columns: ['Title', 'Phone', 'Rating'],\n  summary: 'Chinese restaurants near 98089',\n});\n\ntable.plug(Y.Plugin.DataTableDataSource, {\n  datasource: dataSource,\n  initialRequest: 'zip=94089&query=chinese',\n});\n```\n\nInfinite Table is getting this a step further and splitting the data loading and the rendering into two separate components - `<DataSource />` and `<InfiniteTable />`:\n\n- the `<DataSource />` component is responsible for managing the data - fetching it, sorting, grouping, pivoting, filtering, etc and making it available via the React context to the UI component.\n- the `<InfiniteTable />` component is responsible only for rendering the data. This means you can even use the `<DataSource />` component with another React component and implement your own rendering and virtualization.\n\n```tsx\n<DataSource<DataEntity> primaryKey=\"id\" data={...}>\n  {/* if you wanted to, you can replace\n   <InfiniteTable/> with your own custom component */}\n\n  <InfiniteTable<DataEntity> columns={...}>\n</DataSource>\n```\n\nThis level of separation allows us to iterate more rapidly on new features and also makes testing üß™ easier.\n\n### ExtJS 3\n\nThe next solution we've worked with was [ExtJS version 3](https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.grid.GridPanel), which was built on the legacy of YUI 3. At the time, back in 2010, it was the most advanced DataGrid solution out there - used for some of the most complex applications in the enterprise world, from CMSs to ERP systems.\n\nThe ExtJS 3 DataGrid brought excellent product execution in a few areas:\n\n- the [documentation](https://docs.sencha.com/extjs/3.4.0/) was excellent for its time - very rich, easy to navigate and search, with useful examples. As a bonus, from the docs you had access to the source-code of all components, which was a nice addition.\n- it came together with a rich set of components for building complex UIs - grids, trees, combo-boxes, form inputs, menus, dialogs, etc. Powerful layout components were available, which allowed developers to build complex app layouts by composing components together - and everything felt like it was part of the same story, which it was.\n- enthusiastic community - the forums were very active and the community was writing lots of good plugins.\n\n```js title=\"ExtJS 3 DataGrid code snippet\"\nvar grid = new Ext.grid.GridPanel({\n  // data fetching abstracted in a \"Store\" component\n  store: new Ext.data.Store({\n    // ...\n  }),\n  // columns abstracted in a ColumnModel\n  colModel: new Ext.grid.ColumnModel({\n    defaults: {\n      width: 120,\n      sortable: true,\n    },\n    columns: [\n      {\n        id: 'company',\n        header: 'Company',\n        width: 200,\n        sortable: true,\n        dataIndex: 'company',\n      },\n      {\n        header: 'Price',\n        renderer: Ext.util.Format.usMoney,\n        dataIndex: 'price',\n      },\n      { header: 'Change', dataIndex: 'change' },\n      { header: '% Change', dataIndex: 'pctChange' },\n      {\n        header: 'Last Updated',\n        width: 135,\n        dataIndex: 'lastChange',\n        xtype: 'datecolumn',\n        format: 'M d, Y',\n      },\n    ],\n  }),\n  viewConfig: {\n    forceFit: true,\n    // Return CSS class to apply to rows depending upon data values\n    getRowClass: function (record, index) {\n      var c = record.get('change');\n      if (c < 0) {\n        return 'price-fall';\n      } else if (c > 0) {\n        return 'price-rise';\n      }\n    },\n  },\n  sm: new Ext.grid.RowSelectionModel({ singleSelect: true }),\n  // size need if not inside a layout\n  width: 600,\n  height: 300,\n});\n```\n\nBuilding on the legacy of YUI 3, the ExtJS added virtualization to make the DataGrid perform well for large datasets - it really made the component fly - since there was no framework overhead, and ExtJS was working directly with the DOM, the scrolling experience was pretty smooth.\n\nAlso ExtJS tried to make things declarative and you could describe most of your UI by nesting JavaScript objects into a root object. The idea was clever, but it was only applicable for the initial rendering and you had to write imperative code as soon as you wanted some changes after the initial render.\n\n<Note title=\"What If...\">\n\nIt was while working on a project with ExtJS 3 and exploring everything it had to offer that we had the great idea üòÖ that we should start writing a DataGrid component.\n\nWe were digging deep into ExtJS source code, wrote a few plugins for it and then decided to take the challenge and build a brand new DataGrid üò±.\n\nIt was supposed to take us just a few short months üòÖ...\n\n</Note>\n\n## The React Revolution\n\nWe were quite far in building the DataGrid component, with a dedicated templating engine under the hood (by the way, it was really good in comparison to similar solutions at that time), virtualization implemented and major functionalities finished ... when JSConf EU 2013 happened.\n\n### JSConf EU 2013\n\nWe vividly remember [watching Pete Hunt talk about ReactJS and rethinking best practices](https://www.youtube.com/watch?v=x7cQ3mrcKaY) at JSConf EU 2013.\n\n<YTEmbed url=\"https://www.youtube.com/embed/x7cQ3mrcKaY?start=25\" />\n\nBy the time the presentation was finished we knew we had to do something.\n\nThis declarative way of describing the UI got us hooked and we knew we had to **drop what we were doing and adopt React** for anything going forward. It proved to be the right decision and we were early adopters of [React](https://reactjs.org/). It was astonishing to us how easy it was to learn React at the time - only taking a few hours to fully grasp the mental model and start building reusable components.\n\n<Note title=\"The move to React\">\n2013 was the year we switched trajectory and went full-React with all our new projects. We went back to the drawing board and started our first experiments with a DataGrid component in React. \n</Note>\n\nWhile we were building the DataGrid in React we got side-tracked with other projects but we saw the same pattern again and again - people trying to implement the grid component again and again, in various projects. Most of those attempts either failed terribly or at best they were good-enough for a simple use-case.\n\n### AG Grid\n\nIt was around this time, in 2015, that [AG Grid](https://www.ag-grid.com/) was launched.\n\nAnd, wow, it was good - very good.\n\nWe immediately adopted it in all kind of projects while still trying to find time on the side to build our own DataGrid solution, the React way, with a fully declarative API.\n\nWe were inspired üôè by AG Grid, seeing the breadth of features it offers and its expansive growth.\n\nIt is a feat of engineering which illustrates just how much the browser can be pushed by extensive use of virtualization - being able to render millions of rows and thousands of columns is no small feat.\n\nAll this while keeping the performance similar as if it was rendering just a few rows and columns.\n\n<CodeSandboxEmbed src=\"https://codesandbox.io/embed/infallible-waterfall-csjcns?fontsize=14&module=%2Findex.js&theme=dark\" />\n\nIn the code above ([taken from AG Grid getting started page](https://www.ag-grid.com/javascript-data-grid/getting-started/#copy-in-application-code)), note that AG Grid is exposing its [API](https://www.ag-grid.com/javascript-data-grid/grid-api/) on the `gridOptions` object.\n\nThe API is huge and allow you to do pretty much anything you want with the grid - in an imperative way, which is what you're probably looking for if you're not integrating with a library/framework like Angular or React.\n\nAfter vanilla JavaScript and Angular versions of AG Grid, a React version was finally released.\n\nIt was a step in the right direction - to make AG Grid more declarative - though it was a thin wrapper around React, with all the renderers and API still being imperative and not feeling like the best fit inside a React app.\n\nA few years later, AG Grid finally released a `reactUI` [version](https://blog.ag-grid.com/react-ui-overview/), with tighter integration with React and a more declarative API ‚ù§Ô∏è\n\nAll this time other solutions popped up in the React community.\n\n### React Table\n\nOne such solution that got massive adoption from the community was [React Table](https://tanstack.com/table/v8/) - now rebranded as TanStack Table.\n\nIt's growth began around 2018, around the time when headless UI components started to gain traction.\n\nReact Table was one of the first popular headless UI components to be released - in the same category it's worth mentioning [Downshift](https://www.downshift-js.com/) (initially launched and popularized by [Kent C. Dodds](https://kentcdodds.com/)), which helped push headless UI components to the community.\n\nReact Table is a great solution for people who want to build their own UI on top of it.\n\nSome of the benefits of headless UI approach you get from React Table are:\n\n- full control over markup and styles\n- supports all styling patterns (CSS, CSS-in-JS, UI libraries, etc)\n- smaller bundle-sizes.\n\nThis flexibility and total control come with a cost of needing more setup, more code and more maintainance over time. Also complex features that might already be implemented in a full-featured DataGrid will need to be implemented again from scratch.\n\nHowever, we do think it's a great üíØ fit for some use-cases - we've used it ourselves successfully in some projects üôè. But it's not for everyone, as in our experience, most teams today want to ship faster üèé and not spend time and mental energy on building their own UI.\n\n<CSEmbed src=\"https://codesandbox.io/embed/github/tanstack/table/tree/main/examples/react/column-groups?fontsize=14&hidenavigation=1&module=%2Fsrc%2Fmain.tsx&theme=dark\" />\n\nNotice in the code above how you're responsible for creating the markup for the table, the headers, column groups,the cells, etc. You have TOTAL control over every aspect of the component, but this means you have to own it!\n\nAt the other end of the spectrum is AG Grid a full-featured DataGrid that offers all this out of the box.\n\nWith Infinite Table, we're trying to strike a balance between these 2 very different approaches - by offering a declarative API that is easy to use and get started with, while still giving you the flexibility to customize the UI and the behavior of the component, via both controlled and uncontrolled props.\n\nLet's take a look at an example of a similar UI, this time built with Infinite Table.\n\n<CSEmbed id=\"infinite-table-with-column-groups-2nn8zc\" />\n\n## Infinite Table\n\nAll this time we kept an eye on other components out there to get inspired. We got fresh ideas from various teams and projects - either enterprise or open source - either full-fledged or headless components like [react-table](https://tanstack.com/table/v8/).\n\nWe've learned a lot from all these projects we've worked with and we've put all the best ideas in Infinite Table.\n\nInfinite is the fruit of years of iteration, experimentation, failures and sweat on a product that we've poured our hearts in over the course of so many years. We've agonized over all our APIs and design decisions in order to make Infinite Table the best React DataGrid component out there.\n\nWe're aware we're not there yet, but we're here to stay üëã and keep getting better. We want to work closely with the community at large and get fresh ideas from other projects and teams. We can all be winners when we work together and respect each-other ‚ù§Ô∏è\n\nIt's amazing what happens when you focus on a problem for such a long time (yeah, we know üò±). We wanted to give up several times but kept pushing for over a decade. The result is a component that we're proud of and is already starting to be used by enterprise clients across many industries (more on that in a later blogpost).\n\nHere are some of the key areas where we believe Infinite Table shines:\n\n### Ready to Use\n\nInfinite Table is ready to use out of the box - namely it's not headless. We target companies and individuals who want to ship ‚Äî faster üèé! We're aware you don't want to re-invent the wheel nor do you want to invest 6 months of your team to build a poor implementation of a DataGrid component that will be hard to maintain and will be a source of bugs and frustration. **You want to ship ‚Äî and soon!**. If this is you and you are already using React then Infinite Table is written for you!\n\n### Feels like React - Declarative API\n\nWe want Infinite Table to feel at home in any React app. Everything about the DataGrid should be declarative - when you want to update the table, change a prop and the table will respond. No imperative API calls - we want you to be able to use Infinite Table in a way that feels natural to you and your team, so you can stay productive and use React everywhere in your frontend.\n\nLet's take for example how you would switch a column from a column group to another:\n\n```tsx {35} title=\"Fully declarative way to update columns\"\nfunction getColumns() {\n  return {\n    firstName: {\n      field: 'firstName',\n      width: 200,\n      columnGroup: 'personalInfo',\n    },\n    address: {\n      field: 'address',\n      width: 200,\n      columnGroup: 'personalInfo',\n    },\n    age: {\n      field: 'age',\n      columnGroup: 'about'\n    }\n  } as InfiniteTablePropColumns<DataType>\n}\n\nconst columnGroups = {\n  personalInfo: { header: \"Personal info\" },\n  about: { header: \"About\" }\n};\n\nfunction App() {\n  const [columns, setColumns] = useState<InfiniteTablePropColumns<DataType>>(getColumns)\n  const [colGroupForAddress, setColGroupForAddress] = useState('personalInfo')\n\n  const toggle = () => {\n    const cols = getColumns()\n\n    const newColGroup = colGroupForAddress === 'personalInfo' ? 'about' : 'personalInfo'\n    cols.address.columnGroup = newColGroup\n\n    setColumns(cols)\n    setColGroupForAddress(newColGroup)\n  }}\n  const btn = <button onClick={toggle}> Toggle group for address </button>\n\n  return <>\n    {btn}\n    <DataSource<DataType> data={...} primaryKey=\"id\">\n      <InfiniteTable columns={columns} columnGroups={columnGroups}/>\n    </DataSource>\n  </>\n}\n```\n\nNote in the code above that in order to update the column group for the `address` column, we simply change the `columnGroup` prop of the column and then we update the state of the component. The table will automatically re-render and update the column group for the `address` column. This is a fully declarative way to update the table. You don't need to call any imperative API to update it - change the props and the table will reflect the changes.\n\n### Fully Controlled\n\nReact introduced controlled components to the wider community and we've been using them for years. It's were the power of React lies - it gives the developer the flexibility to fully control (when needed) every input point of an app or component.\n\nAll the props Infinite Table is exposing have both controlled and uncontrolled versions. This allows you to start using the component very quickly and without much effort, but also gives you the flexibility to fully control the component when needed, as your app grows and you need more control over the DataGrid.\n\n### Composable API with small API surface\n\nWhen building a complex component, there are two major opposing forces:\n\n- adding functionality and\n- keeping the component (and the API) simple.\n\nWe're trying to reconcile both with Infinite Table so we've built everything with composition in mind.\n\nA practical example of composition is favoring function props instead of boolean flags or objects. Why implement a feature under a boolean flag or a static object when you can expose a functionality via a function prop? The function prop can be used to handle more cases than any boolean flag could ever handle!\n\nA good example of composability is the <PropLink name=\"groupColumn\" /> prop - it can be a column object or a function. It control the columns that are generated for grouping:\n\n- when it's a column object, it makes the table render a single column for grouping (as if <PropLink name=\"groupRenderStrategy\" /> was set to `\"single-column\"`)\n- when it's a function, it behaves like <PropLink name=\"groupRenderStrategy\" /> is set to `\"multi-column\"` and it's being called for each of the generated columns.\n\n```tsx title=\"Group column as an object\"\n<InfiniteTable\n  //...\n  groupColumn={{\n    header: 'Groups',\n  }}\n/>\n```\n\nvs\n\n```tsx title=\"Group column as a function\"\n<InfiniteTable\n  //...\n  groupColumn={() => {\n    // this allows you to affect all generated group columns in a single place\n    // especially useful when the generated columns are dynamic or generated via a pivot\n    return {...}\n  }}\n/>\n```\n\nWe've learned from our experience with other DataGrid components that the more features you add, the more complex your API becomes. So we tried to keep the API surface as small as possible, while still offering a rich set of declarative props as building blocks that can be composed to accomplish more complex functionalities.\n\n## Conclusion\n\nWe're very excited to share our Infinite Table journey with you ‚ù§Ô∏è ü§©\n\nAfter years in the DataGrid space and working and agonizing on this component, we're happy to finally ship it üõ≥ üöÄ.\n\nWe're looking forward to receiving [your feedback](https://github.com/infinite-table/infinite-react/issues) and suggestions.\n\nWe're here to stay and we're committed to improving Infinite Table and to make it your go-to React DataGrid component to help you ship ‚Äî faster! All the while staying true to the community!\n"
    },
    {
      "filePath": "/blog/2024/02/02/how-to-configure-default-sorting",
      "routePath": "/blog/2024/02/02/how-to-configure-default-sorting",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/02/02/how-to-configure-default-sorting.page.md",
      "fileName": "how-to-configure-default-sorting.page.md",
      "folderPath": "/blog/2024/02/02/",
      "frontmatter": {
        "title": "How to customise the DataGrid default sorting",
        "author": "admin",
        "date": "2024-02-02T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "In this article, we'll show you how easy it is to configure the default sorting for the React DataGrid.",
      "readingTime": "3 min read",
      "content": "\nIn this article, we'll show you how easy it is to configure the default sorting for the React DataGrid.\n\n## Using the `defaultSort` prop on the DataSource\n\nSorting is configured on the DataGrid `<DataSource />` component. For this, you use the <PropLink name=\"defaultSortInfo\" /> prop, as either an object, for sorting by a single column, or an array of objects, for sorting by multiple columns.\n\n```tsx title=\"Specifying a default sort order\"\n// sort by country DESC and salary ASC\nconst defaultSortInfo={[\n  { field: \"country\", dir: -1 },\n  { field: \"salary\", dir: 1 },\n]}\n\n<DataSource defaultSortInfo={defaultSortInfo} />\n```\n\nThat's it! Now, when the DataGrid is first rendered, it will be sorted by the `country` column in descending order, and then by the `salary` column in ascending order.\n\n<Note>\n\nFor sorting to work properly for numeric columns, don't forget to specify `type: \"number\"` in the <PropLink name=\"columns.type\" code={false}>column configuration</PropLink>.\n\n</Note>\n\n<CSEmbed id=\"default-sort-order-react-datagrid-54dzny\" />\n\n<Note>\n\nWhen the <PropLink name=\"defaultSortInfo\" /> is an array, the DataGrid will know you want to allow sorting by multiple columns.\n\nSee our page on [multiple sorting](/docs/learn/sorting/multiple-sorting) for more details.\n\n</Note>\n\n## Local vs remote sorting\n\nThe above example uses local sorting. If you don't explicitly specify a that changes in the <PropLink name=\"sortInfo\" /> should trigger a reload (via the <PropLink name=\"shouldReloadData.sortInfo\" /> prop), the sorting will be done locally, in the browser.\n\nHowever, you can also have remote sorting - for this scenario, make sure you use <PropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=true</PropLink>.\n\n<Note>\n\nIn this case, it's your responsability to send the `sortInfo` to your backend using the <DPropLink name=\"data\" /> prop of the DataSource - your `data` function will be called by the DataGrid whenever sorting changes. The arguments the function is called with will include the sort information (along with other details like filtering, grouping, aggregations, etc).\n\n```tsx\nconst dataSource: DataSourceData<Developer> = ({ sortInfo }) => {\n  if (sortInfo && !Array.isArray(sortInfo)) {\n    sortInfo = [sortInfo];\n  }\n  const args = [\n    sortInfo\n      ? 'sortInfo=' +\n        JSON.stringify(\n          sortInfo.map((s) => ({\n            field: s.field,\n            dir: s.dir,\n          })),\n        )\n      : null,\n  ]\n    .filter(Boolean)\n    .join('&');\n\n  return fetch('https://your-backend.com/fetch-data?' + args)\n    .then((r) => r.json())\n    .then((data: Developer[]) => data);\n};\n```\n\n</Note>\n\n<CSEmbed id=\"vigilant-lena-shs2td\" title=\"Remote sorting example\"/>\n\n## Responding to sorting changes\n\nWhen the user changes the sorting in the React DataGrid UI, the DataSource <DPropLink name=\"data\" /> function is called for you, with the new sort information.\n\nHowever, you might want to respond in other ways - for this, you can use <DPropLink name=\"onSortInfoChange \"/> callback prop.\n\n<Note>\n\nIf you use the controlled <DPropLink name=\"sortInfo\" /> instead of the uncontrolled <DPropLink name=\"defaultSortInfo\" />, you will need to configure the <DPropLink name=\"onSortInfoChange\" /> callback to respond to sorting changes and update the UI.\n\n</Note>\n\n## Using the column sort info for rendering\n\nAt runtime, you have access to the column sort information, both in the column header - see <PropLink name=\"columns.renderHeader\" /> and in the column cells - see <PropLink name=\"columns.renderValue\" />.\n\n<CSEmbed id=\"heuristic-butterfly-v5k6v7\" title=\"Customising the column header depending on the sort info\"/>\n\nFor example, you can customise the icon that is displayed in the column header to indicate the sort direction.\n\nVia the <PropLink name=\"columns.renderHeader\" /> you have full access to how the column header is rendered and can use the sorting/filtering/grouping/aggregation/pivoting information of that column to customise the rendering.\n"
    },
    {
      "filePath": "/blog/2024/02/26/master-detail-now-available-in-react-datagrid",
      "routePath": "/blog/2024/02/26/master-detail-now-available-in-react-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/02/26/master-detail-now-available-in-react-datagrid.page.md",
      "fileName": "master-detail-now-available-in-react-datagrid.page.md",
      "folderPath": "/blog/2024/02/26/",
      "frontmatter": {
        "title": "Master detail is now available in the Infinite React DataGrid",
        "author": "admin",
        "date": "2024-02-26T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "Today is a big day for the Infinite React DataGrid - we're excited to announce that the master detail feature is now available!",
      "readingTime": "4 min read",
      "content": "\nToday is a big day for the Infinite React DataGrid - we're excited to announce that the master detail feature is now available!\n\nWith this addition, our DataGrid is now enterprise-ready! We know master-detail scenarios are needed in many business applications, and we're happy to provide this feature to our users starting today!\n\n<Note title=\"Master-detail highlights üéâ\">\n\n1Ô∏è‚É£ [support for multiple levels of master-detail & rendering custom content](#what-can-you-do-with-master-detail)\n2Ô∏è‚É£ [configurable detail height](#configurable-detail-height)\n3Ô∏è‚É£ [control over expand/collapse state](#configurable-expandcollapse-state)\n4Ô∏è‚É£ [caching mechanism for detail DataGrids](#master-detail-caching)\n\n</Note>\n\n## What can you do with master-detail?\n\nMaster-detail allows you to have rows in the DataGrid that expand to show more details. This can be used to show more information about the row, or even to show another DataGrid with related data.\n\nYou can render basically anything in the detail row - it doesn't need to be another DataGrid. However, if you do want to show another DataGrid, you can, and you can do that at any level of depth.\n\nIn the detail `<DataSource />` component, you have access to the master row, so it will be very easy to load related data based on the master row the user expands.\n\n<CSEmbed id=\"tender-cdn-9cpznx\" code={false} size=\"md\" title=\"Basic master detail DataGrid example\"/>\n\n## Configurable detail height\n\nOur master-detail implementation is very configurable - you can control the height of the row details, the expand/collapse state, and much more.\n\nThe height of the row details is fully adjustable - see the <PropLink name=\"rowDetailHeight\" /> prop to learn about all the options you have.\n\n<CSEmbed id=\"beautiful-sammet-3gkwn9\" code={false} size=\"md\" title=\"Master detail with custom row detail height and custom content\" />\n\nAs seen in the snippet above, it's also really easy to control the expand/collapse state of the row details. You can choose to have some rows expanded by default so details of those rows will be visible from the start.\n\n## Configurable expand/collapse state\n\nUsing the <PropLink name=\"rowDetailState\" />, you can control (in a declarative way) which rows are expanded and which are collapsed. In addition, if you prefer the imperative approach, we also have an [API to work with row details](/docs/reference/row-detail-api).\n\nIf you have some rows with details and some without, that's also covered. Use the <PropLink name=\"isRowDetailEnabled\" /> to control which rows will have details and which will not.\n\n<Note>\n\nAnother important configuration is choosing the column that has the row detail expand/collapse icon. Use the <PropLink name=\"columns.renderRowDetailIcon\" /> prop on the column that needs to display the expand/collapse icon. If this prop is a function, it can be used to customize the icon rendered for expanding/collapsing the row detail.\n\n</Note>\n\n## Master detail caching\n\nBy far the most common scenario will be to render another DataGrid in the detail row.\n\nFor such cases we offer a caching mechanism that will keep the state of the detail DataGrid when the user collapses and then expands the row again.\n\n<Note>\n\nTo enable caching, use the <PropLink name=\"rowDetailCache\" /> prop.\n\nIt can be one of the following:\n\n- `false` - caching is disabled - this is the default\n- `true` - enables caching for all detail DataGrids\n- `number` - the maximum number of detail DataGrids to keep in the cache. When the limit is reached, the oldest detail DataGrid will be removed from the cache.\n\n</Note>\n\n<CSEmbed id=\"thirsty-browser-xxf6wf\" code={false} size=\"md\" title=\"Master detail DataGrid with caching for 5 detail DataGrids\">\n\n<Description>\n\nThis example will cache the last 5 detail DataGrids - meaning they won't reload when you expand them again.\nYou can try collapsing a row and then expanding it again to see the caching in action - it won't reload the data.\nBut when you open up a row that hasn't been opened before, it will load the data from the remote location.\n\n</Description>\n\n</CSEmbed>\n\nRead our docs on [caching detail DataGrids](/docs/learn/master-detail/caching-detail-datagrid) to learn more how you can use this feature to improve the user experience.\n"
    },
    {
      "filePath": "/blog/2024/01/23/how-to-customise-datagrid-loading-state",
      "routePath": "/blog/2024/01/23/how-to-customise-datagrid-loading-state",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/01/23/how-to-customise-datagrid-loading-state.page.md",
      "fileName": "how-to-customise-datagrid-loading-state.page.md",
      "folderPath": "/blog/2024/01/23/",
      "frontmatter": {
        "title": "How to customise the DataGrid loading state",
        "author": "admin",
        "date": "2024-01-23T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "We're starting a series of short `\"How to\"` articles that are very focused and show how to achieve a specific thing with the Infinite Table DataGrid.",
      "readingTime": "2 min read",
      "content": "\nWe're starting a series of short `\"How to\"` articles that are very focused and show how to achieve a specific thing with the Infinite Table DataGrid.\n\nIn this article, we'll document how to customise the DataGrid loading state.\n\n## Customising the loading text\n\nFirst off, you can customise the text that is displayed when the DataGrid is loading data. By default, the DataGrid displays a `\"Loading\"` text, but you can customise it to anything you want (even JSX, not only string values).\n\n```tsx title=\"Customising the loading text\" {9}\nconst developers: Developer = [\n  { id: '1', firstName: 'Bob' },\n  { id: '2', firstName: 'Bill' },\n]\n\n// make sure to add \"loading\" to the DataSource so you see the loading state\n<DataSource<Developer> loading data={developers} primaryKey=\"id\">\n  <InfiniteTable<Developer>\n    loadingText={\n      <span>Loading your data ...</span>\n    }\n    columns={{\n      firstName: {\n        field: 'firstName',\n      },\n      id: {\n        field: 'id',\n      }\n    }}\n    {...props}\n  />\n</DataSource>\n```\n\n<Note>\nFor the value of <PropLink name=\"loadingText\" /> you can use JSX, not only strings.\n</Note>\n\n<CSEmbed id=\"infinite-table-datagrid-custom-loading-text-yzqlsj\" />\n\n## Customising the loading component - the `LoadMask`\n\nIn addition to the loading text, you can also customise the `LoadMask` component. This is the component that is displayed when the DataGrid is loading data. By default, it's a `<div />` with `width: 100%; height: 100%; zIndex: 1; display: flex` that contains the loading text.\n\nYou do this by overriding the <PropLink name=\"components.LoadMask\" /> prop in your Infinite Table configuration.\n\n```tsx title=\"Customising the LoadMask component\" {7,15}\n// make sure to add \"loading\" to the DataSource so you see the loading state\nexport default function App() {\n  return (\n    <DataSource<Developer> loading data={developers} primaryKey=\"id\">\n      <InfiniteTable<Developer>\n        components={{\n          LoadMask,\n        }}\n        columns={columns}\n      />\n    </DataSource>\n  );\n}\n\nfunction LoadMask() {\n  return (\n    <div\n      style={{\n        width: '100%',\n        height: '100%',\n        zIndex: 100,\n        background: 'tomato',\n        opacity: 0.3,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <div\n        style={{\n          padding: 20,\n          background: 'white',\n          color: 'black',\n          borderRadius: 5,\n        }}\n      >\n        Loading App ...\n      </div>\n    </div>\n  );\n}\n```\n\n<CSEmbed id=\"infinite-table-datagrid-custom-loading-text-forked-vpqps3\" />\n"
    },
    {
      "filePath": "/blog/2024/03/06/setting-up-master-detail-datagrid",
      "routePath": "/blog/2024/03/06/setting-up-master-detail-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/03/06/setting-up-master-detail-datagrid.page.md",
      "fileName": "setting-up-master-detail-datagrid.page.md",
      "folderPath": "/blog/2024/03/06/",
      "frontmatter": {
        "title": "Setting up a master-detail DataGrid with Infinite Table for React",
        "author": "admin",
        "hide_in_homepage": true,
        "date": "2024-03-06T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "We recently [announced the release of master-detail in the Infinite React DataGrid](/blog/2024/02/26/master-detail-now-available-in-react-datagrid), so we also made a video tutorial to follow along, if video is your preferred learning method.",
      "readingTime": "1 min read",
      "content": "\nWe recently [announced the release of master-detail in the Infinite React DataGrid](/blog/2024/02/26/master-detail-now-available-in-react-datagrid), so we also made a video tutorial to follow along, if video is your preferred learning method.\n\nThis shows the very basics of configuring the Infinite React DataGrid with master-detail, and it's a great starting point for more advanced configurations.\n\n<YTEmbed code=\"5-T2tSEM96I\" />\n\nYou can find the full source code for the tutorial in the code sandbox below.\n\nThis example is two levels deep, but the Infinite React DataGrid supports any number of levels of master-detail.\n\n<CSEmbed id=\"elegant-feynman-y3hfcx\"/>\n"
    },
    {
      "filePath": "/blog/2024/03/08/how-to-select-cells-and-use-cell-selection",
      "routePath": "/blog/2024/03/08/how-to-select-cells-and-use-cell-selection",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/03/08/how-to-select-cells-and-use-cell-selection.page.md",
      "fileName": "how-to-select-cells-and-use-cell-selection.page.md",
      "folderPath": "/blog/2024/03/08/",
      "frontmatter": {
        "title": "How to use multiple cell selection in the DataGrid",
        "author": "admin",
        "date": "2024-03-08T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "The article will cover some popular cell-selection scenarios in Infinite React DataGrid.",
      "readingTime": "3 min read",
      "content": "\nThe article will cover some popular cell-selection scenarios in Infinite React DataGrid.\n\n## Multiple cell selection\n\nBy far, the most common use-case for cell selection is multiple cell selection.\nFor this, you need to configure the <DPropLink name=\"selectionMode\" /> prop on the `<DataSource />` component to use `\"multi-cell\"`.\n\n<Note>\n\nIn addition, if you want to specify a default value for cell selection, you can use the <DPropLink name=\"defaultCellSelection\" /> prop - or the controlled alternative <DPropLink name=\"cellSelection\" />, in which case also make sure you update the value when <DPropLink name=\"onCellSelectionChange\" /> is called.\n\n</Note>\n\n```tsx\n<DataSource selectionMode=\"multi-cell\" />\n```\n\n<CSEmbed code={20} id=\"little-wood-55dysw\" />\n\nWhen multiple cell selection is configured in the React DataGrid, the user can select cells by `CMD`/`CTRL` clicking to add a single cell to the selection or by `SHIFT` clicking to select a range of cells.\n\n## Showing a chart based on selected cells\n\nLet's implement a common use-case for multiple cell selection - showing charts based on the selected cells, for example, a bar chart, with names on the x axis and ages on the y axis.\n\n<CSEmbed code={20} id=\"funny-silence-2v9r2t\" />\n\nIn this example, to retrieve the values from the selected cells, we used the <CellApiLink name=\"mapCellSelectionPositions\" /> from the [cell selection API](/docs/reference/cell-selection-api).\n\n## Cell selection format\n\nThe <DPropLink name=\"cellSelection\" /> prop is an object with the following shape:\n\n- `defaultSelection` - `boolean` - whether or not cells are selected by default.\n- either:\n  - `selectedCells`: `[rowId, colId][]` - an array of cells that should be selected (this is combined with `defaultSelection: false`)\n- or\n  - `deselectedCells`: `[rowId, colId][]` - an array of cells that should be deselected (this is combined with `defaultSelection: true`)\n\n<Note>\n\nWhen `defaultSelection` is `true`, you will only need to specify the `deselectedCells` prop.\n\nAnd when `defaultSelection` is `false`, you will only need to specify the `selectedCells` prop.\n\n</Note>\n\nIn this way, you can either specify which cells should be selected or which cells should be deselected - and have a default that matches the most common case.\n\n<Note>\n\nThe `selectedCells`/`deselectedCells` are arrays of `[rowId, colId]` tuples. The `rowId` is the `id` of the row (<DPropLink name=\"primaryKey\" code={20}>the primary key</DPropLink>), and the `colId` is the `id` of the column (the identifier of the column in the <PropLink name=\"columns\" /> prop).\n\n</Note>\n\n## Using include-lists and exclude-lists for specifying cell selection\n\nAs already demonstrated in the previous snippet, you can pass a <DPropLink name=\"defaultCellSelection\" code={20}>default value for cell selection</DPropLink>.\n\nIn addition to listing or excluding specific cells from selection, you can use wildcards:\n\n```tsx title=\"Include-list: selecting all cells in a column\"\nconst defaultCellSelection = {\n  defaultSelection: false, // all cells are deselected by default\n  selectedCells: [\n    // all cells in the stack column\n    ['*', 'stack'],\n    // also this specific cell\n    ['row2', 'firstName'],\n  ],\n};\n```\n\n```tsx title=\"Include-list: selecting all cells in a row\"\nconst defaultCellSelection = {\n  defaultSelection: false, // all cells are deselected by default\n  selectedCells: [\n    // all cells in the row\n    ['row1', '*'],\n    // also this specific cell\n    ['row2', 'firstName'],\n  ],\n};\n```\n\n```tsx title=\"Exclude-list: selecting everything except a column\"\nconst defaultCellSelection = {\n  defaultSelection: true, // all cells are selected by default\n  deselectedCells: [['*', 'stack']],\n};\n```\n\n<CSEmbed code={20} id=\"throbbing-platform-s9jtd4\" title=\"Using wildcard selection to select whole cell or row\"/>\n\n## Single cell selection\n\nSingle cell selection is not common - what you probably want to use in this case is the <PropLink name=\"activeCellIndex\" /> prop to emulate single cell selection - but that's basically cell navigation.\n"
    },
    {
      "filePath": "/blog/2024/04/18/the-best-testing-setup-for-frontends-playwright-nextjs",
      "routePath": "/blog/2024/04/18/the-best-testing-setup-for-frontends-playwright-nextjs",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/04/18/the-best-testing-setup-for-frontends-playwright-nextjs.page.md",
      "fileName": "the-best-testing-setup-for-frontends-playwright-nextjs.page.md",
      "folderPath": "/blog/2024/04/18/",
      "frontmatter": {
        "title": "The best testing setup for frontends, with Playwright and NextJS",
        "author": "admin",
        "date": "2024-04-18T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "We want to share with you the best testing setup we've experienced - and this includes using [Playwright](https://playwright.dev/) and [NextJS](https://nextjs.org/). It's a setup we've come up with for Infinite React DataGrid, which is a complex component, with lots of things to test, but this configuration has helped us ship with more confidence and speed.",
      "readingTime": "13 min read",
      "content": "\nWe want to share with you the best testing setup we've experienced - and this includes using [Playwright](https://playwright.dev/) and [NextJS](https://nextjs.org/). It's a setup we've come up with for Infinite React DataGrid, which is a complex component, with lots of things to test, but this configuration has helped us ship with more confidence and speed.\n\n## What you should expect from a testing setup\n\n### Fast feedback \n\n‚ö°Ô∏è Quick ‚ö°Ô∏è feedback is a no-brainer, since without a fast turnaround, devs will not have the patience to run the tests and will move on to the next \"burning\" issue or to the next cup of coffee.\n\nAlso, you can't run all the test suite at once, so you need to be able to run only the tests that are relevant to the changes you've made. This has long been available in unit-testing frameworks, but it's not so common in end-to-end testing, when loading a webpage and rendering an actual component is involved.\n\nIn this article we want to show you how we achieved fast feedback that allows rapid developer iterations.\n\n### Stability and predictability\n\nYou don't need flaky tests that fail randomly - it's the last thing you want when doing a release, or even during development.\nWaiting for an element to appear on page or an animation to finish or an interaction to complete is a common source of flakiness in end-to-end tests, but Playwright gives you the tools to address these issues - thank you [Playwright locators](https://playwright.dev/docs/locators) üôè and other playwright testing framework features.\n\n### Ease of maintenance and debugging\n\nAnother crucial point when you setup a testing framework and start writing tests is how easy is to write a new test, to inspect what is being tested and to reproduce failing tests. All these should be as easy as opening loading a URL in a browser - this is exactly what this setup gives you, with NextJS and Playwright playing very well together.\nWhen one of your tests fails, Playwright outputs a command you can run to reproduce the exact failure and actually see the UI at the moment of the failure, with the ability to navigate through the test timeline and see what happened before the failure.\n\n## Setting up NextJS and Playwright\n\n### Step 1 - creating the NextJS app\n```sh\n$ npx create-next-app@latest\n```\n\nYou're being asked a few questions. For `Would you like to use src/ directory?` we chose `Yes`. Also, we're using TypeScript.\n\nWhen you run this command, make sure for this question `Would you like to use App Router?` you reply `No`, as you want to use file-system routing to make it very easy and intuitive to add new pages and tests.\n\n<Note>\nCheck out our repo for this stage of the setup - [Step 1 - setting up NextJS](https://github.com/infinite-table/testing-setup-nextjs-playwright/tree/01-setup-nextjs).\n</Note>\n\n<Note>\n\nBefore you go to the next step, you can configure your `next.config.mjs` to use the `.page` extension for your pages.\n\n```js\nconst nextConfig = {\n  reactStrictMode: true,\n  pageExtensions: [\"page.tsx\", \"page.ts\", \"page.js\"],\n};\nexport default nextConfig\n```\n\nThis is useful so NextJS will only compile those files as pages that your tests will be targeting, and not all the files in the `pages` folder, which will also contain your tests.\n\nSo you know all your `.page` files are pages that your tests will be run against and all your `.spec` files are tests (see next step).\n\n</Note>\n\n### Step 2 - setting up Playwright\n\n```sh\n$ npm init playwright@latest\n```\n\nAgain a few questions about your setup.\n\n`Where to put your end-to-end tests?` - choose `src/pages` - which makes your NextJS pages folder the place where you put your end-to-end tests.\n\nThis script installs `@playwright/test` and creates a `playwright.config.ts` file with the default configuration. Most importantly, the `testDir` is configured to `./src/pages`.\n\nBy default, all `.spec` files in the `testDir` (which is set to `src/pages`) will be run as tests.\n\n<Note>\nCheck out our repo for this stage of the setup - [Step 2 - setting up Playwright](https://github.com/infinite-table/testing-setup-nextjs-playwright/tree/02-setup-playwright).\n</Note>\n\nThere are some additional configurations you might want to do in this step.\nYou probably want to change the default `reporter` from `'html'` to `'list'` in your `playwright.config.ts` - the `'html'` reporter will open a browser window with the test results, which you might not prefer. You'd rather see the results in the terminal.\n\n ```ts {3} title=\"Configure the reporter in playwright.config.ts\"\nexport default defineConfig({\n  testDir: \"./src/pages\",\n  reporter: \"list\", // the 'html' reporter will open a browser window with the test results\n  // ...\n})\n ```\n\n<Note>\n\nFor now, you might want to only run your tests in one browser, so comment out any additional entries in the `projects` array in your `playwright.config.ts` file - that controls the devices that will be used in your tests.\n\n</Note>\n\nThe last piece of the puzzle before running your first test with Playwright is defining the `test` script in your `package.json`.\n\n```json {4} title=\"package.json\"\n{\n  \"name\": \"testing-setup-nextjs-playwright\",\n  \"scripts\": {\n    \"test\": \"npx playwright test\",\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n  },\n}\n```\n\nExecuting the `npm run test` command will run the tests in the `src/pages` folder - for now, you should have a single file, `example.spec.ts`, which was generated by the `npm init playwright` command.\n\n![Playwright test output](/blog-images/step-2-initial-results.png)\n\nYour initial test file was something very basic. This file is importing the `test` (and `expect`) function from `@playwright/test` - and this is what you're using to define tests (and write assertions).\n\n```ts {1} title=\"example.spec.ts\"\nimport { test, expect } from \"@playwright/test\";\n\ntest(\"has title\", async ({ page }) => {\n  await page.goto(\"https://playwright.dev/\");\n\n  // Expect a title \"to contain\" a substring.\n  await expect(page).toHaveTitle(/Playwright/);\n});\n```\n\n### Step 3 - configuring the naming convention in Playwright to open the right pages\n\nThis step is probably the most important one in your configuration. Normally your tests will open webpages before you start testing - but this is not something you want to do explicitly in your project. Rather, you want your tests to automatically navigate to the corresponding page for the test. This is what this step is achieving - and we're using [Playwright fixtures](https://playwright.dev/docs/test-fixtures) to do this.\n\nThink of a fixture as some code that's configuring the testing environment for each of your tests.\nA fixture will extend the `test` function from `@playwright/test` with additional functionalities. Mainly, we want before every test to open the correct page, without writing this explicitly in every test. Based on the location of the test file in the file system, we want to navigate to a webpage for it and we assume it will have the same path as the test file. This is possible because NextJS is configured to use file-system routing.\n\n```ts {1,3-5} title=\"Defining the fixture file - test-fixtures.ts\"\nimport {\n  test as base,\n  expect,\n  PlaywrightTestArgs,\n  PlaywrightTestOptions,\n  Page,\n} from \"@playwright/test\";\n\nexport * from \"@playwright/test\";\n\nexport const test = base.extend<\n  PlaywrightTestArgs &\n    PlaywrightTestOptions\n>({\n  //@ts-ignore\n  page: async ({ baseURL, page }, use, testInfo) => {\n    const testFilePath = testInfo.titlePath[0];\n    const fileName = testFilePath.replace(\".spec.ts\", \"\");\n    const url = `${baseURL}${fileName}`;\n\n    // navigate to the corresponding page for this test\n    await page.goto(url);\n\n    await use(page);\n  },\n});\n```\n\nWe'll give this fixture file the name `test-fixtures.ts` and put it in the root of the project.\n\nNow instead of importing the `test` function from `@playwright/test` we want to import it from the `test-fixtures.ts` file - we'll do this in all our tests. To make this easier, let's also define a path alias in the `tsconfig.json` file.\n\n```json {4} title=\"tsconfig.json\"\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@playwright/test\": [\"test-fixtures.ts\"],\n    }\n  }\n}\n```\n\nWe're ready to write our first test page in NextJS and use the new fixture in the Playwright test.\n\n```tsx title=\"src/pages/example.page.tsx\"\nexport default function App() {\n  return <div>Hello world</div>;\n}\n```\n\n```ts {1} title=\"src/pages/example.spec.ts\"\nimport { test, expect } from \"@testing\"; // notice the import\n\ntest(\"Main example has corrent content\", async ({ page }) => {\n  // notice we don't need to navigate to the page, this is done by the fixture\n  await expect(await page.innerText(\"body\")).toContain(\"Hello world\");\n});\n```\n\nFor our tests against the NextJS app, we obviously need to start the app.\n\nLet's configure a custom port of `5432` in the package.json `dev` script.\n```json {3} title=\"package.json\"\n{\n  \"scripts\": {\n    \"dev\": \"next dev --port 5432\",\n    \"test\": \"npx playwright test\"\n  }\n  //...\n}\n```\nWe need to use the same port in the Playwright configuration file.\nAlso we'll use a smaller test `timeout` (the default is 30s).\n\n```ts {9,11} title=\"playwright.config.ts\"\nimport { defineConfig } from \"@playwright/test\";\n/**\n * See https://playwright.dev/docs/test-configuration.\n */\nexport default defineConfig({\n  testDir: \"./src/pages\",\n  reporter: \"list\",\n  use: {\n    baseURL: \"http://localhost:5432/\",\n  },\n  timeout: process.env.CI ? 10000 : 4000,\n  // ... more options\n});\n\n```\n\nWe're now ready to roll!\n\n`npm run dev` will run NextJS and `npm run test` will run the tests against your NextJS app.\n\n<Note>\n\nTo make the setup easier, avoid using `index.page.tsx` pages in NextJS - give your pages another name, to avoid issues with directory index pages in tests. This can easily be solved in the test fixture, but for the sake of clarity and brevity we're not doing it now.\n\n</Note>\n\n\n<Note>\n\nCheck out our repo for this stage of the setup - [Step 3 - configuring the Playwright fixture and naming convention](https://github.com/infinite-table/testing-setup-nextjs-playwright/tree/03-configure-naming-convention).\n\n</Note>\n\n### Step 4 - adding watch mode\n\nAs we mentioned initially, no testing setup is great unless it gives you very fast feedback. For this, we obviously need watch mode.\n\nWe want to be able to re-run tests when our test code has changed, but even better, when our NextJS page has changed - so the page the test is running against.\nNextJS has watch mode built-in in dev mode, so whenever a page is changed, it's recompiled and the browser is served the updated page. We'll use this in our advantage, so tests will always see the latest version of the page.\nThis means the last piece of the puzzle is to make Playwright re-run the tests when the page has changed or the test itself has changed.\n\nFor this, we'll use [`chokidar`](https://www.npmjs.com/package/chokidar)  - more specifically the [`chokidar-cli`](https://www.npmjs.com/package/chokidar-cli) package. `chokidar` is probably the most useful file watching library for the nodejs ecosystem and it will serve us well.\n\n```json {4} title=\"package.json\"\n{\n  \"scripts\": {\n    \"test\": \"npx playwright test\",\n    \"test:watch\": \"chokidar '**/*.spec.ts' '**/*.page.tsx' -c 'test_file_path=$(echo {path} | sed s/page.tsx/spec.ts/) && npm run test -- --retries=0 ${test_file_path}'\"\n  }\n}\n```\n\nThe `test:watch` script is watching for changes in `.spec.ts` files and `.page.tsx` files and whenever there's a change in one of those files, it's re-running the respective test. (When a change was found in a `.page.tsx` file, we're using `sed` to replace the `.page.tsx` extension with `.spec.ts`, because we want to pass the test file to the `npm run test` command so it knows what test to re-run.)\n\n<Note>\n\nThe above `test:watch` script was written for MacOS (and Unix-like systems). If you're using Windows, you might need to adjust the command to achieve the same result.\n\n</Note>\n\n<Note>\n\nDon't forget to run `npm run dev` before running `npm run test` or `npm run test:watch` - you need the NextJS app running to be able to run the tests. After all, that's what you're testing üòÖ.\n\n</Note>\n\n### Step 5 - running tests on production build\n\nIn the last step, we want to build a production build of the NextJS app and run the tests against it. \n\nSo first let's configure the `next.config.mjs` file to build a static site when `npm run build` is run.\n\n```js {3} title=\"next.config.mjs - configured to export a static site\"\nconst nextConfig = {\n  reactStrictMode: true,\n  output: \"export\",\n  pageExtensions: [\"page.tsx\", \"page.ts\", \"page.js\"],\n};\n\nexport default nextConfig;\n```\nNotice the `\"output\": \"export\"` property. Having configured this, the `npm run build` will create an `/out` folder with the compiled assets and pages of the app.\n\nNext we need an NPM script to serve the compiled app with a static server.\n\n```json {3,4} title=\"package.json - serve script\"\n{\n  \"scripts\": {\n    \"serve\": \"npx http-server --port 5432 out\",\n    \"//...\": \"// other scripts\"\n  },\n}\n```\n\nWe could either run this `serve` script ourselves to start the webserver before running our tests or even better, we can instruct Playwright to [use this webserver automatically](https://playwright.dev/docs/test-webserver#configuring-a-web-server). So let's do that in our `playwright.config.ts` file.\n\n```ts {3,5} title=\"playwright.config.ts - configured to use a custom server\"\nexport default defineConfig({\n  //... other options\n\n  // on CI, run the static server to serve the built app\n  webServer: process.env.CI\n    ? {\n        command: \"npm run serve\",\n        url: \"http://localhost:5432\",\n        reuseExistingServer: true,\n        timeout: 120 * 1000,\n      }\n    : undefined,\n})\n```\n\n<Note>\n\nIn order for Playwright to correctly detect the webserver is running ok, we need to make sure we have a valid index page at that address, so we need to add a `index.page.tsx` file in the `pages` folder.\n\n```tsx title=\"src/pages/index.page.tsx\"\nexport default function App() {\n  return <div>Index page</div>;\n}\n```\n\nThis is just useful in the CI environment so that Playwright can detect the server is running and the app is served correctly.\n\n</Note>\n\nNext, in order to run our tests as if we're in the CI environment, let's add a `test:ci` script, which is basically calling the `test` script but setting the `CI` environment variable to `true`.\n\n```json {3,4} title=\"package.json - test:ci script\"\n{\n  \"scripts\": {\n    \"test:ci\": \"CI=true npm run test\",\n    \"test\": \"npx playwright test\",\n    \"serve\": \"npx http-server --port 5432 out\",\n    \"//...\": \"// other scripts\"\n  },\n}\n```\n\n\nWe're now ready to run our tests against the production build of the NextJS app.\n\n```sh\nnpm run build && npm run test:ci\n```\n\n\nThis script first builds the NextJS static app and then runs the tests against it.\n\n## Configuring CI github actions \n\nWe're now ready to integrate our [testing workflow into CI via Github actions](https://playwright.dev/docs/ci-intro).\n\nCreate a YAML file `.github/workflows/test.yml` in the root of your project with the following content.\n\n```yaml {19,23} title=\".github/workflows/test.yml\"\nname: Playwright Tests\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: lts/*\n      - name: Install dependencies\n        run: npm ci\n      - name: Build app\n        run: npm run build\n      - name: Install Playwright Browsers\n        run: npx playwright install --with-deps\n      - name: Run Playwright tests\n        run: npm run test\n      - uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: playwright-report\n          path: playwright-report/\n          retention-days: 30\n```\n\nWith this, you're ready to go! Push your changes to the main branch and see your tests running and passing in the CI environment. Go green! üü¢\n\n## Demo repository\n\nYou can find the full setup in our [testing-setup-nextjs-playwright repo](https://github.com/infinite-table/testing-setup-nextjs-playwright/tree/main?tab=readme-ov-file). Check it out and give it a star if you find it useful.\n\n## Profit üöÄ\n\nWith this setup, you have a very convenient way to write your tests against real pages, loaded in a real browser, just like the end user experiences. And with the watch mode giving you instant feedback, you no longer have an excuse to not write tests.\n\nThis is the same setup we've been using for developing and testing the [Infinite Table React DataGrid](https://infinite-table.com) and it has been serving us really well.\n\nDataGrids are some of the most complex UI components one can build, so having a reliable tool that allowed us to iterate very quickly was crucial to us. This helped us add new features, while being confident that all of the existing core functionalities like row/column grouping, filtering, sorting, pagination, pivoting still work as expected.\n\nThe setup was a pivotal point in our development process and it's what gives us and our enterprise customers the peace of mind that the product is stable and reliable, both now and in the future.\n\n\n"
    },
    {
      "filePath": "/blog/2024/04/22/the-best-testing-strategies-for-frontends",
      "routePath": "/blog/2024/04/22/the-best-testing-strategies-for-frontends",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/04/22/the-best-testing-strategies-for-frontends.page.md",
      "fileName": "the-best-testing-strategies-for-frontends.page.md",
      "folderPath": "/blog/2024/04/22/",
      "frontmatter": {
        "title": "The best testing strategies for frontends",
        "author": "admin",
        "date": "2024-04-22T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "In our previous article, we focused on documenting [the best testing setup for frontends](https://infinite-table/blog/2024/04/18/the-best-testing-setup-for-frontends-playwright-nextjs), which used Playwright and Next.js. You can check out the repository [here](https://github.com/infinite-table/testing-setup-nextjs-playwright) where you can find the full setup.",
      "readingTime": "5 min read",
      "content": "\nIn our previous article, we focused on documenting [the best testing setup for frontends](https://infinite-table/blog/2024/04/18/the-best-testing-setup-for-frontends-playwright-nextjs), which used Playwright and Next.js. You can check out the repository [here](https://github.com/infinite-table/testing-setup-nextjs-playwright) where you can find the full setup.\n\nWe consider the combination described above, Playwright + NextJS being the best combo around for testing frontends. Ok, you can switch out NextJS with other meta-framework that offers file-system routing, but the idea is the same: every test is made of 2 sibling files, with the same name but different extension.\n\nIn the test files, Playwright is configured to navigate automatically to the page being tested, so no need for adjustments if you move files around. This saves you a lot of time and hustle and makes your tests more robust and focused.\n\nBut in addition to end-to-end testing with Playwright and NextJS, there are other forms of testing out there which are available and can be used to complement your testing strategy. In this article, we'll focus on what we think are the best testing strategies for frontends. So here are a few options:\n\n - E2E testing\n - Component testing \n - Visual regression testing\n - Unit testing\n\nFor each of those options there are plenty of tools you can use, each with its own pros and cons.\n\n## E2E testing\n\nWith the advent of tools like [Puppeteer](https://pptr.dev/) and now [Playwright](https://playwright.dev/), end-to-end testing has become much easier and more reliable. For anyone who's used Selenium in the past, you know what I'm talking about. \nPuppeteer has opened the way in terms of E2E tooling, but Playwright has taken it to the next level and made it easier to await for certain selectors or conditions to be fulfilled (via [locators](https://playwright.dev/docs/locators)), thus making tests more reliable and less flaky.\nAlso, it's a game changer that it introduced a test-runner - this made the integration between the headless browser and the actual test code much smoother.\n\n### Reasons to use E2E\n\nEnd to end testing is actually a real browser, so the closest possible environment to what your app will be using.\n\nNo need to fake the page with JSDOM, no need to only do shallow rendering in React. Just use the platform!\n\n## Component testing\n\nProbably [Enzyme](https://enzymejs.github.io/enzyme/) was the first to popularize component testing in React by doing shallow rendering and expecting some things to be there in the React component tree. Then [React Testing library](https://testing-library.com/) came and took component testing to a whole new level.\n\nThe tools are great for what they're doing, but with the advent of better tooling, we should move on to better ways of testing. With the tools we have now in 2024, there's no more need to use JSDOM and simulate a browser enviroment. It used to be very cumbersome to start a headless browser back in the day, but now with Playwright/Puppeteer, it's a breeze.\n\n## Visual regression testing\n\nAlso in the days before Playwright was around, there was much hype about visual regression testing. It was very very tempting to use it - who wouldn't want to have a tool that automatically checks if the UI has (mistakenly) changed? It might fit a few use-cases, but in general, it's not worth the effort of maintaining all those tests for any little change in the UI. True, you can set thresholds for the differences, but it's still a lot of work to maintain it, especially in highly dynamic frontends and teams.\n\nWith better CSS approaches like [TailwindCSS](https://tailwindcss.com/) and [Vanilla Extract](https://vanilla-extract.style/) (which we're heavily using) it's much easier to maintain the UI and make sure it doesn't change unexpectedly. No more conflicting CSS classes, much less CSS specificity issues and much less CSS code in general.\n\nOne of the troubles in large and tangled CSS codebases is that it's write-only. Well, not write-only per se, but teams are generally afraid to remove a line of CSS cause it might break someone else's code or it might still be used.\n\nWith [Vanilla Extract](https://vanilla-extract.style/) you can be sure that if you remove a CSS class, it's not used anywhere else in the codebase. It's been a game changer in terms of CSS maintainability and productivity for us at [Infinite Table](https://infinite-table.com/).\n\nSo with all those tools to make styling easier, the need for visual regression testing has dropped significantly.\n\n\n## Unit testing\n\nUnit testing will be here to stay - at least if besides your UI, your app has some significant business logic. We're using it in combination with E2E testing to make sure complex use-cases work as expected.\n\nFor example, our [logic for row grouping](https://infinite-table.com/docs/learn/grouping-and-pivoting/grouping-rows) is fully tested with unit tests. We do have E2E tests for it, but with unit tests we can have full coverage of all the nitty-gritty details of the grouping logic. We do the same for pivoting and aggregating. Column sizing and column grouping are also covered with unit tests.\n\nWe think there's always going to be a place for unit testing to ensure robustness and reliability of the app under even the most complex use-cases and user inputs.\n\n## Conclusion\n\nIn our experience, the best testing strategy for modern frontends is a combination of E2E testing (using Playwright+NextJS), and unit testing. Visual regression testing is not worth the effort in our opinion, especially with the advent of better CSS tooling like TailwindCSS and [Vanilla Extract](https://vanilla-extract.style/).\n\nThough we used shallow component testing in the past, we're not going back to it - mocking the DOM and the browser is no longer worth it when you can use a real browser with Playwright.\n\nWe hope this article has been helpful in guiding you towards the best testing strategy for your frontend. If you have any questions or comments, feel free to reach out to us at [admin@infinite-table.com](mailto:admin@infinite-table.com). We're always happy to help! \n"
    },
    {
      "filePath": "/blog/2024/05/27/minimalist-theme-for-react-datagrid",
      "routePath": "/blog/2024/05/27/minimalist-theme-for-react-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/05/27/minimalist-theme-for-react-datagrid.page.md",
      "fileName": "minimalist-theme-for-react-datagrid.page.md",
      "folderPath": "/blog/2024/05/27/",
      "frontmatter": {
        "title": "A minimalist theme for your favorite React DataGrid",
        "author": "admin",
        "date": "2024-05-27T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "We implemented a minimalist theme for the Infinite React DataGrid - it's designed to be simple and clean, with a focus on readability and performance.",
      "readingTime": "2 min read",
      "content": "\nWe implemented a minimalist theme for the Infinite React DataGrid - it's designed to be simple and clean, with a focus on readability and performance.\n\nBuilding a second theme forced us think about dark/light mode support and how to make the theme more customizable.\n\n<CSEmbed id=\"react-datagrid-infinite-table-theme-switching-666xq7\" code={false} />\n\n<Note>\n\nRead more about the [available themes in our React DataGrid](/docs/learn/theming#available-themes).\n\n</Note>\n\n\n## Available themes\n\n### Default theme\n\nThe `default` theme is applied when you don't specify any explicit theme by default.\n\n### Minimalist theme\n\nThe `minimalist` theme is inspired from minimalistic designs and is a good choice if you want to keep the UI simple and clean.\n\n## Applying the theme\n\nA theme is applied by using the `\"infinite-theme-name--THEME_NAME\"` CSS className in any parent element of the `<InfiniteTable />` component (or even on the component element).\n\nYou will want to apply the theme name and theme mode classNames to the same element, so you'll end up with a className like `\"infinite-theme-name--minimalist infinite-theme-mode--dark\"`.\n\n```tsx title=\"Applying the minimalist theme with dark mode explicitly\"\n<body className=\"infinite-theme-mode--dark infinite-theme-name--minimalist\">\n  <DataSource {...dataSouceProps}>\n    <InfiniteTable {...props} />\n  </DataSource>\n</body>\n```\n\n\n\n## Using theme mode\n\nThere are two theme modes available in Infinite: `light` and `dark`. Unless otherwise explicitly configured, the theme mode is applied based on the user OS settings for the [preferred color scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme).\n\nHowever, the theme mode can be enforced, by having a parent element with a CSS className of `\"infinite-theme-mode--light\"` or `\"infinite-theme-mode--dark\"`\n\n```tsx title=\"Applying light mode via container className\"\n<div className=\"infinite-theme-mode--light\">\n  <DataSource {...dataSouceProps}>\n    <InfiniteTable {...props} />\n  </DataSource>\n</div>\n```\n\n```tsx title=\"Explicitly applying dark theme via container className\"\n<body className=\"infinite-theme-mode--dark\">\n  <div>\n    <DataSource {...dataSouceProps}>\n      <InfiniteTable {...props} />\n    </DataSource>\n  </div>\n</body>\n```"
    },
    {
      "filePath": "/blog/2024/10/10/new-themes-available",
      "routePath": "/blog/2024/10/10/new-themes-available",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/10/10/new-themes-available.page.md",
      "fileName": "new-themes-available.page.md",
      "folderPath": "/blog/2024/10/10/",
      "frontmatter": {
        "title": "New DataGrid themes available - ocean and balsam",
        "author": "admin",
        "date": "2024-10-10T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "With the release of `<InfiniteTable />` <b>v5.0.0</b> we've added two new themes: `ocean` and `balsam`.",
      "readingTime": "1 min read",
      "content": "\nWith the release of `<InfiniteTable />` <b>v5.0.0</b> we've added two new themes: `ocean` and `balsam`.\n\nNow you have a selection of themes to choose from: `default`, `minimalist`, `ocean` and `balsam`.\n\nTo apply a theme, you have to set the className `\"infinite-theme-name--THEME_NAME\"` to any parent element of the `<InfiniteTable />` component (or even on the component itself).\n\n<CSEmbed id=\"infinite-theme-demo-35f9l2?workspaceId=cf52b898-10a5-4d0b-833f-96a3a9220dc5\" code={false} size=\"lg\" />\n\n\n\n<HeroCards>\n<YouWillLearnCard title=\"Theming\" path=\"/docs/learn/theming\">\n\nLearn how to theme Infinite Table to match your brand\n\n\n</YouWillLearnCard>\n</HeroCards>"
    },
    {
      "filePath": "/blog/2024/10/15/how-do-i-flash-cells",
      "routePath": "/blog/2024/10/15/how-do-i-flash-cells",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/10/15/how-do-i-flash-cells.page.md",
      "fileName": "how-do-i-flash-cells.page.md",
      "folderPath": "/blog/2024/10/15/",
      "frontmatter": {
        "title": "Flashing column cells in Infinite Table",
        "author": "admin",
        "date": "2024-10-15T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "Flashing cells is an important feature that has been requested by some of our users - both [in public](https://github.com/infinite-table/infinite-react/issues/250) and private conversations.",
      "readingTime": "3 min read",
      "content": "\nFlashing cells is an important feature that has been requested by some of our users - both [in public](https://github.com/infinite-table/infinite-react/issues/250) and private conversations.\n\nIt's also a very useful addition for DataGrids users that work in the financial industry. Version `5.0.0` of `<InfiniteTable />` shipped flashing and in this blogpost we want to show how to use it.\n\n## Configuring a flashing column.\n\nIn order to configure a column to flash its cells when the data changes, you need to specify a custom `ColumnCell` component.\n\n```tsx {14}\n\nimport { FlashingColumnCell } from '@infinite-table/infinite-react';\n\nconst columns: InfiniteTablePropColumns<Developer> = {\n  id: {\n    field: 'id',\n  },\n  firstName: {\n    field: 'firstName',\n  },\n  salary: {\n    field: 'salary',\n    components: {\n      ColumnCell: FlashingColumnCell,\n    }\n  },\n};\n```\n\n`@infinite-table/infinite-react` exports a `FlashingColumnCell` React component that you can pass to the `components.ColumnCell` prop of any column you want to flash.\n\n\n<CSEmbed id=\"infinite-flashing-lnf83g\" code={false} />\n\n<Note>\n\nThe default flashing duration is `1000` milliseconds.\n\n</Note>\n\n## Customizing the flashing duration\n\nIf you want to customize the flashing duration, you need to pass a different `components.ColumnCell` to the column. You can very easily do this by calling `createFlashingColumnCellComponent` and passing the `flashDuration` option.\n\n```tsx\n\nimport { createFlashingColumnCellComponent } from '@infinite-table/infinite-react';\n\nconst FlashingColumnCell = createFlashingColumnCellComponent({\n  flashDuration: 500,\n  flashClassName: 'my-flash-class',\n});\n\nconst columns: InfiniteTablePropColumns<Developer> = {\n  salary: {\n    field: 'salary',\n    components: {\n      ColumnCell: FlashingColumnCell,\n    }\n  }\n}\n```\n\n<Note>\n\nWhen calling `createFlashingColumnCellComponent`, besides the `flashDuration` option, you can also pass a `flashClassName`, which is a CSS class name that will be applied to the flashing cell for the duration of the flash.\n\n</Note>\n\n## Customizing the flash colors\n\nIf you want to customize the flash colors, you have three CSS variables available: \n\n- `--infinite-flashing-background`: background color to be used when non-numeric cells flash.\n- `--infinite-flashing-up-background`: background color to use for flashing numeric cells, when the value goes up.\n- `--infinite-flashing-down-background`: background color to use for flashing numeric cells, when the value goes down.\n\nThe example below is configured to use the following colors:\n - flash up - yellow\n - flash down - magenta\n - flash non-numeric - blue\n\nAlso, the flashing duration is configured to take 2 seconds.\n\n<Note>\n\nBesides clicking the \"start updates\" button, you can also edit the salary value in any cell. When you confirm the edit, the salary value will flash.\n\n</Note>\n\n<CSEmbed title=\"Flashing takes 2s and has custom colors\" id=\"infinite-flashing-forked-fpjrsg?workspaceId=cf52b898-10a5-4d0b-833f-96a3a9220dc5\" code={false} />\n\n## Taking it further\n\nInfinite Table implements flashing by passing in a custom `ColumnCell` component. However, you're not limited to using our [default implementation](https://github.com/infinite-table/infinite-react/blob/master/source/src/components/InfiniteTable/components/InfiniteTableRow/FlashingColumnCell.tsx). You can very easily create your own component and apply your own custom logic.\n\nMaybe you want display both the new and the old values in the cell - this can be implemented quite easily. It's up to you to extend the cell rendering to suit your business requirements.\n\nThe current flashing implementation is flashing on any change in a cell, but you might be interested only in some of the changes. You can definitely use <PropLink name=\"onEditPersistSuccess\" /> to detect when a cell edit is persisted and then decide whether to flash the cell or not. The possibilities are very diverse.\n\nWe're keen to see what you build!\n\n\n\n"
    },
    {
      "filePath": "/blog/2024/10/16/shadcn-ui-theme-available",
      "routePath": "/blog/2024/10/16/shadcn-ui-theme-available",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/10/16/shadcn-ui-theme-available.page.md",
      "fileName": "shadcn-ui-theme-available.page.md",
      "folderPath": "/blog/2024/10/16/",
      "frontmatter": {
        "title": "shadcn/ui theme available for the InfiniteTable React DataGrid",
        "author": "admin",
        "date": "2024-10-16T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "We've all come to know and love ‚ù§Ô∏è [shadcn/ui](https://ui.shadcn.com/). It comes with a consistent look and feel for all the components in the UI kit, and it's built on top of Tailwind, so people feel at home using it. As React developers, we're thankful for all the hard work happening in the React ecosystem, and we're happy to see more and more UI libraries focusing on providing great developer experience.",
      "readingTime": "2 min read",
      "content": "\nWe've all come to know and love ‚ù§Ô∏è [shadcn/ui](https://ui.shadcn.com/). It comes with a consistent look and feel for all the components in the UI kit, and it's built on top of Tailwind, so people feel at home using it. As React developers, we're thankful for all the hard work happening in the React ecosystem, and we're happy to see more and more UI libraries focusing on providing great developer experience.\n\nAfter recently building [a few other themes](/blog/2024/10/10/new-themes-available), we knew we had to build a shadcn/ui theme for `<InfiniteTable />`.\n\nSo we built one! It's simply called `shadcn`. For it to work, you'll need to make sure the shadcn/ui CSS variables are available, as the `<InfiniteTable />` theme variables will rely on the values of those CSS variables. Other than that, simply import the `<InfiniteTable />` CSS file and you're good to go.\n\n```tsx\nimport '@infinite-table/infinite-react/index.css';\n\n<div className=\"infinite-theme-name--shadcn dark\">\n  <DataSource  {...}>\n    <InfiniteTable {...} />\n  </DataSource>\n</div>\n```\n\nYou'll have to include the `infinite-theme-name--shadcn` class name on a parent element of `<InfiniteTable />` (or even on the `<InfiniteTable />` component itself). Additionally, for dark mode, you'll have to use the `dark` class name (on the body element for example) to put the shadcn/ui CSS variables in dark mode, and then `<InfiniteTable />` will pick that up. This means that for this theme, using the `infinite-theme-mode--dark` class name is optional.\n\n\n<CSEmbed id=\"lucid-water-fmj7zx\" code={false} size=\"lg\" />\n\n\nEnjoy!"
    },
    {
      "filePath": "/blog/2025/03/20/async-context-menus",
      "routePath": "/blog/2025/03/20/async-context-menus",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2025/03/20/async-context-menus.page.md",
      "fileName": "async-context-menus.page.md",
      "folderPath": "/blog/2025/03/20/",
      "frontmatter": {
        "title": "Async Context Menus",
        "description": "Learn how to use async context menus in Infinite Table.",
        "date": "2025-03-20T00:00:00.000Z"
      },
      "excerpt": "Infinite Table 6.1.0 introduces support for lazy loading context menus. This is useful when you need to load your context menu items conditionally, from the backend, based on the cell's value or other conditions.",
      "readingTime": "1 min read",
      "content": "\nInfinite Table 6.1.0 introduces support for lazy loading context menus. This is useful when you need to load your context menu items conditionally, from the backend, based on the cell's value or other conditions.\n\n## How it works\n\nStarting with version `6.1.0`, the <PropLink name=\"getCellContextMenuItems\" /> and <PropLink name=\"getContextMenuItems\" /> props can now return a `Promise` that resolves to an array of `MenuItem` objects (or an object with `items` and `columns` properties, if you need to also configure the columns).\n\n<CSEmbed title=\"Async Context Menus\" id=\"nostalgic-borg-qg8q7r\" code={false}>\n\n<Description>\nRight click any cell in the DataGrid - the context menu will be displayed with a delay of `400ms`.\n</Description>\n\n</CSEmbed>\n\n<Note>\n\nThe <PropLink name=\"getCellContextMenuItems\" /> is called with an object that gives you access to all the info regarding the current right-clicked cell - both the row information and the current column. You can use that to decide whether you want to return a menu immediately or to fetch some data from the server and display the context menu after the server response comes in.\n\n</Note>"
    },
    {
      "filePath": "/blog/2024/06/05/master-detail-datagrid-with-charts",
      "routePath": "/blog/2024/06/05/master-detail-datagrid-with-charts",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/06/05/master-detail-datagrid-with-charts.page.md",
      "fileName": "master-detail-datagrid-with-charts.page.md",
      "folderPath": "/blog/2024/06/05/",
      "frontmatter": {
        "title": "Master Detail React DataGrid with Charts",
        "author": "admin",
        "date": "2024-06-05T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "In this demo, we show you how easy it is to leverage the master-detail support in our React DataGrid in order to toggle between a table and a chart view in the row detail.",
      "readingTime": "3 min read",
      "content": "In this demo, we show you how easy it is to leverage the master-detail support in our React DataGrid in order to toggle between a table and a chart view in the row detail.\n\n\n<CSEmbed id=\"master-detail-with-charts-gg7h4f\" code={false} size=\"lg\" title=\"It's very easy to change between an InfiniteTable or a chart in the row detail\"/>\n\nIn the <PropLink name=\"components.RowDetail\" code={false}>RowDetail</PropLink> component, we render a `<DataSource />`, which in turn will render either an `<InfiniteTable />` component or a chart.\n\nThe `<DataSource />` in InfiniteTable is very powerful and does all the data processing the grid needs. All the row grouping, sorting, filtering, aggregations, pivoting are done in the `<DataSource />` - so you can use it standalone, or with InfiniteTable - it's totally up to you.\n\nIn practice, this means that you can use the `<DataSource />` to process your data and then simply pass that to a charting library like `ag-charts-react`.\n\n```tsx\nconst detailGroupBy: DataSourcePropGroupBy<Developer> = [{ field: \"stack\" }];\nconst detailAggregationReducers: DataSourcePropAggregationReducers<Developer> =\n  {\n    salary: {\n      field: \"salary\",\n      initialValue: 0,\n      reducer: (acc, value) => acc + value,\n      done: (value, arr) => Math.round(arr.length ? value / arr.length : 0),\n    },\n  };\n\nfunction RowDetail() {\n  const rowInfo = useMasterRowInfo<City>()!;\n  const [showChart, setShowChart] = React.useState(rowInfo.id % 2 == 1);\n\n  return (\n    <div style={{...}}>\n      <button onClick={() => setShowChart((showChart) => !showChart)}>\n        Click to see {showChart ? \"grid\" : \"chart\"}\n      </button>\n\n      {/**\n       * In this example, we leverage the DataSource aggregation and grouping feature to\n       * calculate the average salary by stack for the selected city.\n       */}\n      <DataSource<Developer>\n        data={detailDataSource}\n        primaryKey=\"id\"\n        groupBy={detailGroupBy}\n        aggregationReducers={detailAggregationReducers}\n      >\n        {/**\n         * Notice here we're not rendering an InfiniteTable component\n         * but rather we use a render function to access the aggregated data.\n         */}\n        {(params) => {\n          // here we decide if we need to show the chart or the grid\n          if (!showChart) {\n            return (\n              <InfiniteTable\n                columns={detailColumns}\n                domProps={{\n                  style: { paddingTop: 30 },\n                }}\n              />\n            );\n          }\n\n          // the dataArray has all the aggregations and groupings done for us, \n          // so we need to retrieve the correct rows and pass it to the charting library\n          const groups = params.dataArray.filter((rowInfo) => rowInfo.isGroupRow);\n          const groupData = groups.map((group) => ({ stack: group.data?.stack, avgSalary: group.reducerData?.salary }));\n\n          return (\n            <AgChartsReact\n              options={{\n                autoSize: true,\n                title: {\n                  text: `Avg salary by stack in ${rowInfo.data?.name}, ${rowInfo.data?.country}`,\n                },\n                data: groupData,\n                series: [\n                  {\n                    type: \"bar\",\n                    xKey: \"stack\",\n                    yKey: \"avgSalary\",\n                    yName: \"Average Salary\",\n                  },\n                ],\n              }}\n            />\n          );\n        }}\n      </DataSource>\n    </div>\n  );\n}\n```\n\nThe demo above is using the `ag-charts-react` package to render the charts.\n\n<Note>\n\nRead more about the [rendering custom content in a master-detail setup](/docs/learn/master-detail/custom-row-detail-content).\n\n</Note>\n\n\n"
    },
    {
      "filePath": "/blog/2025/05/12/the-first-devtools-for-a-datagrid",
      "routePath": "/blog/2025/05/12/the-first-devtools-for-a-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2025/05/12/the-first-devtools-for-a-datagrid.page.md",
      "fileName": "the-first-devtools-for-a-datagrid.page.md",
      "folderPath": "/blog/2025/05/12/",
      "frontmatter": {
        "title": "The First DataGrid with a DevTools Extension",
        "description": "We've launched a Chrome DevTools Extension for Infinite Table",
        "author": "admin",
        "date": "2025-05-12T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "We're happy to announce that [Infinite Table DevTools extension](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa) is now live!",
      "readingTime": "3 min read",
      "content": "\nWe're happy to announce that [Infinite Table DevTools extension](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa) is now live!\n\nInfinite Table is the first DataGrid with a Chrome DevTools extension. Starting with version `7.0.0` of Infinite, you can specify the `debugId` property on the `<InfiniteTable />` instance and it will be picked up by the devtools.\n\n<Note>\n\nTo see the extension on a live demo, head to the [chrome webstore](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa) to download the extension.\n\nThen visit [our live demo page](/full-demo) and open your browser devtools - you should see the \"Infinite Table\" devtool tab. Click it and enjoy interacting with the DataGrid!\n</Note>\n\n\n```tsx {16}\nconst columns = {\n  name: {\n    field: 'firstName',\n  },\n  lastName: {\n    field: 'lastName',\n  },\n  age: {\n    field: 'age',\n  },\n}\n\nconst App = () => {\n  return <DataSource primaryKey={'id'} data={[...]}>\n    <InfiniteTable\n      debugId=\"simple\"\n      columns={columns}\n    />\n  </DataSource>\n}\n```\n\n<Note>\n\nIf you have multiple instances, each with a unique `debugId` property, they will all show up\n</Note>\n\n<img src=\"https://raw.githubusercontent.com/infinite-table/infinite-react/refs/heads/master/devtools/screenshots/main.jpg\" alt=\"Infinite Table DevTools Extension\" width=\"100%\" style={{minWidth: \"100%\"}} />\n\n\n## Current features\n\nThe Devtools extension was launched with an initial feature-set, which will expand as we grow and as we get user feedbak - so be sure to tell us what you'd like to see in the devtools.\n\nCurrently, it offers the ability to do the following:\n - see the list of all columns and adjust which are visible\n - see timings of the following data operations: sorting, filtering, group/pivot/tree.\n    This always show how much the last operation of that type took.\n - interact with the grouping and sorting information in the `<DataSource />` - and revert it to user-values at any time\n - see and clear the logs\n - see various warning messages and performance-related issues.\n\n## Planned features\n\nAs we already mentioned, we're planning to expand the devtools, as we're just getting a taste of what's possible. It took us some time to figure our our best workflow in developing the devtools, and we're now confident we can iterate much faster.\n\nHaving said this, we're looking for feedback from you on what insights you'd like to see in the InfiniteTable DataGrid via the devtools. We have our own list of things we want to work on, but we plan to incorporate user-feedback asap. So here's our wishlist for the devtools:\n\n - ability to see more timings on various operations - including a chart with historical values during the lifetime of a DataGrid instance - something similar to how React DevTools shows render operations and their durations.\n - add the ability to filter logs via channel\n - show more performance tips&tricks that can make your DataGrid faster\n - allow you to interact with many props of the DataGrid - row and cell selection, keyboard navigation, filters, column state, sorting, pivoting, pivot result columns, aggregations, column groups, lazy loading, theming and more.\n - give you a full state of the DataGrid, and the ability to apply and restore it at any time.\n - show you the details of your license key and remind you if it's close to the expiration date.\n\n\n## Your turn\n\nIt's your turn to give us feedback on the Infinite Table DevTools Extension!\n\nLet us know what you think and how you'd like to use it in order to enhance your interaction with the DataGrid. "
    },
    {
      "filePath": "/blog/2024/06/13/how-to-use-excel-like-editing-in-datagrid",
      "routePath": "/blog/2024/06/13/how-to-use-excel-like-editing-in-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/06/13/how-to-use-excel-like-editing-in-datagrid.page.md",
      "fileName": "how-to-use-excel-like-editing-in-datagrid.page.md",
      "folderPath": "/blog/2024/06/13/",
      "frontmatter": {
        "title": "How to use Excel-like editing in your DataGrid",
        "author": "admin",
        "date": "2024-06-13T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "Excel-like editing is a very popular request we had. In this short article, we show you how to configure Excel-like editing in the Infinite React DataGrid.",
      "readingTime": "3 min read",
      "content": "\nExcel-like editing is a very popular request we had. In this short article, we show you how to configure Excel-like editing in the Infinite React DataGrid.\n\n<CSEmbed title=\"Click a cell and start typing\" code={false} id=\"excel-like-editing-infinite-datagrid-y6xtw6\" />\n\nThis behavior is achieved by using the [Instant Edit keyboard shorcut](/docs/learn/keyboard-navigation/keyboard-shortcuts#instant-edit).\n\n\n## Configuring keyboard shortcuts\n\n```ts {4,12}\nimport {\n  DataSource,\n  InfiniteTable,\n  keyboardShortcuts\n} from '@infinite-table/infinite-react';\n\n function App() {\n  return <DataSource<Developer> primaryKey=\"id\" data={dataSource}>\n    <InfiniteTable<Developer>\n      columns={columns}\n      keyboardShortcuts={[\n        keyboardShortcuts.instantEdit\n      ]}\n    />\n  </DataSource>\n}\n```\n\nThe `instantEdit` [keyboard shorcut](/docs/learn/keyboard-navigation/keyboard-shorcuts) is configured (by default) to respond to any key (via the special `*` identifier which matches anything) and will start editing the cell as soon as a key is pressed. This behavior is the same as in Excel, Google Sheets, Numbers or other spreadsheet software.\n\n<Note>\n\n\nTo enable editing globally, you can use the <PropLink name=\"columnDefaultEditable\" /> boolean prop on the `InfiniteTable` DataGrid component. This will make all columns editable.\n\nOr you can be more specific and choose to make individual columns editable via the <PropLink name=\"columns.defaultEditable\">column.defaultEditable</PropLink> prop. This overrides the global <PropLink name=\"columnDefaultEditable\" />.\n\n</Note>\n\n\n<HeroCards>\n<YouWillLearnCard title=\"Column Editors\" path=\"/docs/learn/editing/column-editors\">\nRead about how you can configure various editors for your columns.\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"Editing Flow Chart\" path=\"/docs/learn/editing/inline-edit-flow\">\nA picture is worth a thousand words - see a chart for the editing flow.\n</YouWillLearnCard>\n\n</HeroCards>\n\n\n## Finishing an Edit\n\nAn edit is generally finished by user interaction - either the user confirms the edit by pressing the `Enter` key or cancels it by pressing the `Escape` key.\n\nAs soon as the edit is confirmed by the user, `InfiniteTable` needs to decide whether the edit should be accepted or not.\n\nIn order to decide (either synchronously or asynchronously) whether an edit should be accepted or not, you can use the global <PropLink name=\"shouldAcceptEdit\"/> prop or the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> alternative.\n\n<Note>\n\nWhen neither the global <PropLink name=\"shouldAcceptEdit\"/> nor the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> are defined, all edits are accepted by default.\n\n</Note>\n\n<Note>\n\nOnce an edit is accepted, the <PropLink name=\"onEditAccepted\"/> callback prop is called, if defined.\n\nWhen an edit is rejected, the <PropLink name=\"onEditRejected\"/> callback prop is called instead.\n\nThe accept/reject status of an edit is decided by using the `shouldAcceptEdit` props described above. However an edit can also be cancelled by the user pressing the `Escape` key in the cell editor - to be notified of this, use the <PropLink name=\"onEditCancelled\"/> callback prop.\n\n</Note>\n\nUsing shouldAcceptEdit to decide whether a value is acceptable or not\n\n<Description>\n\nIn this example, the `salary` column is configured with a <PropLink name=\"columns.shouldAcceptEdit\">shouldAcceptEdit</PropLink> function property that rejects non-numeric values.\n\n</Description>\n<CSEmbed code={false} id=\"infinite-table-editing-custom-edit-value-2x7nrw\"/>\n\n## Persisting an Edit\n\nBy default, accepted edits are persisted to the `DataSource` via the <DApiLink name=\"updateData\">DataSourceAPI.updateData</DApiLink> method.\n\nTo change how you persist values (which might include persisting to remote locations), use the <PropLink name=\"persistEdit\"/> function prop on the `InfiniteTable` component.\n\n<Note>\n\nThe <PropLink name=\"persistEdit\"/> function prop can return a `Promise` for async persistence. To signal that the persisting failed, reject the promise or resolve it with an `Error` object.\n\nAfter persisting the edit, if all went well, the <PropLink name=\"onEditPersistSuccess\" /> callback prop is called. If the persisting failed (was rejected), the <PropLink name=\"onEditPersistError\" /> callback prop is called instead.\n\n</Note>"
    },
    {
      "filePath": "/blog/2024/06/18/how-to-configure-datagrid-to-maximise-screen-real-estate",
      "routePath": "/blog/2024/06/18/how-to-configure-datagrid-to-maximise-screen-real-estate",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/06/18/how-to-configure-datagrid-to-maximise-screen-real-estate.page.md",
      "fileName": "how-to-configure-datagrid-to-maximise-screen-real-estate.page.md",
      "folderPath": "/blog/2024/06/18/",
      "frontmatter": {
        "title": "How to configure the DataGrid to maximise screen real estate",
        "author": "admin",
        "date": "2024-06-18T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "Many modern apps rely heavily on white-space to make the user interface easy to read and follow. However, there are financial apps or data-heavy apps where you need to display a lot of information in a small space.",
      "readingTime": "3 min read",
      "content": "\nMany modern apps rely heavily on white-space to make the user interface easy to read and follow. However, there are financial apps or data-heavy apps where you need to display a lot of information in a small space.\nIn this blogpost, we want to show you how to tweak the theming of the Infinite React DataGrid to make it more dense and maximise screen real estate.\n\n## Configuring the spacing in the DataGrid cells\n\nThe CSS variable you want to target is `--infinite-cell-padding` - it's used to set the padding of the cells in the DataGrid. By default, the padding is set to `var(--infinite-space-2) var(--infinite-space-3)`. This means that the padding is set to `4px 8px` for a root font size of `16px`.\n\n```css {2} title=\"Default definition for --infinite-cell-padding\"\n:root {\n  --infinite-cell-padding: var(--infinite-space-2) var(--infinite-space-3); /* vertical horizontal */\n\n  --infinite-space-2: .25rem; /* 4px - for a root font size of 16px */\n  --infinite-space-3: .5rem; /* 8px */\n}\n```\n\nYou can override this variable in your CSS to make the padding smaller. For example, you can set the padding to `2px 4px` by setting the variable like this:\n\n```css {2} title=\"Override the --infinite-cell-padding variable\"\nbody {\n  --infinite-cell-padding: 2px 4px;\n}\n```\n\n<Note>\n\nIt's important to understand that cell height is not given by the padding, but by the <PropLink name=\"rowHeight\" /> prop.\n\nSo if you want to make the DataGrid more dense, you should also consider setting the <PropLink name=\"rowHeight\" /> prop to a smaller value.\n\n</Note>\n\n<CSEmbed id=\"react-datagrid-infinite-table-theme-switching-forked-psnzfr\" title=\"Using rowHeight and cell padding to configure a dense mode in DataGrid cells\" code={false} />\n\n## Configuring the spacing in the column headers\n\nFor configuring padding inside column headers, you need to use the ```--infinite-header-cell-padding``` CSS var.\n\n```css {2} title=\"Default definition for --infinite-header-cell-padding\"\n:root {\n  --infinite-header-cell-padding: var(--infinite-header-cell-padding-y) var(--infinite-header-cell-padding-x);\n  --infinite-header-cell-padding-x: var(--infinite-space-3);\n  --infinite-header-cell-padding-y: var(--infinite-space-3);\n}\n```\n\nYou can make the padding smaller for example give it a value of `2px 4px` by setting the variable like this:\n\n```css {2} title=\"Override the --infinite-header-cell-padding variable\"\nbody {\n  --infinite-header-cell-padding: 2px 4px;\n}\n```\n\n<CSEmbed id=\"react-datagrid-dense-mode-forked-tz3gft\" title=\"Dense mode in both cells and column headers\" code={false}/> \n\nThe above demo also uses the <PropLink name=\"headerOptions.alwaysReserveSpaceForSortIcon\" /> prop to make sure that the column headers don't reserve a space for the sort icon when the respective column is not sorted.\n\n<Note>\n\nAnother option would be to override the CSS spacing scale that InfiniteTable defines - but that affects more than just the padding of the cells and headers.\n\n```CSS title=\"Default values for the spacing scale\"\n:root {\n  --infinite-space-1: .125rem;\n  --infinite-space-2: .25rem;\n  --infinite-space-3: .5rem;\n  --infinite-space-4: 0.75rem;\n  --infinite-space-5: 1rem;\n}\n```\n\nYou're encouraged to experiment with these variables to find the right balance for your app.\n\n</Note>"
    },
    {
      "filePath": "/blog/2025/08/16/grouping-toolbar-now-available-in-the-datagrid",
      "routePath": "/blog/2025/08/16/grouping-toolbar-now-available-in-the-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2025/08/16/grouping-toolbar-now-available-in-the-datagrid.page.md",
      "fileName": "grouping-toolbar-now-available-in-the-datagrid.page.md",
      "folderPath": "/blog/2025/08/16/",
      "frontmatter": {
        "title": "Using drag-and-drop to update row grouping via the Grouping Toolbar",
        "description": "We've enhanced the InfiniteTable DataGrid with a Grouping Toolbar, which allows you to drag and drop columns to group/ungroup",
        "author": "admin",
        "date": "2025-08-16T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "",
      "readingTime": "3 min read",
      "content": "\n\nWith version `7.2.0`, we added another component to make your interaction with the DataGrid easier - namely the `GroupingToolbar`.\n\nThis toolbar allows users to interact with row grouping very easily, via drag and drop. Drag column headers on the GroupingToolbar component and off you go, grouping is updated. Additionally, you can drag items on the GroupingToolbar in order to change the order of the row grouping.\n\n```tsx {3} title=\"Base structure for using the grouping toolbar\"\n<DataSource>\n  <InfiniteTable>\n    <InfiniteTable.GroupingToolbar />\n    <InfiniteTable.Header />\n    <InfiniteTable.Body />\n  </InfiniteTable>\n</DataSource>\n```\n\nSimply reference the component via `InfiniteTable.GroupingToolbar` and nest it under `<InfiniteTable />`.\n\n<Note>\n\nIn the above and below examples, for simplicity, we're not showing the whole configuration of the `<DataSource />` and `<InfiniteTable />` components - for full code examples, see further below.\n\n</Note>\n\nThe good part is that you can very easily add additional elements to your structure and have the grouping toolbar displayed on the side, vertically.\n\n```tsx {8} title=\"Example structure for vertical grouping toolbar\"\n<DataSource>\n  <InfiniteTable>\n    <div className=\"flex flex-1 flex-row\">\n      <div className=\"flex-1 flex flex-col\">\n        <InfiniteTable.Header />\n        <InfiniteTable.Body />\n      </div>\n      <InfiniteTable.GroupingToolbar orientation=\"vertical\" />\n    </div>\n  </InfiniteTable>\n</DataSource>\n```\n\n<CSEmbed id=\"wandering-leftpad-2zxwxr\" code={false} title=\"Using the GroupingToolbar\" />\n\n<Note>\n\nIn the example above, try dragging the header of the `hobby` column onto the GroupingToolbar to add grouping by `hobby`.\n\n</Note>\n\n\n## Horizontal and vertical layout\n\nAs shown above, you can use the `GroupingToolbar` both horizontally and vertically. This is configured via the `orientation` prop - either `\"horizontal\"` (the default) or `\"vertical\"`.\n\nMake sure you configure this to match your desired layout.\n\n<CSEmbed id=\"still-bird-td2rgc\" code={false} title=\"Vertical layout demo\" />\n\n## Customizing and Extending the GroupingToolbar\n\nWhen building this, we were sure you will want to customize almost everything about the toolbar. So we prepared a simple way to do this, via the `components` prop of the `GroupingToolbar`.\n\nThe following components are available:\n - `Placeholder` - controls the placeholder that's visible when there are no row groups available.\n - `ToolbarItem` - used to replace the toolbar items - corresponding to the row groups.\n - `Host` - the component itself - useful to override when you want to add some other React elements before or after the toolbar items.\n\nIn the example below, we demo how you can display a custom placeholder for the GroupingToolbar.\n\n<CSEmbed id=\"sad-rubin-6kx2v6\" code={false} title=\"Using a custom placeholder in the GroupingToolbar\" />\n\nWith all these ways to hook into the component, there are no limits to the styling and structure of your layout.\n\nGive it a try and let us know (via github issues or [twitter](https://x.com/get_infinite)) if there's anything you'd like to see improved or have questions about!\n\n## Summary\n\nThe new `GroupingToolbar` component brings an intuitive drag-and-drop interface to row grouping in `InfiniteTable`. Whether you prefer horizontal or vertical layouts, the toolbar provides a seamless way to manage grouping while maintaining the flexibility to customize its appearance and behavior.\n\nWe're excited to see how you'll use this new feature in your applications. Happy coding!\n\n"
    },
    {
      "filePath": "/docs/learn/grouping-and-pivoting/pivoting/customizing-pivot-columns",
      "routePath": "/docs/learn/grouping-and-pivoting/pivoting/customizing-pivot-columns",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/grouping-and-pivoting/pivoting/customizing-pivot-columns.page.md",
      "fileName": "customizing-pivot-columns.page.md",
      "folderPath": "/docs/learn/grouping-and-pivoting/pivoting/",
      "frontmatter": {
        "title": "Customizing Pivot Columns"
      },
      "excerpt": "There are a number of ways to customize the generated pivot columns and we'll cover each of them in this page",
      "readingTime": "2 min read",
      "content": "\nThere are a number of ways to customize the generated pivot columns and we'll cover each of them in this page\n\n## Inheriting from initial columns\n\nPivoting is all about aggregations, so you need to specify the <DataSourcePropLink name=\"aggregationReducers\">reducers</DataSourcePropLink> that will aggregate your data. Each reducer can have a `field` property that specifies the field that will be used for aggregation.\n\nIf the table <PropLink name=\"columns\"/> collection already has a column bound to the `field` used in the aggregation, the column configuration will be inherited by the generated pivot column.\n\n```ts\nconst columns: InfiniteTablePropColumns<Developer> = {\n  preferredLanguage: {\n    field: 'preferredLanguage',\n    style: { color: 'blue' },\n  },\n  age: {\n    field: 'age',\n    style: {\n      color: 'magenta',\n      background: 'yellow',\n    },\n  },\n  salary: {\n    field: 'salary',\n    type: 'number',\n    style: {\n      color: 'red',\n    },\n  },\n  canDesign: { field: 'canDesign' },\n  country: { field: 'country' },\n  firstName: { field: 'firstName' },\n  id: { field: 'id' },\n};\n\nconst avgReducer: InfiniteTableColumnAggregator<Developer, any> = {\n  initialValue: 0,\n  reducer: (acc, sum) => acc + sum,\n  done: (sum, arr) => {\n    return Math.floor(arr.length ? sum / arr.length : 0);\n  },\n};\n\nconst aggregationReducers: DataSourceProps<Developer>['aggregationReducers'] = {\n  // will have the same configuration as the `salary` column\n  avgSalary: { field: 'salary', ...avgReducer },\n  avgAge: {\n    field: 'age',\n    ...avgReducer,\n    pivotColumn: {\n      // will have the same configuration as the `preferredLanguage` column\n      inheritFromColumn: 'preferredLanguage',\n      // but specify a custom default width\n      defaultWidth: 500,\n    },\n  },\n};\n```\n\n<Sandpack title=\"Pivot columns inherit from original columns bound to the same field\">\n\n```ts file=\"pivot-column-inherit-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    {
      "filePath": "/docs/learn/grouping-and-pivoting/pivoting/overview",
      "routePath": "/docs/learn/grouping-and-pivoting/pivoting/overview",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/grouping-and-pivoting/pivoting/overview.page.md",
      "fileName": "overview.page.md",
      "folderPath": "/docs/learn/grouping-and-pivoting/pivoting/",
      "frontmatter": {
        "title": "Pivoting"
      },
      "excerpt": "An enteprise-level feature `InfiniteTable` provides is the pivoting functionality. Combined with grouping and advanced aggregation, it unlocks new ways to visualize data.",
      "readingTime": "10 min read",
      "content": "\nAn enteprise-level feature `InfiniteTable` provides is the pivoting functionality. Combined with grouping and advanced aggregation, it unlocks new ways to visualize data.\n\nPivoting is first defined at the `DataSource` level, via the <PropLink name=\"pivotBy\" /> prop. It's an array of objects, each with a `field` property bound (so `pivotBy[].field` is keyof `DATA_TYPE`) to the `DataSource`.\n\n<Note>\n\nPivoting generates columns based on the pivoting values, so you have to pass those generated columns into the `<InfiniteTable />` component.\n\nYou do that by using a `function` as a direct child of the `DataSource`, and in that function you have access to the generated `pivotColumns` array. Likewise for `pivotColumnGroups`.\n\n</Note>\n\nFor more pivoting examples, see [our pivoting demos](/docs/learn/examples/dynamic-pivoting-example)\n\n```ts\nconst pivotBy = [{ field: 'team' }]\n // field needs to be keyof DATA_TYPE both in `pivotBy` and `groupBy`\nconst groupBy = [{field: 'department'}, {field: 'country'}]\n\n<DataSource<DATA_TYPE> pivotBy={pivotBy} groupBy={groupBy}>\n{ ({pivotColumns, pivotColumnGroups}) => {\n  return <InfiniteTable<DATA_TYPE>\n    pivotColumns={pivotColumns}\n    pivotColumnGroups={pivotColumnGroups}\n  />\n} }\n</DataSource>\n```\n\n<Sandpack title=\"Pivoting with avg aggregation\">\n\n```ts file=\"pivoting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Customizing Pivot Columns\n\nThere are a number of ways to customize the pivot columns and <DataSourcePropLink name=\"pivotBy.columnGroup\" nocode>pivot column groups</DataSourcePropLink>. This is something you generally want to do, as they are generated and you might need to tweak column headers, size, etc.\n\nThe default behavior for pivot columns generated for aggregations is that they inherit the properties of the original columns bound to the same field as the aggregation.\n\n```ts\nconst avgReducer: InfiniteTableColumnAggregator<Developer, any> = {\n  initialValue: 0,\n  reducer: (acc, sum) => acc + sum,\n  done: (sum, arr) => {\n    return Math.floor(arr.length ? sum / arr.length : 0);\n  },\n};\nconst aggregationReducers: DataSourceProps<Developer>['aggregationReducers'] = {\n  // will have the same configuration as the `salary` column\n  avgSalary: { field: 'salary', ...avgReducer },\n  avgAge: {\n    field: 'age',\n    ...avgReducer,\n    pivotColumn: {\n      // will have the same configuration as the `preferredLanguage` column\n      inheritFromColumn: 'preferredLanguage',\n      // but specify a custom default width\n      defaultWidth: 500,\n    },\n  },\n};\n```\n\n<Sandpack title=\"Pivot columns inherit from original columns bound to the same field\">\n\n```ts file=\"pivot-column-inherit-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nAnother way to do it is to specify <DataSourcePropLink name=\"pivotBy.column\" />, as either an object, or (more importantly) as a function.\nIf you pass an object, it will be applied to all pivot columns in the column group generated for the `field` property.\n\n```tsx\nconst pivotBy: DataSourcePivotBy<DATA_TYPE>[] = [\n  { field: 'country' },\n  { field: 'canDesign', column: { defaultWidth: 400 } },\n];\n\n<DataSource pivotBy={pivotBy} />;\n```\n\nIn the above example, the `column.defaultWidth=400` will be applied to columns generated for all `canDesign` values corresponding to each country. This is good but not good enough as you might want to customize the pivot column for every value in the pivot. You can do that by passing a function to the `pivotBy.column` property.\n\n```tsx\nconst pivotBy: DataSourcePivotBy<DATA_TYPE>[] = [\n  { field: 'country' },\n  {\n    field: 'canDesign',\n    column: ({ column }) => {\n      return {\n        header: column.pivotGroupKey === 'yes' ? 'Designer' : 'Not a Designer',\n      };\n    },\n  },\n];\n```\n\n<Sandpack title=\"Pivoting with customized pivot column\">\n\n```ts file=\"pivoting-customize-column-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Total and grand-total columns\n\nIn <DPropLink name=\"pivotBy\" nocode>pivot mode</DPropLink> you can configure both <PropLink name=\"pivotTotalColumnPosition\" nocode>total columns</PropLink> and <PropLink name=\"pivotGrandTotalColumnPosition\" nocode>grand-total columns</PropLink>. By default, grand-total columns are not displayed, so you have to explicitly set the <PropLink name=\"pivotGrandTotalColumnPosition\" /> prop for them to be visible.\n\n<Sandpack title=\"Pivoting with customized position for totals and grand-total columns\">\n\n```ts file=\"$DOCS/reference/pivot-grand-total-column-position-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\n**What are grand-total columns?**\n\nFor each <DPropLink name=\"aggregationReducers\" nocode>aggregation reducer</DPropLink> specified in the `DataSource`, you can have a total column - this is what <PropLink name=\"pivotGrandTotalColumnPosition\" nocode>grand-total columns</PropLink> basically are.\n\n</Note>\n\n## Server-side pivoting\n\nBy default, pivoting is client side. However, if you specify <DataSourcePropLink name=\"lazyLoad\" code>DataSource.lazyLoad</DataSourcePropLink> and provide a function that returns a promise for the <DataSourcePropLink name=\"data\" code>DataSource.data</DataSourcePropLink> prop, the table will use server-pivoted data.\n\nThe <DataSourcePropLink name=\"data\" code>DataSource.data</DataSourcePropLink> function is expected to return a promise that resolves to an object with the following shape:\n\n- `totalCount` - the total number of records in the group we're pivoting on\n- `data` - an array of objects that describes child groups, each object has the following properties:\n  - `keys` - an array of the group keys (usually strings) that uniquely identifies the group, from the root to the current group\n  - `data` - an object that describes the common properties of the group\n  - `aggregations` - an object that describes the aggregations for the current group\n  - `pivot` - the pivoted values and aggregations for each value. This object will have the following properties:\n    - `totals` - an object with a key for each aggregation. The value is the aggregated value for the respective aggregation reducer.\n    - `values` - an object keyed with the unique values for the pivot field. The values of those keys are objects with the same shape as the `pivot` top-level object, namely `totals` and `values`.\n\nIn the example below, let's assume the following practical scenario, with the data-type being a `Developer{country, stack, preferredLanguage, canDesign, age, salary}`.\n\n```tsx\nconst groupBy = [\n  { field: 'country' }, // possible values: any valid country\n  { field: 'stack' }, // possible values: \"backend\", \"frontend\", \"full-stack\"\n];\nconst pivotBy = [\n  { field: 'preferredLanguage' }, // possible values: \"TypeScript\",\"JavaScript\",\"Go\"\n  { field: 'canDesign' }, // possible values: \"yes\" or \"no\"\n];\n\nconst aggregationReducers = {\n  salary: { name: 'Salary (avg)', field: 'salary', reducer: 'avg' },\n  age: { name: 'Age (avg)', field: 'age', reducer: 'avg' },\n};\n```\n\n```tsx\n\nconst dataSource = ({ groupBy, pivotBy, groupKeys, aggregationReducers }) => {\n  // make sure you return a Promise that resolves to the correct structure - see details below\n\n  //eg: groupBy: [{ field: 'country' }, { field: 'stack' }],\n  //    groupKeys: [], - so we're requesting top-level data\n\n  //eg: groupBy: [{ field: 'country' }, { field: 'stack' }],\n  //    groupKeys: [\"Canada\"], - so we're requesting Canada's data\n\n  //eg: groupBy: [{ field: 'country' }, { field: 'stack' }],\n  //    groupKeys: [\"Canada\"], - so we're requesting Canada's data\n\n}\n\n<DataSource lazyLoad data={dataSource}>\n```\n\n```js\n{\n  data: [\n    {\n      aggregations: {\n        // for each aggregation id, have an entry\n        salary: <SALARY_AGGREGATION_VALUE>,\n        age: <AGE_AGGREGATION_VALUE>,\n      },\n      data: {\n        // data is an object with the common group values\n        country: \"Canada\"\n      },\n      // the array of keys that uniquely identify this group, including all parent keys\n      keys: [\"Canada\"],\n      pivot: {\n        totals: {\n          // for each aggregation id, have an entry\n          salary: <SALARY_AGGREGATION_VALUE>,\n          age: <AGE_AGGREGATION_VALUE>,\n        },\n        values: {\n          [for each unique value]: { // eg: for country\n            totals: {\n              // for each aggregation, have an entry\n              salary: <SALARY_AGGREGATION_VALUE>,\n              age: <AGE_AGGREGATION_VALUE>,\n            },\n            values: {\n              [for each unique value]: { // eg: for stack\n                totals: {\n                  salary: <SALARY_AGGREGATION_VALUE>,\n                  age: <AGE_AGGREGATION_VALUE>,\n                }\n\n              }\n            }\n          }\n        }\n      }\n    }\n  ],\n  // the total number of rows in the remote data set\n  totalCount: 10,\n\n  // you can map \"values\" and \"totals\" above to shorter names\n\n  mappings: {\n    values: \"values\",\n    totals: \"totals\"\n  }\n}\n```\n\n<Sandpack title=\"Server-side pivoting example\">\n\n```ts file=\"remote-pivoting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nThe <PropLink name=\"groupRenderStrategy\" /> prop is applicable even to pivoted tables, but `groupRenderStrategy=\"inline\"` is not supported in this case.\n\n</Note>\n\n### Another pivoting example with batching\n\nPivoting builds on the same data response as server-side grouping, but adds the pivot values for each group, as we already showed. Another difference is that in pivoting, no leaf rows are rendered or loaded, since this is pivoting and it only works with aggregated data. This means the `DataSource.data` function must always return the same format for the response data.\n\nJust like server-side grouping, server-side pivoting also supports batching - make sure you specify <DataSourcePropLink name=\"lazyLoad\">lazyLoad.batchSize</DataSourcePropLink>.\n\nThe example below also shows you how to customize the table rows while records are still loading.\n\n<Sandpack title=\"Server side pivoting with lazy loding batching\">\n\n```ts file=\"server-side-pivoting-with-lazy-load-batching-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nHere's another example, that assumes grouping by `country` and `city`, aggregations by `age` and `salary` (average values) and pivot by `preferredLanguage` and `canDesign` (a boolean property):\n\n```tsx\n//request:\ngroupKeys: [] // empty keys array, so it's a top-level group\ngroupBy: [{\"field\":\"country\"},{\"field\":\"city\"}]\nreducers: [{\"field\":\"salary\",\"id\":\"avgSalary\",\"name\":\"avg\"},{\"field\":\"age\",\"id\":\"avgAge\",\"name\":\"avg\"}]\nlazyLoadStartIndex: 0\nlazyLoadBatchSize: 10\npivotBy: [{\"field\":\"preferredLanguage\"},{\"field\":\"canDesign\"}]\n\n//response\n{\n  cache: true,\n  totalCount: 20,\n  data: [\n    {\n      data: {country: \"Argentina\"},\n      aggregations: {avgSalary: 20000, avgAge: 30},\n      keys: [\"Argentina\"],\n      pivot: {\n        totals: {avgSalary: 20000, avgAge: 30},\n        values: {\n          Csharp: {\n            totals: {avgSalary: 19000, avgAge: 29},\n            values: {\n              no: {totals: {salary: 188897, age: 34}},\n              yes: {totals: {salary: 196000, age: 36}}\n            }\n          },\n          Go: {\n            totals: {salary: 164509, age: 36},\n            values: {\n              no: {totals: {salary: 189202, age: 37}},\n              yes: {totals: {salary: 143977, age: 35}}\n            }\n          },\n          Java: {\n            totals: {salary: 124809, age: 32},\n            values: {\n              no: {totals: {salary: 129202, age: 47}},\n              yes: {totals: {salary: 233977, age: 25}}\n            }\n          },\n          //...\n        }\n      }\n    },\n    //...\n  ]\n}\n```\n\nIf we were to scroll down, the next batch of data would have the same structure as the previous one, but with `lazyLoadStartIndex` set to 10 (if `lazyLoad.batchSize = 10`).\n\nNow let's expand the first group and see how the request/response would look like:\n\n```tsx\n//request:\ngroupKeys: [\"Argentina\"]\ngroupBy: [{\"field\":\"country\"},{\"field\":\"city\"}]\nreducers: [{\"field\":\"salary\",\"id\":\"avgSalary\",\"name\":\"avg\"},{\"field\":\"age\",\"id\":\"avgAge\",\"name\":\"avg\"}]\nlazyLoadStartIndex: 0\nlazyLoadBatchSize: 10\npivotBy: [{\"field\":\"preferredLanguage\"},{\"field\":\"canDesign\"}]\n\n//response\n{\n  mappings: {\n    totals: \"totals\",\n    values: \"values\"\n  },\n  cache: true,\n  totalCount: 20,\n  data: [\n    {\n      data: {country: \"Argentina\", city: \"Buenos Aires\"},\n      aggregations: {avgSalary: 20000, avgAge: 30},\n      keys: [\"Argentina\", \"Buenos Aires\"],\n      pivot: {\n        totals: {avgSalary: 20000, avgAge: 30},\n        values: {\n          Csharp: {\n            totals: {avgSalary: 39000, avgAge: 29},\n            values: {\n              no: {totals: {salary: 208897, age: 34}},\n              yes: {totals: {salary: 296000, age: 36}}\n            }\n          },\n          Go: {\n            totals: {salary: 164509, age: 36},\n            values: {\n              no: {totals: {salary: 189202, age: 37}},\n              yes: {totals: {salary: 143977, age: 35}}\n            }\n          },\n          Java: {\n            totals: {salary: 124809, age: 32},\n            values: {\n              no: {totals: {salary: 129202, age: 47}},\n              yes: {totals: {salary: 233977, age: 25}}\n            }\n          },\n          //...\n        }\n      }\n    },\n    //...\n  ]\n}\n```\n\n<Note>\n\nThe response can contain a `mappings` key with values for `totals` and `values` keys - this can be useful for making the server-side pivot response lighter.\n\nIf `mappings` would be `{totals: \"t\", values: \"v\"}`, the response would look like this:\n\n```tsx\n{\n  totalCount: 20,\n  data: {...},\n  pivot: {\n    t: {avgSalary: 10000, avgAge: 30},\n    v: {\n      Go: {\n        t: {...},\n        v: {...}\n      },\n      Java: {\n        t: {...},\n        v: {...}\n      }\n    }\n  }\n\n```\n\nMore-over, you can also give aggregationReducers shorter keys to make the server response even more compact\n\n```tsx\nconst aggregationReducers: DataSourcePropAggregationReducers<Developer> =\n  {\n    s: {\n      name: 'Salary (avg)',\n      field: 'salary',\n      reducer: 'avg',\n    },\n    a: {\n      name: 'Age (avg)',\n      field: 'age',\n      reducer: 'avg',\n    },\n  };\n\n// pivot response\n{\n  totalCount: 20,\n  data: {...},\n  pivot: {\n    t: {s: 10000, a: 30},\n    v: {\n      Go: {\n        t: { s: 10000, a: 30 },\n        v: {...}\n      },\n      Java: {\n        t: {...},\n        v: {...}\n      }\n    }\n  }\n```\n\n</Note>\n\n<Note>\n\nAdding a `cache: true` key to the resolved object in the `DataSource.data` call will cache the value for the expanded group, so that when collaped and expanded again, the cached value will be used, and no new call is made to the `DataSource.data` function. This is applicable for both pivoted and/or grouped data. Not passing `cache: true` will make the function call each time the group is expanded.\n\n</Note>\n"
    }
  ],
  "paths": {
    "/404": {
      "filePath": "/404",
      "routePath": "/404",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/404.page.md",
      "fileName": "404.page.md",
      "folderPath": "/",
      "frontmatter": {
        "title": "Not Found"
      },
      "excerpt": "#### This page doesn't exist. But you can always check out our API Reference.",
      "readingTime": "1 min read",
      "content": "\n#### This page doesn't exist. But you can always check out our API Reference.\n\n<HeroCards>\n  <YouWillLearnCard title=\"Learn Infinite Table\" path=\"/docs/learn/getting-started\">\n  Learn & unleash the power of Infinite Table\n  </YouWillLearnCard>\n  <YouWillLearnCard title=\"API Reference\" path=\"/docs/reference\">\n  Look up the component props\n  </YouWillLearnCard>\n</HeroCards>\n"
    },
    "/community": {
      "filePath": "/community",
      "routePath": "/community",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/community.page.md",
      "fileName": "community.page.md",
      "folderPath": "/",
      "frontmatter": {
        "title": "Community"
      },
      "excerpt": "<Intro>",
      "readingTime": "1 min read",
      "content": "\n<Intro>\n\nWe're pleased to be part of the React community üôè.\n\nEspecially grateful to the React core team for all their hard work and to all the library developers out there who make other people's lives easier by their work.\n\n</Intro>\n\nWith Infinite Table we want to bring our contribution to the React community specifically and to the frontend developer community more broadly. We want to enable developers push the limits of how they handle and display data.\n\n## Stack Overflow\n\nStack Overflow is a popular forum to ask code-level questions or if you're stuck with a specific error. Read through the [existing questions](https://stackoverflow.com/questions/tagged/infinite-table) tagged with **infinite-table** or [ask your own](https://stackoverflow.com/questions/ask?tags=infinite-table)!\n\n## News\n\nFor the latest news about Infinite Table, [follow us on Twitter](https://twitter.com/get_infinite).\n"
    },
    "/eula": {
      "filePath": "/eula",
      "routePath": "/eula",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/eula.page.md",
      "fileName": "eula.page.md",
      "folderPath": "/",
      "frontmatter": {
        "title": "End User License Agreement"
      },
      "excerpt": "These terms and conditions (\"Terms\") are contracted between Webreactor SRL. (\"Licensor\") and the entity whose details are provided in the License Quotation (\"Licensee\"). This is effective as of the date of acceptance of these Terms (\"Effective Date\").",
      "readingTime": "36 min read",
      "content": "These terms and conditions (\"Terms\") are contracted between Webreactor SRL. (\"Licensor\") and the entity whose details are provided in the License Quotation (\"Licensee\").\nThis is effective as of the date of acceptance of these Terms (\"Effective Date\").\n\n\n\n\n- [TERMS AND CONDITIONS](#terms-and-conditions)\n  - [1. Definitions and interpretation](#1-definitions-and-interpretation)\n    - [1.1 Definitions](#11-definitions)\n    - [1.2 Interpretation](#12-interpretation)\n  - [2. Basis of terms](#2-basis-of-terms)\n    - [2.1](#21)\n    - [2.2](#22)\n    - [2.3](#23)\n    - [2.4](#24)\n    - [2.5](#25)\n    - [2.6](#26)\n  - [3. Provision of Licensed Materials and Support Services](#3-provision-of-licensed-materials-and-support-services)\n    - [3.1](#31)\n    - [3.2](#32)\n    - [3.3](#33)\n    - [3.4](#34)\n    - [3.5](#35)\n    - [3.6](#36)\n    - [3.7](#37)\n  - [4. Special Usage License](#4-special-usage-license)\n    - [4.1](#41)\n    - [4.2](#42)\n    - [4.3](#43)\n  - [5. Charges, invoicing and payment](#5-charges-invoicing-and-payment)\n    - [5.1](#51)\n    - [5.2](#52)\n    - [5.3](#53)\n  - [6. Warranties](#6-warranties)\n    - [6.1](#61)\n    - [6.2](#62)\n    - [6.3](#63)\n    - [6.4](#64)\n  - [7. Insurance](#7-insurance)\n    - [7.1](#71)\n  - [8. Intellectual Property Rights](#8-intellectual-property-rights)\n    - [8.1](#81)\n    - [8.2](#82)\n    - [8.3](#83)\n  - [9. Indemnities](#9-indemnities)\n    - [9.1](#91)\n    - [9.2](#92)\n  - [10. Exclusions and limitations](#10-exclusions-and-limitations)\n    - [10.1](#101)\n    - [10.2](#102)\n    - [10.3](#103)\n  - [11. Confidentiality](#11-confidentiality)\n    - [11.1](#111)\n    - [11.2](#112)\n  - [12. Data protection](#12-data-protection)\n    - [12.1](#121)\n    - [12.2](#122)\n  - [13. Commencement and duration of Terms](#13-commencement-and-duration-of-terms)\n    - [13.1](#131)\n  - [14. Commencement and duration of Quotations](#14-commencement-and-duration-of-quotations)\n    - [14.1](#141)\n    - [14.2](#142)\n  - [15. Termination](#15-termination)\n    - [15.1](#151)\n  - [16. Consequences of termination](#16-consequences-of-termination)\n    - [16.1](#161)\n    - [16.2](#162)\n  - [17. Force majeure](#17-force-majeure)\n  - [18. General](#18-general)\n    - [18.1](#181)\n    - [18.2](#182)\n    - [18.3](#183)\n    - [18.4](#184)\n    - [18.5](#185)\n    - [18.6](#186)\n    - [18.7](#187)\n    - [18.8](#188)\n    - [18.9](#189)\n    - [18.10](#1810)\n    - [18.11](#1811)\n    - [18.12](#1812)\n- [Support Schedule](#support-schedule)\n  - [1. Scope of Support Services](#1-scope-of-support-services)\n    - [1.1](#11)\n    - [1.2](#12)\n    - [1.3](#13)\n  - [2. Corrective maintenance](#2-corrective-maintenance)\n  - [3. Software updating service](#3-software-updating-service)\n    - [3.1](#31-1)\n    - [3.2](#32-1)\n\n\n\n# TERMS AND CONDITIONS\n\n## 1. Definitions and interpretation\n\n### 1.1 Definitions\n\nIn these Terms, where the context so admits, the following words and expressions shall have the following meanings:\n\n<table>\n  <thead>\n    <tr>\n      <th>Term</th>\n      <th>Meaning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><strong>Application</strong></td>\n      <td>\n        any software, application or elements developed by or on behalf of the\n        Licensee using the Software;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Bug</strong></td>\n      <td>\n        means any error, defect or malfunction in the Software that: (a) causes\n        the integrity of its data to be compromised or corrupted; (b) causes an\n        unexpected error message or fatal error to occur while using the\n        Software; (c) causes the Software to fail to conform to any applicable\n        warranties, including those set out in clause 6.1\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Business Day</strong></td>\n      <td>\n        means each day which is not a weekend day or public holiday in the\n        country in which the Licensor is located\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Confidential Information</strong></td>\n      <td>\n        means all information (whether written, oral or in some other form)\n        disclosed to or obtained by one party (whether directly or indirectly)\n        from the other (whether before or after the Effective Date), including\n        all information relating to that other‚Äôs business, operations, systems,\n        processes, products, trade secrets, know-how, contracts, finances,\n        plans, strategies or current, former or prospective clients, customers,\n        partners or suppliers (together with copies made of any of the\n        foregoing) and which information is marked as being confidential or\n        might reasonably be assumed to be confidential, but excluding\n        information which: <strong>(a)</strong> is available\n        to the public other than because of any breach of these Terms;\n        <strong>(b)</strong> is, when it is supplied, already\n        known to whoever it is disclosed to in circumstances in which they are\n        not prevented from disclosing it to others;\n        <strong>(c)</strong> is independently obtained by\n        whoever it is disclosed to in circumstances in which they are not\n        prevented from disclosing it to others; or\n        <strong>(d)</strong> is trivial or obvious;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Data Protection Legislation</strong></td>\n      <td>\n        all applicable legislation for the time being in force pertaining to\n        data protection, data privacy, data retention and/or data security\n        (including the General Data Protection Regulation (Regulation 2016/679)\n        (‚ÄúGDPR‚Äù) the Privacy and Electronic Communication Directive (Directive\n        2002/58/EC) and national legislation implementing or supplementing such\n        legislation in the United Kingdom and any applicable member state of the\n        European Union, including the Data Protection Act 2018) and all\n        associated codes of practice and other guidance issued by any applicable\n        data protection authority;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Developer License</strong></td>\n      <td>\n        means a license of the Licensed Materials granted to the Licensee which\n        permits the Licensee to develop Applications using the Licensed\n        Materials in accordance with and subject to these Terms\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Documentation</strong></td>\n      <td>\n        means the operating manuals, user instructions, technical literature and\n        all other related materials in eye-readable form supplied to the\n        Licensee by the Licensor (whether in online, electronic or printed form)\n        for aiding the use and application of the Software;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Fees</strong></td>\n      <td>\n        means the fees for the Services, as set out in the relevant Quotation\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Insolvency Event</strong></td>\n      <td>\n        means, in relation to a person (which includes an individual and a legal\n        person, such as a limited company), any of the following events:\n        <strong>(a)</strong> a meeting of creditors of that\n        person being held or an arrangement or composition with or for the\n        benefit of its creditors (including a voluntary arrangement as defined\n        in the Insolvency Act 1986) being proposed by or in relation to that\n        person; <strong>(b)</strong> a charge-holder,\n        receiver, administrative receiver or other similar person taking\n        possession of or being appointed over or any distress, execution or\n        other process being levied or enforced (and not being discharged within\n        seven days) on the whole or a material part of the assets of that\n        person; <strong>(c)</strong> that person ceasing to\n        carry on business or being deemed to be unable to pay its debts within\n        the meaning of section 123 Insolvency Act 1986 (except that, for the\n        purposes of this agreement, the reference to ¬£750 in section 123(1) of\n        that Act shall be construed as a reference to ¬£10,000);\n        <strong>(d)</strong> that person or its directors or\n        the holder of a qualifying floating charge or any of its creditors\n        giving notice of their intention to appoint, appointing or making an\n        application to the court for the appointment of, an administrator;\n        <strong>(e)</strong> a petition being advertised or a\n        resolution being passed or an order being made for the administration or\n        the winding-up, bankruptcy or dissolution of that person; or\n        <strong>(f)</strong> the happening in relation to that\n        person of an event analogous to any of the above in any jurisdiction in\n        which it is incorporated or resident or in which it carries on business\n        or has assets.\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Intellectual Property Rights</strong></td>\n      <td>\n        means patents, patentable rights, copyright, design rights, utility\n        models, trade marks (whether or not any of the above are registered),\n        trade names, rights in domain names, rights in inventions, rights in\n        data, database rights and confidential information, and all other\n        intellectual and industrial property and similar or analogous rights\n        existing under the laws of any country and all pending applications for\n        and right to apply for or register the same (present, future and\n        contingent, and including all renewals, extensions, revivals and all\n        accrued rights of action);\n      </td>\n    </tr>\n    <tr>\n      <td><strong>License Quotation</strong></td>\n      <td>\n        means a written quotation (whether in online, electronic or printed\n        form) agreed between the parties in relation to the Licensed Materials\n        which shall be deemed to incorporate these Terms;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Licensed Materials</strong></td>\n      <td>means the Software and related Documentation;</td>\n    </tr>\n    <tr>\n      <td><strong>Licensee Developers</strong></td>\n      <td>\n        means the Licensee‚Äôs employees, workers and contractors who are\n        authorised by the Licensee to, and qualified to, develop software\n        products that include the Software;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Licensee Materials</strong></td>\n      <td>\n        means all intellectual property, works, products, documentation,\n        information, data and other material of any kind (including computer\n        software and firmware, designs and specifications) provided or made\n        available by or on behalf of the Licensee in connection with these\n        Terms;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Licensor Materials</strong></td>\n      <td>\n        means all intellectual property, works, products, documentation,\n        information, data and other material of any kind (including computer\n        software and firmware, designs and specifications) provided or made\n        available by or on behalf of the Licensor in connection with these\n        Terms, excluding the Licensed Materials;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Losses</strong></td>\n      <td>\n        means all losses, liabilities, demands, claims, judgments, awards,\n        damages, amounts payable in settlement, costs and expenses (including\n        all legal and other professional fees, expenses and disbursements);\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Modification</strong></td>\n      <td>\n        means: <strong>(a)</strong> any addition to or\n        deletion from the contents of a file included in the Software or\n        previous Modifications created by the Licensee; and/or\n        <strong>(b)</strong> any new file that leverages any\n        part of the Software or previous Modifications;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>New Version</strong></td>\n      <td>\n        means any new version of the Software which from time to time is\n        publicly marketed and offered for licensing by the Licensor in the\n        course of its normal business, being a version which contains such\n        significant differences from the previous versions as to be generally\n        accepted in the marketplace as constituting a new product\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Our Website</strong></td>\n      <td>\n        means\n        <a\n          href=\"https://infinite-table.com\"\n          target=\"_blank\"\n          rel=\"nofollow noopener noreferrer\"\n          class=\"inline text-link break-normal border-b border-link border-opacity-0 hover:border-opacity-100 duration-100 ease-in transition leading-normal\"\n          >https://infinite-table.com</a>\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Proficiency</strong></td>\n      <td>has the meaning set out in clause 8.3</td>\n    </tr>\n    <tr>\n      <td><strong>Quotation(s)</strong></td>\n      <td>has the meaning set out in clause 2.2</td>\n    </tr>\n    <tr>\n      <td><strong>Quotation Effective Date</strong></td>\n      <td>has the meaning set out in clause 14.1</td>\n    </tr>\n    <tr>\n      <td><strong>Quotation Initial Term</strong></td>\n      <td>has the meaning set out in clause 14.1</td>\n    </tr>\n    <tr>\n      <td><strong>Quotation Renewal Term</strong></td>\n      <td>has the meaning set out in clause 14.1</td>\n    </tr>\n    <tr>\n      <td><strong>Production Environment</strong></td>\n      <td>\n        means a computer, server, collection of servers, data centre, cloud\n        instance, container or similar where the Licensee‚Äôs services and/or\n        store are made available to the Licensee‚Äôs customers\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Services</strong></td>\n      <td>\n        means the services (including the supply of Licensed Materials and\n        Support Services), set out in the relevant Quotation, to be provided by\n        the Licensor under such Quotation\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Site</strong></td>\n      <td>\n        means @infinite-table/infinite-react package on the public npm registry;\n        or any UMD bundle with an ‚Äúinfinite-table‚Äù prefix\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Software</strong></td>\n      <td>means the Infinite Table software made available by the Licensor</td>\n    </tr>\n    <tr>\n      <td><strong>Source Code</strong></td>\n      <td>\n        means the human-readable form of computer software, together with all\n        documentation and comments relating thereto sufficient for a reasonably\n        skilled computer programmer to understand, use, support and modify such\n        computer software;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Special Usage License</strong></td>\n      <td>\n        means a Developer License provided at no-cost on the terms set out in\n        clause 4.1\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Support Release</strong></td>\n      <td>\n        means a release of the Software which corrects faults, adds\n        functionality or otherwise amends or upgrades the Software, but which\n        does not constitute a New Version\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Support Request</strong></td>\n      <td>\n        means a request communicated by the Licensee to the Licensor to report a\n        Bug or to request some other support service or assistance;\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Support Services</strong></td>\n      <td>\n        means the support services, to be provided by the Licensor in respect of\n        the Software (including the provision of Updates), as set out in the\n        Support Schedule; and\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n### 1.2 Interpretation\n\nIn these Terms (including the introduction and schedules) unless the context otherwise requires:\n\n(a) reference to a person includes a legal person (such as a limited company) as well as a natural person;\n\n(b) reference to these Terms includes the schedules and appendices and other documents attached to it or incorporated by reference into it (all as amended, added to or replaced from time to time);\n\n(c) references to clauses or schedules shall be to those in or to these Terms and references to paragraphs shall be to paragraphs of the schedules or annexes to the schedules (as the case may be);\n\n(d) clause headings are for convenience only and shall not affect the construction of these Terms;\n\n(e) reference to \"including\" or any similar terms in these Terms shall be treated as being by way of example and shall not limit the general applicability of any preceding words; and\n\n(f) reference to any legislation shall be to that legislation as amended, extended or re-enacted from time to time and to any subordinate provision made under that legislation.\n\n## 2. Basis of terms\n\n### 2.1\n\nThese Terms are framework terms further to which the parties may enter into a License Quotation in respect of Services to be provided by the Licensor to the Licensee.\n\n### 2.2\n\nEach such License Quotation once agreed in accordance with clause 2.3, shall constitute a separate contract for the provision of the Services specified in such Quotation, incorporating these Terms.\n\n### 2.3\n\nThe Licensor will only provide Services to the Licensee further to a Quotation. No Quotation shall be binding on either party unless and until agreed by both parties.\n\n### 2.4\n\nAll Quotations entered into with the Licensee will be subject to the terms set out in these Terms. No terms or conditions endorsed upon, delivered with or contained in any quotation, estimate, correspondence, acknowledgement or acceptance of order or any similar document issued by the Licensee shall form part of any contract between the Licensor and the Licensee.\n\n### 2.5\n\nIn the event of any conflict or inconsistency between the terms of these Terms and the terms of any Quotation, the terms of the relevant Quotation shall prevail only to the extent of any such conflict or inconsistency.\n\n### 2.6\n\nRequests for License Quotations must be made by email to admin@infinite-table.com\n\n## 3. Provision of Licensed Materials and Support Services\n\n### 3.1\n\nThe Licensor shall make the Licensed Materials available in Source Code form at https://github.com/infinite-table/infinite-react on the first Quotation Effective Date by provision of an activation key required to access the Licensed Materials, subject to payment of the Fees.\n\n### 3.2\n\nSubject to clause 3.3 below, the Licensor grants to the Licensee a worldwide, perpetual, non-exclusive, non-transferable, non-sublicensable, royalty-free license (in the form of a Developer License), commencing on the relevant Quotation Effective Date, to permit Licensee Developers to use the Licensed Materials in accordance with these Terms, subject to the limit on the number of permitted Licensee Developers set out in the relevant Quotation. Members within the group of Licensee Developers can be replaced with alternative members as long as the number of concurrent Licensee Developers at any time does not exceed the limit set out in the relevant Quotation. For the purposes of this limit, each developer modifying JavaScript code as part of the creation of an Application's user interface or Modification of a user interface shall constitute a separate Licensee Developer. For example, if the Licensee has seven developers working with JavaScript code on an Application, but only three developers directly working with the Software, all seven developers will be counted as Licensee Developers.\n\n### 3.3\n\nThe Licensee may use the Licensed Materials to install, load, launch, access, run, execute, operate, and archive the Licensed Materials for production, test, archival, emergency re-start and disaster recovery purposes and to develop and create derivative works from the Licensed Materials in the form of Applications, provided that:\n\n(a) the Licensee shall not permit any end user of any Application to use the Software independently of, or by or with any applications other than, the Application being used by that end user.\n\n### 3.4\n\nIn the event that the Licensee creates any Modifications to the Source Code to the Software, the Licensor shall not be obliged to provide the Support Services in relation to any such Modification(s) from the date on which any such Modification(s) take place.\n\n### 3.5\n\nThe Licensee shall not change or remove the copyright notice from any of the files included in the Licensed Materials.\n\n### 3.6\n\nThe Licensee shall not redistribute the Licensed Materials or any Modifications other than as expressly permitted by these Terms. For the avoidance of doubt, the Licensee shall not redistribute the Licensed Materials or any Modifications:\n\n(a) other than by including the Software or a portion of the Software within Application(s); and\n\n(b) as part of any Application that can be described as a development toolkit or library, an application builder, a website builder, a user interface designer, or any application that is intended for use by software, application, or website developers or designers, or has a similar purpose or functionality (as determined by the Licensor).\n\n### 3.7\n\nSubject to clause 3.3, the Licensor will provide the Support Services to the Licensee Developers in accordance with the Support Schedule for a period of 1 year from the relevant Quotation Effective Date, or for such other period as expressly set out in the relevant Quotation.\n\n## 4. Special Usage License\n\n### 4.1\n\nNotwithstanding anything else in these Terms, a Special Usage License can be granted, purely at the Licensors discretion.\n\n### 4.2\n\nWithout prejudice likely recipients of a Special Usage License will include:\n\n(a) Students in full-time education;\n(b) Charities and Non-Governmental Organisations\n(c) Open Source Products\n\n### 4.3\n\nRequests for Special Usage Licenses must be made by email to admin@infinite-table.com\n\n## 5. Charges, invoicing and payment\n\n### 5.1\n\nThe Fees will be invoiced by the Licensor annually in advance upon the relevant Quotation Effective Date. Unless otherwise agreed in writing between the parties, the Licensee must pay each valid invoice within 30 days of the date of the invoice.\n\n### 5.2\n\nUnless otherwise expressly provided in these Terms, all amounts referred to in these Terms are exclusive of value added tax (\"VAT\") which, where chargeable by the Licensor, shall be payable by the Licensee at the rate and in the manner prescribed by law. All other taxes, duties, customs or similar charges shall be the responsibility of the Licensor.\n\n### 5.3\n\nThe Licensor will invoice, and the Licensee will pay invoices in the currency to be agreed between the parties and as set out in the relevant Quotation.\n\n## 6. Warranties\n\n### 6.1\n\nThe Licensor represents and warrants that:\n\n(a) it has the right to enter into these Terms and to license the Licensed Materials and provide the Support Services (if any) as contemplated by these Terms;\n\n(b) the Support Services (if any) shall be performed with reasonable care, skill and diligence;\n\n(c) the Licensed Materials and Support Services (if any) shall comply with all applicable laws, regulatory requirements, mandatory standards and codes of practice of any competent authority for the time being in force;\n\n(d) it shall not knowingly introduce into any the Software any computer software routine intended or designed to disable, damage, erase, disrupt or impair the normal operation of, or provide unauthorised access to or modification or monitoring of, any computer system or any software or information stored on any computer system, including viruses, worms, time bombs, time locks, drop-dead devices, access codes, security keys, back doors or trap door devices;\n\n(e) the Software shall perform substantially in accordance with the Documentation for a period of 90 days after: (i) the first Quotation Effective Date; and (ii) the provision of a New Version in accordance with these Terms, provided that this warranty shall not apply to error or failure resulting from: (i) machine error; (ii) the Licensee's failure to follow operating instructions; (iii) negligence or accident by any person or entity other than the Licensor; or (iv) modifications to the Software by any person or entity other than the Licensor.\n\n### 6.2\n\nThe Licensee represents and warrants that:\n\n(a) it has the right to enter into these Terms and to perform its obligations as contemplated by this agreement; and\n\n(b) in the performance of its obligations under these Terms, it shall comply with all applicable laws, regulatory requirements, mandatory standards and codes of practice of any competent authority for the time being in force.\n\n### 6.3\n\nThe Licensor does not warrant that the operation of the Licensed Materials or the code produced by the Software will be uninterrupted or error-free. The Licensor provides the Licensed Materials on an \"as is\" basis and all warranties not expressly set out in these Terms, including any warranties of title, non-infringement, merchantability and fitness for a particular purpose, are disclaimed to the fullest extent permitted by law.\n\n### 6.4\n\nThe Licensee's sole and exclusive remedy for a breach of the warranty in clause 6.1(e) shall be to require the Licensor to repair the affected portion of the Software to ensure that it complies with the Documentation.\n\n## 7. Insurance\n\n### 7.1\n\nWithout prejudice to the Licensee's obligations and liabilities under these Terms, the Licensee shall effect and maintain in force for the duration of these Terms, with reputable and substantial insurers, such policies of insurance as are sufficient for a business of the Licensee's type and to cover all potential liability of the Licensee under these Terms, including professional indemnity insurance and public liability insurance. If coverage is written on a claims made basis, it shall be maintained by the Licensee for at least six years following the termination of these Terms. The Licensee shall, on the Licensor's request, produce both the insurance certificate giving details of cover and the receipt for the current year's premium in respect of each insurance.\n\n## 8. Intellectual Property Rights\n\n### 8.1\n\nAll Intellectual Property Rights in the Licensor Materials and Licensed Materials shall, at all times, be and remain the exclusive property of the Licensor or its third-party licensors. The Licensor grants the Licensee, for the term of these Terms, a limited, non-transferable, royalty-free, non-exclusive license to use the Licensor Materials for the Licensee's internal business purposes only in connection with the receipt of the Licensed Materials and Support Services in accordance with these Terms.\n\n### 8.2\n\nAll Intellectual Property Rights in the Licensee Materials shall, at all times, be and remain the exclusive property of the Licensee or its third-party licensors. If applicable, the Licensee grants the Licensor, for the term of these Terms, a limited, non-transferable, royalty-free, non-exclusive license to use the Licensee Materials only for the purpose of carrying out its obligations in accordance with these Terms. Subject to clause 8.1, no Intellectual Property Rights in any Application or Modification created by the Licensee will be deemed to transfer to the Licensor under these Terms.\n\n### 8.3\n\nEach party may use or re-use any skills, knowledge, experience, technical information, inventions, ideas or techniques of whatever nature utilised or gained by such party in the course of performing its obligations under these Terms (\"Proficiency\"), for its own benefit or the benefit of third parties, provided that such Proficiency does not involve:\n\n(a) the infringement of any part of the Intellectual Property Rights belonging to the other party (or the other party's third-party licensors); or\n\n(b) the use or disclosure of Confidential Information of the other party where such use or disclosure would be in breach of clause 11.\n\n## 9. Indemnities\n\n### 9.1\n\nThe Licensor shall indemnify, defend and hold harmless the Licensee against all Losses that the Licensee incurs or suffers however arising as a result of or in connection with any claim that the receipt, possession or use of any of the Licensed Materials, Licensor Materials and/or Support Services by the Licensee infringes the Intellectual Property Rights or other proprietary rights of any third party, provided that:\n\n(a) the Licensee notifies the Licensor in writing as soon as reasonably practicable of any claim under clause 9.1 of which the Licensee has notice (an \"Indemnified Claim\");\n\n(b) the Licensee does not admit any liability or agree to any settlement or compromise of an Indemnified Claim without the prior written consent of the Licensor, which shall not be unreasonably withheld or delayed;\n\n(c) the Licensor shall, at any time from notification in accordance with clause 9.1(a), at the Licensor's request, cost and expense, be entitled to assume exclusive conduct of the Indemnified Claim (which shall include the right to conduct any proceedings or action in relation to, negotiate the settlement of, and to conduct all discussions and dispute resolution efforts in connection with the Indemnified Claim, provided that no settlement of a claim which would or might affect any rights of the Licensee, or involve any admission of fault or liability on the part of the Licensee, shall be entered into without the Licensee's prior written consent); and\n\n(d) the Licensee shall give the Licensor all assistance that the Licensor may reasonably require in connection with the conduct of the Indemnified Claim.\n\n### 9.2\n\nWithout prejudice to clause 9.1, in the event that the receipt, possession or use of any of the Licensed Materials, Licensor Materials and/or Support Services is restricted as a result of any claim for which the Licensor is obliged to indemnify under clause 9.1, the Licensor may, at its discretion, either procure the rights necessary for continued receipt, possession and use or promptly carry out such modification or replacement as may be necessary to make receipt, possession and use non-infringing.\n\n## 10. Exclusions and limitations\n\n### 10.1\n\nNeither party's liability:\n\n(a) for death or personal injury caused by its negligence;\n\n(b) for fraudulent misrepresentation or for any other fraudulent act or omission;\n\n(c) for breach of clauses 3.5, 3.6 and/or 11;\n\n(d) for breach of any indemnity contained in these Terms; or\n\n(e) for any other liability which may not lawfully be excluded or limited;\nis excluded or limited by these Terms, even if any other term of these Terms would otherwise suggest that this might be the case.\n\n### 10.2\n\nSubject to clause 10.1, neither party shall be liable for:\n\n(a) any indirect, consequential or special loss; or\n\n(b) any loss of profit,\n\n(c) loss of business or contracts,\n\n(d) lost production or operation time,\n(e) loss of or corruption to data, or\n(f) loss of goodwill or anticipated savings;\n\nhowever arising (whether from breach of contract, tort (including negligence), breach of statutory duty or otherwise), whether or not such loss was foreseeable or if the party which would otherwise be liable for such loss was advised of its possibility (and, for the purposes of this clause 10.2, the term \"loss\" includes a partial loss or reduction in value as well as a complete or total loss).\n\n### 10.3\n\nSubject to clauses 10.1 and 10.2, a party's total liability to the other party arising out of or relating to these Terms or its subject matter and to anything which it has done or not done in connection with the same (whether from breach of contract, tort (including negligence), breach of statutory duty or otherwise) shall be limited, in aggregate for all claims arising, to the greater of: (a) the total of all amounts payable (whether or not yet paid) by the Licensee under these Terms; and (b) $5,000. The total liability of a party for any specific event will not exceed the total aggregate liability for such party, as calculated above, less any sums payable for previous events giving rise to liability on the part of such party that have occurred prior to the date of the specific event.\n\n## 11. Confidentiality\n\n### 11.1\n\nEach party shall:\n\n(a) keep confidential all Confidential Information of the other party which it receives in connection with these Terms;\n\n(b) only use such Confidential Information as strictly necessary for the performance of, or exercise of its rights under, these Terms;\n\n(c) subject to clause 11.2, not disclose such Confidential Information to any third party, other than its professional advisers, officers, employees, agents, contractors and sub-contractors on a 'need to know' basis as strictly required for the purposes of and as permitted under these Terms and subject to each such person being bound by an obligation of confidentiality equivalent to this clause 11; and\n\n(d) promptly, upon request and, in any event, upon termination of these Terms(for whatever reason), return to the other party all materials (in whatever form) incorporating, embodying or recording any such Confidential Information in its possession or control and, if requested by the other party, certify in writing that it has done so.\n\n### 11.2\n\nEither party may disclose the other's Confidential Information to the extent required by law or by any court, tribunal, regulator or other authority with competent jurisdiction to order its disclosure (but only to the extent of such requirement), provided that, to the extent permitted by law, the party compelled to make such disclosure shall notify the other party of the disclosure in advance.\n\n## 12. Data protection\n\n### 12.1\n\nEach party shall:\n\n(a) at all times during the term of this Terms, comply with the Data Protection Legislation; and\n(b) to the extent applicable under the Data Protection Legislation, obtain and maintain all appropriate registrations required in order to allow that party to perform its obligations under these Terms.\n\n### 12.2\n\nIn this clause 12, the terms \"personal data\", \"process\" and \"processor\" shall have the meanings given in the applicable Data Protection Legislation. In relation to all personal data provided or made available to the Licensor by or on behalf of the Licensee, the Licensor:\n\n(a) acknowledges that, as between the parties, it acts only as a processor;\n\n(b) shall only process such personal data in accordance with these Terms and the Licensee's instructions issued from time to time;\n\n(c) shall promptly inform the Licensee if, in the Licensor's opinion, any instructions given to it by the Licensee in relation to the processing of such personal data under these Terms infringe any Data Protection Legislation;\n\n(d) shall implement and operate appropriate technical and organisational measures to ensure: (i) the protection of the rights of the relevant data subjects; (ii) and a level of security appropriate to the risks that are presented by any processing of such personal data, in particular protection from accidental loss or unlawful destruction, loss, alteration, unauthorised disclosure of, or access to, personal data transmitted, stored or otherwise processed by the Licensor pursuant to these Terms.\n\n(e) shall procure that any permitted sub-processor implements and operates, appropriate technical and organisational measures to ensure: (i) the protection of the rights of the relevant data subjects; and (ii) a level of security appropriate to the risks that are presented by any processing of such personal data, in particular protection from accidental loss or unlawful destruction, loss, alteration, unauthorised disclosure of, or access to, personal data transmitted, stored or otherwise processed by the Licensor pursuant to these Terms;\n\n(f) shall not, without the prior written consent of the Licensee, transfer any such personal data to a country or territory outside the UK or European Economic Area unless adequate contractual or other assurances have first been put in place such as will enable each party to comply with the requirements of the Data Protection Legislation;\n\n(g) shall not engage any sub-processor without the prior written consent of the Licensee and then only on the basis of a written contract between the Licensor and the sub-processor which imposes on the sub-processor terms equivalent to the provisions of this clause 12. The Licensor shall be responsible for the management of any permitted sub-processor and its compliance with such terms and shall be directly liable to the Licensee for any breach of the same;\n\n(h) shall notify the Licensee without undue delay of any breach of the provisions of this clause 12 and provide assistance to the Licensee in respect of any such breach;\n\n(i) shall provide timely cooperation and assistance to the Licensee in ensuring compliance with: **(i)** the Licensee's obligations to respond to any complaint or request form any applicable data protection authority or data subjects seeking to exercise their rights under any Data Protection Legislation, including by promptly notifying the Licensee of each subject access request the Licensor receives; **(ii)** the Licensee's obligations set out under Articles 32-36 of the GDPR to: **(A)** ensure the security of the processing; **(B)** notify the relevant supervisory authority and any data subjects, where relevant, of any personal data breach; **(C)** carry out any data protection impact assessments (\"DPIA\") on the impact of the processing on the protection of personal data; and **(D)** consult the relevant supervisory authority prior to any processing where a DPIA indicates that the processing would result in a high risk in the absence of measures taken by the Licensee to mitigate the risk; and\n\n(j) shall make available to the Licensee all information reasonably required by the Licensee to demonstrate the Licensor's compliance with its obligations set out in this clause 12 and allow and participate in any data protection audits and inspections conducted by the Licensee or another auditor mandated by the Licensee.\n\n## 13. Commencement and duration of Terms\n\n### 13.1\n\nThese Terms shall commence on the Effective Date and shall, unless sooner terminated in accordance with its terms, terminate automatically without notice on expiry or termination of the last Quotation.\n\n## 14. Commencement and duration of Quotations\n\n### 14.1\n\nThe relevant Quotation is effective as of the later of the: (i) Effective Date; and (ii) effective date set out in the relevant Quotation (\"Quotation Effective Date\"). The relevant Quotation shall commence on the relevant Quotation Effective Date and shall, unless sooner terminated in accordance with its terms or these Terms, continue for a period of 12 months (\"Quotation Initial Term\") when it shall terminate automatically without notice unless, no later than 30 days before the end of the relevant Quotation Initial Term (or any Quotation Renewal Term agreed in accordance with this clause), the parties agree in writing that the terms of the relevant Quotation shall be extended for a period of 12 months from the effective date.\n\n### 14.2\n\nUnless the relevant Quotation is further extended in accordance with this clause or terminated earlier in accordance with its terms or these Terms, the relevant Quotation shall terminate automatically without notice at the end of the relevant Quotation Renewal Term.\n\n## 15. Termination\n\n### 15.1\n\nEither party may terminate these Terms and/or any Quotation by giving the other written notice if:\n\n(a) the other materially breaches any term of these Terms and it is not possible to remedy that breach;\n\n(b) the other materially breaches any term of these Terms and it is possible to remedy that breach, but the other fails to do so within 30 days of being requested in writing to do so;\n\n(c) the other suffers or undergoes an Insolvency Event and to the extent such termination is permitted under applicable law; or\n\n(d) the other is delayed in performing its obligations under these Terms under clause 17 for a period of 30 days or more.\n\nFor the purposes of this clause 15.1, in order for it to be possible to remedy a breach it must be possible to take steps so as to put the other party into the same position which (save as to the date) it would have been in if the breach had never occurred.\n\n## 16. Consequences of termination\n\n### 16.1\n\nTermination of any Quotation will not have the effect of terminating the whole Terms or any other Quotation, but termination of these Terms will automatically terminate all Quotations.\n\n### 16.2\n\nTermination of these Terms and/or any Quotation for any reason will not affect:\n\n(a) any accrued rights or liabilities which either party may have by the time termination takes effect; or\n(b) the coming into force or the continuation in force of any of its provisions that expressly or by implication are intended to come into force or continue in force on or after termination. Without prejudice to the foregoing, clauses 3, 4, 6. 7, 9, 10, 11,16 and 18 shall survive termination of these Terms.\n\n## 17. Force majeure\n\nNeither party will be liable to the other for any failure or delay in performing its obligations under these Terms which arises because of any circumstances which it cannot reasonably be expected to control (including any fire, flood, earthquake, elements of nature or acts of God, acts of war (whether or not war is declared), terrorism, riots, civil disorders, rebellions or revolutions, strikes, lock outs or other form of industrial action, provided that nothing shall affect the Licensee's obligation to make any payments due under these Terms. 18.\n\n## 18. General\n\n### 18.1\n\nExcept as expressly permitted under these Terms, the Licensee may not sub-license or assign, sub-contract or delegate any or all of its rights or obligations under these Terms without the prior written consent of the Licensor. Licensed use of this Software within AdapTable is deemed perpetual.\n\n### 18.2\n\nIn the event that the Licensor consents to the Licensee sub-contracting performance of its obligations, the Licensee will remain liable for performance of the relevant obligations and shall procure that the sub-contractor complies with all relevant provisions of these Terms applying to performance of the obligations concerned.\n\n### 18.3\n\nAll notices and consents relating to these Terms must be sent by email.\n\n### 18.4\n\nUnless the parties expressly agree otherwise in writing:\n\n(a) if a party:\n(i) fails to exercise or delays exercising or only exercises partially any right or remedy provided under these Terms or by law; or\n(ii) agrees not to exercise or to delay exercising any right or remedy provided under these Terms or by law;\n\nthen that party shall not be deemed to have waived and shall not be precluded or restricted from further exercising that or any other right or remedy; and\n\n(b) no right, power or remedy under these Terms or otherwise available to a party is exclusive of any other right, power or remedy under these Terms or otherwise available to that party.\n\n### 18.5\n\nIf any provision of these Terms is held for any reason to be ineffective or unenforceable, this shall not affect the validity or enforceability of any other provision of these Terms or these Terms as a whole. If any provision of these Terms is so found to be ineffective or unenforceable but would be effective or enforceable if some part of the provision were deleted, the provision in question shall apply with such modification(s) as may be necessary to make it effective and enforceable.\n\n### 18.6\n\nAll variations to these Terms must be agreed, set out in writing and signed on behalf of both parties before they take effect.\n\n### 18.7\n\nExcept to the extent that these Terms expressly provide otherwise, nothing in these Terms shall or is intended to create a partnership or joint venture between the parties, constitute one party as agent of the other or give either party authority to make or enter into commitments, assume liabilities or pledge credit on behalf of the other party. Neither party may act as f it were or represent (expressly or by implying it) that it is, an agent of the other or has such authority.\n\n### 18.8\n\nEach party confirms that, in entering into and performing these Terms, it is acting as principal and not as the agent of any undisclosed third-party principal.\n\n### 18.9\n\nA person who is not a party to these Terms shall not have any rights whether under the Contracts (Rights of Third Parties) Act 1999 or otherwise.\n\n### 18.10\n\nThe Licensor shall:\n\n(a) comply with all applicable laws, statutes, regulations and codes relating to anti-bribery and anti-corruption, including the Bribery Act 2010 (\"Act\");\n\n(b) not do anything which would constitute an offence or which would cause the Licensee to commit an offence under the Act;\n\n(c) have and shall maintain in place throughout the term of these Terms its own policies and procedures (copies of which will be made available to the Licensee upon request), including adequate procedures to ensure compliance with the Act as informed by the principles outlined in the guidance to the Act, and will enforce them where appropriate;\n\n(d) promptly report to the Licensee any request or demand for any undue financial or other advantage of any kind received by the Licensor in connection with the performance of these Terms; and\n\n(e) procure that all associated persons (as defined in the Act) of the Licensor will comply with clauses 18.10(a) to (c).\nA breach of this clause 18.10 by the Licensor shall constitute a material breach entitling the Licensee to terminate these Terms immediately on written notice.\n\n### 18.11\n\nThese Terms sets out all of the terms that have been agreed between the parties in relation to the subjects covered by it and no other terms shall be applicable between the parties in relation to such subjects, including without limitation, any terms set out on any purchase orders that have been issued by the Licensee. Provided always that nothing in this clause 18.11 will operate to limit or exclude any liability for fraud or fraudulent misrepresentation, no other representations or terms shall apply or form part of these Terms. Each party acknowledges that it has not been influenced to enter these Terms by and shall have no right or remedy (other than for breach of contract) in respect of, anything the other party has said or done or committed to do, except as expressly recorded in these Terms.\n\n### 18.12\n\nThese Terms are governed by English law. The parties submit to the exclusive jurisdiction of the English courts in relation to any dispute or difference between the parties arising out of or in connection with these Terms, its interpretation or subject-matter, but the Licensor is also entitled to apply to any court worldwide for injunctive or other remedies in order to protect or enforce its Intellectual Property Rights and/or Confidential Information.\n\n# Support Schedule\n\n## 1. Scope of Support Services\n\n### 1.1\n\nThe Licensor shall provide the following Support Services for the Software in accordance with these Terms:\n\n(a) corrective maintenance as described in paragraph 2; and\n\n(b) a software updating service as described in paragraph 3.\n\n### 1.2\n\nThe Support Services will be provided in English.\n\n### 1.3\n\nNotwithstanding anything else in these Terms, the Licensor shall not be obliged to provide Support Services:\n\n(a) in relation to any Bug to the extent that it is caused by the Licensee's misuse, misconfiguration, alteration or damage to the Software; the Licensee's failure to install an Update; or use of the Software in breach of these Terms;\n\n(b) on any public holiday day in the UK; and\n\n## 2. Corrective maintenance\n\n(a) Upon receipt of a Support Request, the Licensor shall use its reasonable endeavours to commence corrective maintenance or otherwise resolve the Support Request by the end of the following Business Day.\n\n(b) Notwithstanding anything else in the Support Schedule, the Licensor shall only be required to resolve Support Requests which relate to the current release of the Software.\n\n## 3. Software updating service\n\n### 3.1\n\nThe Licensor shall promptly make available to the Licensee Developers, as part of the Support Services, all Updates issued generally by the Licensor to its customers or to users of the Software.\n\n### 3.2\n\nThe Licensor shall promptly notify the Licensee Developers of all revisions, additions or updates to all Documentation which may be necessary as a result of the provision of any Update to enable proper use to be made of the Software by the Licensee Developers.\n"
    },
    "/privacy": {
      "filePath": "/privacy",
      "routePath": "/privacy",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/privacy.page.md",
      "fileName": "privacy.page.md",
      "folderPath": "/",
      "frontmatter": {
        "title": "Privacy Policy",
        "metaTitle": "Infinite Table DataGrid for React ‚Äî Privacy Policy",
        "metaDescription": "Infinite Table DataGrid for React ‚Äî Privacy Policy"
      },
      "excerpt": "_Last updated: 30 October 2022_",
      "readingTime": "7 min read",
      "content": "\n_Last updated: 30 October 2022_\n\n_This document describes the policies and procedures we use at Infinite Table in relation to the collection, use and disclosure of your information when you use our products._\nInfinite Table is fully committed to protecting your personal data and we ensure that we comply with all relevant data privacy laws.\n\nThis privacy policy gives details on what happens to your personal data when you use the Infinite Table website or the Infinite Table DataGrid.  \nShould you have concerns about your data, our contact details are:\n\nEmail address: admin@infinite-table.com\n\n## Our Collection and Processing of your Data\n\nPersonal data refers to any information which can identify an individual. It does not include anonymised data.\n\nThe personal data we may use at Infinite Table is limited to the following:\n\n### Communication Data¬†\n\nThis encompasses any message you send to us via forms on our website, by email or through any other form of communication. We process this data in order to communicate with you, for our own record keeping and in the event it should become necessary, for the establishment, pursuance or defence of legal claims.\n\nWe are lawfully entitled to process your data in this way on the grounds of legitimate interest, that is, in order to reply to communications sent to us, to keep records and to establish, pursue or defend legal claims.\n\n### Customer Data\n\nThis refers to data connected to any purchasing of Infinite Table licenses, including your name, billing address, email address, phone number, contact details, and purchase details. We process this data to supply you with the services you have purchased and to keep records of such transactions. Our lawful ground for this processing is the performance of a contract between you and us and/or taking steps at your request to enter into such a contract.\n\n### Marketing Data\n\nThis includes data about your preferences in receiving marketing materials from us. We process this data to deliver relevant content to you and measure or understand the effectiveness of this advertising. Our lawful ground for this processing is our consent, where we have asked for it or legitimate interests, where you have previously purchased from us or expressed an interest in our services or products, which in this case are to study how customers use our products/services, to develop them, to grow our business and to decide our marketing strategy.\n\n### Sensitive Data\n\n**We do not collect any Sensitive Data about you** (i.e. data that includes details about your race or ethnicity, religious or philosophical beliefs, sex life, sexual orientation, political opinions, trade union membership, information about your health and genetic and biometric data, criminal convictions and offences).\n\n### How We Collect Your Personal Data\n\nWe only collect data about you by you providing data directly to us (by filling in forms on our site or by sending us emails). We do not use any cookies on our website.\n\n### Marketing Communications\n\nOur lawful grounds for processing your personal data to send you marketing communications is either your consent or our legitimate interests (namely to grow our business).\n\nUnder the Privacy and Electronic Communications Regulations, we may send you marketing communications if:\n\n- you made a purchase or asked for information from us about our goods or services\n- you agreed to receive marketing communications and in each case you have not since opted out of receiving such communications. You can opt out of receiving marketing emails from us at any time.\n\nYou can ask us to stop sending you marketing messages at any time by following the opt-out links on any marketing message sent to you or via email.\n\nIf you opt out of receiving marketing communications this opt-out does not affect personal data provided as a result of other transactions, such as purchases, warranty registrations etc.\n\n### Disclosures Of Your Personal Data\n\nWe may have to share your personal data with one or more of the parties below:\n\n- Professional advisers including lawyers, bankers, auditors and insurers\n- Government bodies that require us to report processing activities.\n\nWe require all third parties to whom we transfer your data to respect the security of your personal data and to treat it in accordance with the law. We only allow such third parties to process your personal data for specified purposes and in accordance with our instructions.\nInternational Transfers\n\n### Data Security\n\nWe have security measures in place to prevent your personal data from being accidentally lost, used, altered, disclosed, or accessed without authorisation. We also allow access to your personal data only to those employees and partners who have a business need to know such data. They will only process your personal data on our instructions, and we insist on absolute confidentiality.\n\nWe have strict procedures in place to deal with any suspected personal data breach and will notify you and any applicable regulator of a breach if we are legally required to.\n\n### Data Retention\n\nWe will only retain your personal data for as long as necessary to fulfil the purposes we collected it for, including for the purposes of satisfying any legal, accounting, or reporting requirements.\n\nWhen deciding the correct time for which to keep the data, we look at its amount, nature and sensitivity, potential risk of harm from unauthorised use or disclosure, the processing purposes, and if these can be achieved by other means and legal requirements.\n\nFor tax purposes the law requires us to keep basic information about our customers (including Contact, Identity, Financial and Transaction Data) for six years after they stop being customers.\n\n### Your Legal Rights\n\nUnder data protection laws your rights in relation to your personal data include the right to:\n\n- request access, correction, erasure, restriction or transfer of data\n- object to processing, or to movement of data and (where the lawful ground of processing is consent) to withdraw consent\n\nIn order to exercise any of your rights, please get in touch with us at [admin@infinite-table.com](mailto:admin@infinite-table.com); we guarantee to respond to your request as quickly as possible.\n\nInfinite Table will not require you to pay a fee to access your personal data or to exercise any of the other rights relating to your data.\n\nWe may need to request specific information from you to help us confirm your identity and ensure your right to access your personal data and your rights in relation to it. This is an important security measure designed to protect your data and to ensure that personal data is not disclosed to any person who has no right to receive it. We may also contact you to ask you for further information in relation to your request.\n\nWe try to respond to all legitimate requests within one week. Occasionally it may take us longer if your request is particularly complex or you have made a number of requests. In this case, we will notify you.\n\nIf you are not happy with any aspect of how we collect and use your data, we would ask you to get in touch with us so that we can try to resolve the issue for you.\n\n### Third-Party Links\n\nThe Infinite Table website includes links to third-party websites, plug-ins and applications. Clicking on those links or enabling those connections may allow third parties to collect or share data about you. We do not control these third-party websites and are not responsible for their privacy statements. We advise you to be aware when you leave our website, and to read the privacy notice of every website you visit.\n"
    },
    "/blog/ideas": {
      "filePath": "/blog/ideas",
      "routePath": "/blog/ideas",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/ideas.page.md",
      "fileName": "ideas.page.md",
      "folderPath": "/blog/",
      "frontmatter": {
        "title": "Blog ideas",
        "draft": true,
        "date": "2025-01-01T00:00:00.000Z"
      },
      "excerpt": "# Blog post about keeping productivity high in infinite table - tests, build tools, styling approach",
      "readingTime": "1 min read",
      "content": "\n# Blog post about keeping productivity high in infinite table - tests, build tools, styling approach\n"
    },
    "/docs/devtools": {
      "filePath": "/docs/devtools",
      "routePath": "/docs/devtools",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/devtools.page.md",
      "fileName": "devtools.page.md",
      "folderPath": "/docs/",
      "frontmatter": {
        "title": "Infinite Table DevTools",
        "description": "Guide on using the Chrome DevTools Extension for the Infinite Table React DataGrid"
      },
      "excerpt": "We're happy to announce that [Infinite Table DevTools extension](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa) is now live - [install it here!](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa)",
      "readingTime": "1 min read",
      "content": "\nWe're happy to announce that [Infinite Table DevTools extension](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa) is now live - [install it here!](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa)\n\n\n\nTo see the extension on a live demo, head to the [chrome webstore](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa) to download the extension.\n\nThen visit [our live demo page](/full-demo) and open your browser devtools - you should see the \"Infinite Table\" devtool tab. Click it and enjoy interacting with the DataGrid!\n\n\n<Note>\n\nTo see an Infinite Table instance in the devtools, specify the <PropLink name=\"debugId\" /> prop.\n\n\n```tsx {2}\n<InfiniteTable\n  debugId=\"unique id for devtools\"\n/>\n```\n\n</Note>\n\nInfinite Table is the first DataGrid with a Chrome DevTools extension. Starting with version `7.0.0` of Infinite, you can specify the `debugId` property on the `<InfiniteTable />` instance and it will be picked up by the devtools.\n\n\n```tsx {16}\nconst columns = {\n  name: {\n    field: 'firstName',\n  },\n  lastName: {\n    field: 'lastName',\n  },\n  age: {\n    field: 'age',\n  },\n}\n\nconst App = () => {\n  return <DataSource primaryKey={'id'} data={[...]}>\n    <InfiniteTable\n      debugId=\"simple\"\n      columns={columns}\n    />\n  </DataSource>\n}\n```\n\n<Note>\n\nIf you have multiple instances, each with a unique `debugId` property, they will all show up\n</Note>\n\n<img src=\"https://raw.githubusercontent.com/infinite-table/infinite-react/refs/heads/master/devtools/screenshots/main.jpg\" alt=\"Infinite Table DevTools Extension\" width=\"100%\" style={{minWidth: \"100%\"}} />\n"
    },
    "/docs/": {
      "filePath": "/docs/index",
      "routePath": "/docs/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/",
      "frontmatter": {
        "title": "Infinite Table Documentation",
        "description": "Developer Documentation for Infinite Table, your go-to React DataGrid component to handle huge amounts of data"
      },
      "excerpt": "<HomepageHero />",
      "readingTime": "3 min read",
      "content": "\n<HomepageHero />\n\n## What is Infinite Table?\n\nInfinite Table is a React DataGrid component for displaying virtualized tabular data.\n\nIt helps you display huge datasets and get the most out of your data by providing you the right tools to enjoy these features:\n\n- [<img src=\"/icons/50x50/sorting.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> sorting](/docs/learn/sorting/overview)\n- [<img src=\"/icons/50x50/row-grouping.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> row grouping](/docs/learn/grouping-and-pivoting/grouping-rows) - both server-side and client-side\n- [<img src=\"/icons/50x50/pivoting.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> pivoting](/docs/learn/grouping-and-pivoting/pivoting/overview) - both server-side and client-side\n- [<img src=\"/icons/50x50/aggregations.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> aggregations](/docs/learn/grouping-and-pivoting/grouping-rows#aggregations)\n- [<img src=\"/icons/50x50/live-pagination.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> live pagination](/docs/learn/working-with-data/live-pagination)\n- [<img src=\"/icons/50x50/lazy-loading.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> lazy loading](/docs/learn/working-with-data/lazy-loading)\n- [<img src=\"/icons/50x50/keyboard-navigation.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> keyboard navigation](/docs/learn/keyboard-navigation/navigating-cells)\n- [<img src=\"/icons/50x50/fixed-flex-cols.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> fixed and flexible columns](/docs/learn/columns/fixed-and-flexible-size)\n- [<img src=\"/icons/50x50/column-grouping.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> column grouping](/docs/learn/column-groups)\n- [<img src=\"/icons/50x50/filtering.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> filtering](/docs/learn/filtering)\n- [<img src=\"/icons/50x50/theming.svg\" height=\"50\" width=\"50\" style={{display: 'inline-block'}} /> theming](/docs/learn/theming)\n\n## Installation\n\nInstallation could not be more straightforward - just one npm command:\n\n<TerminalBlock>\nnpm i @infinite-table/infinite-react\n</TerminalBlock>\n\n## ‚ù§Ô∏è TypeScript\n\nInfinite Table is fully typed and offers you a great developer experience, to help you get up and running quickly.\n\n> The TypeScript typings file is included in the npm package - you don't have to download an additional **@types** package\n\n<HeroCards>\n<YouWillLearnCard title=\"Learn about our TypeScript typings\" path=\"/docs/learn/getting-started/typescript-types\">\nRead more about how to use our TypeScript types\n</YouWillLearnCard>\n\n</HeroCards>\n\n## üìÑ Extensive Documentation\n\nWe're aware good documentation is a must and are updating our documentation as we add new features. Head to [our getting started](/docs/learn/getting-started) guide to get up and running quickly.\n\n## üè¢ Enterprise-Ready\n\nInfinite Table is ready to power your enterprise apps, as it supports advanced [data fetching](/docs/learn/working-with-data#data-loading-strategies), [filtering](/docs/learn/filtering), [sorting](/docs/learn/sorting/overview), [grouping](/docs/learn/grouping-and-pivoting/grouping-rows), [pivoting](/docs/learn/grouping-and-pivoting/pivoting/overview), [aggregations](/docs/learn/grouping-and-pivoting/group-aggregations), [live pagination](/docs/learn/working-with-data/live-pagination), [lazy loading](/docs/learn/working-with-data/lazy-loading) - all of those with support for both client-side and server-side implementations.\n\nYou can choose to leverage our built-in implementations in the browser, or you can process your data on the server with full support from our-side.\n\n### üîí Secure by Default\n\nWe take security seriously and only have a total of 3 dependencies in our full dependency graph - and this number will only go down.\n\n### üì¶ Small Bundle Size\n\nOur bundle size is under `300kB` and we're dedicated to [keeping it small](https://bundlephobia.com/package/@infinite-table/infinite-react).\n\n<HeroCards>\n<YouWillLearnCard title=\"Small bundle\" newTab path=\"https://bundlephobia.com/package/@infinite-table/infinite-react\">\n\nSee our bundle size in BundlePhobia\n\n</YouWillLearnCard>\n</HeroCards>\n\n### üß™ Automated End-to-End Tests\n\nOur releases are automated and, we have full end-to-end tests that ensure we're delivering to our standards.\n\nReal-browser tests help us move with confidence and continue to ship great features.\n\n<HeroCards>\n<YouWillLearnCard title=\"End-to-end tests\" newTab path=\"https://github.com/infinite-table/infinite-react/tree/master/examples/src/pages/tests\">\n\nCheck out our end-to-end tests in GitHub\n\n</YouWillLearnCard>\n\n</HeroCards>\n\n## üé® Themable\n\n`Infinite Table` is fully customizable, via CSS variables.\n\nIt ships with both a **light** and a **dark** theme - all you have to do is import the CSS file from the package.\n\n```ts\nimport '@infinite-table/infinite-react/index.css';\n\n// This file includes both the light and the dark themes.\n```\n\n<HeroCards>\n<YouWillLearnCard title=\"Theming with CSS Variables\" path=\"/docs/learn/theming#css-variables\">\n\nRead how to use themes and **CSS variables** to customize every aspect of Infinite Table\n\n</YouWillLearnCard>\n</HeroCards>\n"
    },
    "/comparison/": {
      "filePath": "/comparison/index",
      "routePath": "/comparison/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/comparison/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/comparison/",
      "frontmatter": {},
      "excerpt": "# Comparison of React DataGrids",
      "readingTime": "1 min read",
      "content": "# Comparison of React DataGrids\n\n## DevExtreme Data Grid\n\n\nSandpack deps=\"devextreme-react,devextreme\">\n\n```tsx file=\"devexpress.app.tsx\"\n\n```\n\n```html file=devexpress.index.html\n\n```\n\n```ts file=\"columns.ts\"\n\n```\n\nSandpack\n\n## AG Grid\n\nSandpack deps=\"ag-grid-community,ag-grid-react,ag-grid-enterprise\"\n\n`tsx file=\"aggrid.page.tsx\"\n\n`\n\n`ts file=\"columns.ts\"\n\n`\n\nSandpack\n\n## Infinite Table\n\nSandpack\n\n`tsx file=\"infinite.page.tsx\"\n\n`\n\n`ts file=\"columns.ts\"\n\n`\n\nSandpack\n"
    },
    "/docs/releases/": {
      "filePath": "/docs/releases/index",
      "routePath": "/docs/releases/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/releases/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/releases/",
      "frontmatter": {
        "title": "Releases",
        "description": "All releases | Infinite Table DataGrid for React"
      },
      "excerpt": "## 7.2.0",
      "readingTime": "6 min read",
      "content": "\n## 7.2.0\n\nRelease GroupingToolbar - a new way to interact with your grouping.\nFix error that appeared when column pinning was used and no visible columns were available.\n\n## 7.1.0\n\nSupport for React 19 - update source-code, fix tests and update typings to work with React 19\n\n## 7.0.1\n\nBugfix related to devtools Uncaught TypeError: Cannot read properties of undefined (reading 'startsWith')\n\n## 7.0.0\n\nFirst version that supports Infinite Table devtools.\n\n## 6.2.11\n\nImprove performance on heavy scrolling by avoiding CSS vars for scroll pos.\n\n## 6.2.10\n\nRecompute DataSource repeat wrapped group rows when `wrapRowsHorizontally` changes.\n\n## 6.2.9\n\nFix edge case where `repeatWrappedGroupRows` didn't work in trees for collapsed non-leaf nodes. When a non-leaf node was collapsed, if it was the first node in a column set, it didn't repeat its parents correctly.\nVersion `6.2.9` fixes this.\n\n## 6.2.8\n\nMinor bugfix.\n\n## 6.2.6\n\nConsolidate themes\n\n## 6.2.2\n\nUpdate shadcn theme to work well with the latest tailwind 4 colors.\n\n## 6.2.0\n\nStarting with this release, the CSS for each theme (other than the `\"default\"`) is not included in the root CSS file (`@infinite-table/infinite-react/index.css`) and has to be imported explicitly:\n\n```ts\nimport '@infinite-table/infinite-react/theme/shadcn.css'\nimport '@infinite-table/infinite-react/theme/balsam.css'\nimport '@infinite-table/infinite-react/theme/minimalist.css'\nimport '@infinite-table/infinite-react/theme/ocean.css'\n```\n\n## 6.1.1\n\nFix performance regressions introduced in 6.1.0.\n\nAdd [Keyboard Navigation API](/docs/reference/keyboard-navigation-api)\n\n## 6.1.0\n\nThis release includes a refactor of the core virtualization algorithm, which should result some performance improvements in certain scenarios.\n\n@milestone id=\"142\"\n\n## 6.1.0-canary.0\n\nFix virtualization issues.\n\n## 6.0.20\n\n\n## 6.0.19\n\n@milestone id=\"141\"\n\n## 6.0.18\n\n@milestone id=\"140\"\n\n## 6.0.16\n\n@milestone id=\"139\"\n\n## 6.0.15\n\n@milestone id=\"138\"\n\n## 6.0.13\n\n@milestone id=\"136\"\n\n## 6.0.12\n\n@milestone id=\"135\"\n\n## 6.0.10\n\n@milestone id=\"134\"\n\n## 6.0.9\n\n@milestone id=\"133\"\n\n## 6.0.8\n\n@milestone id=\"132\"\n\n## 6.0.5\n\n@milestone id=\"131\"\n\n## 6.0.0\n\n@milestone id=\"130\"\n\n## 5.0.5\n\n@milestone id=\"129\"\n\n## 5.0.4\n\n@milestone id=\"128\"\n\n## 5.0.1\n\n@milestone id=\"127\"\n\n## 5.0.0\n\nAdd support for horizontal layout.\n\n## 4.4.1\n\n## 4.4.0\n\n@milestone id=\"125\"\n\n## 4.3.7\n\n@milestone id=\"124\"\n\n## 4.3.2\n\n@milestone id=\"123\"\n\n## 4.3.0\n\nFix major lazy loading bugs and issues.\n\n## 4.2.0\n\nReplace `sortMode` with [shouldReloadData.sortInfo](https://infinite-table.com/docs/reference/datasource-props#shouldReloadData.sortInfo)\nReplace `groupMode` with [shouldReloadData.groupBy](https://infinite-table.com/docs/reference/datasource-props#shouldReloadData.groupBy)\n\n@milestone id=\"122\"\n\n## 4.1.0\n\n@milestone id=\"121\"\n\n## 4.0.0\n\n@milestone id=\"120\"\n\n## 3.3.4\n\n@milestone id=\"119\"\n\n## 3.3.3\n\n@milestone id=\"118\"\n\n## 3.3.0\n\n@milestone id=\"117\"\n\n## 3.2.11\n\n@milestone id=\"116\"\n\n## 3.2.6\n\n@milestone id=\"115\"\n\n## 3.2.5\n\n@milestone id=\"114\"\n\n## 3.2.3\n\n@milestone id=\"112\"\n\n## 3.2.0\n\n@milestone id=\"111\"\n\n## 3.1.5\n\n@milestone id=\"109\"\n\n## 3.1.1\n\n@milestone id=\"107\"\n\n## 3.1.0\n\n@milestone id=\"106\"\n\n## 3.0.15\n\n@milestone id=\"105\"\n\n## 3.0.12\n\n@milestone id=\"104\"\n\n## 3.0.10\n\n@milestone id=\"102\"\n\n## 3.0.9\n\n@milestone id=\"101\"\n\n## 3.0.7\n\n@milestone id=\"100\"\n\n## 3.0.4\n\n@milestone id=\"99\"\n\n## 3.0.3\n\n@milestone id=\"98\"\n\n## 3.0.1\n\n@milestone id=\"97\"\n\n## 3.0.0\n\n@milestone id=\"96\"\n\n## 2.0.8\n\n@milestone id=\"95\"\n\n## 2.0.4 üöÄ\n\n@milestone id=\"93\"\n\n## 2.0.3 üöÄ\n\n@milestone id=\"92\"\n\n## 2.0.2 üöÄ\n\n@milestone id=\"91\"\n\n## 2.0.0 üöÄ\n\nThis release, although a major one, does not introduce new major functionality, but rather improves on existing features and more specifically adds support for sorting group columns.\n\n#### Improved group column sorting\n\nVersion `2.0.0` allows you to make group columns sortable, even when they are configured with `groupBy` fields that are not actually bound to columns.\n\n```tsx\n<DataSource<Person>\n  groupBy={[\n    // those fields are not bound to actual columns\n    {field: 'team'},\n    {field: 'age' },\n  ]}>\n  <InfiniteTable<Person>\n    groupColumn={{\n      sortType: ['string', 'number'], // <--- allows you to have\n      // the group column sortable\n    }}\n    ...\n/>\n```\n\n### Updated column sortable behavior\n\nWe've also introduced a few new props and renamed `column.sortable` to <PropLink name=\"columns.defaultSortable\" />.\n\nAlso, the behavior for the <PropLink name=\"sortable\" /> prop has changed. The new <PropLink name=\"columnDefaultSortable\" /> is now what <PropLink name=\"sortable\" /> used to be, while the <PropLink name=\"sortable\" /> prop overrides any sorting flags and is the ultimate source of truth for column sorting.\n\n@milestone id=\"90\"\n\n## 1.3.23 üöÄ\n\n@milestone id=\"89\"\n\n## 1.3.22 üöÄ\n\n@milestone id=\"88\"\n\n## 1.3.21 üöÄ\n\n@milestone id=\"87\"\n\n## 1.3.20 üöÄ\n\n@milestone id=\"86\"\n\n## 1.3.17 üöÄ\n\n@milestone id=\"85\"\n\n## 1.3.15 üöÄ\n\n@milestone id=\"84\"\n\n## 1.3.12 üöÄ\n\n@milestone id=\"83\"\n\n## 1.3.8 üöÄ\n\n@milestone id=\"82\"\n\n## 1.3.7 üöÄ\n\n@milestone id=\"81\"\n\n## 1.3.6 üöÄ\n\n@milestone id=\"80\"\n\n## 1.3.4 üöÄ\n\n@milestone id=\"79\"\n\n## 1.3.2 üöÄ\n\n@milestone id=\"78\"\n\n## 1.3.0 üöÄ\n\n@milestone id=\"77\"\n\n## 1.2.5 üöÄ\n\n@milestone id=\"76\"\n\n## 1.2.4 üöÄ\n\n@milestone id=\"75\"\n\n## 1.2.3 üöÄ\n\n@milestone id=\"74\"\n\n## 1.2.2 üöÄ\n\n@milestone id=\"73\"\n\n## 1.2.1 üöÄ\n\n@milestone id=\"72\"\n\n## 1.2.0 üöÄ\n\n@milestone id=\"71\"\n\n## 1.1.0 üöÄ\n\n@milestone id=\"70\"\n\n## 1.0.0 üöÄ\n\n@milestone id=\"69\"\n\n## 0.9.0 üöÄ\n\n@milestone id=\"67\"\n\n## 0.8.1 üöÄ\n\n@milestone id=\"66\"\n\n## 0.8.0 üöÄ\n\n@milestone id=\"65\"\n\n## 0.7.3 üöÄ\n\n@milestone id=\"64\"\n\n## 0.7.1 üöÄ\n\n@milestone id=\"64\"\n\n## 0.7.0 üöÄ\n\n@milestone id=\"63\"\n\n## 0.6.4 üöÄ\n\n@milestone id=\"62\"\n\n## 0.6.3 üöÄ\n\n@milestone id=\"61\"\n\n## 0.6.2 üöÄ\n\n@milestone id=\"60\"\n\n## 0.6.1 üöÄ\n\n@milestone id=\"59\"\n\n## 0.6.0 üöÄ\n\n@milestone id=\"58\"\n\n## 0.4.12 üöÄ\n\n@milestone id=\"56\"\n\n## 0.4.10 üöÄ\n\n@milestone id=\"54\"\n\n## 0.4.9 üöÄ\n\n@milestone id=\"53\"\n\n## 0.4.8 üöÄ\n\n@milestone id=\"52\"\n\n## 0.4.7 üöÄ\n\n@milestone id=\"51\"\n\n## 0.4.6 üöÄ\n\n@milestone id=\"50\"\n\n## 0.4.5 üöÄ\n\n@milestone id=\"49\"\n\n## 0.4.4 üöÄ\n\n@milestone id=\"48\"\n\n## 0.4.3 üöÄ\n\n@milestone id=\"47\"\n\n## 0.4.1 üöÄ\n\n@milestone id=\"45\"\n\n## 0.4.0 üöÄ\n\n@milestone id=\"44\"\n\n## 0.3.22 üöÄ\n\n@milestone id=\"43\"\n\n## 0.3.21 üöÄ\n\n@milestone id=\"42\"\n\n## 0.3.20 üöÄ\n\n@milestone id=\"41\"\n\n## 0.3.19 üöÄ\n\n@milestone id=\"40\"\n\n## 0.3.17 üöÄ\n\n@milestone id=\"39\"\n\n## 0.3.16 üöÄ\n\n@milestone id=\"38\"\n\n## 0.3.15 üöÄ\n\n@milestone id=\"37\"\n\n## 0.3.14 üöÄ\n\n@milestone id=\"36\"\n\n## 0.3.13 üöÄ\n\n@milestone id=\"35\"\n\n## 0.3.12 üöÄ\n\n@milestone id=\"34\"\n\n## 0.3.11 üöÄ\n\n@milestone id=\"33\"\n\n## 0.3.10 üöÄ\n\n@milestone id=\"32\"\n\n## 0.3.7 üöÄ\n\n@milestone id=\"31\"\n\n## 0.3.6 üöÄ\n\n@milestone id=\"30\"\n\n## 0.3.4 üöÄ\n\n@milestone id=\"29\"\n\n## 0.3.3 üöÄ\n\n@milestone id=\"28\"\n\n## 0.3.2 üöÄ\n\n@milestone id=\"27\"\n\n## 0.3.1 üöÄ\n\n@milestone id=\"26\"\n\nRename `rowInfo.flatRowInfoArray` to `rowInfo.deepRowInfoArray`\n\n## 0.3.0 üöÄ\n\n@milestone id=\"25\"\n\n## 0.3.0-canary.0 üöÄ\n\nNew virtualization engine implemented for better performance.\n\n## 0.2.20 üöÄ\n\n@milestone id=\"24\"\n\n## 0.2.18 üöÄ\n\n@milestone id=\"22\"\n\n## 0.2.17 üöÄ\n\n@milestone id=\"21\"\n\n## 0.2.16 üöÄ\n\n@milestone id=\"20\"\n\n## 0.2.15 üöÄ\n\n@milestone id=\"19\"\n\n## 0.2.14 üöÄ\n\n@milestone id=\"18\"\n\n## 0.2.13 üöÄ\n\n@milestone id=\"17\"\n\n## 0.2.12 üöÄ\n\n@milestone id=\"16\"\n\n## 0.2.11 üöÄ\n\n@milestone id=\"15\"\n\n## 0.2.10 üöÄ\n\n@milestone id=\"14\"\n\n## 0.2.9 üöÄ\n\n@milestone id=\"13\"\n\n## 0.2.8 üöÄ\n\n@milestone id=\"12\"\n\n## 0.2.7 üöÄ\n\n@milestone id=\"11\"\n\n## 0.2.6 üöÄ\n\n@milestone id=\"9\"\n\n## 0.2.5 üöÄ\n\n@milestone id=\"8\"\n\n## 0.2.4 üöÄ\n\n@milestone id=\"7\"\n\n## 0.2.0 üöÄ\n\n- Implement initial support for [server-side pivoting](/docs/learn/grouping-and-pivoting/pivoting/overview)\n\n## 0.1.0 üöÄ\n\nThis release introduces several breaking changes:\n\n- `DataSource.groupRowsBy` has been renamed to <DataSourcePropLink name=\"groupBy\"/>\n- `InfiniteTable.columnAggregations` has been removed and you have to use <DataSourcePropLink name=\"aggregationReducers\" />\n\n@milestone id=\"5\"\n\n## 0.0.10 üöÄ\n\n@milestone id=\"4\"\n\n## 0.0.9 üöÄ\n\n@milestone id=\"3\"\n\n## 0.0.7 üöÄ\n\n@milestone id=\"2\"\n\n## 0.0.5 üöÄ\n\n@milestone id=\"1\"\n"
    },
    "/docs/releases/v1": {
      "filePath": "/docs/releases/v1",
      "routePath": "/docs/releases/v1",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/releases/v1.page.md",
      "fileName": "v1.page.md",
      "folderPath": "/docs/releases/",
      "frontmatter": {
        "title": "Version 1",
        "layout": "Releases"
      },
      "excerpt": "## 1.0.0 üöÄ",
      "readingTime": "1 min read",
      "content": "\n## 1.0.0 üöÄ\n\n@milestone id=\"60\"\n"
    },
    "/docs/reference/error-codes": {
      "filePath": "/docs/reference/error-codes",
      "routePath": "/docs/reference/error-codes",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/error-codes.page.md",
      "fileName": "error-codes.page.md",
      "folderPath": "/docs/reference/",
      "frontmatter": {
        "title": "Error Codes",
        "description": "Infinite Table Error Codes",
        "layout": "API"
      },
      "excerpt": "<PropTable sort>",
      "readingTime": "1 min read",
      "content": "\n<PropTable sort>\n\n<Prop name=\"DS001\">\n\n> The error happens when you pass a new `data` prop on every render.\n\n```tsx title=\"DONT: Dont use a new reference of the data prop on every render\"\nfunction App() {\n  // this is a new reference on every render\n  function data(){\n    return Promise.resolve([])\n  }\n  return <DataSource primaryKey=\"id\" data={data}>\n  </DataSource>\n}\n```\n\n```tsx title=\"DO: Use the same reference of the data\"\n// this is the same reference on every render\nfunction data(){\n  return Promise.resolve([])\n}\nfunction App() {\n  \n  const [dataFn, setDataFn] = useState(data)\n  return <DataSource\n    primaryKey=\"id\"\n    data={dataFn} // or data={data}\n    onSortInfo={() => {\n      // you can update it if you want\n      // but dont do it on every render\n      setDataFn(data.bind(null)) \n    }}\n  />\n}\n```\n\n</Prop>\n\n</PropTable>"
    },
    "/docs/reference/": {
      "filePath": "/docs/reference/index",
      "routePath": "/docs/reference/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/",
      "frontmatter": {
        "title": "Reference Overview",
        "description": "Infinite Table Reference Overview",
        "layout": "API"
      },
      "excerpt": "The Reference pages contain API documentation on every prop exposed in the `InfiniteTable` component and the related `DataSource` component.",
      "readingTime": "2 min read",
      "content": "\nThe Reference pages contain API documentation on every prop exposed in the `InfiniteTable` component and the related `DataSource` component.\n\n<HeroCards>\n<YouWillLearnCard title=\"Infinite Table Props\" path=\"/docs/reference/infinite-table-props\">\n\nGo through the extensive list of props available on the `InfiniteTable` component.\n\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"DataSource Props\" path=\"/docs/reference/datasource-props\">\n\nSee the full list of props available on the `DataSource` component.\n\n</YouWillLearnCard>\n\n</HeroCards>\n\n## API objects\n\nIn addition, both those components expose an `API` object that can be used to imperatively interact with them. This is useful for very advanced use cases - as most of the time interacting with the component via its props declaratively will be enough.\n\n<HeroCards>\n<YouWillLearnCard title=\"Infinite Table API\" path=\"/docs/reference/api\">\n\nExplore the `InfiniteTable` API which allows advanced interactions with the component, like scrolling to a specific cell, selecting rows and more.\n\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"DataSource API\" path=\"/docs/reference/datasource-api\">\n\nJump into the `DataSource` API, which allows advanced interactions with the data source, like editing & inserting data, fetching data, refreshing and more.\n\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"Infinite Table Selection API\" path=\"/docs/reference/selection-api\">\n\nRead more about the Selection API and how you can use it to change row and group selection.\n\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"Infinite Table Column API\" path=\"/docs/reference/column-api\">\n\nFind out more about the Column API and how you can use it to change column state.\n\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"DataSource Tree API\" path=\"/docs/reference/tree-api\">\n\nJump into the `Tree` API, which allows advanced interactions with the tree data source - collapse/expand nodes, node updates and more.\n\n</YouWillLearnCard>\n</HeroCards>\n\n## Hooks\n\nInfinite Table exposes a few custom hooks that can be used to customize the component and its behavior. Most of the hooks will be useful when you want to implement custom components for `InfiniteTable` - like custom cells, headers, cell editors, etc.\n\n<HeroCards>\n<YouWillLearnCard title=\"Infinite Table Hooks\" path=\"/docs/reference/hooks\">\n\nCustom hooks allow you to use the `InfiniteTable` at full potential and customize it to your needs.\n\n</YouWillLearnCard>\n\n</HeroCards>\n\n## Type Definitions\n\nInfinite Table exports quite a lot of TS type definitions. See the dedicated page for guides and explanations to help you use them effectively.\n\n<HeroCards>\n<YouWillLearnCard title=\"Type Definitions\" path=\"/docs/reference/type-definitions\">\n\nWe export our type definitions in case you ever need them. In many cases, you won't need to import them explicitly, but you might find them useful in more advaced scenarios.\n\n</YouWillLearnCard>\n\n</HeroCards>\n"
    },
    "/docs/reference/infinite-table-props": {
      "filePath": "/docs/reference/infinite-table-props",
      "routePath": "/docs/reference/infinite-table-props",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/infinite-table-props.page.md",
      "fileName": "infinite-table-props.page.md",
      "folderPath": "/docs/reference/",
      "frontmatter": {
        "title": "Infinite Table Props",
        "layout": "API",
        "description": "Infinite Table Props Reference page with complete examples"
      },
      "excerpt": "In the API Reference below we'll use **`DATA_TYPE`** to refer to the TypeScript type that represents the data the component is bound to.",
      "readingTime": "80 min read",
      "content": "\nIn the API Reference below we'll use **`DATA_TYPE`** to refer to the TypeScript type that represents the data the component is bound to.\n\n<PropTable sort>\n\n<Prop name=\"debugId\" type=\"string\">\n\n> The unique id to identify this InfiniteTable instance in devtools\n\nIf you have [Infinite Table DevTools extension](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa) installed, the current `<InfiniteTable />` instance will be picked up by the devtools with this specific name.\n\nSee [our blogpost on the devtools extension](/blog/2025/05/12/the-first-devtools-for-a-datagrid) for more details.\n\n\n</Prop>\n\n<Prop name=\"repeatWrappedGroupRows\" type=\"boolean|(rowInfo: InfiniteTableRowInfo<DATA_TYPE>) => boolean\" defaultValue={true}>\n\n> When enabled, and <PropLink name=\"wrapRowsHorizontally\" /> is also enabled, if there is <DPropLink name=\"groupBy\" code={false}>grouping configured</DPropLink> or if you're using tree data, the group/tree rows will be repeated at the top of each column set if the group/parent starts in the previous column set.\n\nSee related <PropLink name=\"wrapRowsHorizontally\" />.\n\n<Sandpack title=\"Horizontal Layout with repeated wrapped group rows\">\n\n```tsx file=\"horizontal-layout-repeat-wrapped-groups-example.page.tsx\"\n```\n\n</Sandpack>\n\n<Sandpack title=\"Tree with horizontal Layout and repeated wrapped tree rows\">\n\n<Description>\n\nIn this example, parent nodes are repeated conditionally: only top-level parent nodes are repeated when wrapping happens.\n\n</Description>\n\n```tsx file=\"horizontal-layout-repeat-wrapped-tree-rows-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"wrapRowsHorizontally\" type=\"boolean\" defaultValue={false}>\n\n> Whether to wrap rows horizontally or not. Horizontal Layout is a very different approach to the normal grid layout and only useful in very advanced scenarios.\n\nWhen this is set to `true`, rows will be wrapped horizontally to fit the container.\n\n<Note>\n\nWhen horizontal layout is enabled in combination with grouping, you can also use the <PropLink name=\"repeatWrappedGroupRows\" /> property to repeat the group rows at the top of each column set - if the group starts in the previous column set.\n\n</Note>\n\nWhen horizontal layout is enabled, rows will wrap and the existing columns will be repeated for each row-wrapping section - we will call them  column sets.\n\nSo for example when the DataGrid is configured with 3 columns and the DataSource has 25 rows, but only 10 rows fit in the vertical viewport, you will end up with 3 column-sets: the first with 10 rows, the second with the next 10 rows, and the third with the remaining 5 rows. The same columns are repeated for each column-set.\n\n<Sandpack title=\"Horizontal Layout example\">\n\n```tsx file=\"horizontal-layout-example.page.tsx\"\n```\n\n</Sandpack>\n\n<Note>\n\nIn the column rendering functions (both for header and cell rendering), you will have access to the `horizontalLayoutPageIndex` property. This is the index of the current horizontal layout page (the current column-set). `horizontalLayoutPageIndex` can either be `null`, when horizontal layout is disabled, or a number >= 0, when horizontal layout is enabled.\n\n</Note>\n\n<Note>\n\nWhen using horizontal layout, columns can't be configured to have a flexible width. So don't specify <PropLink name=\"columns.defaultFlex\" /> for any column when horizontal layout is enabled.\n\n</Note>\n\n\n<Sandpack title=\"Horizontal Layout example with column set index in header\">\n\n```tsx file=\"horizontal-layout-with-column-set-index-in-header-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"components.RowDetail\">\n\n> Component to use for rendering the row details section in the master-detail DataGrid. When specified, it makes InfiniteTable be a [master-detail DataGrid](/docs/learn/master-detail/overview). For configuring the height of row details, see <PropLink name=\"rowDetailHeight\" />\n\nSee related <PropLink name=\"rowDetailRenderer\" />.\n\n<Sandpack title=\"Basic master detail DataGrid example\" size=\"lg\">\n\n<Description>\n\nThis example shows a master DataGrid with cities & countries.\n\nThe details for each city shows a DataGrid with developers in that city.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-component-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n</Prop>\n\n<Prop name=\"scrollStopDelay\" type=\"number\" defaultValue={250}>\n\n> The delay in milliseconds that the DataGrid waits until it considers scrolling to be stopped. Also used when lazy loading is to fetch the next batch of data.\n\nThis also determines when the <PropLink name=\"onScrollStop\" /> callback prop is called.\n\n<Sandpack title=\"Scroll stop delay for lazy loading\">\n\n```ts file=\"scrollStopDelay-lazy-load-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n\n\n<Prop name=\"headerOptions\" type=\"{alwaysReserveSpaceForSortIcon: boolean}\" >\n\n> Various header configurations for the DataGrid.\n\nFor now, it has the following properties:\n\n - <PropLink name=\"headerOptions.alwaysReserveSpaceForSortIcon\" />\n\n<Sandpack>\n\n```tsx file=\"sortIcon-reserve-space-example.page.tsx\"\n```\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"headerOptions.alwaysReserveSpaceForSortIcon\" type=\"boolean\" defaultValue={true}>\n\n> Whether to reserve space in the column header for the sort icon or not.\n\nWhen this is set to `true`, the space for the sort icon is always reserved, even if the column is not currently sorted.\n\n<Sandpack>\n\n```tsx file=\"sortIcon-reserve-space-example.page.tsx\"\n```\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"rowDetailRenderer\" type=\"(rowInfo: InfiniteTableRowInfo<DATA_TYPE>) => ReactNode\">\n\n> When specified, it makes InfiniteTable be a [master-detail DataGrid](/docs/learn/master-detail/overview). For configuring the height of row details, see <PropLink name=\"rowDetailHeight\" />. See related <PropLink name=\"components.RowDetail\" />.\n\nIt's an alternative to using <PropLink name=\"components.RowDetail\" />.\n\nThis function is called with the <TypeLink name=\"InfiniteTableRowInfo\">rowInfo</TypeLink> the user expands to see details for.\n\nUsing this function, you can render another DataGrid or any other custom content.\n\n<Note>\n\nMake sure you have a column with the `renderRowDetailIcon: true` flag set. <PropLink name=\"columns.renderRowDetailIcon\" /> on a column makes the column display the row details expand icon.\n\nWithout this flag, no column will have the expand icon, and the master-detail functionality will not work.\n\n</Note>\n\nTo configure the height of the row details section, use the <PropLink name=\"rowDetailHeight\" /> prop.\n\nFor rendering some row details as already expanded, see <PropLink name=\"defaultRowDetailState\" />.\n\n<Sandpack title=\"Basic master detail DataGrid example\" size=\"lg\">\n\n<Description>\n\nThis example shows a master DataGrid with cities & countries.\n\nThe details for each city shows a DataGrid with developers in that city.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"showColumnFilters\" type=\"boolean\" defaultValue={true}>\n\n> Whether to show the column filters or not (only applicable when the `<DataSource>` is configured with filtering - either with <DPropLink name=\"defaultFilterValue\" /> or <DPropLink name=\"filterValue\" />).\n\nWhen the `<DataSource>` is configured with <DPropLink name=\"defaultFilterValue\" />, the column filters will be shown by default. Specify this prop as `false` to hide the column filters.\n\n<Sandpack title=\"Controling the visibility of column filters\">\n\n```tsx file=\"column-filters-visibility-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"defaultRowDetailState\" type=\"RowDetailState\">\n\n> Specifies the default expanded/collapsed state of row details.\n\nFor the controlled version, see <PropLink name=\"rowDetailState\" />.\n\nIf <PropLink name=\"isRowDetailExpanded\" /> is specified, it has the last word in deciding if a row detail is expanded or not, so it overrides the `defaultRowDetailState`.\n\n<Sandpack title=\"Master detail DataGrid with some row details expanded by default\" size=\"lg\">\n\n<Description>\n\nSome of the rows in the master DataGrid are expanded by default.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-default-expanded-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"isRowDetailExpanded\" type=\"(rowInfo: InfiniteTableRowInfo) => boolean\">\n\n> This function ultimately decides if a row detail is expanded or not.\n\nThis function is meant for very advanced scenarios. For common use-cases, you'll probably use <PropLink name=\"rowDetailState\" /> and <PropLink name=\"defaultRowDetailState\" />.\n\nIf `isRowDetailExpanded` is specified, it overrides <PropLink name=\"rowDetailState\" />/<PropLink name=\"defaultRowDetailState\" />.\n\n</Prop>\n\n<Prop name=\"isRowDetailEnabled\" type=\"(rowInfo: InfiniteTableRowInfo<DATA_TYPE>) => boolean\">\n\n> Decides on a per-row basis if the row details are enabled or not. See [Master Detail](/docs/learn/master-detail/overview) for more information.\n\nThis function is called with the <TypeLink name=\"InfiniteTableRowInfo\">rowInfo</TypeLink> and should return a `boolean` value.\n\n\nIt's useful when you don't want to show the row detail for some rows.\n\n<Sandpack title=\"Master detail DataGrid with some row not having details\" size=\"lg\">\n\n<Description>\n\nAll the odd rows don't have details.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-per-row-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"rowDetailState\" type=\"RowDetailState\">\n\n> Specifies the expanded/collapsed state of row details.\n\nFor the uncontrolled version, see <PropLink name=\"defaultRowDetailState\" />.\n\nWhen you use this controlled property, make sure you pair it with the <PropLink name=\"onRowDetailStateChange\" /> callback to update it.\n\nIf <PropLink name=\"isRowDetailExpanded\" /> is specified, it has the final say in deciding if a row detail is expanded or not, so it overrides the `rowDetailState` and <PropLink name=\"defaultRowDetailState\" />.\n\n<Sandpack title=\"Master detail DataGrid with some row details expanded by default\" size=\"lg\">\n\n<Description>\n\nSome of the rows in the master DataGrid are expanded by default.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-controlled-expanded-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onRowDetailStateChange\" type=\"(rowDetailState: RowDetailState, {expandRow, collapseRow}) => void\">\n\n> Called when the expand/collapse state of row details changes.\n\nYou can use this function prop to update the <PropLink name=\"rowDetailState\" /> prop or simply to listen to changes in the row details state.\n\n<Note>\n\nThis function is called with an instance of the <TypeLink name=\"RowDetailState\" />. If you want to get the object behind it, simply call `rowDetailState.getState()`.\n\nBoth the `RowDetailState` instance and the state object (literal) are valid values you can pass to the <PropLink name=\"rowDetailState\" />.\n\n</Note>\n\n<Note>\n\nThe second parameter of this function is an object with `expandRow` and `collapseRow` properties, which contain the primary key of either the last expanded or the last collapsed row.\n\nFor example, if the user is expanding row `3`, the object will be `{expandRow: 3, collapseRow: null}`.\nNext, if the user collapses row `5`, the object will be `{expandRow: null, collapseRow: 5}`.\n\nThis makes it easy for you to know which action was taken and on which row.\n\n</Note>\n\nSee related <PropLink name=\"rowDetailState\" /> and <PropLink name=\"defaultRowDetailState\" />.\n\n<Sandpack title=\"Master detail DataGrid with listener to the row expand/collapse state change\" size=\"lg\">\n\n<Description>\n\nSome of the rows in the master DataGrid are expanded by default.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-controlled-expanded-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"rowDetailCache\" type=\"boolean|number\">\n> Controls the caching of detail DataGrids. By default, caching is disabled.\n\nIt can be one of the following:\n\n- `false` - caching is disabled - this is the default\n- `true` - enables caching for all detail DataGrids\n- `number` - the maximum number of detail DataGrids to keep in the cache. When the limit is reached, the oldest detail DataGrid will be removed from the cache.\n\n<Sandpack title=\"Master detail DataGrid with caching for 5 detail DataGrids\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nThis example will cache the last 5 detail DataGrids - meaning they won't reload when you expand them again.\nYou can try collapsing a row and then expanding it again to see the caching in action - it won't reload the data.\nBut when you open up a row that hasn't been opened before, it will load the data from the remote location.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-caching-with-default-expanded-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"rowDetailHeight\" type=\"number|CSSVar|(rowInfo)=>number\" defaultValue={300}>\n\n> Controls the height of the row details section, in master-detail DataGrids.\n\nThe default value is `300` pixels.\n\nThis can be a number, a string (the name of a CSS variable - eg `--detail-height`), or a function. When a function is defined, it's called with the <TypeLink name=\"InfiniteTableRowInfo\">rowInfo</TypeLink> object for the corresponding row.\n\n<Sandpack title=\"Master detail DataGrid with custom detail height\" size=\"lg\">\n\n<Description>\n\nIn this example we configure the height of row details to be 200px.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-custom-detail-height-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"activeCellIndex\" type=\"[number,number] | null\">\n\n> Specifies the active cell for keyboard navigation. This is a controlled prop. See the [Keyboard Navigation](/docs/learn/keyboard-navigation/navigating-cells) page for more details.\n\nSee <PropLink name=\"defaultActiveCellIndex\" /> for the uncontrolled version of this prop and <PropLink name=\"keyboardNavigation\" /> for the keyboard navigation behavior.\n\nUse the <PropLink name=\"onActiveCellIndexChange\" /> callback to be notified when the active cell changes.\n\n`null` is a valid value, and it means no cell is currently rendered as active. Especially useful for controlled scenarios, when you need ultimate control over the behavior of keyboard navigation.\n\n<Sandpack title=\"Controlled keyboard navigation for cells\">\n\n<Description>\n\nThis example starts with cell `[2,0]` already active.\n\n</Description>\n\n```ts file=\"$DOCS/learn/keyboard-navigation/navigating-cells-controlled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"activeRowIndex\" type=\"number | null\">\n\n> Specifies the active row for keyboard navigation. This is a controlled prop. See the [Keyboard Navigation](/docs/learn/keyboard-navigation/navigating-rows) page for more details.\n\nSee <PropLink name=\"defaultActiveRowIndex\" /> for the uncontrolled version of this prop and <PropLink name=\"keyboardNavigation\" /> for the keyboard navigation behavior.\n\nUse the <PropLink name=\"onActiveRowIndexChange\" /> callback to be notified when the active row changes.\n\n`null` is a valid value, and it means no row is currently rendered as active. Especially useful for controlled scenarios, when you need ultimate control over the behavior of keyboard navigation.\n\n<Sandpack title=\"Controlled keyboard navigation for rows\">\n\n<Description>\n\nThis example starts with row at index `2` already active.\n\n</Description>\n\n```ts file=\"$DOCS/learn/keyboard-navigation/navigating-rows-controlled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"autoSizeColumnsKey\" type=\"number|string|{key,includeHeader,columnsToSkip,columnsToResize}\">\n\n> Controls auto-sizing of columns.\n\nHere is a list of possible values for `autoSizeColumnsKey`:\n\n- `string` or `number` - when the value is changing, all columns will be auto-sized.\n\n- an object with a `key` property (of type `string` or `number`) - whenever the `key` changes, the columns will be auto-sized. Specifying an object for `autoSizeColumnsKey` gives you more control over which columns are auto-sized and if the size measurements include the header or not.\n\nWhen an object is used, the following properties are available:\n\n- `key` - mandatory property, which, when changed, triggers the update\n- `includeHeader` - optional boolean, - decides whether the header will be included in the auto-sizing calculations. If not specified, `true` is assumed.\n- `columnsToSkip` - a list of column ids to skip from auto-sizing. If this is used, all columns except those in the list will be auto-sized.\n- `columnsToResize` - the list of column ids to include in auto-sizing. If this is used, only columns in the list will be auto-sized.\n\n<Sandpack title=\"Auto-sizing columns\">\n\n```tsx file=\"autoSizeColumnsKey-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nWhen auto-sizing takes place, <PropLink name=\"onColumnSizingChange\" /> is called with the new column sizes. If you use controlled <PropLink name=\"columnSizing\" />, make sure you update its value accordingly.\n\n</Note>\n\n<Note>\n\nWhen columns are auto-sized, keep in mind that only visible (rendered) rows are taken into account - so if you scroll new rows into view, auto-sizing columns may result in different column sizes.\n\nIn the same logic, keep in mind that by default columns are also virtualized (controlled by <PropLink name=\"virtualizeColumns\" />), not only rows, so only visible columns are auto-sized (in case you have more columns, the columns that are not currently visible do not change their sizes).\n\n</Note>\n\n</Prop>\n\n<Prop name=\"columnDefaultEditable\" type=\"boolean\">\n\n> Specifies whether columns are editable by default.\n\nTo enable editing globally, you can use this boolean prop on the `InfiniteTable` component. It will enable the editing on all columns.\n\nOr you can be more specific and choose to make individual columns editable via the <PropLink name=\"columns.defaultEditable\">column.defaultEditable</PropLink> prop.\n\nIn addition to the props already in discussion, you can use the <PropLink name=\"editable\" /> prop on the `InfiniteTable` component. This overrides all other properties and when it is defined, is the only source of truth for whether something is editable or not.\n\n\nBy default, double-clicking an editable cell will show the cell editor. You can prevent this by returning `{preventEdit: true}` from the <PropLink name=\"onCellDoubleClick\">onCellDoubleClick</PropLink> function prop.\n\n<Sandpack>\n\n<Description>\n\nAll columns are configured to not be editable, except the `salary` column.\n\n</Description>\n\n```ts file=\"global-should-accept-edit-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columnDefaultSortable\" type=\"boolean\" defaultValue={true}>\n\n> Specifies whether columns are sortable by default.\n\nThis property is overriden by (in this order) the following props:\n\n- <PropLink name=\"columnTypes.defaultSortable\" />\n- <PropLink name=\"column.defaultSortable\" />\n- <PropLink name=\"sortable\" />\n\nWhen specified, <PropLink name=\"sortable\" /> overrides all other properties and is the only source of truth for whether something is sortable or not.\n\n<Note>\n\nThis property does not apply for group columns, since for sorting, group columns generally depend on the columns they are grouping.\n\nIn some cases, you can have group columns that group by fields that are not bound to actual columns, so for determining sorting for group columns, use one of the following props:\n\n- <PropLink name=\"columnTypes.defaultSortable\" />\n- <PropLink name=\"column.defaultSortable\" />\n- <PropLink name=\"sortable\" />\n\n</Note>\n\n</Prop>\n\n<Prop name=\"sortable\" type=\"boolean | ({column, columns, api, columnApi}) => boolean\">\n\n> This prop is the ultimate source of truth on whether (and which) columns are sortable.\n\nThis property overrides all the following props:\n\n- <PropLink name=\"columnDefaultSortable\" /> (this is the base value, overriden by all other props in this list, in this order)\n- <PropLink name=\"columnTypes.defaultSortable\" />\n- <PropLink name=\"column.defaultSortable\" />\n\nThe <PropLink name=\"sortable\" /> prop is designed to be used for highly advanced scenarios, where you need to have ultimate control over which columns are sortable and which are not - in this case, you will want to declare <PropLink name=\"sortable\" /> as a function, which returns `true/false` for every column.\n\n</Prop>\n\n<Prop name=\"columnDefaultWidth\" type=\"number\" defaultValue={200}>\n\n> Specifies the a default width for all columns.\n\n<Note>\n\nIf a column is explicitly sized via <PropLink name=\"columns.defaultWidth\">column.defaultWidth</PropLink>, <PropLink name=\"columns.defaultFlex\">column.defaultFlex</PropLink>, <PropLink name=\"columnSizing.width\" /> (or <PropLink name=\"defaultColumnSizing.width\" />), that will be used instead.\n\n</Note>\n\nUse <PropLink name=\"columnMinWidth\" /> to set a minimum width for all columns.\nUse <PropLink name=\"columnMaxWidth\" /> to set a maximum width for all columns.\n\n<PropLink name=\"columnMinWidth\" /> and <PropLink name=\"columnMaxWidth\" /> will be very useful once flex column sizing lands.\n\n<Sandpack>\n\n```ts files=[\"columnDefaultWidth-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"columnHeaderHeight\" type=\"number\">\n\n> The height of the column header.\n\nThis only refers to the height of the header label - so if you have another row in the column header, for filters, the filters will also have this height. Also, for column groups, each additional group will have this height.\n\n<Sandpack>\n\n<Description>\n\nThe column header height is set to `60` pixels. The column filters will also pick up this height.\n\n</Description>\n\n```ts files=[\"columnHeaderHeight-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"columnMaxWidth\" type=\"number\" defaultValue={2000}>\n\n> Specifies the maximum width for all columns.\n\nFor specifying the minimum column width, see <PropLink name=\"columnMinWidth\" />.\n\nMaximum column width can be controlled more granularly via <PropLink name=\"columnSizing.maxWidth\" />, on a per column level.\n\n<Sandpack>\n\n```tsx file=\"columnMaxWidth-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columnMinWidth\" type=\"number\" defaultValue={30}>\n\n> Specifies the minimum width for all columns.\n\nFor specifying the maximum column width, see <PropLink name=\"columnMaxWidth\" />.\n\nMinimum column width can be controlled more granularly via <PropLink name=\"columnSizing.minWidth\" /> or <PropLink name=\"columns.minWidth\" />, on a per column level.\n\n<Sandpack>\n\n```tsx file=\"columnMinWidth-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columnOrder\" type=\"string[]|true\">\n\n> Defines the order in which columns are displayed in the component\n\nFor uncontrolled usage, see <PropLink name=\"defaultColumnOrder\" />.\n\nWhen using this controlled prop, make sure you also listen to <PropLink name=\"onColumnOrderChange\" />\n\nSee [Column Order](/docs/learn/columns/column-order) for more details on ordering columns both programatically and via drag & drop.\n\n<Note>\n\nThe `columnOrder` array can contain identifiers that are not yet defined in the <PropLink name=\"columns\" /> Map or can contain duplicate ids. This is a feature, not a bug. We want to allow you to use the `columnOrder` in a flexible way so it can define the order of current and future columns.\n\nDisplaying the same column twice is a perfectly valid use case.\n\n</Note>\n\n<Sandpack title=\"Column order\">\n\n```ts file=\"columnOrder-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nThis prop can either be an array of strings (column ids) or the boolean `true`. When `true`, all columns present in the <PropLink name=\"columns\" /> object will be displayed, in the iteration order of the object keys.\n\n<Sandpack title=\"Column order advanced example\">\n\n```ts file=\"columnOrder-advanced-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nUsing <PropLink name=\"columnOrder\" /> in combination with <PropLink name=\"columnVisibility\" /> is very powerful - for example, you can have a specific column order even for columns which are not visible at a certain moment, so when they will be made visible, you'll know exactly where they will be displayed.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"columns\" type=\"Record<string, InfiniteTableColumn<DATA_TYPE>>\">\n\n> Describes the columns available in the component.\n\nThe following properties are available:\n\n- <PropLink name=\"columns.field\">field</PropLink>\n- <PropLink name=\"columns.defaultWidth\">defaultWidth</PropLink>\n- <PropLink name=\"columns.defaultFlex\">defaultFlex</PropLink>\n- <PropLink name=\"columns.render\">render</PropLink>\n- <PropLink name=\"columns.renderValue\">renderValue</PropLink>\n- <PropLink name=\"columns.type\">type</PropLink>\n- <PropLink name=\"columns.header\">header</PropLink>\n- <PropLink name=\"columns.valueGetter\">valueGetter</PropLink>\n- <PropLink name=\"columns.valueFormatter\">valueFormatter</PropLink>\n- ...etc\n\n<Sandpack>\n\n```ts files=[\"columns-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"columns.className\" type=\"string | (param: InfiniteTableColumnStyleFnParams) => string\">\n\n> Controls styling via CSS classes for the column. Can be a `string` or a function returning a `string` (a valid className).\n\nIf defined as a function, it accepts an object as a parameter (of type <TypeLink name=\"InfiniteTableColumnStylingFnParams\" />), which has the following properties:\n\n- `column` - the current column where the className is being applied\n- `data` - the data object for the current row. The type of this object is `DATA_TYPE | Partial<DATA_TYPE> | null`. For regular rows, it will be of type `DATA_TYPE`, while for group rows it will be `Partial<DATA_TYPE>`. For rows not yet loaded (because of batching being used), it will be `null`.\n- `rowInfo` - the information about the current row - see [Using RowInfo](/docs/learn/rows/using-row-info) for more details.\n- `value` - the underlying value of the current cell - will generally be `data[column.field]`, if the column is bound to a `field` property\n- ... and more, see <TypeLink name=\"InfiniteTableColumnStylingFnParams\" /> for details\n\n<Note>\n\nThe `className` property can also be specified for <PropLink name=\"columnTypes\"/>\n\n</Note>\n\n<Sandpack>\n\n```ts files=[\"column-className-function-example.page.tsx\",\"coloring.module.css\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"components\">\n\n> Components to override the default ones used by the DataGrid.\n\nThe following components can be overridden:\n\n- `LoadMask` - see <PropLink name=\"components.LoadMask\" />\n- `CheckBox`\n- `Menu`\n- `MenuIcon`\n\n</Prop>\n\n<Prop name=\"components.LoadMask\">\n\n> Allows customising the `LoadMask` displayed over the DataGrid when it's loading data.\n\n<Note>\n\nTo better test this out, you can use the controlled <DPropLink name=\"loading\" /> prop on the `<DataSource />`\n</Note>\n\nFor more components that can be overriden, see <PropLink name=\"components\" />\n\n<Sandpack title=\"Custom LoadMask component\">\n\n```tsx file=\"load-mask-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n<Prop name=\"columns.renderTreeIcon\" type=\"boolean|(cellContext) => ReactNode\">\n\n> Renders the tree expand/collapse icon in the column cells. If you want default behavior, specify `true` and the default icon will be used.\n\nTo render a custom icon, specify a function that returns a React node. The `cellContext` object param will contain all the information about the current cell.\n\n<Note>\n\nThe `cellContext` object contains a `toggleCurrentTreeNode` function property, which can be used to toggle the node state when clicked.\n\n</Note>\n\nWith the default value of `true`, an icon will be rendered only for parent nodes. If you want to render an icon for all nodes, specify a function (and differentiate between parent and leaf nodes), and it will be called regardless of whether the node is a parent or a leaf.\n\n\nYou can also use <PropLink name=\"columns.renderTreeIconForParentNode\" /> to specify to customize the tree icon rendering for parent nodes or <PropLink name=\"columns.renderTreeIconForLeafNode\" /> to customize the tree icon rendering for leaf nodes.\n\n<Sandpack title=\"Specifying a column to used as the tree icon\">\n\n```ts file=\"treegrid-rendericon-default-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n<Sandpack title=\"Rendering a custom tree icon for both parent and leaf nodes\" >\n\n<Description>\n\nThis example renders a custom tree icon and uses the `toggleCurrentTreeNode` function to toggle the node state when Clicked. `toggleCurrentTreeNode` is a property of the `cellContext` argument passed to the `renderTreeIcon` function.\n\n</Description>\n\n```tsx file=\"tree-icon-custom-example-with-toggle.page.tsx\"\n```\n\n</Sandpack>\n\n\n</Prop>\n\n<Prop name=\"columns.renderRowDetailIcon\" type=\"boolean|(cellContext) => ReactNode\">\n\n> Renders the row detail expand/collapse icon in the column cell. Only used when [master-detail](/docs/learn/master-detail/overview) is enabled.\n\nIf this function is a prop, it can be used to customize the icon rendered for expanding/collapsing the row detail.\n\nSee related <PropLink name=\"rowDetailRenderer\" /> for configuring master-detail.\n\n<Sandpack title=\"Basic master detail DataGrid example\" size=\"lg\">\n\n<Description>\n\nThis example shows a master DataGrid with the ID column configured to show the row detail expand icon.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n<Prop name=\"columns.components\">\n\n> Specifies custom React components to use for column cells or header\n\nThe column components object can have either of the two following properties:\n\n- <PropLink name=\"columns.components.ColumnCell\">ColumnCell</PropLink> - a React component to use for rendering the column cells\n- <PropLink name=\"columns.components.HeaderCell\">HeaderCell</PropLink> - a React component to use for rendering the column header\n\n- <PropLink name=\"columns.components.Editor\">Editor</PropLink> - a React component to use for the editor, when editing is enabled for the column\n\n- <PropLink name=\"columns.components.FilterOperatorSwitch\">FilterOperatorSwitch</PropLink> - a React component to use for the filter operator switch - clicking the operator pops up a menu with the available operators for that column filter.\n\nSee [editing docs](/docs/learn/editing/overview).\n\n</Prop>\n\n<Prop name=\"columns.components.ColumnCell\">\n\n> Specifies a custom React component to use for column cells\n\nFor column header see related <PropLink name=\"columns.components.HeaderCell\"/>.\n\nInside a component used as a cell, you have to use <HookLink name=\"useInfiniteColumnCell\"/> to retrieve information about the currently rendered cell.\n\n<Note>\n\nIt's very important that you take\n\n```tsx\nconst { domRef } = useInfiniteColumnCell<DATA_TYPE>();\n```\n\nthe `domRef` from the <HookLink name=\"useInfiniteColumnCell\"/> hook and pass it on to the root DOM element of your cell component.\n\n```tsx\n<div ref={domRef}>...</div>\n```\n\n**If you don't do this, the column rendering will not work.**\n\n</Note>\n\n<Note>\n\nAlso note that your React Component should be a functional component and have this signature\n\n```tsx\nfunction CustomComponent(props: React.HTMLProps<HTMLDivElement>) {\n  return ...\n}\n```\n\nthat is, the `props` that the component is rendered with (is called with) are `HTMLProps` (more exactly `HTMLProps<HTMLDivElement>`) that you need to spread on the root DOM element of your component. If you want to customize anything, you can, for example, append a `className` or specify some extra styles.\n\nIn order to access the cell-related information, you don't use the props, but you call the <HookLink name=\"useInfiniteColumnCell\"/> hook.\n\n```tsx\nconst ExampleCellComponent: React.FunctionComponent<\n  React.HTMLProps<HTMLDivElement>\n> = (props) => {\n  const { domRef } = useInfiniteColumnCell<Developer>();\n\n  return (\n    <div\n      ref={domRef}\n      {...props}\n      className={`${props.className} extra-cls`}\n      style={style}\n    >\n      {props.children} <div style={{ flex: 1 }} /> {emoji}\n    </div>\n  );\n};\n```\n\n</Note>\n\n<Sandpack title=\"Custom components\">\n\n```tsx file=\"column-components-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.components.Editor\">\n\n> Specifies a custom React component to use for the editor, when [editing](/docs/learn/editing/overview) is enabled for the column.\n\nThe editor component should use the <HookLink name=\"useInfiniteColumnEditor\"/> hook to have access to cell-related information and to confirm, cancel or reject the edit.\n\nHere's the implementation for our default editor\n\n```tsx\nexport function InfiniteTableColumnEditor<T>() {\n  const { initialValue, setValue, confirmEdit, cancelEdit, readOnly } =\n    useInfiniteColumnEditor<T>();\n\n  const domRef = useRef<HTMLInputElement>();\n  const refCallback = React.useCallback((node: HTMLInputElement) => {\n    domRef.current = node;\n\n    if (node) {\n      node.focus();\n    }\n  }, []);\n\n  const onKeyDown = useCallback((event: React.KeyboardEvent) => {\n    const { key } = event;\n    if (key === 'Enter' || key === 'Tab') {\n      confirmEdit();\n    } else if (key === 'Escape') {\n      cancelEdit();\n    } else {\n      event.stopPropagation();\n    }\n  }, []);\n\n  return (\n    <>\n      <input\n        readOnly={readOnly}\n        ref={refCallback}\n        onKeyDown={onKeyDown}\n        onBlur={() => confirmEdit()}\n        className={'...'}\n        type={'text'}\n        defaultValue={initialValue}\n        onChange={useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n          setValue(event.target.value);\n        }, [])}\n      />\n    </>\n  );\n}\n```\n\n<Sandpack title=\"Column with custom editor\">\n\n<Description>\n\nTry editing the `salary` column - it has a custom editor\n\n</Description>\n\n```tsx file=\"$DOCS/reference/hooks/custom-editor-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.components.HeaderCell\">\n\n> Specifies a custom React component to use for column headers\n\nFor column cells see related <PropLink name=\"columns.components.ColumnCell\"/>.\n\nInside a custom component used as a column header, you have to use <HookLink name=\"useInfiniteHeaderCell\"/> to retrieve information about the currently rendered header cell.\n\n<Note>\n\nIt's very important that you take\n\n```tsx\nconst { domRef } = useInfiniteColumnCell<DATA_TYPE>();\n```\n\nthe `domRef` from the <HookLink name=\"useInfiniteHeaderCell\"/> hook and pass it on to the root DOM element of your header component.\n\n```tsx\n<div ref={domRef}>...</div>\n```\n\n**If you don't do this, the column header rendering will not work.**\n\n</Note>\n\n<Note>\n\nAlso note that your React Component should be a functional component and have this signature\n\n```tsx\nfunction CustomHeaderComponent(props: React.HTMLProps<HTMLDivElement>) {\n  return ...\n}\n```\n\nthat is, the `props` that the component is rendered with (is called with) are `HTMLProps` (more exactly `HTMLProps<HTMLDivElement>`) that you need to spread on the root DOM element of your component. If you want to customize anything, you can, for example, append a `className` or specify some extra styles.\n\nIn order to access the column header-related information, you don't use the props, but you call the <HookLink name=\"useInfiniteHeaderCell\"/> hook.\n\n```tsx\nconst ExampleHeaderComponent: React.FunctionComponent<\n  React.HTMLProps<HTMLDivElement>\n> = (props) => {\n  const { domRef } = useInfiniteHeaderCell<Developer>();\n\n  return (\n    <div\n      ref={domRef}\n      {...props}\n      className={`${props.className} extra-cls`}\n      style={style}\n    >\n      {props.children} <div style={{ flex: 1 }} /> {emoji}\n    </div>\n  );\n};\n```\n\n</Note>\n\n<Sandpack title=\"Custom components\">\n\n```tsx file=\"column-components-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.contentFocusable\" type=\"boolean|(params) => boolean\">\n\n> Specifies if the column (or cell, if a function is used) renders content that will/should be focusable (via tab-navigation)\n\n<Sandpack title=\"Columns with cell content focusable\">\n\n```ts file=\"column-contentFocusable-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.cssEllipsis\" type=\"boolean\" defaultValue={true}>\n\n> Specifies if the column should show ellipsis for content that is too long and does not fit the column width.\n\n<Note>\n\nFor header ellipsis, see related <PropLink name=\"headerCssEllipsis\" />.\n\n</Note>\n\n<Sandpack title=\"First name column(first) has cssEllipsis set to false\">\n\n```ts file=\"columns-cssEllipsis-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.dataType\" type=\"string\">\n\n> Specifies the type of the data for the column. For now, it's better to simply use <PropLink name=\"columns.type\" />.\n\nIf a column doesn't specify a <PropLink name=\"columns.sortType\">sortType</PropLink>, the `dataType` will be used instead to determine the type of sorting to use. If neither `sortType` nor `dataType` are specified, the <PropLink name=\"columns.type\">column.type</PropLink> will be used.\n\n</Prop>\n\n<Prop name=\"columns.defaultDraggable\" type=\"boolean\">\n\n> Specifies whether the column is draggable by default (for reordering columns).\n\nThis property overrides the global <PropLink name=\"columnDefaultDraggable\" />.\n</Prop>\n\n<Prop name=\"draggableColumns\" type=\"boolean\">\n\n> Specifies whether columns are draggable (for reordering columns).\n\nThis property overrides the global <PropLink name=\"columnDefaultDraggable\" /> and the column-level <PropLink name=\"columns.defaultDraggable\" />.\n</Prop>\n\n<Prop name=\"columnDefaultDraggable\" type=\"boolean\">\n\n> Specifies whether columns are draggable by default (for reordering columns).\n\nThis is overriden by <PropLink name=\"columns.defaultDraggable\" /> and <PropLink name=\"draggableColumns\" />.\n</Prop>\n\n<Prop name=\"columns.defaultEditable\" type=\"boolean|(param)=>boolean|Promise<boolean>\">\n\n> Controls if the column is editable or not.\n\nThis overrides the global <PropLink name=\"columnDefaultEditable\" />.\nThis is overridden by the <PropLink name=\"editable\" /> prop.\n\nThe value for this property can be either a `boolean` or a function.\n\nIf it is a function, it will be called when an edit is triggered on the column. The function will be called with a single object that contains the following properties:\n\n- `value` - the current value of the cell (the value currently displayed, so after <PropLink name=\"columns.valueFormatter\" /> and <PropLink name=\"columns.renderValue\" /> have been applied)\n- `rawValue` - the current value of the cell, but before any formatting and custom rendering has been applied. This is either the field value from the current data object, or the result of the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `data` - the data object (of type `DATA_TYPE`) for the current row\n- `rowInfo` - the row info object that underlies the row\n- `column` - the current column on which editing is invoked\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSourceApi` - - a reference to the [DataSource API](/docs/reference/datasource-api)\n\nThe function can return a `boolean` value or a `Promise` that resolves to a `boolean` - this means you can asynchronously decide whether the cell is editable or not.\n\nMaking <PropLink name=\"columns.defaultEditable\">column.defaultEditable</PropLink> a function gives you the ability to granularly control which cells are editable or not (even within the same column, based on the cell value or other values you have access to).\n\nBy default, double-clicking an editable cell will show the cell editor. You can prevent this by returning `{preventEdit: true}` from the <PropLink name=\"onCellDoubleClick\">onCellDoubleClick</PropLink> function prop.\n\n<Sandpack>\n\n<Description>\n\nOnly the `salary` column is editable.\n\n</Description>\n\n```ts file=\"global-should-accept-edit-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.defaultFlex\" type=\"number\" >\n\n> Specifies a default flex for the column\n\n<Note>\n\nIf you want more control on sizing, use controlled <PropLink name=\"columnSizing\" /> (or uncontrolled <PropLink name=\"defaultColumnSizing\" />).\n</Note>\n\nSee related <PropLink name=\"columns.defaultWidth\" />\n\n</Prop>\n\n<Prop name=\"columnGroupVisibility\" type=\"Record<string, boolean>\">\n\n> Controls the visibility of column groups. By default, column groups are visible.\n\n```tsx\n<InfiniteTable<DATA_TYPE>\n  columnGroupVisibility={{\n    'country': false,\n    'city': true,\n  }}\n  columns={{...}}\n/>\n```\n\n</Prop>\n\n<Prop name=\"columns.defaultHiddenWhenGroupedBy\" type=\"'*'| true | keyof DATA_TYPE | { [keyof DATA_TYPE]: true }\">\n\n> Controls default column visibility when <DataSourcePropLink name=\"groupBy\" /> is used.\n\nThis property does not apply (work) when controlled <PropLink name=\"columnVisibility\"  /> is used, it only works with uncontrolled column visibility.\n\nThe value for this property can be one of the following:\n\n- the `'*'` string - this means, the column is hidden whenever there are groups - so any groups.\n- a `string`, namely a field from the bound type of the `DataSource` (so type is `keyof DATA_TYPE`) - the column is hidden whenever there is grouping that includes the specified field. The grouping can contain any other fields, but if it includes the specified field, the column is hidden.\n- `true` - the column is hidden when there grouping that uses the field that the column is bound to.\n- `an object with keys` of type `keyof DATA_TYPE` and values being `true` - whenever the grouping includes any of the fields that are in the keys of this object, the column is hidden.\n\n<Sandpack>\n\n```ts file=\"columnDefaultHiddenWhenGroupedBy-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.defaultWidth\" type=\"number\" >\n\n> Specifies a default width for the column\n\n<Note>\n\nIf you want more control on sizing, use controlled <PropLink name=\"columnSizing\" /> (or uncontrolled <PropLink name=\"defaultColumnSizing\" />).\n</Note>\n\nSee related <PropLink name=\"columns.defaultFlex\" />\n\n</Prop>\n\n<Prop name=\"columns.field\" type=\"keyof DATA_TYPE\">\n\n> Binds the column to the specified data field. It should be a keyof `DATA_TYPE`.\n\nIt can be the same or different to the column id. This is not used for referencing the column in various other props - the column key (column id) is used for that.\n\nIf no <PropLink name=\"columns.header\" /> is specified, it will be used as the column header.\n\n<Sandpack>\n\n```ts files=[\"columns-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n\nGroup columns can also be bound to a field, like in the snippet below.\n\n<Sandpack>\n\n<Description>\nIn this example, the group column is bound to the `firstName` field, so this field will be rendered in non-group rows for this column.\n</Description>\n\n```ts file=\"group-column-bound-to-field-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.filterType\" type=\"string\">\n\n> Use this to configure the filter type for the column, when the `filterType` needs to be different from the column <PropLink name=\"columns.type\">type</PropLink>.\n\nSee related <PropLink name=\"columns.type\" />\n\n<Note>\n\nIf the type of filter you want to show does not match the column <PropLink name=\"columns.type\">type</PropLink>, you can specify the filter with the <PropLink name=\"columns.filterType\">column.filterType</PropLink> property. Only use this when the type of the data differs from the type of the filter (eg: you have a numeric column, with a custom filter type).\n\n</Note>\n\n<Sandpack title=\"Custom column filterType for the salary column\">\n\n<Description>\n\nIn this example, the `salary` column has `type=\"number\"` and `filterType=\"salary\"`.\n\nThis means the sort order defined for `type=\"number\"` will be used while displaying a custom type of filter.\n\n</Description>\n\n```ts file=\"column-filterType-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.getValueToEdit\" type=\"(params) => any|Promise<any>\">\n\n> Allows customizing the value that will be passed to the cell editor when it is displayed (when editing starts).\n\nThe function is called with an object that has the following properties:\n\n- `value` - the value of the cell (the value that is displayed in the cell before editing starts). This is the value resulting after <PropLink name=\"columns.valueFormatter\" /> and <PropLink name=\"columns.renderValue\" /> have been applied)\n- `rawValue` - the raw value of the cell, before any formatting and custom rendering has been applied. This is either the field value from the current data object, or the result of the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `data` - the current data object\n- `rowInfo` - the row info object that underlies the row\n- `column` - the current column on which editing is invoked\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSourceApi` - - a reference to the [DataSource API](/docs/reference/datasource-api)\n\n<Note>\n\nThis function can be async. Return a `Promise` to wait for the value to be resolved and then passed to the cell editor.\n\n</Note>\n\nSee related <PropLink name=\"columns.getValueToPersist\" /> and <PropLink name=\"columns.shouldAcceptEdit\" />.\n\n<Sandpack>\n\n<Description>\n\nIn this example, the `salary` for each row includes the currency string.\n\n<p>When editing starts, we want to remove the currency string and only show the numeric value in the editor - we do this via <PropLink name=\"columns.getValueToEdit\" />.</p>\n\n</Description>\n\n```ts file=\"inline-editing-custom-edit-value-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.getValueToPersist\" type=\"(params) => any|Promise<any>\">\n\n> Allows customizing the value that will be persisted when an edit has been accepted.\n\nThe function is called with an object that has the following properties:\n\n- `initialValue` - the initial value of the cell (the value that was displayed in the cell before editing started). This is the value resulting after <PropLink name=\"columns.valueFormatter\" /> and <PropLink name=\"columns.renderValue\" /> have been applied)\n- `value` - the current value that was accepted as an edit and which came from the cell editor.\n- `rawValue` - the raw value of the cell, before any formatting and custom rendering has been applied. This is either the field value from the current data object, or the result of the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `data` - the current data object\n- `rowInfo` - the row info object that underlies the row\n- `column` - the current column on which editing is invoked\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSourceApi` - - a reference to the [DataSource API](/docs/reference/datasource-api)\n\n<Note>\n\nThis function can be async. Return a `Promise` to wait for the value to be resolved and then persisted.\n\n</Note>\n\nSee related <PropLink name=\"columns.getValueToEdit\" /> and <PropLink name=\"columns.shouldAcceptEdit\" />.\n\n<Sandpack>\n\n<Description>\n\nIn this example, the `salary` for each row includes the currency string.\n\n<p>When an edit is accepted, we want the persisted value to include the currency string as well (like the original value did) - we do this via <PropLink name=\"columns.getValueToPersist\" />.</p>\n\n</Description>\n\n```ts file=\"inline-editing-custom-edit-value-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.renderHeader\" type=\"(param: InfiniteTableColumnHeaderParam) => ReactNode\">\n\n> A custom rendering function for the column header. Called with an object of type <TypeLink name=\"InfiniteTableColumnHeaderParam\" />.\n\nIt's the equivalent of <PropLink name=\"columns.renderValue\" /> but for the <PropLink name=\"columns.header\">column.header</PropLink>.\n\nIt gives you access to the column, along with information about sorting, filtering, grouping, etc.\n\nIt is called with a single argument, of type <TypeLink name=\"InfiniteTableColumnHeaderParam\" />.\n\n</Prop>\n\n<Prop name=\"columns.header\" type=\"React.ReactNode|({column, columnSortInfo, columnApi})=>React.ReactNode\">\n\n> Specifies the column header. Can be a static value or a function that returns a React node.\n\n<Note>\n\nIf no `header` is specified for a column, the <PropLink name=\"columns.field\">field</PropLink> will be used instead.\n\n</Note>\n\nIf a function is provided, it will be called with an argument with the following properties:\n\n- `column`\n- `columnSortInfo` - will allow you to render custom header based on the sort state of the column.\n- `columnApi` - [API](reference/column-api) for the current column. Can be useful if you customize the header and want to programatically trigger actions like sorting, show/hide column menu, etc.\n\nWhen we implement filtering, you'll also have access to the column filter.\n\n<Note>\n\nFor styling the column header, you can use <PropLink name=\"columns.headerStyle\">headerStyle</PropLink> or <PropLink name=\"columns.headerClassName\">headerClassName</PropLink>.\n\nFor configuring the column header height, see the <PropLink name=\"columnHeaderHeight\" /> prop.\n\n</Note>\n\n<Sandpack>\n\n```ts files=[\"columns-header-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n\n<Note>\n\nIn the `column.header` function you can use hooks or <PropLink name=\"columns.components.HeaderCell\" nocode>render custom React components via column.components.HeaderCell</PropLink>. To make it easier to access the param of the `header` function, we've exposed the <HookLink name=\"useInfiniteHeaderCell\" /> - use it to gain access to the same object that is passed as an argument to the `header` function.\n\n</Note>\n\n<Sandpack title=\"Column with custom header that uses useInfiniteHeaderCell\">\n\n```ts file=\"column-header-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Custom header with button to trigger the column context menu\">\n\n<Description>\n\nThe `preferredLanguage` column has a custom header that shows a button for triggering the column context menu.\n\nIn addition, the currency and preferredLanguage columns have a custom context menu icon.\n\n</Description>\n\n```ts file=\"getColumnMenuItems-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.headerClassName\" type=\"string | (args) => string\">\n\n> Controls the css class name for the column header. Can be a string or a function returning a string.\n\nIf defined as a function, it accepts an object as a parameter, which has the following properties:\n\n- `column` - the current column where the style is being applied\n- `columnSortInfo` - the sorting information for the column\n- `columnFilterValue` - the filtering information for the column\n- `dragging` - whether the current column is being dragged at the current time (during a column reorder)\n\n<Note>\n\nThe `headerClassName` property can also be specified for <PropLink name=\"columnTypes.headerClassName\">columnTypes</PropLink>.\n\nFor styling with inline styles, see <PropLink name=\"columns.headerStyle\" />.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"columns.headerCssEllipsis\" type=\"boolean\" defaultValue={true}>\n\n> Specifies if the column should show ellipsis in the column header if the header is too long and does not fit the column width.\n\nIf this property is not specified, the value of <PropLink name=\"columns.cssEllipsis\" /> will be used.\n\n<Note>\n\nFor normal cell ellipsis, see related <PropLink name=\"cssEllipsis\" />.\n\n</Note>\n\n<Sandpack title=\"Preferred Language column(second) has headerCssEllipsis set to false\">\n\n```ts file=\"columns-cssEllipsis-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.headerStyle\" type=\"CSSProperties | (args) => CSSProperties\">\n\n> Controls styling for the column header. Can be a style object or a function returning a style object.\n\nIf defined as a function, it accepts an object as a parameter, which has the following properties:\n\n- `column` - the current column where the style is being applied\n- `columnSortInfo` - the sorting information for the column\n- `columnFilterValue` - the filtering information for the column\n- `dragging` - whether the current column is being dragged at the current time (during a column reorder)\n\n<Note>\n\nThe `headerStyle` property can also be specified for <PropLink name=\"columnTypes.headerStyle\">columnTypes</PropLink>.\n\nFor styling with CSS, see <PropLink name=\"columns.headerClassName\" />.\n\nFor configuring the column header height, see the <PropLink name=\"columnHeaderHeight\" /> prop.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"columns.maxWidth\" type=\"number\">\n\n> Configures the maximum width for the column.\n\nIf not specified, <PropLink name=\"columnMaxWidth\" /> will be used (defaults to `2000`).\n\n</Prop>\n\n<Prop name=\"columns.minWidth\" type=\"number\">\n\n> Configures the minimum width for the column.\n\nIf not specified, <PropLink name=\"columnMinWidth\" /> will be used (defaults to `30`).\n\n</Prop>\n\n<Prop name=\"columns.render\" type=\"(cellContext) => Renderable\">\n\n> Customizes the rendering of the column. The argument passed to the function is an object of type <TypeLink name=\"InfiniteTableColumnCellContextType\" />\n\nSee related <PropLink name=\"columns.renderValue\" />, <PropLink name=\"columns.renderGroupValue\" />\n\n<Note>\n\nThe difference between <PropLink name=\"columns.render\"/> and <PropLink name=\"columns.renderValue\"/> is only for special columns (for now, only group columns are special columns, but more will come) when `InfiniteTable` renders additional content inside the column (eg: collapse/expand tool for group rows). The <PropLink name=\"columns.render\"/> function allows you to override the additional content. So if you specify this function, it's up to you to render whatever content, including the collapse/expand tool.\n\nNote that for customizing the collapse/expand tool, you can use specify `renderGroupIcon` function on the group column.\n\n</Note>\n\n<Note>\n\nTo understand how the rendering pipeline works, head over to the page on [Column rendering](/docs/learn/columns/column-rendering#rendering-pipeline).\n\n</Note>\n\nThe <PropLink name=\"columns.render\">render</PropLink> and <PropLink name=\"columns.renderValue\">renderValue</PropLink> functions are called with an object that has the following properties:\n\n- data - the data object (of type `DATA_TYPE | Partial<DATA_TYPE> | null`) for the row.\n- rowInfo - very useful information about the current row. See [Using RowInfo](/docs/learn/rows/using-row-info) for more details.\n- renderBag - read more about this in the docs for [Column rendering pipeline](/docs/learn/columns/column-rendering#rendering-pipeline)\n\n<Sandpack title=\"Column with custom render\">\n\n```ts file=\"column-render-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIn the `column.render` function you can use hooks or <PropLink name=\"columns.components.ColumnCell\" nocode>render custom React components</PropLink>. To make it easier to access the param of the `render` function, we've exposed the <HookLink name=\"useInfiniteColumnCell\" /> - use it to gain access to the same object that is passed as an argument to the `render` function.\n\n</Note>\n\n<Sandpack title=\"Column with custom render that uses useInfiniteColumnCell\">\n\n```ts file=\"column-render-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.renderFilterIcon\">\n\n> Customizes the rendering of the filter icon for the column.\n\n<Sandpack title=\"Custom filter icons for salary and name columns\">\n\n<Description>\n\nThe `salary` column will show a bolded label when filtered.\n\nThe `firstName` column will show a custom filter icon when filtered.\n\n</Description>\n\n```ts file=\"$DOCS/learn/columns/column-filter-icon-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.renderGroupIcon\" type=\"(cellContext) => Renderable\">\n\n> Customizes the rendering of the collapse/expand group icon for group rows. The argument passed to the function is an object of type <TypeLink name=\"InfiniteTableColumnCellContextType\" />\n\nFor actual content of group cells, see related <PropLink name=\"columns.renderGroupValue\" />\n\n<Note>\n\nTo understand how the rendering pipeline works, head over to the page on [Column rendering](/docs/learn/columns/column-rendering#rendering-pipeline).\n\n</Note>\n\n<Sandpack title=\"Column with custom renderGroupIcon\">\n\n```tsx file=\"column-renderGroupValueAndRenderLeafValue-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.renderMenuIcon\" type=\"boolean|(cellContext)=> ReactNode\">\n\n> Allows customization of the context menu icon.\n\nUse this prop to customize the context icon for the current column. Specify `false` for no context menu icon.\n\nUse a function to render a custom icon. The function is called with an object that has the following properties:\n\n- `column`\n- `columnApi` - an API object for controlling the column programatically (toggle sort, toggle column context menu, etc)\n\n<Sandpack title=\"Custom menu icons and custom menu items\">\n\n<Description>\n\nIn this example, the currency and preferredLanguage columns have a custom icon for triggering the column context menu.\n\nIn addition, the `preferredLanguage` column has a custom header that shows a button for triggering the column context menu.\n\n</Description>\n\n```ts file=\"getColumnMenuItems-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.renderSelectionCheckBox\" type=\"boolean | ({ data, rowSelected: boolean | null, selectRow, deselectRow, ... })\">\n\n> Specifies that the current column will have a selection checkbox - if a function is provided, will be used to customizes the rendering of the checkbox rendered for selection.\n\nSee related <DPropLink name=\"rowSelection\" />.\n\nIf `true` is provided, the default selection checkbox will be rendered. When a function is provided, it will be used for rendering the checkbox for selection.\n\n<Note>\n\n`rowSelected` property in the function parameter can be either `boolean` or `null`. The `null` value is used for groups with indeterminate state, meaning the group has some children selected, but not all of them.\n</Note>\n\n<Note>\n\nTo understand how the rendering pipeline works, head over to the page on [Column rendering](/docs/learn/columns/column-rendering#rendering-pipeline).\n\n</Note>\n\n<Sandpack title=\"Column with custom renderSelectionCheckBox\">\n\n<Description>\nThis example shows how you can use the default selection checkbox and decorate it.\n</Description>\n\n```tsx file=\"column-renderSelectionCheckBox-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.renderGroupValue\" type=\"({ data, rowInfo, column, renderBag, rowIndex, ... })\">\n\n> Customizes the rendering of a group column content, but only for group rows.\n\nThis prop is different from <PropLink name=\"columns.render\" />, <PropLink name=\"columns.renderValue\" />, as it is only called for group rows.\n\n<Note>\n\nThis function prop is called with a parameter - the `value` property of this parameter is not useful for group rows (of non-group columns), as it refers to the current data item, which is a group item, not a normal data item. Instead, use `rowInfo.value`, as that's the current group row value.\n\n</Note>\n\nSee related <PropLink name=\"columns.renderGroupIcon\" /> for customizing the collapse/expand group icon.\nSee related <PropLink name=\"columns.renderLeafValue\" /> for customizing the value for non-group rows in a group column.\n\n<Sandpack title=\"Column with custom renderGroupValue\">\n\n```tsx file=\"column-renderGroupValueAndRenderLeafValue-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.renderLeafValue\" type=\"({ data, rowInfo, column, renderBag, rowIndex, ... })\">\n\n> Customizes the rendering of the group column content, but only for non-group rows.\n\nSee related <PropLink name=\"columns.renderGroupValue\" /> for customizing the value for group rows in a group column.\n\n<Sandpack title=\"Column with custom renderLeafValue\">\n\n```tsx file=\"column-renderGroupValueAndRenderLeafValue-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n<Prop name=\"columns.renderValue\" type=\"(cellContext) => Renderable\">\n\n> Customizes the rendering of the column content. The argument passed to the function is an object of type <TypeLink name=\"InfiniteTableColumnCellContextType\" />\n\nSee related <PropLink name=\"columns.render\" />, <PropLink name=\"columns.renderGroupValue\" />\n\n<Note>\n\nThe difference between <PropLink name=\"columns.renderValue\"/> and <PropLink name=\"columns.render\"/> is only for special columns (for now, only group columns are special columns, but more will come) when `InfiniteTable` renders additional content inside the column (eg: collapse/expand tool for group rows). The <PropLink name=\"columns.render\"/> function allows you to override the additional content. So if you specify this function, it's up to you to render whatever content, including the collapse/expand tool.\n\nNote that for customizing the collapse/expand tool, you can use specify `renderGroupIcon` function on the group column.\n\n</Note>\n\n<Note>\n\nTo understand how the rendering pipeline works, head over to the page on [Column rendering](/docs/learn/columns/column-rendering#rendering-pipeline).\n\n</Note>\n\nThe <PropLink name=\"columns.renderValue\">renderValue</PropLink> and <PropLink name=\"columns.render\">render</PropLink> functions are called with an object that has the following properties:\n\n- data - the data object (of type `DATA_TYPE | Partial<DATA_TYPE> | null`) for the row.\n- rowInfo - very useful information about the current row. See [Using RowInfo](/docs/learn/rows/using-row-info) for more details.\n- renderBag - read more about this in the docs for [Column rendering pipeline](/docs/learn/columns/column-rendering#rendering-pipeline)\n\n<Sandpack title=\"Column with custom renderValue\">\n\n```tsx file=\"column-renderValue-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIn the `column.renderValue` function you can use hooks or <PropLink name=\"columns.components.ColumnCell\" nocode>render custom React components</PropLink>. To make it easier to access the param of the `renderValue` function, we've exposed the <HookLink name=\"useInfiniteColumnCell\" /> - use it to gain access to the same object that is passed as an argument to the `renderValue` function.\n\n</Note>\n\n<Sandpack title=\"Using a sparkline component\" size=\"md\" viewMode=\"preview\" deps=\"react-sparklines\">\n\n```tsx file=\"$DOCS/learn/examples/using-sparklines-example.page.tsx\" \n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.resizable\" type=\"boolean\">\n\n> Specifies if the current column is resizable or not.\n\nBy default, all columns are resizable, since <PropLink name=\"resizableColumns\" /> defaults to `true`.\n\n</Prop>\n\n<Prop name=\"columns.rowspan\" type=\"({ rowInfo, data, rowIndex, column }) => number\">\n\n> Specifies the rowspan for cells on the current column.\n\nThe default rowspan for a column cell is 1. If you want to span multiple rows, return a value that is greater than 1.\n\nThis function is called with an object that has the following properties:\n\n- column - the current column\n- data - the current data\n- rowInfo - information about the current row\n\nThe `rowInfo` object contains information about grouping (if this row is a group row, the collapsed state, etc), parent groups, children of the current row (if it's a row group), etc. See [Using RowInfo](/docs/learn/rows/using-row-info) for more details.\n\n<Sandpack>\n\n```ts file=\"column-rowspan-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.shouldAcceptEdit\" type=\"(params) => boolean|Error|Promise<boolean|Error>\">\n\n> Function specified for the column, that determines whether to accept an edit or not.\n\nThis function is called when the user wants to finish an edit. The function is used to decide whether an edit is accepted or rejected.\n\n<p>When the global <PropLink name=\"shouldAcceptEdit\" /> prop is specified, this is no longer called, and instead the global one is called.</p>\n<p>If you define the global <PropLink name=\"shouldAcceptEdit\" /> and still want to use the column-level function, you can call the column-level function from the global one.</p>\n\nThe function is called with an object that has the following properties:\n\n- `value` - the value that the user wants to persist via the cell editor\n- `initialValue` - the initial value of the cell (the value that was displayed before editing started). This is the value resulting after <PropLink name=\"columns.valueFormatter\" /> and <PropLink name=\"columns.renderValue\" /> have been applied)\n- `rawValue` - the initial value of the cell, but before any formatting and custom rendering has been applied. This is either the field value from the current data object, or the result of the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `data` - the current data object\n- `rowInfo` - the row info object that underlies the row\n- `column` - the current column on which editing is invoked\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSourceApi` - - a reference to the [DataSource API](/docs/reference/datasource-api)\n\n<Sandpack>\n\n<Description>\n\nTry editing the `salary` column. In the editor you can write whatever, but the column will only accept edits that are valid numbers.\n\n</Description>\n\n```ts file=\"inline-editing-custom-edit-value-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.sortable\" type=\"boolean\">\n\n> Specifies the sorting behavior for the current column. Overrides the global <PropLink name=\"sortable\" /> prop.\n\nUse this column property in order to explicitly make the column sortable or not sortable. If not specified, the sortable prop from the column type (<PropLink name=\"columnTypes.sortable\" />) will be used. If that is not specified either, the global <PropLink name=\"sortable\" /> prop will be used.\n\n</Prop>\n\n<Prop name=\"columns.sortType\" type=\"string | string[]\" defaultValue=\"'string'\">\n\n> Specifies the sort type for the column. See related <DataSourcePropLink name=\"sortTypes\" />\n\nFor local sorting, the sort order for a column is determined by the specified `sortType`.\n\n- if no `sortType` is specified, the <PropLink name=\"columns.dataType\">column.dataType</PropLink> will be used as the `sortType`\n- if no `sortType` or `dataType` is specified, it will default to the <PropLink name=\"columns.type\"/> value (if an array, the first item will be used).\n- if none of those are specified `\"string\"` is used\n\nThe value of this prop (as specified, or as computed by the steps described above) should be a key from the <DataSourcePropLink name=\"sortTypes\" /> object.\n\n<Sandpack  title=\"Custom sort by color - magenta will come first\">\n\n```ts file=\"./datasource-props/sortTypes-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nFor group columns (and more specifically, when <PropLink name=\"groupRenderStrategy\"/> is `single-column`), the `sortType` should be a `string[]`, each item in the array corresponding to an item in <DPropLink name=\"groupBy\" /> of the `<DataSource />`. This is especially useful when there are no corresponding columns for the `groupBy` fields. In this case, `InfiniteTable` can't know the type of sorting those fields will require, so you have to provide it yourself via the `column.sortType`.\n</Note>\n\n</Prop>\n\n<Prop name=\"columns.style\" type=\"CSSProperties | (param: InfiniteTableColumnStyleFnParams) => CSSProperties\">\n\n> Controls styling for the column. Can be a style object or a function returning a style object.\n\nIf defined as a function, it accepts an object as a parameter (of type <TypeLink name=\"InfiniteTableColumnStylingFnParams\" />), which has the following properties:\n\n- `column` - the current column where the style is being applied\n- `data` - the data object for the current row. The type of this object is `DATA_TYPE | Partial<DATA_TYPE> | null`. For regular rows, it will be of type `DATA_TYPE`, while for group rows it will be `Partial<DATA_TYPE>`. For rows not yet loaded (because of batching being used), it will be `null`.\n- `rowInfo` - the information about the current row - see [Using RowInfo](/docs/learn/rows/using-row-info) for more details.\n- `value` - the underlying value of the current cell - will generally be `data[column.field]`, if the column is bound to a `field` property\n- ... and more, see <TypeLink name=\"InfiniteTableColumnStylingFnParams\" /> for details\n\n<Note>\n\nThe `style` property can also be specified for <PropLink name=\"columnTypes\"/>\n\n</Note>\n\n<Sandpack>\n\n```ts file=\"columns-style-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.type\" type=\"string | string[]\" defaultValue=\"'default'\">\n\n> Specifies the column type - a column type is a set of properties that describes the column. Column types allow to easily apply the same properties to multiple columns.\n\n<Note>\n\nSpecifying `type: \"number\"` for numeric columns will ensure correct number sorting function is used (when sorting is done client-side). This happens because <DPropLink name=\"sortTypes\" /> has a definition for the `number` sort type.\n\nFor date columns (where the values in the columns are actual date objects) specify `type: \"date\"`. [Read more about date columns here](/docs/learn/working-with-data/handling-dates#using-date-strings)\n\n</Note>\n\nSee <PropLink name=\"columnTypes\"/> for more details on using column types.\n\n<Note>\n\nBy default, all columns have the `default` column type applied. So, if you define the `default` column type, but don't specify any <PropLink name=\"columns.type\">type</PropLink> for a column, the default column type properties will be applied to that column.\n\n</Note>\n\n<Note>\n\nWhen you want both the default type and another type to be applied, you can do so by specifying `type: [\"default\", \"second-type\"]`.\n\nWhen you dont want the default type to be applied, use `type: null`.\n\n</Note>\n\nIf a column is filterable and does not explicitly specify a <PropLink name=\"columns.filterType\">filterType</PropLink>, the `type` will also be used as the filter type.\n\nIf a column is sortable and does not explicitly specify a <PropLink name=\"columns.sortType\">sortType</PropLink>, the `type` will also be used as the sort type.\n\nSee the example below - `id` and `age` columns are `type='number'`.\n\n<Sandpack>\n\n```ts files=[\"columns-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"columns.valueFormatter\" type=\"({ data?, isGroupRow, rowInfo, field?, rowSelected, rowActive, isGroupRow }) => Renderable\">\n\n> Customizes the value that will be rendered\n\nThe `valueFormatter` prop is the next function called after the <PropLink name=\"columns.valueGetter\" /> during the [rendering pipeline](/docs/learn/columns/column-rendering#rendering-pipeline). Unlike <PropLink name=\"columns.valueGetter\" />, <PropLink name=\"columns.valueFormatter\" /> can return any renderable value, like `JSX.Element`s.\n\n<Note>\n\nUnlike `valueGetter`, it is being called with an object that has both the `data` item (might be null or partial for group rows) and the `rowInfo` object, and some extra flags regarding the row state (selection, active, etc). Use the TS `isGroupRow` flag as discriminator to decide if `data` is available.\n\n</Note>\n\nIf you want to further customize what's being rendered, see related <PropLink name=\"columns.valueGetter\" />, <PropLink name=\"columns.renderValue\" />, <PropLink name=\"columns.render\" />, <PropLink name=\"columns.renderGroupValue\" />, <PropLink name=\"columns.renderLeafValue\" /> and <PropLink name=\"columns.renderGroupIcon\" />.\n\n<Sandpack title=\"Column with custom valueFormatter\">\n\n```tsx file=\"column-valueFormatter-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columns.valueGetter\" type=\"({ data, field? }) => string | number | boolean | null | undefined\">\n\n> Customizes the value that will be rendered\n\nThe `valueGetter` prop is a function that takes a single argument - an object with `data` and `field` properties. It should return a plain JavaScript value (so not a `ReactNode` or `JSX.Element`)\n\n<Note>\n\nNote that the `data` property is of type `DATA_TYPE | Partial<DATA_TYPE> | null` and not simply `DATA_TYPE`, because there are cases when you can have grouping (so for group rows with aggregations `data` will be `Partial<DATA_TYPE>`) or when there are lazily loaded rows or group rows with no aggregations - for which `data` is still `null`.\n\n</Note>\n\nIf you want to further customize what's being rendered, see related <PropLink name=\"columns.valueFormatter\" />, <PropLink name=\"columns.renderValue\" />, <PropLink name=\"columns.render\" />, <PropLink name=\"columns.renderGroupValue\" />, <PropLink name=\"columns.renderLeafValue\" /> and <PropLink name=\"columns.renderGroupIcon\" />.\n\n<Sandpack title=\"Column with custom valueGetter\">\n\n```tsx file=\"column-valueGetter-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columnSizing\" type=\"Record<string,{width,flex,...}>\">\n\n> Defines the sizing of columns in the grid.\n\nThis is a controlled property. For the uncontrolled version, see <PropLink name=\"defaultColumnSizing\" />.\n\nIt is an object that maps column ids to column sizing options. The values in the objects can contain the following properties:\n\n- <PropLink name=\"columnSizing.flex\">flex</PropLink> - use this for flexible columns. Behaves like the `flex` CSS property.\n- <PropLink name=\"columnSizing.width\">width</PropLink> - use this for fixed sized columns\n- <PropLink name=\"columnSizing.minWidth\">minWidth</PropLink> - specifies the minimum width of the column. Useful for flexible columns or for restricting users resizing both fixed and flexible columns.\n- <PropLink name=\"columnSizing.maxWidth\">maxWidth</PropLink> - specifies the maximum width of the column. Useful for flexible columns or for restricting users resizing both fixed and flexible columns.\n\n<Sandpack title=\"Controlled column sizing\">\n\n```tsx file=\"columnSizing-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nFor auto-sizing columns, see <PropLink name=\"autoSizeColumnsKey\" />.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"columnSizing.flex\" type=\"number\">\n\n> Specifies the flex value for the column.\n\nSee [using flexible column sizing section](/docs/learn/columns/fixed-and-flexible-size#using-flexible-column-sizing) for more details.\n\nA column can either be flexible or fixed-width. For fixed columns, use <PropLink name=\"columnSizing.width\" /> if you're using <PropLink name=\"columnSizing\" /> or <PropLink name=\"columns.defaultWidth\">column.defaultWidth</PropLink> for default-uncontrolled sizing.\n\n<Sandpack title=\"Controlled column sizing with flex columns\">\n\n```tsx file=\"columnSizing-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columnSizing.minWidth\" type=\"number\">\n\n> Specifies the minimum width for a column. Especially useful for flexible columns.\n\nSee [Using flexible column sizing](/docs/learn/columns/fixed-and-flexible-size#using-flexible-column-sizing) for more details on the flex algorithm.\n\nThis can also be specified for all columns by specifying <PropLink name=\"columnMinWidth\" />.\n\n<Sandpack title=\"Controlled column sizing with minWidth for column\">\n\n```tsx file=\"columnSizing-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"columnSizing.maxWidth\" type=\"number\">\n\n> Specifies the maximum width for a column. Especially useful for flexible columns.\n\nSee [Using flexible column sizing](/docs/learn/columns/fixed-and-flexible-size#using-flexible-column-sizing) for more details on the flex algorithm.\n\nThis can also be specified for all columns by specifying <PropLink name=\"columnMaxWidth\" />.\n\n<Sandpack title=\"Controlled column sizing with maxWidth for column\">\n\n```tsx file=\"columnSizing-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"columnSizing.width\" type=\"number\">\n\n> Specifies the fixed width for the column.\n\nSee [Using flexible column sizing](/docs/learn/columns/fixed-and-flexible-size#using-flexible-column-sizing) for more details.\n\nA column can either be flexible or fixed. For flexible columns, use <PropLink name=\"columnSizing.flex\" />.\n\n<Sandpack title=\"Controlled column sizing with fixed column\">\n\n```tsx file=\"columnSizing-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"keyboardShortcuts\" type=\"{key,handler,when}[]\">\n\n> An array that specifies the keyboard shortcuts for the DataGrid.\n\nSee the [Keyboard Shortcuts](/docs/learn/keyboard-navigation/keyboard-shortcuts) page for more details.\n\n<Sandpack>\n\n<Description>\nClick on a cell and use the keyboard to navigate.\n\nPress `Shift+Enter` to show an alert with the current active cell position.\n\n</Description>\n\n```ts file=\"$DOCS/reference/keyboard-shortcuts-initial-example.page.tsx\"\n```\n</Sandpack>\n\n\nInfinite Table DataGrid comes with some predefined keyboard shorcuts.\nyou can import from the `keyboardShortcuts` named export.\n```ts\nimport { keyboardShortcuts } from '@infinite-table/infinite-react'\n```\n\n#### Instant Edit\n\n```ts {4,12}\nimport {\n  DataSource,\n  InfiniteTable,\n  keyboardShortcuts\n} from '@infinite-table/infinite-react';\n\n function App() {\n  return <DataSource<Developer> primaryKey=\"id\" data={dataSource}>\n    <InfiniteTable<Developer>\n      columns={columns}\n      keyboardShortcuts={[\n        keyboardShortcuts.instantEdit\n      ]}\n    />\n  </DataSource>\n}\n```\n\n\n<Note>\n\nFor now, the only predefined keyboard shorcut is `keyboardShortcuts.instantEdit`. This keyboard shorcut starts cell editing when any key is pressed on the active cell. This is the same behavior found in Excel/Google Sheets.\n\n</Note>\n\n<Sandpack>\n\n<Description>\n\nClick on a cell and then start typing to edit the cell.\n\n</Description>\n\n```ts file=\"$DOCS/reference/keyboard-shortcuts-instant-edit-example.page.tsx\"\n```\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columnTypes\" type=\"Record<string,InfiniteTableColumnType>\">\n\n> Specifies an object that maps column type ids to column types. Column types are used to apply the same configuration/properties to multiple columns. See related <PropLink name=\"columns.type\" />\n\n<Note>\nBy default, all columns have the `default` column type applied. So, if you define the `default` column type, but don't specify any <PropLink name=\"columns.type\">type</PropLink> for a column, the default column type properties will be applied to that column.\n</Note>\n\nThe following properties are currently supported for defining a column type:\n\n- `align` - See <PropLink name=\"columns.align\" />\n- `components` - See <PropLink name=\"columns.components\" />\n- `cssEllipsis` - See <PropLink name=\"columns.cssEllipsis\" />\n- `defaultEditable` - See <PropLink name=\"columns.defaultEditable\" />\n- `defaultFlex` - default flex value (uncontrolled) for the column(s) this column type will be applied to. See <PropLink name=\"column.defaultFlex\" />\n- `defaultWidth` - default width (uncontrolled) for the column(s) this column type will be applied to. See <PropLink name=\"column.defaultWidth\" />\n- `getValueToEdit` - See <PropLink name=\"columns.getValueToEdit\" />\n- `getValueToPersist` - See <PropLink name=\"columns.getValueToPersist\" />\n- `headerAlign` - See <PropLink name=\"columns.headerAlign\" />\n- `headerCssEllipsis` - See <PropLink name=\"columns.headerCssEllipsis\" />\n- `headerStyle` - See <PropLink name=\"columns.headerStyle\" />\n- `header` - See <PropLink name=\"columns.header\" />\n- `maxWidth` - minimum width for the column(s) this column type will be applied to. See <PropLink name=\"column.maxWidth\" />\n- `minWidth` - minimum width for the column(s) this column type will be applied to. See <PropLink name=\"column.minWidth\" />\n- `renderMenuIcon` - See <PropLink name=\"columns.renderMenuIcon\" />\n- `renderSortIcon` - See <PropLink name=\"columns.renderSortIcon\" />\n- `renderValue` - See <PropLink name=\"columns.renderValue\" />\n- `render` - render function for the column(s) this column type will be applied to. See <PropLink name=\"column.render\" />\n- `shouldAcceptEdit` - See <PropLink name=\"columns.shouldAcceptEdit\" />\n- `sortable` - See <PropLink name=\"columns.sortable\" />\n- `style` - See <PropLink name=\"columns.style\" />\n- `valueFormatter` - See <PropLink name=\"columns.valueFormatter\" />\n- `valueGetter` - See <PropLink name=\"columns.valueGetter\" />\n- `verticalAlign` - See <PropLink name=\"columns.verticalAlign\" />\n\n<Note>\nWhen any of the properties defined in a column type are also defined in a column (or in column sizing/pinning,etc), the later take precedence so the properties in column type are not applied.\n\nThe only exception to this rule is the <PropLink name=\"columns.components\">components</PropLink> property, which is merged from column types into the column.\n</Note>\n\n<Sandpack size=\"lg\" title=\"Using MUI X Date Picker with custom 'date' type columns\" deps=\"@emotion/react,@emotion/styled,@mui/material,@mui/x-date-pickers,dayjs\">\n\n<Description>\n\nThis is a basic example integrating with the [MUI X Date Picker](https://mui.com/x/react-date-pickers/date-picker/) - click any cell in the **Birth Date** or **Date Hired** columns to show the date picker.\n\nThis example uses the <PropLink name=\"columnTypes\" code={false}>column types</PropLink> to give each date column the same editor and styling.\n\n</Description>\n\n```ts file=\"$DOCS/learn/editing/column-types-date-editor-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columnTypes.components\">\n\n> See related <PropLink name=\"columns.components\" />.\n\n</Prop>\n\n<Prop name=\"columnTypes.defaultFlex\" type=\"number\" >\n\n> Specifies a default flex value for the column type. Will be overriden in any column that already specifies a `defaultFlex` property.\n\nSee related <PropLink name=\"columnTypes.defaultWidth\" />, <PropLink name=\"columns.defaultFlex\" /> and <PropLink name=\"columns.defaultWidth\" />\n\n</Prop>\n\n<Prop name=\"columnTypes.defaultSortable\" type=\"boolean\" >\n\n> Specifies whether columns of this type are sortable.\n\nThis prop overrides the component-level <PropLink name=\"columnDefaultSortable\" />.\n\nThis prop is overriden by <PropLink name=\"columns.defaultSortable\" /> and <PropLink name=\"sortable\" />.\n\n</Prop>\n\n<Prop name=\"columnTypes.headerClassName\" type=\"string | (args) => string\">\n\n> Controls styling for the column header for columns with this column type. Can be a string or a function returning a string.\n\nSee docs at <PropLink name=\"columns.headerClassName\" />.\n\n</Prop>\n\n<Prop name=\"columns.align\" type=\"'start' | 'center' | 'end'\">\n\n> Controls the alignment of text in column cells and also the alignment of the column header. To only apply alignment to the column header, use <PropLink name=\"columns.headerAlign\" />. For vertical alignment, see <PropLink name=\"columns.verticalAlign\" />.\n\nFor css ellipsis, see <PropLink name=\"columns.cssEllipsis\" />.\n\n<Sandpack title=\"Column align example\">\n\n```tsx file=\"column-align-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n</Prop>\n\n\n\n<Prop name=\"columns.verticalAlign\" type=\"'start' | 'center' | 'end'\">\n\n> Controls the vertical alignment of text in column cells. For horizontal alignment, see <PropLink name=\"columns.align\" />.\n\n<Sandpack title=\"Column vertical align example\">\n\n```tsx file=\"column-vertical-align-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n</Prop>\n\n\n<Prop name=\"columns.headerAlign\" type=\"'start' | 'center' | 'end'\">\n\n> Controls the alignment of the column header. See related <PropLink name=\"columns.align\" /> and <PropLink name=\"columns.headerCssEllipsis\" />.\n\n<Sandpack title=\"Column header align example\">\n\n```tsx file=\"column-header-align-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n</Prop>\n\n<Prop name=\"columnTypes.headerStyle\" type=\"CSSProperties | (args) => CSSProperties\">\n\n> Controls styling for the column header for columns with this column type. Can be a style object or a function returning a style object.\n\nSee docs at <PropLink name=\"columns.headerStyle\" />.\n\n</Prop>\n\n<Prop name=\"columnTypes.defaultWidth\" type=\"number\" >\n\n> Specifies a default fixed width for the column type. Will be overriden in any column that already specifies a `defaultWidth` property.\n\nSee related <PropLink name=\"columnTypes.defaultFlex\" />, <PropLink name=\"columns.defaultWidth\" /> and <PropLink name=\"columns.defaultFlex\" />\n\n</Prop>\n\n<Prop name=\"columnTypes.maxWidth\" type=\"number\" >\n\n> Specifies a default maximum width for the column type. Will be overriden in any column that already specifies a `maxWidth` property.\n\nSee related <PropLink name=\"columnTypes.maxWidth\" /> and <PropLink name=\"columns.maxWidth\" />\n\n</Prop>\n\n<Prop name=\"columnTypes.minWidth\" type=\"number\" >\n\n> Specifies a default minimum width for the column type. Will be overriden in any column that already specifies a `minWidth` property.\n\nSee related <PropLink name=\"columnTypes.maxWidth\" /> and <PropLink name=\"columns.minWidth\" />\n\n</Prop>\n\n<Prop name=\"defaultActiveCellIndex\" type=\"[number,number]\">\n\n> Specifies the active cell for keyboard navigation. This is an uncontrolled prop. See the [Keyboard Navigation](/docs/learn/keyboard-navigation/navigating-cells) page for more details.\n\nSee <PropLink name=\"activeCellIndex\" /> for the controlled version of this prop and\n<PropLink name=\"keyboardNavigation\" /> for the keyboard navigation behavior.\n\n<Sandpack title=\"Uncontrolled keyboard navigation for cells\">\n\n<Description>\n\nThis example starts with cell `[2,0]` already active.\n\n</Description>\n\n```ts file=\"$DOCS/learn/keyboard-navigation/navigating-cells-uncontrolled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"columnsTypes.sortable\" type=\"boolean\">\n\n> Specifies the sorting behavior for columns of this type.\n\nOverrides the global <PropLink name=\"sortable\" /> prop, but is overriden by the column's own <PropLink name=\"columns.sortable\">sortable</PropLink> property.\n\n</Prop>\n\n<Prop name=\"defaultActiveRowIndex\" type=\"number\">\n\n> Specifies the active row for keyboard navigation. This is an uncontrolled prop. See the [Keyboard Navigation](/docs/learn/keyboard-navigation/navigating-rows) page for more details.\n\nSee <PropLink name=\"activeRowIndex\" /> for the controlled version of this prop and\n<PropLink name=\"keyboardNavigation\" /> for the keyboard navigation behavior.\n\n<Sandpack title=\"Uncontrolled keyboard navigation for rows\">\n\n<Description>\n\nThis example starts with row at index `2` already active.\n\n</Description>\n\n```ts file=\"$DOCS/learn/keyboard-navigation/navigating-rows-uncontrolled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"defaultColumnOrder\" type=\"string[]|true\" defaultValue={true}>\n\n> Defines the order in which columns are displayed in the component.\n\nFor controlled usage, see <PropLink name=\"columnOrder\" />.\n\nWhen using this uncontrolled prop, you can also listen to <PropLink name=\"onColumnOrderChange\" /> to be notified of column order changes\n\n<Note>\n\nThe `defaultColumnOrder` array can contain identifiers that are not yet defined in the <PropLink name=\"columns\" /> Map or can contain duplicate ids. This is a feature, not a bug. We want to allow you to use the `defaultColumnOrder` in a flexible way so it can define the order of current and future columns.\n\nDisplaying the same column twice is a perfectly valid use case.\n\n</Note>\n\nSee [Column Order](/docs/learn/columns/column-order) for more details on ordering columns both programatically and via drag & drop.\n\n<Sandpack title=\"Uncontrolled column order\">\n\n```ts file=\"defaultColumnOrder-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"defaultColumnSizing\" type=\"Record<string,{width,flex,...}>\">\n\n> Defines a default sizing of columns in the grid.\n\nThis is an uncontrolled property. For the controlled version and more details, see <PropLink name=\"columnSizing\" />.\n\nIt is an object that maps column ids to column sizing options. The values in the objects can contain the following properties:\n\n- <PropLink name=\"defaultColumnSizing.flex\">flex</PropLink> - use this for flexible columns. Behaves like the `flex` CSS property.\n- <PropLink name=\"defaultColumnSizing.width\">width</PropLink> - use this for fixed sized columns\n- <PropLink name=\"defaultColumnSizing.minWidth\">minWidth</PropLink> - specifies the minimum width of the column. Useful for flexible columns or for restricting users resizing both fixed and flexible columns.\n- <PropLink name=\"defaultColumnSizing.maxWidth\">maxWidth</PropLink> - specifies the maximum width of the column. Useful for flexible columns or for restricting users resizing both fixed and flexible columns.\n\n<Sandpack title=\"Uncontrolled column sizing\">\n\n```tsx file=\"defaultColumnSizing-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nFor auto-sizing columns, see <PropLink name=\"autoSizeColumnsKey\" />.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"defaultColumnSizing.flex\" type=\"number\">\n\n> Specifies the flex value for the column.\n\nSee <PropLink name=\"columnSizing.flex\" /> for details.\n\n</Prop>\n\n<Prop name=\"defaultColumnSizing.minWidth\" type=\"number\">\n\n> Specifies the minimum width for a column. Especially useful for flexible columns.\n\nSee <PropLink name=\"columnSizing.minWidth\" /> for details.\n\n</Prop>\n\n<Prop name=\"defaultColumnSizing.maxWidth\" type=\"number\">\n\n> Specifies the maximum width for a column. Especially useful for flexible columns.\n\nSee <PropLink name=\"columnSizing.maxWidth\" /> for details.\n\n</Prop>\n\n<Prop name=\"defaultColumnSizing.width\" type=\"number\">\n\n> Specifies the fixed width for the column.\n\nSee <PropLink name=\"columnSizing.width\" /> for details.\n\n</Prop>\n\n<Prop name=\"domProps\" type=\"React.HTMLProps<HTMLDivElement>\">\n\n> DOM properties to be applied to the component root element.\n\nFor applying a className when the component is focused, see <PropLink name=\"focusedClassName\" />\n\nFor applying a className when the focus is within the component, see <PropLink name=\"focusedWithinClassName\" />\n\n<Sandpack>\n\n```ts files=[\"domprops-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"editable\" type=\"(param) => boolean | Promise<boolean>\">\n\n> Controls whether columns are editable or not.\n\nThis overrides both the global <PropLink name=\"columnDefaultEditable\" /> prop and the column's own <PropLink name=\"columns.defaultEditable\">defaultEditable</PropLink> property.\n\nThis function prop will be called when an edit is triggered on the column. The function will be called with a single object that contains the following properties:\n\n- `value` - the current value of the cell (the value currently displayed, so after <PropLink name=\"columns.valueFormatter\" /> and <PropLink name=\"columns.renderValue\" /> have been applied)\n- `rawValue` - the current value of the cell, but before any formatting and custom rendering has been applied. This is either the field value from the current data object, or the result of the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `data` - the data object (of type `DATA_TYPE`) for the current row\n- `rowInfo` - the row info object that underlies the row\n- `column` - the current column on which editing is invoked\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSourceApi` - - a reference to the [DataSource API](/docs/reference/datasource-api)\n\n<Note>\n\nThe function can return a `boolean` value or a `Promise` that resolves to a `boolean` - this means you can asynchronously decide whether the cell is editable or not.\n\n</Note>\n\nBy default, double-clicking an editable cell will show the cell editor. You can prevent this by returning `{preventEdit: true}` from the <PropLink name=\"onCellDoubleClick\">onCellDoubleClick</PropLink> function prop.\n\n</Prop>\n\n<Prop name=\"focusedClassName\" type=\"string\">\n\n> CSS class name to be applied to the component root element when it has focus.\n\nFor applying a className when the focus is within the component, see <PropLink name=\"focusedWithinClassName\" />\n\nFor focus style, see <PropLink name=\"focusedStyle\" />.\n\n</Prop>\n\n<Prop name=\"focusedWithinClassName\" type=\"string\">\n\n> CSS class name to be applied to the component root element when there is focus within (inside) the component.\n\nFor applying a className when the component root element is focused, see <PropLink name=\"focusedClassName\" />\n\n</Prop>\n\n<Prop name=\"focusedStyle\">\n\n> Specifies the `style` to be applied to the component root element when it has focus.\n\n<Sandpack title=\"focusedStyle example\">\n\n```ts files=[\"focusedStyle-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"focusedWithinStyle\">\n\n> Specifies the `style` to be applied to the component root element when there is focus within (inside) the component.\n\n<Note>\n\nTo listen to focusWithin changes, listen to <PropLink name=\"onFocusWithin\" /> and <PropLink name=\"onBlurWithin\" />.\n\n</Note>\n\n<Sandpack title=\"focusedWithinStyle example - focus an input inside the table to see it in action\">\n\n```ts files=[\"focusedWithinStyle-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"getCellContextMenuItems\" type=\"({data, column, rowInfo}) => MenuItem[] | null | { items: MenuItem[], columns: [{name}] } | Promise\">\n\n> Customises the context menu items for a cell.\n\nIf you want to customize the context menu even when the user clicks outside any cell, but inside the table body, use <PropLink name=\"getContextMenuItems\" />.\n\nThe `getCellContextMenuItems` function can return one of the following:\n\n- `null` - no custom context menu will be displayed, the default context menu will be shown (default event behavior not prevented)\n- `[]` - an empty array - no custom context menu will be displayed, but the default context menu is not shown - the default event behavior is prevented\n- `Array<MenuItem>` - an array of menu items to be displayed in the context menu - each `MenuItem` should have:\n  - a unique `key` property,\n  - a `label` property with the value to display in the menu cell - it's called `label` because this is the name of the default column in the context menu\n  - an optional `onAction({ key, item, hideMenu: () => void })` callback function to handle the click action on the menu item.\n  - an optional `onClick(event)` callback function to handle the click event on the menu item.\n  - an optional `hideMenuOnAction: boolean` - if `true`, it will close the context menu when the menu item is clicked\n\n<Sandpack title=\"Using context menus\">\n\n```ts file=\"cell-basic-context-menu-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nThis function can also return a `Promise` that resolves to one of the above types. This is useful for lazy loading the context menu items.\n\nWhen returning a `Promise`, the context menu will be shown after the promise resolves, and the default browser context menu is not shown.\n\n</Note>\n\nIn addition, if you need to configure the context menu to have other columns rather than the default column (named `label`), you can do so by returning an object with `columns` and `items`:\n\n```tsx\nconst getCellContextMenuItems = () => {\n  return {\n    columns: [{ name: 'label' }, { name: 'icon' }],\n    items: [\n      {\n        label: 'Welcome',\n        icon: 'üëã',\n        key: 'hi',\n      },\n      {\n        label: 'Convert',\n        icon: 'üîÅ',\n        key: 'convert',\n      },\n    ],\n  };\n};\n```\n\n<Sandpack title=\"Customising columns in the context menu\">\n\n<Description>\n\nRight-click any cell in the table to see a context menu with multiple columns (`icon`, `label` and `description`).\n\n</Description>\n\n```ts file=\"cells-with-custom-columns-context-menu-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"getContextMenuItems\" type=\"({event, data?, column?, rowInfo}, {api, dataSourceApi}) => MenuItem[] | null | { items: MenuItem[], columns: [{name}] } | Promise\">\n\n> Customises the context menu items for the whole table.\n\nIf you want to customize the context menu only when the user clicks inside a cell, use <PropLink name=\"getCellContextMenuItems\" />, which is probably what you're looking for.\n\nThe first argument this function is called with has the same shape as the one for <PropLink name=\"getCellContextMenuItems\" /> but all cell-related properties could also be `undefined`. Also, the `event` is available as a property on this object.\n\nIf this function returns null, the default context menu of the browser will be shown (default event behavior not prevented).\n\n<Sandpack title=\"Using context menus for the whole table\">\n\n```ts file=\"table-basic-context-menu-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nThis function can also return a `Promise` that resolves to one of the above types. This is useful for lazy loading the context menu items.\n\nWhen returning a `Promise`, the context menu will be shown after the promise resolves, and the default browser context menu is not shown.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getColumnMenuItems\" type=\"(items, context) => MenuItem[]\">\n\n> Allows customization of the context menu items for a column.\n\nUse this function to customize the context menu for columns. The function is called with the following arguments:\n\n- `items` - the default menu items for the column - you can return this array as is to use the default menu items (same as not providing this function prop) or you can customize the array or return a new one altogether.\n- `context` - an object that gives you access to the column and the grid state\n  - `context.column: InfiniteTableComputedColumn<T>` - the current column for which the context menu is being shown\n  - `context.api` - a reference to the [api](./reference/api)\n\n<Sandpack title=\"getColumnMenuItems example - custom menu item and icon\">\n\n<Description>\n\nIn this example, the currency and preferredLanguage columns have a custom icon for triggering the column context menu.\n\nIn addition, the `preferredLanguage` column has a custom header that shows a button for triggering the column context menu.\n\n</Description>\n\n```ts file=\"getColumnMenuItems-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"groupColumn\" type=\"InfiniteTableColumn|(colInfo, toggleGroupRow) => InfiniteTableColumn\">\n\n> Allows you to define a custom configuration for one or multiple group columns. When this prop is defined, it gets merged onto any values specified in the <DPropLink name=\"groupBy.column\" /> property.\n\nIf this is an object and no explicit <PropLink name=\"groupRenderStrategy\" /> is specified, the component is rendered as if you had <PropLink name=\"groupRenderStrategy\">groupRenderStrategy=\"single-column\"</PropLink>.\n\nIf it's a function, it will be called with the following arguments:\n\n- `colInfo` - an object with the following properties:\n- `colInfo.groupCount` - the count of row groups\n- `colInfo.groupBy` - the array of row groups, used by the `DataSource` to do the grouping\n- `colInfo.groupRenderStrategy` - the current <PropLink name=\"groupRenderStrategy\" code={false}>render strategy for groups</PropLink>.\n- `colInfo.groupByForColumn` - the grouping object (one of the items in `colInfo.groupBy`) corresponding to the current column. Only defined when `groupRenderStrategy` is `multi-column`.\n- `colInfo.groupIndexForColumn` - the index of `colInfo.groupByForColumn` in `colInfo.groupBy` - corresponding to the current column. Only defined when `groupRenderStrategy` is `multi-column`.\n- `toggleGroupRow(groupKeys: any[])` - a function you can use to toggle a group row. Pass an array of keys - the path to the group row you want to toggle.\n\n<Note>\n\nYou can still use <PropLink name=\"groupColumn\" /> as a function with single column group render strategy, but in this case, you have to be explicit and specify <PropLink name=\"groupRenderStrategy\">groupRenderStrategy=\"single-column\"</PropLink>.\n\n</Note>\n\n<Sandpack title=\"groupColumn used as an object\">\n\n```ts file=\"group-column-custom-renderers-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"groupColumn used as a function\">\n\n<Description>\n\nThis example shows how to use <PropLink name=\"groupColumn\" /> as a function that allows you to customize all generated group columns in a single place.\n\n</Description>\n\n```ts file=\"group-column-custom-renderers-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"groupRenderStrategy\" type=\"'single-column'|'multi-column'\">\n\n> Determines how grouping is rendered - whether a single or multiple columns are generated.\n\n<Sandpack>\n\n```ts files=[\"groupRenderStrategy-example.page.tsx\",\"employee-columns.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"hideColumnWhenGrouped\" type=\"boolean\" defaultValue={false}>\n\n> Allows you to hide group columns bound to fields that are grouped by (fields mentioned in <DataSourcePropLink name=\"groupBy\">groupBy.field</DataSourcePropLink>).\n\n<Sandpack>\n\n<Description>\n\nIn this example, toggle the checkbox to see the `stack` and `preferredLanguage` columns hide/show as the value of `hideColumnWhenGrouped` changes.\n\n</Description>\n\n```ts file=\"hideColumnWhenGrouped-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"hideEmptyGroupColumns\" type=\"boolean\" defaultValue={false}>\n\n> Allows you to hide group columns which don't render any information (this happens when all previous groups are collapsed).\n\n<Sandpack>\n\n```ts files=[\"hideEmptyGroupColumns-example.page.tsx\",\"employee-columns.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"keyboardNavigation\" type=\"'cell'|'row'|false\" defaultValue=\"'cell'\">\n\n> Determines whether keyboard navigation is enabled.\n\nAvailable values:\n\n- `'cell'` - enables keyboard navigation for cells. This is the default.\n- `'row'` - enables keyboard navigation for rows.\n- `false` - disables keyboard navigation.\n\nFor cell keyboard navigation, see <PropLink name=\"activeCellIndex\" />.\nFor row keyboard navigation, see <PropLink name=\"activeRowIndex\" />.\n\n<Sandpack title=\"Keyboard navigation\">\n\n<Description>\n\nThis example starts with cell `[2,0]` already active.\n\n</Description>\n\n```ts file=\"$DOCS/learn/keyboard-navigation/navigating-cells-uncontrolled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Disabled Keyboard navigation\">\n\n<Description>\n\nIn this example the keyboard navigation is disabled.\n\n</Description>\n\n```ts file=\"$DOCS/learn/keyboard-navigation/navigation-disabled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"keyboardSelection\" type=\"boolean\" defaultValue={true}>\n\n> Determines whether the keyboard can be used for selecting/deselecting rows/cells.\n\nBy default <PropLink name=\"keyboardSelection\" /> is enabled, so you can use the keyboard **spacebar** key to select multiple rows. Using the spacebar key is equivalent to doing a mouse click, so expect the combination of **spacebar** + `cmd`/`ctrl`/`shift` modifier keys to behave just like clicking + the same modifier keys.\n\nFor specifying the selection mode, use <DPropLink name=\"selectionMode\" />\n\n<Sandpack  title=\"Toggling keyboard navigation\">\n\n```ts file=\"default-selection-mode-multi-row-keyboard-toggle-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"loadingText\" type=\"ReactNode\" defaultValue=\"'Loading'\">\n\n> The text inside the load mask - displayed when <DataSourcePropLink name=\"loading\">loading=true</DataSourcePropLink>.\n\n<Sandpack title=\"Customized loading text\">\n\n```ts file=\"loadingText-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"multiSortBehavior\" type=\"'append'|'replace'\" default=\"'replace'\">\n\n> Specifies the behavior of the DataGrid when [multiple sorting](/docs/learn/sorting/multiple-sorting) is configured. Defaults to `'replace'`.\n\nWhen `InfiniteTable` is configured with multiple sorting there are two supported behaviors:\n\n- `append` - when this behavior is used, clicking a column header adds that column to the alredy existing sort. If the column is already sorted, the sort direction is reversed. In order to remove a column from the sort, the user needs to click the column header in order to toggle sorting from ascending to descending and then to no sorting.\n- `replace` - the default behavior - a user clicking a column header removes any existing sorting and sets that column as sorted. In order to add a new column to the sort, the user needs to hold the `Ctrl/Cmd` key while clicking the column header.\n\n<Sandpack>\n<Description>\n\nTry clicking the `age` column and then the `firstName` column.\n\nIf the multi-sort behavior is `replace`, clicking the second column will remove the sort from the first column.\nIn order for the sorting to be additive, even if the behavior is `replace`, use the `Ctrl`/`Cmd` key while clicking the column header.\n\nIf the multi-sort behavior is `append`, clicking the second column will add it to the sort.\n\n</Description>\n\n```ts file=\"$DOCS/learn/sorting/local-multi-sorting-example-defaults-with-local-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onActiveCellIndexChange\" type=\"(activeCellIndex:[number,number])=>void\">\n\n> Callback triggered by cell navigation. See the [Keyboard Navigation](/docs/learn/keyboard-navigation/navigating-cells) page for more details.\n\nSee related <PropLink name=\"activeCellIndex\" /> and <PropLink name=\"keyboardNavigation\" /> for the keyboard navigation behavior.\n\n<Sandpack title=\"Controlled keyboard navigation (for cells) with callback\">\n\n<Description>\n\nThis example uses `onActiveCellIndexChange` to react to changes in the `activeCellIndex`.\n\n</Description>\n\n```ts file=\"$DOCS/learn/keyboard-navigation/navigating-cells-controlled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onActiveRowIndexChange\" type=\"(activeRowIndex:number)=>void\">\n\n> Callback triggered by row navigation. See the [Keyboard Navigation](/docs/learn/keyboard-navigation/navigating-rows) page for more details.\n\nSee related <PropLink name=\"activeRowIndex\" /> and <PropLink name=\"keyboardNavigation\" /> for the keyboard navigation behavior.\n\n<Sandpack title=\"Controlled keyboard navigation (for rows) with callback\">\n\n<Description>\n\nThis example uses `onActiveRowIndexChange` to react to changes in the `activeRowIndex`.\n\n</Description>\n\n```ts file=\"$DOCS/learn/keyboard-navigation/navigating-rows-controlled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onBlurWithin\" type=\"(event)=> void\">\n\n> Function that is called when a focused element is blurred within the component.\n\nFor the corresponding focus event, see <PropLink name=\"onFocusWithin\" />\n\n<Note>\n\nThis callback is fired when a focusable element inside the component is blurred, and the focus is no longer within the component. In other words, when you navigate focusable elements inside the table, this callback is not fired.\n\n</Note>\n\n<Sandpack title=\"Blur an input inside the table to see the callback fired\">\n\n```ts files=[\"onBlurWithin-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"onCellDoubleClick\" type=\"({ colIndex, rowIndex, column, columnApi, api, dataSourceApi }, event) => void | {preventEdit?: boolean} \">\n\n> Callback function called when a cell has been double clicked.\n\nIf the cell is editable, you can prevent going into edit mode by returning `{preventEdit: true}` from the function.\n\n</Prop>\n\n<Prop name=\"onCellClick\" type=\"({ colIndex, rowIndex, column, columnApi, api, dataSourceApi }, event) => void\">\n\n> Callback function called when a cell has been clicked.\n\nThe first argument of the function is an object that contains the following properties:\n\n- `rowIndex: number` - the index of the row that was clicked.\n- `colIndex: number` - the index of the column that was clicked. This index is the index in the array of visible columns.\n- `column: InfiniteTableComputedColumn<DATA_TYPE>` - the column that has been clicked\n- `columnApi: InfiniteTableColumnApi<DATA_TYPE>` - the [column API](/docs/reference/column-api)\n- `api: InfiniteTableApi<DATA_TYPE>` - a reference to the [API](docs/reference/api)\n- `dataSourceApi: DataSourceApi<DATA_TYPE>` - a reference to the [Data Source API](/docs/reference/datasource-api). Can be used to get the current data.\n\nThe second argument is the original browser click event.\n\n</Prop>\n\n<Prop name=\"onColumnOrderChange\" type=\"(columnOrder: string[])=>void\">\n\n> Called as a result of user changing the column order\n\n</Prop>\n\n<Prop name=\"onColumnSizingChange\" type=\"(columnSizing)=>void\">\n\n> Called as a result of user doing a column resize.\n\nUse this callback to get updated information after a column resize is performed.\n\nThis works well in combination with the controlled <PropLink name=\"columnSizing\" /> prop (though you don't have to use controlled <PropLink name=\"columnSizing\" /> in order to use this callback). For more info on resizing columns, see [Column Sizing](/docs/learn/columns/fixed-and-flexible-size).\n\nSee related <PropLink name=\"onViewportReservedWidthChange\" />\n\n<Sandpack title=\"Controlled column sizing example with onColumnSizingChange\">\n\n```ts file=\"onColumnSizingChange-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onEditAccepted\" type=\"({value, initialValue, column, rowInfo, ...}) => void\">\n\n> Callback prop called when an edit is accepted\n\nIn order to decide whether an edit should be accepted or not, you can use the global <PropLink name=\"shouldAcceptEdit\"/> prop or the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> alternative.\n\n<Note>\n\nWhen neither the global <PropLink name=\"shouldAcceptEdit\"/> nor the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> are defined, all edits are accepted by default.\n\n</Note>\n\nThis callback is called with a single object that has the following properties:\n\n- `value` - the value that was accepted for the edit operation.\n- `initialValue` - the initial value of the cell (the value before editing started)\n- `rowInfo` - of type <TypeLink name=\"InfiniteTableRowInfo\" /> - the row info object that underlies the row\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSouceApi` - a reference to the [DataSource API](/docs/reference/datasource-api)\n- `column` - the column on which the edit was performed\n- `columnApi` - a reference to the [column API](/docs/reference/column-api)\n\nSee related <PropLink name=\"onEditRejected\" /> callback prop.\n\n</Prop>\n\n<Prop name=\"onEditPersistSuccess\" type=\"({value, initialValue, column, rowInfo, ...})=>void\">\n\n> Callback prop called when an edit is persisted successfully\n\nHas the same signature as <PropLink name=\"onEditAccepted\" />\n\n</Prop>\n\n<Prop name=\"onEditRejected\" type=\"({ value, initialValue, column, rowInfo, ... }) => void\">\n\n> Callback prop called when an edit is rejected\n\nIn order to decide whether an edit should be accepted or rejected, you can use the global <PropLink name=\"shouldAcceptEdit\"/> prop or the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> alternative.\n\n<Note>\n\nWhen neither the global <PropLink name=\"shouldAcceptEdit\"/> nor the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> are defined, all edits are accepted by default.\n\n</Note>\n\nThis callback prop has almost the same signature as the <PropLink name=\"onEditAccepted\" /> callback prop. The only difference is that the argument passed to the function also contains an `error` property, with a reference to the error that caused the edit to be rejected.\n\n</Prop>\n\n<Prop name=\"onFocusWithin\" type=\"(event)=> void\">\n\n> Function that is called when the table receives focus within the component.\n\nFor the corresponding blur event, see <PropLink name=\"onBlurWithin\" />\n\n<Sandpack title=\"Focus an input inside the table to see the callback fired\">\n\n```ts files=[\"onFocusWithin-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"onKeyDown\" type=\"({ api, dataSourceApi }, event) => void | InfiniteTablePropOnKeyDownResult\">\n\n> Callback function called when the `keydown` event occurs on the table.\n\nThe first argument of the function is an object that contains the following properties:\n\n- `api: InfiniteTableApi<DATA_TYPE>` - a reference to the [API](docs/reference/api)\n- `dataSourceApi: DataSourceApi<DATA_TYPE>` - a reference to the [Data Source API](/docs/reference/datasource-api). Can be used to get the current data.\n\nThe second argument is the original browser `keydown` event.\n\nIf you want to prevent some default behaviours, you can return an object with the following properties:\n\n- `preventEdit: boolean` - if true, the cell editor will not be shown when hitting the `Enter` key in an editable cell.\n- `preventEditStop: boolean` - if true, hitting the `Escape` key will not stop the edit.\n- `preventSelection: boolean` - if true, the ` ` and `Cmd+a` keys will not select cells/rows\n- `preventNavigation: boolean` - if true, keyboard navigation will be prevented when using `arrow` keys, `page up/down`, `home/end`, `enter`.\n\n<Note>\n\nFor keyboard shortcuts, see <PropLink name=\"keyboardShortcuts\" />.\n\n</Note>\n</Prop>\n\n<Prop name=\"onReady\" type=\"({api, dataSourceApi}) => void}\">\n\n> Callback prop that is being called when the table is ready.\n\nThis is called only once with an object that has an `api` property, which is an instance of [`InfiniteTableApi<DATA_TYPE>`](/docs/reference/api) and a `dataSourceApi` property, which is an instance of [`DataSourceApi<DATA_TYPE>`](/docs/reference/datasource-api).\n\nThe `ready` state for the table means it has been layout out and has measured its available size for laying out the columns.\n\nIt will never be called again after the component is ready.\n\n</Prop>\n\n<Prop name=\"onRenderRangeChange\" type=\"(range)=>void\">\n> Called whenever the render range changes, that is, additional rows or columns come into view.\n\nThe first (and only) argument is an object with `{start, end}` where both `start` and `end` are arrays of `[rowIndex, colIndex]` pairs.\n\n So if you want to get the start and end indexes, you can do\n\n ```ts\n const [startRow, startCol] = renderRange.start;\n const [endRow, endCol] = renderRange.end;\n ```\n\n<Note>\n\nThis callback is not debounced or throttled, so it can be called multiple times in a short period of time, especially while scrolling. Make sure your function is fast, or attach a debounced function, in order to avoid performance issues.\n\n```tsx\nimport {\n  debounce,\n  InfiniteTable,\n  DataSource\n} from '@infinite-table/infinite-react';\n\nfunction App() {\n  const onRenderRangeChange = useMemo(() => {\n    return debounce((range) => {\n      console.log(range.start, range.end);\n    }, {wait: 100});\n  }, []);\n\n  return <DataSource<Developer>\n    primaryKey=\"id\"\n    data={/*data*/}\n  >\n    <InfiniteTable<Developer>\n      onRenderRangeChange={onRenderRangeChange}\n      columns={/*columns*/}\n    />\n  </DataSource>\n}\n```\n</Note>\n\nUnlike <PropLink name=\"onScrollStop\" />, this function is also called when the DataGrid is resized and also when initially rendered.\n\n</Prop>\n\n\n<Prop name=\"onScrollStop\" type=\"({renderRange, viewportSize, scrollTop, scrollLeft})=>void\">\n\n> Triggered when the user has stopped scrolling (after <PropLink name=\"scrollStopDelay\" /> milliseconds).\n\nThis is called when the user stops scrolling for a period of time - as configured by <PropLink name=\"scrollStopDelay\" /> (milliseconds).\n\nThe function is called with an object that has the following properties:\n - `renderRange` - the render range of the viewport. This is an object with `{start, end}` where both `start` and `end` are arrays of `[rowIndex, colIndex]` pairs.\n So if you want to get the start and end indexes, you can do\n ```ts\n const [startRow, startCol] = renderRange.start;\n const [endRow, endCol] = renderRange.end;\n ```\n\n - `viewportSize` - the size of the viewport - `{width, height}`\n - `scrollTop` - the scrollTop position of the viewport - `number`\n - `scrollLeft` - the scrollLeft position of the viewport - `number`\n\n\nAlso see <PropLink name=\"onScrollToTop\" />, <PropLink name=\"onScrollToBottom\" /> and <PropLink name=\"onRenderRangeChange\" />.\n\n<Sandpack title=\"onScrollStop is called with viewport info - scroll the grid and see the console\" >\n\n```ts file=\"./onScrollStop-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"onScrollToBottom\" type=\"()=>void\">\n\n> Triggered when the user has scrolled to the bottom of the component. Also see <PropLink name=\"onScrollToTop\" /> and <PropLink name=\"onScrollStop\" />.\n\nAlso see <PropLink name=\"onScrollToTop\" /> and <PropLink name=\"onScrollStop\" />.\n\nAs an example usage, we're demoing live pagination, done in combination with the [react-query](https://tanstack.com/query/latest) library.\n\n<Note>\n\nIf you want to scroll to the top of the table, you can use the <PropLink name=\"scrollTopKey\" /> prop.\n\n</Note>\n\n<Sandpack title=\"Fetch new data on scroll to bottom\">\n\n```ts file=\"$DOCS/learn/working-with-data/live-pagination-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onViewportReservedWidthChange\" type=\"(reserved: number) => void\">\n\n> Callback to be notified of changes to <PropLink name=\"viewportReservedWidth\" />\n\nSee <PropLink name=\"viewportReservedWidth\" /> for details. See related <PropLink name=\"onColumnSizingChange\" />.\n\nWhen he user is performing a column resize (via drag & drop), <PropLink name=\"onViewportReservedWidthChange\" /> is called when the resize is finished (not the case for resizing with the **SHIFT** key pressed, when adjacent columns share the space between them since the reserved width is preserved).\n\n<Sandpack title=\"Using onViewportReservedWidth to respond to user column resizing\">\n\n<Description>\nResize a column to see `viewportReservedWidth` updated and then click the button to reset it to `0px`\n</Description>\n\n```ts file=\"viewportReservedWidth-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"persistEdit\" type=\"(params) => any|Error|Promise<any|Error>\">\n\n> Custom function to persist an edit\n\nThis allows edits that have been accepted (see <PropLink name=\"shouldAcceptEdit\" />) to be persisted to a remote (or local) location.\n\nThis function is called with an object that has the following properties:\n\n- `value` - the value that was accepted for the edit operation.\n- `initialValue` - the initial value of the cell (the value that was displayed before editing started). This is the value resulting after <PropLink name=\"columns.valueFormatter\" /> and <PropLink name=\"columns.renderValue\" /> have been applied)\n- `rawValue` - the initial value of the cell, but before any formatting and custom rendering has been applied. This is either the field value from the current data object, or the result of the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `data` - the current data object\n- `rowInfo` - the row info object that underlies the row\n- `column` - the current column on which editing is invoked\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSourceApi` - - a reference to the [DataSource API](/docs/reference/datasource-api)\n\n<Note>\n\nThis function can be synchronous or asynchronous. For synchronous persisting, return an `Error` if the persisting fails, or any other value if all went well.\n\nFor asynchronous persisting, you have to return a `Promise`. If the persisting fails, resolve the promise with an `Error` object or reject the promise. If the persisting succeeded, resolve the promise with any non-error value.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"pivotGrandTotalColumnPosition\" defaultValue={false} type={'\"start\"|\"end\"|false'}>\n\n> Controls the position and visibility of pivot grand-total columns\n\nIf specified as `false`, the pivot grand-total columns are not displayed.\n\nFor normal pivot total columns, see <PropLink name=\"pivotTotalColumnPosition\"/>.\n\n<Sandpack title=\"Pivoting with pivotGrandTotalColumnPosition=start\">\n\n```ts file=\"pivot-grand-total-column-position-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"pivotTotalColumnPosition\" defaultValue={'\"end\"'} type={'\"start\"|\"end\"|false'}>\n\n> Controls the position and visibility of pivot total columns\n\nIf specified as `false`, the pivot total columns are not displayed.\n\nFor grand-total pivot columns, see <PropLink name=\"pivotGrandTotalColumnPosition\"/>.\n\n<Note>\n\nPivot total columns only make sense when pivoting by two or more pivot fields, and thus will only display if this is the case. You can however, display grand-total columns if you have a single pivot field (or even no pivot fields - so <DataSourcePropLink name=\"pivotBy\"/> is an empty array).\n\nIn case there are no pivot fields, but <DataSourcePropLink name=\"pivotBy\"/> is an empty array, by default, a total column will be displayed for each aggregation (unless you specify <PropLink name=\"pivotTotalColumnPosition\"/> as `false`).\n\n</Note>\n\n<Sandpack title=\"Pivoting with pivotTotalColumnPosition=start\">\n\n```ts file=\"pivot-total-column-position-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"resizableColumns\" type=\"boolean\" defaultValue={true}>\n\n> Controls if by default all columns are resizable or not.\n\nThis property controls the behavior for all columns that don't have <PropLink name=\"columns.resizable\" /> explicitly specified.\n\n<Sandpack title=\"Resizable columns example\">\n\n<Description>\nFor resizable columns, hover the mouse between column headers to grab & drag the resize handle.\n\nHold SHIFT when grabbing in order to **share space on resize**.\n</Description>\n\n```ts file=\"resizableColumns-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"rowHeight\" type=\"number|string\" defaultValue={40}>\n\n> Specifies the height for rows. If a string is passed, it should be the name of a CSS variable, eg `--row-height`\n\n<Sandpack title=\"rowHeight as number\">\n\n```ts files=[\"rowHeight-number-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"rowHeight from CSS variable name\">\n\n```ts files=[\"rowHeight-cssvar-example.page.tsx\",\"data.ts\"]\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"rowClassName\" type=\"string|(params:InfiniteTableStylingFnParams) => string\">\n\n> Specifies the className to be applied to all rows or conditionally to certain rows.\n\nThe `rowClassName` prop can be either a string or a function that returns a string.\n\nWhen used as a function, it's called with a param of type <TypeLink name=\"InfiniteTableStylingFnParams\" />, just like the <PropLink name=\"rowStyle\" /> function.\n\n</Prop>\n\n<Prop name=\"rowStyle\" type=\"CSSProperties|(params:InfiniteTableStylingFnParams) => CSSProperties\">\n\n> Specifies the style object to be applied to all rows or conditionally to certain rows.\n\nThe `rowStyle` prop can be either an object (typed as `React.CSSProperties`) or a function that is called with a param of type <TypeLink name=\"InfiniteTableStylingFnParams\" />\n\n### `rowStyle` as a function\n\nWhen `rowStyle` is a function, it's called with a param of type <TypeLink name=\"InfiniteTableStylingFnParams\" />\n\nWhen Infinite Table calls `rowStyle`, the `data` property can be null - this is the case for grouped rows.\n\nThe `rowInfo` object contains the following properties (see <TypeLink name=\"InfiniteTableRowInfo\" >type definition here</TypeLink>):\n\n- `id` - the id of the current row\n- `data` - the data object\n- `indexInAll` - the index in the whole dataset\n- `indexInGroup` - the index of the row in the current group\n- `groupBy` - the fields used to group the `DataSource`\n- `isGroupRow` - whether the row is a group row\n- `collapsed` - for a group row, whether the group row is collapsed\n\nSee [Using RowInfo](/docs/learn/rows/using-row-info) for more details.\n\nYou can either return a valid style object, or undefined.\n\n```tsx\nconst rowStyle: InfiniteTablePropRowStyle<Employee> = ({\n  data,\n  rowInfo,\n}: {\n  data: Employee | null;\n  rowInfo: InfiniteTableRowInfo<Employee>;\n}) => {\n  const salary = data ? data.salary : 0;\n\n  if (salary > 150_000) {\n    return { background: 'tomato' };\n  }\n  if (rowInfo.indexInAll % 10 === 0) {\n    return { background: 'lightblue', color: 'black' };\n  }\n};\n```\n\n<Sandpack title=\"rowStyle example usage\">\n\n```ts files=[\"rowStyle-example.page.tsx\",\"rowStyle-example-columns.ts\"]\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"viewportReservedWidth\" type=\"number\" defaultValue={0}>\n\n> Specifies the width of the space to be kept as blank - useful when there are flex columns. This number can even be negative.\n\nThe flexbox algorithm also uses `viewportReservedWidth` to determine the width of the viewport to use for sizing columns - you can use `viewportReservedWidth=100` to always have a `100px` reserved area that won't be used for flexing columns.\n\nOr you can use a negative value, eg `-200` so the flexbox algorithm will use another `200px` (in addition to the available viewport area) for sizing flexible columns - this will result in a horizontal scrollbar being visible.\n\nFor reacting to column resizing, you need to listen to <PropLink name=\"onViewportReservedWidthChange\" />\n\n<Sandpack title=\"Using viewportReservedWidth to reserve whitespace when you have flexible columns\">\n\n<Description>\nResize a column to see `viewportReservedWidth` updated and then click the button to reset it to `0px`\n</Description>\n\n```ts file=\"viewportReservedWidth-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"shouldAcceptEdit\" type=\"(params) => boolean|Error|Promise<boolean|Error>\">\n\n> Function used to validate edits for all columns.\n\nThis function is called when the user wants to finish an edit - it is used to decide whether an edit is accepted or rejected, for all columns.\n\n<p>This overrides the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> prop.</p>\n<p>If you define the global <PropLink name=\"shouldAcceptEdit\" /> and still want to use the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink>, you can call the column-level function from this global one.</p>\n\nThe function is called with an object that has the following properties:\n\n- `value` - the value that the user wants to persist via the cell editor\n- `initialValue` - the initial value of the cell (the value that was displayed before editing started). This is the value resulting after <PropLink name=\"columns.valueFormatter\" /> and <PropLink name=\"columns.renderValue\" /> have been applied)\n- `rawValue` - the initial value of the cell, but before any formatting and custom rendering has been applied. This is either the field value from the current data object, or the result of the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `data` - the current data object\n- `rowInfo` - the row info object that underlies the row\n- `column` - the current column on which editing is invoked\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSourceApi` - - a reference to the [DataSource API](/docs/reference/datasource-api)\n\n<Sandpack>\n\n<Description>\n\nEdit the `salary` column. Only valid numbers are persisted.\n\n</Description>\n\n```ts file=\"global-should-accept-edit-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"scrollTopKey\" type=\"number|string\">\n\n> Determines scrolling the table to the top.\n\nUse this property to declaratively tell the `InfiniteTable` component to scroll to the top. Whenever a new value is provided for this property, it will scroll to the top.\n\n<Sandpack title=\"Declaratively scrolling to the top of the table\">\n\n```ts file=\"scrollTopKey-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"virtualizeColumns\" type=\"boolean\" defaultValue={true}>\n\n> Configures whether columns are virtualized or not\n\nBy default, columns are virtualized in order to improve performance.\n\n</Prop>\n\n</PropTable>\n"
    },
    "/docs/learn/common-issues/": {
      "filePath": "/docs/learn/common-issues/index",
      "routePath": "/docs/learn/common-issues/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/common-issues/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/learn/common-issues/",
      "frontmatter": {
        "title": "Common Issues",
        "description": "Avoid common pitfalls and issues when using the component. Learn how to use it properly to perform smooth and avoid jank."
      },
      "excerpt": "As people have started using `<InfiniteTable />` we've noticed a few issues keep popping up.",
      "readingTime": "2 min read",
      "content": "\nAs people have started using `<InfiniteTable />` we've noticed a few issues keep popping up.\n\nWhile we're trying to refine our API to be easier to use and understand, developers using the component still need to be aware of some design decisions and conventions used in the component.\n\n## Issue: Performance degradation because props are new on every render\n\nPassing new props on every render to the `<InfiniteTable />` component or to the `<DataSource />` component can be a performance bottleneck:\n\n```ts\n<DataSource\n  // dont do this\n  groupBy={[{ field: 'country' }]}\n/>\n```\n\nInstead pass the **same** reference when things do change - stored in state or any other place:\n\n```ts\nconst [groupBy, setGroupBy] = useState([{ field: 'country' }]);\n\n<DataSource groupBy={groupBy} onGroupByChange={setGroupBy} />;\n```\n\n<Note>\n\nWhen in dev mode, you can set `localStorage.debug = \"*\"` in your localstorage to see potential issues logged to the console.\n\nFor example, you might see:\n\n`InfiniteTable:rerender Triggered by new values for the following props +1s columns`\n\n</Note>\n\n## Issue: State inside custom components rendered in cells is lost while scrolling\n\nWhen using custom rendering or custom components for columns, make sure all your rendering logic is [controlled](https://reactjs.org/docs/forms.html#controlled-components) and that it doesn't have any local or transient state.\n\nThis is important because `InfiniteTable` makes heavy use of virtualization, in both _column cells and column headers_, so **custom components can and will be unmounted and re-mounted multiple times**, during the virtualization process (triggered by user scrolling, sorting, filtering and a few other interactions).\n"
    },
    "/docs/learn/columns/cell-and-column-styling": {
      "filePath": "/docs/learn/columns/cell-and-column-styling",
      "routePath": "/docs/learn/columns/cell-and-column-styling",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/cell-and-column-styling.page.md",
      "fileName": "cell-and-column-styling.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Styling",
        "description": "Styling columns in the InfiniteTable React DataGrid via both style and className properties."
      },
      "excerpt": "## Using the column `style`",
      "readingTime": "3 min read",
      "content": "\n## Using the column `style`\n\nThe most straightforward way to style the cells in a column is to use the <PropLink name=\"columns.style\">column.style</PropLink> property as an object.\n\n```ts title=\"Styling a column in the DataGrid\"\nconst column = {\n  firstName: {\n    style: {\n      color: 'red',\n      fontWeight: 'bold',\n    },\n  },\n};\n```\n\n<Sandpack title=\"Using column.style as an object\">\n\n```tsx file=\"column-style-object-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nThe <PropLink name=\"columns.style\">column.style</PropLink> property can either be an object (of type `React.CSSProperties`) or a function that returns an object (of the same type).\n\nUsing functions for the <PropLink name=\"columns.style\">column.style</PropLink> property allows you to style the cells based on the cell's value or other properties.\n\n```ts {6} title=\"Styling a column using a style function\"\nconst columns = {\n  salary: {\n    field: 'salary',\n    type: 'number',\n    style: ({ value, data, column, rowInfo }) => {\n      return {\n        color: value && value > 100_000 ? 'red' : 'tomato',\n      };\n    },\n  },\n};\n```\n\n<Sandpack title=\"Using column.style as a function\">\n\n```tsx file=\"column-style-fn-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf defined as a function, the <PropLink name=\"columns.style\">column.style</PropLink> accepts an object as a parameter, which has the following properties:\n\n- `column` - the current column where the style is being applied\n- `data` - the data object for the current row. The type of this object is `DATA_TYPE | Partial<DATA_TYPE> | null`. For regular rows, it will be of type `DATA_TYPE`, while for group rows it will be `Partial<DATA_TYPE>`. For rows not yet loaded (because of batching being used), it will be `null`.\n- `rowInfo` - the information about the current row - see [Using RowInfo](/docs/learn/rows/using-row-info) for more details.\n- `value` - the underlying value of the current cell - will generally be `data[column.field]`, if the column is bound to a `field` property\n\n</Note>\n\n## Using the column `className`\n\nMirroring the behavior already described for the <PropLink name=\"columns.style\">column.style</PropLink> property, the <PropLink name=\"columns.className\">column.className</PropLink> property can be used to apply a CSS class to the cells in a column.\n\nIt can be used as a string or a function that returns a string.\n\n```ts title=\"Styling a column using column.className\"\nconst columns = {\n  firstName: {\n    className: 'first-name-column',\n  },\n};\n```\n\n<Sandpack title=\"Using column.className as an string\">\n\n```tsx files=[\"column-className-string-example.page.tsx\",\"coloring.module.css\"]\n\n```\n\n</Sandpack>\n\nUsing functions for the <PropLink name=\"columns.className\">column.className</PropLink> property allows you to style the cells based on the cell's data/value/rowInfo etc.\n\n```ts {6} title=\"Styling a column using a className function\"\nconst columns = {\n  salary: {\n    field: 'salary',\n    type: 'number',\n    className: ({ value, data, column, rowInfo }) => {\n      return value && value > 100_000 ? 'red-color' : 'tomato-color',\n    },\n  },\n}\n```\n\n<Sandpack title=\"Using column.className as a function\">\n\n```tsx files=[\"column-className-fn-example.page.tsx\",\"coloring.module.css\"]\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/columns/column-grouping": {
      "filePath": "/docs/learn/columns/column-grouping",
      "routePath": "/docs/learn/columns/column-grouping",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/column-grouping.page.md",
      "fileName": "column-grouping.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Groups",
        "description": "Columns can be grouped with multiple levels of nesting thus making Infinite Table DataGrid a powerful tool for data analysts"
      },
      "excerpt": "Specify column groups via the controlled <PropLink name=\"columnGroups\" /> (or uncontrolled <PropLink name=\"defaultColumnGroups\"/>) prop.",
      "readingTime": "1 min read",
      "content": "\nSpecify column groups via the controlled <PropLink name=\"columnGroups\" /> (or uncontrolled <PropLink name=\"defaultColumnGroups\"/>) prop.\n\nThe value is an object, with keys being the group id and value being the group description.\n\n```tsx title=\"defining-column-groups\"\nconst columnGroups: Record<string, InfiniteTableColumnGroup> = {\n  'contact info': { header: 'Contact info' },\n  // `street` column group belongs to the `address` columnGroup\n  street: { header: 'street', columnGroup: 'address' },\n  location: { header: 'location', columnGroup: 'address' },\n\n  // this is a top-level group\n  address, { header: 'Address' }\n}\n```\n\nA column group can have a parent column group, specified by the <PropLink name=\"columnGroups.columnGroup\" /> property. The same goes for a column - columns can have <PropLink name=\"columns.columnGroup\">columnGroup</PropLink> as well.\n\n```tsx title=\"defining-columns-with-groups\"\nconst columns: Record<string, InfiniteTableColumn<Person>> = {\n  id: { field: 'id' },\n\n  // `streetNo` column belongs to the `street` columnGroup\n  streetNo: { field: 'streetNo', columnGroup: 'street' },\n  city: { field: 'city', columnGroup: 'location' },\n\n  streetName: { field: 'streetName', columnGroup: 'street' },\n  firstName: { field: 'firstName' },\n\n  country: { field: 'country', columnGroup: 'location' },\n  region: { field: 'region', columnGroup: 'location' },\n\n  email: { field: 'email', columnGroup: 'contact info' },\n  phone: { field: 'phone', columnGroup: 'contact info' },\n};\n```\n\n## Column groups in action\n\n<Sandpack>\n\n```tsx files=[\"column-groups-example.page.tsx\",\"column-groups-data.ts\"]\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/columns/column-headers": {
      "filePath": "/docs/learn/columns/column-headers",
      "routePath": "/docs/learn/columns/column-headers",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/column-headers.page.md",
      "fileName": "column-headers.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Headers",
        "description": "Configure column headers with custom column header, custom sort icon, menu icon and more."
      },
      "excerpt": "Column headers have the same level of customization as column cells - you can fully control what is being rendered and when. Here's a summary of the things you can do in the column header:",
      "readingTime": "8 min read",
      "content": "\nColumn headers have the same level of customization as column cells - you can fully control what is being rendered and when. Here's a summary of the things you can do in the column header:\n\n- customize the header label of a column\n- specify custom sort icon\n- configure and customize the menu icon\n- configure the column selection chechbox (for columns configured to display a selection checkbox)\n- customize the order of all of the above, and select which ones should be included\n\n## Column Header Label\n\nBy default, the label displayed for the column header is the <PropLink name=\"columns.field\">field</PropLink> the column is bound to. If you want to customize this, use the <PropLink name=\"columns.header\">header</PropLink> property.\n\n```tsx\ntype Developer = {\n  id: string;\n  firstName: string;\n  lastName: string;\n  age: number;\n};\nconst columns: InfiniteTablePropColumns<Developer> = {\n  id: {\n    field: 'id', // will be used as default label in column header\n    defaultWidth: 100,\n  },\n  name: {\n    header: 'First and Last Name', // custom column header label\n    valueGetter: ({ data }) => `${data.firstName} ${data.lastName}`,\n  },\n};\n```\n\n<Sandpack title=\"Simple table with both default and custom column headers\">\n\n```ts file=\"column-header-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nHaving the <PropLink name=\"columns.header\">header</PropLink> property be a strin value is useful but when you want more flexibility, you can use a function instead.\n\nWhen <PropLink name=\"columns.header\" code={false}>the column header</PropLink> is a function, it is called with an object that contains the following properties:\n\n- `column` - the current column object. NOTE: it's not the same as the column object you passed to the <PropLink name=\"columns\">columns</PropLink> prop - but rather an enhanced version of that, which contains additional properties and computed values. It is called a \"computed\" column - typed as `InfiniteTableComputedColumn<DATA_TYPE>`.\n- `columnsMap` - a map of all computed columns available in the table, keyed by the column id. This is useful if at runtime you need access to other columns in the table. NOTE: this map does not contain only the visible columns, but rather ALL the columns.\n- `columnSortInfo` - the sorting information for the current column, or `null` if the column is not sorted.\n- `api` - a reference to the table [API](/docs/reference/api) object.\n- `columnApi` - a reference to the table [Column API](/docs/reference/column-api) object for bound to the current column.\n- `allRowsSelected: boolean`\n- `someRowsSelected: boolean`\n- `renderBag` - more on that below - used to reference changes between the different render functions of the column header (those functions are the column header rendering pipeline described in the next section).\n\n<Note>\n\nAll the render props exposed for the rendering pipeline of the column header are called with the same object as the first argument.\n\n</Note>\n\nHaving the <PropLink name=\"column.header\" code={false}>column header</PropLink> as a function and having access to the state of the column and of the table allows you to create very dynamic column headers that accurately reflect column state.\n\n## Column Header Rendering Pipeline\n\nThe rendering pipeline of the column header is similar to the one of the column cells.\n\nIt's a series of functions defined on the column that are called while rendering elements found in the column header (the header label, the sort and menu icons, the filtering icon, the selection checkbox).\n\nAll of the functions that are part of the column header rendering pipeline are called with the same object as the first argument - the shape of this object is described in the previous section.\n\n- <PropLink name=\"columns.renderSortIcon\">renderSortIcon</PropLink>\n- <PropLink name=\"columns.renderFilterIcon\">renderFilterIcon</PropLink>\n- <PropLink name=\"columns.renderMenuIcon\">renderMenuIcon</PropLink>\n- <PropLink name=\"columns.renderSelectionCheckBox\">renderSelectionCheckBox</PropLink>\n- <PropLink name=\"columns.renderHeaderSelectionCheckBox\">renderHeaderSelectionCheckBox</PropLink>\n- <PropLink name=\"columns.header\">header</PropLink>\n\nIf you want to customize any of the above, use the corresponding function.\n\nFor even more control, the last function in the pipeline that gets called is the <PropLink name=\"columns.renderHeader\">column.renderHeader</PropLink> function.\n\nThis function is called with the same object as the first argument, but it also has a `renderBag` property that contains the result of all the previous functions in the pipeline (eg: `renderBag.sortIcon` - the result of the <PropLink name=\"columns.renderSortIcon\">renderSortIcon</PropLink> call, `renderBag.filterIcon` - the result of the <PropLink name=\"columns.renderFilterIcon\">renderFilterIcon</PropLink> call, etc).\n\nSo if you specify a custom <PropLink name=\"columns.renderHeader\">renderHeader</PropLink> function, it's up to you to use the results of the previous functions in the pipeline, in order to fully take control of the column header.\n\n#### Available properties on the renderBag\n\nThe `renderBag` object contains the following properties available to the render functions of the column header:\n\n- `header` - the label of the column header.\n- `sortIcon` - the default sort icon\n- `filterIcon` - the filter icon - displayed when the current column is used in filtering\n- `filterEditor` - the current filter editor\n- `menuIcon` - the menu icon that can be clicked to open the column menu\n- `selectionCheckBox` - the selection check box - displays the current selection status and controls the selection for all rows.\n- `all` - all of the above combined together in a `React.Fragment`.\n\n### Customizing the Sort Icon\n\nFor customizing the sort icon, use the <PropLink name=\"columns.renderSortIcon\">column.renderSortIcon</PropLink> function.\n\nInside that function you can either use the object passed as a parameter to get information about the sort state of the column\n\n```tsx {1} title=\"Customizing_the_column_sort_icon\"\nrenderSortIcon({ columnSortInfo }) {\n  if (!columnSortInfo) {\n    return ' ü§∑‚Äç‚ôÇÔ∏è';\n  }\n  return columnSortInfo.dir === 1 ? '‚ñ≤' : '‚ñº';\n}\n```\n\nor you can use the <HookLink name=\"useInfiniteHeaderCell\"/> hook to get the same information.\n\n```tsx {8} title=\"Customizing_the_column_sort_icon\"\nimport {\n  useInfiniteHeaderCell,\n} from '@infinite-table/infinite-react';\n\n/// ...\n\nrenderSortIcon(){\n  const { columnSortInfo } = useInfiniteHeaderCell();\n  if (!columnSortInfo) {\n    return ' ü§∑‚Äç‚ôÇÔ∏è';\n  }\n  return columnSortInfo.dir === 1 ? '‚ñ≤' : '‚ñº';\n},\n```\n\n<Sandpack title=\"Custom sort icon for the name column\">\n\n```ts file=\"column-sort-icon-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Customizing the Menu Icon\n\nFor customizing the menu icon, use the <PropLink name=\"columns.renderMenuIcon\">column.renderMenuIcon</PropLink> function.\n\nInside that function you can either use the object passed as a parameter to get information about the column\n\n```tsx {1} title=\"Customizing_the_menu_icon\"\nrenderMenuIcon({ column }) {\n  return `üîß ${column.id}`;\n}\n```\n\nor you can use the <HookLink name=\"useInfiniteHeaderCell\"/> hook to get the same information.\n\n```tsx {8} title=\"Customizing_the_menu_icon\"\nimport {\n  useInfiniteHeaderCell,\n} from '@infinite-table/infinite-react';\n\n/// ...\n\nrenderMenuIcon(){\n  const { column } = useInfiniteHeaderCell();\n  return `üîß ${column.id}`;\n},\n```\n\n<Sandpack title=\"Custom menu icon for the name and age columns\">\n\n<Description>\n\nHover over the header for the `Name` and `Age` columns to see the custom menu icon.\n\nAlso, the id column has `renderMenuIcon: false` set, so it doesn't show a column menu at all.\n\n</Description>\n\n```ts file=\"column-menu-icon-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf you don't want to show a column menu (icon) at all, you can set the <PropLink name=\"columns.renderMenuIcon\">column.renderMenuIcon</PropLink> prop to `false`.\n\nAlso, see the <PropLink name=\"columns.renderMenuIcon\">column.renderMenuIcon</PropLink> docs for an example on how to use the api to open the column menu.\n\n</Note>\n\n### Customizing the Filter Icon\n\nFor customizing the filter icon, use the <PropLink name=\"columns.renderFilterIcon\">column.renderFilterIcon</PropLink> function.\n\nInside that function you can either use the object passed as a parameter to get information about the `filtered` state of the column\n\n```tsx {1} title=\"Customizing_the_filter_icon\"\nrenderFilterIcon({ filtered }) {\n  return filtered ? 'üîç' : '';\n}\n```\n\nor you can use the <HookLink name=\"useInfiniteHeaderCell\"/> hook to get the same information.\n\n```tsx {8} title=\"Customizing_the_menu_icon\"\nimport {\n  useInfiniteHeaderCell,\n} from '@infinite-table/infinite-react';\n\n/// ...\n\nrenderMenuIcon(){\n  const { filtered } = useInfiniteHeaderCell();\n  return filtered ? 'üî•' : '';\n},\n```\n\nIn addition, you can use the `filtered` property in the <PropLink name=\"columns.header\">column.header</PropLink> function to determine if the column is filtered or not and render a different header label.\n\n<Note>\n\nIf specified, the <PropLink name=\"columns.renderFilterIcon\">column.renderFilterIcon</PropLink> function prop is called even if the column is not currently filtered.\n\n</Note>\n\n<Sandpack title=\"Custom filter icons for salary and name columns\">\n\n<Description>\n\nThe `salary` column will show a bolded label when filtered.\n\nThe `firstName` column will show a custom filter icon when filtered.\n\n</Description>\n\n```ts file=\"column-filter-icon-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n#### Changing the display of filters\n\nInfinite Table allows very deep cusstomization of the column header, including the filters.\n\nFor example, you might not want to display the column filters under the column header, but rather in a separate menu popover.\n\nThis section shows how to do that. You can use <PropLink name=\"showColumnFilters\">showColumnFilters=false</PropLink> to hide the filters from under the column header.\n\nNext, you can use the <PropLink name=\"columns.renderHeader\">column.renderHeader</PropLink> function to render a custom filter icon that opens a filter popover when clicked.\n\nYou don't need to re-implement the filter editor, you have acces to it via the `renderBag.filterEditor` property. The code below shows how to do this.\n\n<Sandpack title=\"Custom display of column filters\">\n\n```ts file=\"custom-column-filter-display-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Customizing the Selection Checkbox\n\nFor customizing the selection checkbox in the column header, use the <PropLink name=\"columns.renderHeaderSelectionCheckBox\">column.renderHeaderSelectionCheckBox</PropLink> function.\n\n<Note>\n\nIf you want another column, other than the group column, to show a selection checkbox, you have to also set the <PropLink name=\"columns.renderSelectionCheckBox\">column.renderSelectionCheckBox</PropLink> prop to `true`.\n\n</Note>\n\n<Sandpack title=\"Custom header checkbox selection for columns\">\n\n<Description>\n\nThe group column, as well as the `stack` column display a custom selection checkbox in the column header.\n\n</Description>\n\n```ts file=\"column-header-selection-checkbox-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/columns/column-menus": {
      "filePath": "/docs/learn/columns/column-menus",
      "routePath": "/docs/learn/columns/column-menus",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/column-menus.page.md",
      "fileName": "column-menus.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Menus",
        "description": "Columns have menus that allow quick actions - the menus can be customized or hidden altogether."
      },
      "excerpt": "All columns in the Infinite Table have a default menu, which can be customized or hidden altogether.",
      "readingTime": "3 min read",
      "content": "\nAll columns in the Infinite Table have a default menu, which can be customized or hidden altogether.\n\n## Customise the menu items\n\nTo customize the column menu (for all columns, or for a specific column), use the <PropLink name=\"getColumnMenuItems\" /> prop. This function is called with an array of menu items (which are the default items) and it should the final array of menu items - so you can return the default items as is, or you can adjust the default items to fit your needs.\n\n```tsx title=\"Customizing-column-menu\"\nfunction getColumnMenuItems(items, { column }) {\n  if (column.id === 'firstName') {\n    // you can adjust the default items for a specific column\n    items.splice(0, 0, {\n      key: 'firstName',\n      label: 'First name menu item',\n      onClick: () => {\n        console.log('Hey there!');\n      },\n    });\n  }\n\n  // or for all columns\n  items.push({\n    key: 'hello',\n    label: 'Hello World',\n    onClick: () => {\n      alert('Hello World from column ' + column.id);\n    },\n  });\n  return items;\n}\n```\n\n<Note>\n\n<PropLink name=\"getColumnMenuItems\" /> can return an empty array, in which case, the column menu will not be shown - however, people will still be able to click the menu icon to trigger the column context menu.\n\nIf you want to dynamically decide whether a column should show a menu or not, you can use the <PropLink name=\"columns.renderMenuIcon\" /> prop.\n\n</Note>\n\n<Sandpack title=\"Custom column menu items and custom menu icon\">\n\n<Description>\n\nIn this example, the currency and preferredLanguage columns have a custom icon for triggering the column context menu.\n\nIn addition, the `preferredLanguage` column has a custom header that shows a button for triggering the column context menu.\n\n</Description>\n\n```tsx file=\"$DOCS/reference/getColumnMenuItems-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nAs you can see in the demo above, you can use <PropLink name=\"getColumnMenuItems\" /> to return the default items (received as the first parameter to the function), or another totally different array. We chose to pass the default items to the function, so you can use them as a starting point and adjust them to your needs.\n\nEach item in the array you return from <PropLink name=\"getColumnMenuItems\" /> should have a `key` and a `label` property. Additionally, you can specify an `onAction` function, which will be called when the user clicks the menu item.\n\nIt's also possible to create items with submenus. For this, specify a `menu` property in the item, with an `items` array. Each item in the `items` array should have a `key` and a `label` property, as you would expect.\n\n```tsx {8} title=\"Menu_items_with_submenus\"\nfunction getColumnMenuItems(items, { column }) {\n  const items = [\n    {\n      key: 'translate',\n      label: 'Translate',\n      menu: {\n        items: [\n          {\n            key: 'translateToEnglish',\n            label: 'English',\n            onAction: () => {\n              console.log('Translate to English');\n            },\n          },\n          {\n            key: 'translateToFrench',\n            label: 'French',\n            onAction: () => {\n              console.log('Translate to French');\n            },\n          },\n        ],\n      },\n    },\n  ];\n\n  return items;\n}\n```\n\n## Custom menu icon\n\nTo customize the menu icon, use the <PropLink name=\"columns.renderMenuIcon\" /> prop. This prop can be a boolean or a function that returns a `ReactNode`.\n\n```tsx title=\"custom-menu-icon\"\nconst columns = {\n  name: {\n    field: 'firstName',\n    renderMenuIcon: () => <div>üåé</div>,\n  },\n  salary: {\n    field: 'salary',\n    renderMenuIcon: false,\n  },\n};\n```\n\n<Note>\n\nFor a custom menu icon üå† you don't have to hook up the `mousedown`/`click` in order to show or hide the menu - all this is done for you - just render your custom `ReactNode` and you're good to go.\n\n</Note>\n"
    },
    "/docs/learn/columns/column-order": {
      "filePath": "/docs/learn/columns/column-order",
      "routePath": "/docs/learn/columns/column-order",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/column-order.page.md",
      "fileName": "column-order.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Order",
        "description": "Change column order by drag-and-drop - drag columns around and reorder them live"
      },
      "excerpt": "React `Infinite Table` allows columns to be reordered in the grid by drag-and-drop. Drag columns around (start dragging the colum header) to change their order and arrange them in the desired position.",
      "readingTime": "3 min read",
      "content": "\nReact `Infinite Table` allows columns to be reordered in the grid by drag-and-drop. Drag columns around (start dragging the colum header) to change their order and arrange them in the desired position.\n\n<Note>\n\nColumn ordering via drag & drop works by default.\n\n</Note>\n\nYou don't have to specify an initial column order or any other callback props to update the column order. The default behavior of the component is to initially display all columns that are provided in the <PropLink name=\"columns\" /> object (in the iteration order of the object keys).\n\nIf using the <PropLink name=\"defaultColumnOrder\" code={false}>default uncontrolled column order</PropLink> is not enough, try using the controlled <PropLink name=\"columnOrder\" /> prop, which gives you full control over the order of the columns - in this case, you have to update the column order as a result of user interaction, by specifying <PropLink name=\"onColumnOrderChange\" />.\n\n<Sandpack title=\"Column reordering via drag & drop with controlled `columnOrder`\">\n\n```tsx file=\"$DOCS/reference/columnOrder-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nColumn order can also be used in order to limit/modify the visible columns. Specify a limited number of columns in the <PropLink name=\"columnOrder\" /> array and only those columns will be displayed.\n\nFor more advanced control on visibility, see <PropLink name=\"columnVisibility\" />.\n\n</Note>\n\nThe <PropLink name=\"columnOrder\" /> array can contain any number of columns, even duplicate columns or random strings - the behavior is that any column ids which are not found in the <PropLink name=\"columns\" /> object are ignored, while columns mentioned multiple times will be included multiple times, as indicated in the column order. Displaying the same column twice is a perfectly valid use case.\n\n<Sandpack title=\"Advanced column order example\">\n\n<Description>\nIn this example, <PropLink name=\"columnOrder\" /> is used as a controlled property, also as a way of limiting the visible columns.\n</Description>\n\n```tsx file=\"$DOCS/reference/columnOrder-advanced-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nThe <PropLink name=\"columnOrder\" /> prop can either be an array of strings (column ids) or the boolean `true`. When `true`, all columns present in the <PropLink name=\"columns\" /> object will be displayed, in the iteration order of the object keys - in the example above, try clicking the `\"Click to reset column order\"` button.\n\n</Note>\n\nFor all of the above examples, <PropLink name=\"columnVisibility\" /> will also be taken into account, as it is the last source of truth for the visibility of a column.\n\nUsing <PropLink name=\"columnOrder\" /> in combination with <PropLink name=\"columnVisibility\" /> is very powerful - for example, you can have a specific column order even for columns which are not visible at a certain moment, so when they will be made visible, you'll know exactly where they will be displayed.\n"
    },
    "/docs/learn/columns/column-rendering": {
      "filePath": "/docs/learn/columns/column-rendering",
      "routePath": "/docs/learn/columns/column-rendering",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/column-rendering.page.md",
      "fileName": "column-rendering.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Rendering",
        "description": "Customize column rendering for Infinite Table DataGrid to match your app and use custom components. Column styling and formatting, conditional rendering..."
      },
      "excerpt": "Columns render the <PropLink name=\"columns.field\">field</PropLink> value of the data they are bound to. This is the default behavior, which can be customized in a number of ways that we're exploring below.",
      "readingTime": "12 min read",
      "content": "\nColumns render the <PropLink name=\"columns.field\">field</PropLink> value of the data they are bound to. This is the default behavior, which can be customized in a number of ways that we're exploring below.\n\n<Note>\n\nIf you want to explicitly use the TypeScript type definition for columns, import the `InfiniteTableColumn` type\n\n```\nimport { InfiniteTableColumn } from '@infinite-table/infinite-react'\n```\n\nNote that it's a generic type, so when you use it, you have to bind it to your `DATA_TYPE` (the type of your data object).\n</Note>\n\n<Note>\n\nWhen using custom rendering or custom components for columns, make sure all your rendering logic is [controlled](https://reactjs.org/docs/forms.html#controlled-components) and that it doesn't have local/transient state.\n\nThis is important because `InfiniteTable` uses virtualization heavily, in both _column cells and column headers_, so **custom components can and will be unmounted and re-mounted multiple times**, during the virtualization process (triggered by user scrolling, sorting, filtering and a few other interactions).\n</Note>\n\n## Change the value using `valueGetter`\n\nThe simplest way to change what's being rendered in a column is to use the `valueGetter` prop and return a new value for the column.\n\n```tsx\nconst nameColumn: InfiniteTableColumn<Employee> = {\n  header: 'Employee Name',\n  valueGetter: ({ data }) => `${data.firstName} ${data.lastName}`,\n};\n```\n\n<Note>\n\nThe <PropLink name=\"columns.valueGetter\"/> prop is a function that takes a single argument - an object with `data` and `field` properties.\n\nNote that the <PropLink name=\"columns.valueGetter\"/> is only called for non-group rows, so the `data` property is of type `DATA_TYPE`.\n\n</Note>\n\n<Sandpack title=\"Column with custom valueGetter\">\n\n```tsx file=\"$DOCS/reference/column-valueGetter-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nThe column value getter should not return JSX or other markup, because the value return by <PropLink name=\"columns.valueGetter\"/> will be used when the column is sorted (when sorting is done client-side and not remotely). For more in-depth information on sorting see [the column sorting page](./column-sorting).\n\n</Note>\n\n## Use <PropLink name=\"columns.renderValue\">renderValue</PropLink> and <PropLink name=\"columns.render\">render</PropLink> to display custom content\n\nThe next step in customizing the rendering for a column is to use the <PropLink name=\"columns.renderValue\" /> or the <PropLink name=\"columns.render\"/> props. In those functions, you have access to more information than in the <PropLink name=\"columns.valueGetter\"/> function. For example, you have access to the current value of `groupBy` and `pivotBy` props.\n\n<PropLink name=\"columns.renderValue\">renderValue</PropLink> and <PropLink name=\"columns.renderValue\">render</PropLink> can return any value that React can render.\n\nThe <PropLink name=\"columns.renderValue\">renderValue</PropLink> and <PropLink name=\"columns.render\">render</PropLink> functions are called with an object that has the following properties:\n\n- `data` - the data object (of type `DATA_TYPE | Partial<DATA_TYPE> | null`) for the row.\n- `rowInfo` - very useful information about the current row:\n  - `rowInfo.collapsed` - if the row is collased or not.\n  - `rowInfo.groupBy` - the current group by for the row\n  - `rowInfo.indexInAll` - the index of the row in the whole data set\n  - `rowInfo.indexInGroup` - the index of the row in the current group\n  - `rowInfo.value` - the value (only for group rows) that will be rendered by default in group column cells.\n  - ... there are other useful properties that we'll document in the near future\n- `column` - the current column being rendered\n- `columnsMap` - the `Map` of columns available to the table. Note these might not be all visible. The keys in this map will be column ids.\n- `fieldsToColumn` a `Map` that links `DataSource` fields to columns. Columns bound to fields (so with <PropLink name=\"columns.field\" /> specified) will be included in this `Map`.\n- `api` - A reference to the [Infinite Table API](/docs/reference/api) object.\n\n<Note title=\"Column renderValue vs render\">\n\n<PropLink name=\"columns.render\"/> is the last function called in the rendering pipeline for a column cell, while <PropLink name=\"columns.renderValue\"/> is called before render, towards the beginning of the [rendering pipeline (read more about this below)](#rendering-pipeline).\n\nAvoid over-writing <PropLink name=\"columns.render\"/> for special columns (like group columns) unless you know what you're doing. Special columns use the `render` function to render additional content inside the column (eg: collapse/expand tool for group rows). The <PropLink name=\"columns.render\"/> function allows you to override this additional content. So if you specify this function, it's up to you to render whatever content, including the collapse/expand tool.\n\nHowever, there are easier ways to override the collapse/expand group icon, like using <PropLink name=\"columns.renderGroupIcon\"/>.\n\n</Note>\n\n<Note>\n\nInside the <PropLink name=\"columns.renderValue\"/> and <PropLink name=\"columns.render\"/> functions (and other rendering functions), you can use the <HookLink name=\"useInfiniteColumnCell\"/> hook to retrieve the same params that are passed to the render functions.\n\nThis is especially useful when inside those functions you render a custom component that needs access to the same information.\n\n```tsx\ntype Developer = { country: string; name: string; id: string };\n\nconst CountryInfo = () => {\n  const { data, rowInfo, value } = useInfiniteColumnCell<Developer>();\n\n  return <div>Country: {value}</div>;\n};\n\nconst columns = {\n  country: {\n    field: 'country',\n    renderValue: () => <CountryInfo />,\n  },\n};\n```\n\n</Note>\n\n<Sandpack title=\"Column with custom renderValue\">\n\n```tsx file=\"$DOCS/reference/column-renderValue-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nChanging the group icon using `render`. The icon can also be changed using <PropLink name=\"columns.renderGroupIcon\" />.\n\n<Sandpack title=\"Column with render - custom expand/collapse icon\">\n\n<Description>\n\nThis snippet shows overriding the group collapse/expand tool via the <PropLink name=\"columns.render\" /> function.\n\n</Description>\n\n```tsx file=\"$DOCS/reference/column-render-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Column with custom expand/collapse tool via renderGroupIcon\">\n\n<Description>\n\nThis snippet shows how you can override the group collapse/expand tool via the <PropLink name=\"columns.renderGroupIcon\" /> function.\n\n</Description>\n\n```tsx file=\"$DOCS/reference/column-renderGroupIcon-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Using hooks for custom rendering\n\nInside the <PropLink name=\"columns.render\" /> and <PropLink name=\"columns.renderValue\" /> functions, you can use hooks - both provided by `InfiniteTable` and any other `React` hooks.\n\n### Hook: <HookLink name=\"useInfiniteColumnCell\"/>\n\nWhen you're inside a rendering function for a column cell, you can use <HookLink name=\"useInfiniteColumnCell\">useInfiniteColumnCell hook</HookLink> to get access to the current cell's rendering information - the argument passed to the <PropLink name=\"columns.render\">render</PropLink> or <PropLink name=\"columns.renderValue\">renderValue</PropLink> functions.\n\n```tsx\nimport {\n  useInfiniteColumnCell,\n  InfiniteTableColumn,\n} from '@infinite-table/infintie-react';\n\nfunction CustomName() {\n  const { data, rowInfo } = useInfiniteColumnCell<Employee>();\n\n  return (\n    <>\n      <b>{data.firstName}</b>, {data.lastName}\n    </>\n  );\n}\n\nconst nameColumn: InfiniteTableColumn<Employee> = {\n  header: 'Employee Name',\n  renderValue: () => <CustomName />,\n};\n```\n\n<Sandpack title=\"Column with render & useInfiniteColumnCell\">\n\n```tsx file=\"$DOCS/reference/column-render-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Hook: <HookLink name=\"useInfiniteHeaderCell\" />\n\nFor column headers, you can use <HookLink name=\"useInfiniteHeaderCell\" /> hook to get access to the current header's rendering information - the argument passed to the <PropLink name=\"columns.header\"/> function.\n\n```tsx\nimport {\n  useInfiniteHeaderCell,\n  InfiniteTableColumn,\n} from '@infinite-table/infintie-react';\n\nfunction CustomHeader() {\n  const { column } = useInfiniteHeaderCell<Employee>();\n\n  return <b>{column.field}</b>;\n}\n\nconst nameColumn: InfiniteTableColumn<Employee> = {\n  header: 'Employee Name',\n  field: 'firstName',\n  header: () => <CustomHeader />,\n};\n```\n\n<Sandpack title=\"Column Header with render & useInfiniteHeaderCell\">\n\n```tsx file=\"$DOCS/reference/column-header-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Use <PropLink name=\"columns.components\">column.components</PropLink> to customize the column\n\nThere are cases when custom rendering via the <PropLink name=\"columns.render\" /> and <PropLink name=\"columns.renderValue\" /> props is not enough and you want to fully control the column cell and render your own custom component for that.\n\nFor such scenarios, you can specify `column.components.HeaderCell` and `column.components.ColumnCell`, which will use those components to render the DOM nodes of the column header and column cells respectively.\n\n```tsx\nimport { InfiniteTableColumn } from '@infinite-table/infintie-react';\n\nconst ColumnCell = (props: React.HTMLProps<HTMLDivElement>) => {\n  const { domRef, rowInfo } = useInfiniteColumnCell<Developer>();\n\n  return (\n    <div ref={domRef} {...props} style={{ ...props.style, color: 'red' }}>\n      {props.children}\n    </div>\n  );\n};\n\nconst HeaderCell = (props: React.HTMLProps<HTMLDivElement>) => {\n  const { domRef, sortTool } = useInfiniteHeaderCell<Developer>();\n\n  return (\n    <div ref={domRef} {...props} style={{ ...props.style, color: 'red' }}>\n      {sortTool}\n      First name\n    </div>\n  );\n};\n\nconst nameColumn: InfiniteTableColumn<Developer> = {\n  header: 'Name',\n  field: 'firstName',\n  components: {\n    ColumnCell,\n    HeaderCell,\n  },\n};\n```\n\n<Note>\n\nWhen using custom components, make sure you get `domRef` from the corresponding hook (<HookLink name=\"useInfiniteColumnCell\" /> for column cells and <HookLink name=\"useInfiniteHeaderCell\" /> for header cells) and pass it on to the final `JSX.Element` that is the DOM root of the component.\n\n```tsx\n// inside a component specified in column.components.ColumnCell\nconst { domRef } = useInfiniteColumnCell<DATA_TYPE>();\n\nreturn <div ref={domRef}>...</div>;\n```\n\nAlso you have to make sure you spread all other `props` you receive in the component, as they are `HTMLProps` that need to end-up in the DOM (eg: `className` for theming and default styles, etc).\n\nBoth <PropLink name=\"columns.components.ColumnCell\">components.ColumnCell</PropLink> and <PropLink name=\"columns.components.HeaderCell\">components.HeaderCell</PropLink> need to be declared with `props` being of type `HTMLProps<HTMLDivElement>`.\n\n</Note>\n\n<Sandpack title=\"Custom components\">\n\n```tsx file=\"$DOCS/reference/column-components-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf you're using the <HookLink name=\"useInfiniteColumnCell\" /> hook inside the <PropLink name=\"columns.render\" /> or <PropLink name=\"columns.renderValue\" /> functions (and not as part of a custom component in <PropLink name=\"columns.components.ColumnCell\" />), you don't need to pass on the `domRef` to the root of the DOM you're rendering (same is true if you're using <HookLink name=\"useInfiniteHeaderCell\" /> inside the <PropLink name=\"columns.header\" /> function).\n\n</Note>\n\nIf the above <PropLink name=\"columns.components\" /> is still not enough, read about the rendering pipeline below.\n\n## Rendering pipeline\n\nThe rendering pipeline for columns is a series of functions defined on the column that are called while rendering.\n\n<Note>\n\nAll the functions that have the word `render` in their name will be called with an object that has a `renderBag` property, which contains values that will be rendered.\n\n</Note>\n\nThe default <PropLink name=\"columns.render\" /> function (the last one in the pipeline) ends up rendering a few things:\n\n- a `value` - generally comes from the <PropLink name=\"columns.field\">field</PropLink> the column is bound to\n- a `groupIcon` - for group columns\n- a `selectionCheckBox` - for columns that have <PropLink name=\"columns.renderSelectionCheckBox\" /> defined (combined with row selection)\n\nWhen the rendering process starts for a column cell, all the above end up in the `renderBag` object.\n\n### Rendering pipeline - `renderBag.value`\n\nAs already mentioned, the `value` defaults to the value of the column <PropLink name=\"columns.field\">field</PropLink> for the current row.\n\nIf the column is not bound to a field, you can define a <PropLink name=\"columns.valueGetter\">valueGetter</PropLink>. The <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> only has access to `{data, field?}` in order to compute a value and return it.\n\nAfter the <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> is called, the <PropLink name=\"columns.valueFormatter\">valueFormatter</PropLink> is next in the rendering pipeline.\n\nThis is called with more details about the current cell\n\n```tsx\nconst column: InfiniteTableColumn<T> = {\n  // the valueGetter can be useful when rows are nested objects\n  // or you want to compose multiple values from the row\n  valueGetter: ({ data }) => {\n    return data.person.salary * 10;\n  },\n  valueFormatter: ({\n    value,\n    isGroupRow,\n    data,\n    field,\n    rowInfo,\n    rowSelected,\n    rowActive,\n  }) => {\n    // the value here is what the `valueFormatter` returned\n    return `USD ${value}`;\n  },\n};\n```\n\nAfter <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> and <PropLink name=\"columns.valueFormatter\">valueFormatter</PropLink> are called, the resulting value is the actual value used for the cell. This value will also be assigned to `renderBag.value`\n\nWhen <PropLink name=\"columns.renderValue\">renderValue</PropLink> and <PropLink name=\"columns.render\">render</PropLink> are called by `InfiniteTable`, both `value` and `renderBag` will be available as properties to the arguments object.\n\n```tsx {3,12}\nconst column: InfiniteTableColumn<T> = {\n  valueGetter: () => 'world',\n  renderValue: ({ value, renderBag, rowInfo }) => {\n    // at this stage, `value` is 'world' and `renderBag.value` has the same value, 'world'\n    return <b>{value}</b>;\n  },\n\n  render: ({ value, renderBag, rowInfo }) => {\n    // at this stage `value` is 'world'\n    // but `renderBag.value` is <b>world</b>, as this was the value returned by `renderValue`\n    return <div>Hello {renderBag.value}!</div>;\n  },\n};\n```\n\n<Note>\n\nAfter the <PropLink name=\"columns.renderValue\">renderValue</PropLink> function is called, the following are also called (if available):\n\n- <PropLink name=\"columns.renderGroupValue\">renderGroupValue</PropLink> - for group rows\n- <PropLink name=\"columns.renderLeafValue\">renderLeafValue</PropLink> - for leaf rows\n\nYou can think of them as an equivalent to <PropLink name=\"columns.renderValue\">renderValue</PropLink>, but narrowed down to group/non-group rows.\n\nInside those functions, the `renderBag.value` refers to the value returned by the <PropLink name=\"columns.renderValue\">renderValue</PropLink> function.\n\n</Note>\n\n### Rendering pipeline - `renderBag.groupIcon`\n\nIn a similar way to `renderBag.value`, the `renderBag.groupIcon` is also piped through to the <PropLink name=\"columns.render\">render</PropLink> function.\n\n```tsx {2,9}\nconst column: InfiniteTableColumn<T> = {\n  renderGroupIcon: ({ renderBag, toggleGroupRow }) => {\n    return <> [ {renderBag.groupIcon} ] </>;\n  },\n  render: ({ renderBag }) => {\n    return (\n      <>\n        {/* use the groupIcon from the renderBag */}\n        {renderBag.groupIcon}\n        {renderBag.value}\n      </>\n    );\n  },\n};\n```\n\n<Note>\n\nInside <PropLink name=\"columns.renderGroupIcon\" />, you have access to `renderBag.groupIcon`, which is basically the default group icon - so you can use that if you want, and build on that.\n\nAlso inside <PropLink name=\"columns.renderGroupIcon\" />, you have access to `toggleGroupRow` so you can properly hook the collapse/expand behaviour to your custom group icon.\n\n</Note>\n\n### Rendering pipeline - `renderBag.selectionCheckBox`\n\nLike with the previous properties of `renderBag`, you can customize the `selectionCheckBox` (used when multiple selection is configured) to be piped-through - for columns that specify <PropLink name=\"columns.renderSelectionCheckBox\" />.\n\n```tsx {2,25}\nconst column: InfiniteTableColumn<T> = {\n  renderSelectionCheckBox: ({\n    renderBag,\n    rowSelected,\n    isGroupRow,\n    toggleCurrentRowSelection,\n    toggleCurrentGroupRowSelection,\n  }) => {\n    const toggle = isGroupRow\n      ? toggleCurrentGroupRowSelection\n      : toggleCurrentRowSelection;\n\n    // you could return renderBag.groupIcon to have the default icon\n\n    const selection =\n      rowSelected === null\n        ? '-' // we're in a group row with indeterminate state if rowSelected === null\n        : rowSelected\n        ? 'x'\n        : 'o';\n\n    return <div onClick={toggle}> [ {selection} ] </div>;\n  },\n  render: ({ renderBag }) => {\n    return (\n      <>\n        {/* use the selectionCheckBox from the renderBag */}\n        {renderBag.selectionCheckBox}\n        {renderBag.groupIcon}\n        {renderBag.value}\n      </>\n    );\n  },\n};\n```\n\nTo recap, here is the full list of the functions in the rendering pipeline, in order of invocation:\n\n1. <PropLink name=\"columns.valueGetter\" /> - doesn't have access to `renderBag`\n2. <PropLink name=\"columns.valueFormatter\" /> - doesn't have access to `renderBag`\n3. <PropLink name=\"columns.renderGroupIcon\" /> - can use all properties in `renderBag`\n4. <PropLink name=\"columns.renderSelectionCheckBox\" /> - can use all properties in `renderBag`\n5. <PropLink name=\"columns.renderValue\" /> - can use all properties in `renderBag`\n6. <PropLink name=\"columns.renderGroupValue\" /> - can use all properties in `renderBag`\n7. <PropLink name=\"columns.renderLeafValue\" /> - can use all properties in `renderBag`\n8. <PropLink name=\"columns.render\" /> - can use all properties in `renderBag`\n\nAdditionally, the <PropLink name=\"columns.components.ColumnCell\" /> custom component does have access to the `renderBag` via <HookLink name=\"useInfiniteColumnCell\" />\n"
    },
    "/docs/learn/columns/column-sorting": {
      "filePath": "/docs/learn/columns/column-sorting",
      "routePath": "/docs/learn/columns/column-sorting",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/column-sorting.page.md",
      "fileName": "column-sorting.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Sorting",
        "description": "Configure column sorting with single and multiple sorting and custom sort functions. Both client-side and server-side sorting is supported"
      },
      "excerpt": "Docs coming soon",
      "readingTime": "1 min read",
      "content": "\nDocs coming soon\n"
    },
    "/docs/learn/columns/column-types": {
      "filePath": "/docs/learn/columns/column-types",
      "routePath": "/docs/learn/columns/column-types",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/column-types.page.md",
      "fileName": "column-types.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Types",
        "description": "Column types are blueprints for generalizing column configuration and code reuse."
      },
      "excerpt": "Column types allow you to specify common properties for multiple columns easily. Things like <PropLink name=\"columnTypes.minWidth\">minWidth</PropLink>, <PropLink name=\"columnTypes.maxWidth\">maxWidth</PropLink>, <PropLink name=\"columnTypes.defaultFlex\">defaultFlex</PropLink> and <PropLink name=\"columnTypes.header\">header</PropLink> are all available. For a full list, see <PropLink>columnTypes</PropLink> reference.",
      "readingTime": "3 min read",
      "content": "\nColumn types allow you to specify common properties for multiple columns easily. Things like <PropLink name=\"columnTypes.minWidth\">minWidth</PropLink>, <PropLink name=\"columnTypes.maxWidth\">maxWidth</PropLink>, <PropLink name=\"columnTypes.defaultFlex\">defaultFlex</PropLink> and <PropLink name=\"columnTypes.header\">header</PropLink> are all available. For a full list, see <PropLink>columnTypes</PropLink> reference.\n\nYou specify the type of a column via the <PropLink name=\"columns.type\">column.type</PropLink> property:\n\n```tsx\ntype Person = {\n  name: string;\n  dob: string;\n  age: number;\n}\nconst columns = {\n  age: {\n    field: 'age',\n    type: 'custom',\n  },\n  date: {\n    field: 'dob',\n    // will be type default\n  },\n  name: {\n    field: 'name',\n    // will have both of those types\n    type: ['default', 'custom']\n  }\n}\n\nconst columnTypes = {\n  default: {\n    width: 200\n  },\n  custom: {\n    align: 'center'\n  }\n}\n\n<InfiniteTable columnTypes={columnTypes} columns={columns} />\n```\n\n<Note>\n\nProperties defined in a column have precedence over the properties defined in the <PropLink code={false} name=\"columnTypes\">type</PropLink>.\n\nAlso, if a column has no <PropLink name=\"columns.type\">type</PropLink> specified, it will default to the `default` type. If you don't want a column to have the `default` type, use <PropLink name=\"columns.type\">column.type=null</PropLink> or <PropLink name=\"columns.type\">column.type=[]</PropLink>\n\nThe column <PropLink name=\"columns.type\">type</PropLink> property can be an array - in this case, types are applied in the order they are specified, later types overriding properties of earlier ones. If the `default` type is not specified in the array, it will not be applied to the column - if you want to apply it as well, use <PropLink name=\"columns.type\">type=['default', 'any', 'other', 'types', 'after']</PropLink>\n\n</Note>\n\n## Column Type properties order and precedence\n\nWhen a column has multiple column types, they are applied in order, from left to right, with later types overriding properties of earlier ones - think of the behavior as very similar to `Object.assign`.\n\nAssume a column has the following types:\n\n```tsx\nconst columns = {\n  salary: {\n    type: ['number', 'currency'],\n  },\n};\n\nconst numberFormatter = new Intl.NumberFormat();\nconst columnTypes = {\n  number: {\n    renderValue: ({ value }) => numberFormatter.format(value), // makes 12345 render as 12,345\n  },\n  currency: {\n    renderValue: ({ value }) => `USD: ${value}`, // makes 12345 render as USD: 12345\n  },\n};\n```\n\n<Note>\n\nAlthough the `salary` column has both the `number` and `currency` types, and both those types have the `renderValue` property defined, only the `currency` `renderValue` function will be called. In other words, the rendering is not piped from one column type to the next. This is applied for all properties, like `render`, `style`, etc.\n\nThe `renderValue` function (and other similar functions) has access to the `column` object, so you can manually access all the column types.\n\n</Note>\n"
    },
    "/docs/learn/columns/fixed-and-flexible-size": {
      "filePath": "/docs/learn/columns/fixed-and-flexible-size",
      "routePath": "/docs/learn/columns/fixed-and-flexible-size",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/fixed-and-flexible-size.page.md",
      "fileName": "fixed-and-flexible-size.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Column Sizing"
      },
      "excerpt": "Columns are a core concept for `Infinite Table` and sizing columns is an important topic to master. Here is a summary of how columns can be sized:",
      "readingTime": "12 min read",
      "content": "\nColumns are a core concept for `Infinite Table` and sizing columns is an important topic to master. Here is a summary of how columns can be sized:\n\n- fixed-sized columns can be specified via <PropLink name=\"columns.defaultWidth\" />\n- flexible columns need <PropLink name=\"columns.defaultFlex\" />\n- <PropLink name=\"columns.minWidth\" /> specifies the minimum size for a column\n- <PropLink name=\"columns.maxWidth\" /> is for the maximum width a column can take\n- default values are available for all of the above:\n  - <PropLink name=\"columnDefaultWidth\" /> gives all columns (that are otherwise unconfigured) a default size\n  - <PropLink name=\"columnMinWidth\" /> specifies the minimum width for all columns (that don't have one)\n  - <PropLink name=\"columnMaxWidth\" /> specifies the maximum width for all columns (that don't have one)\n\nFor fine-grained controlled-behavior on column sizing, use the controlled <PropLink name=\"columnSizing\"/> prop (for uncontrolled variant, see <PropLink name=\"defaultColumnSizing\" />). If you want to get updates to columns changing size as a result of user interaction, use <PropLink name=\"onColumnSizingChange\" />.\n\n<Note>\n\nUse <PropLink name=\"columnDefaultWidth\"/> to configure the default column width. If a column is not sized otherwise, this will be applied. The default value for <PropLink name=\"columnDefaultWidth\"/> is `200` (pixels).\n\nFor setting a minimum and maximum width for all columns, use <PropLink name=\"columnMinWidth\"/> (defaults to `30`) and <PropLink name=\"columnMaxWidth\"/> (defaults to `2000`) respectively.\n\n</Note>\n\n## Understanding default column sizing\n\nThe easiest way to get started and specify a sizing behavior for columns is to use <PropLink name=\"columns.defaultWidth\">column.defaultWidth</PropLink>, <PropLink name=\"columns.defaultFlex\">column.defaultFlex</PropLink> and/or <PropLink name=\"columnDefaultWidth\" /> (including related pros for specifying limits, like <PropLink name=\"columns.minWidth\">column.minWidth</PropLink>, <PropLink name=\"columns.maxWidth\">column.maxWidth</PropLink> and <PropLink name=\"columnMinWidth\" /> / <PropLink name=\"columnMaxWidth\" />).\n\nThose properties have `default` in their name because after the initial rendering of a column, you can't change its size by updating those values - more technically, <PropLink name=\"columns.defaultWidth\">column.defaultWidth</PropLink> and <PropLink name=\"columns.defaultFlex\">column.defaultFlex</PropLink> are uncontrolled props.\n\nWe suggest you use those to get started and if you don't have care about responding to the user changing the widths of those columns via drag&drop. As long as you're not using <PropLink name=\"onColumnSizingChange\" /> to be notified of column size changes, you're probably good with those.\n\n## Controlled column sizing\n\nHowever, once you start using <PropLink name=\"onColumnSizingChange\" /> and want to have full control of column sizing (maybe you want to restore it later to the state the user had it when the app was closed), you probably want to use controlled <PropLink name=\"columnSizing\" />.\n\nThe <PropLink name=\"columnSizing\" /> prop is an object of column ids to column sizing objects. Those sizing objects can have the following properties:\n\n- <PropLink name=\"columnSizing.flex\">flex</PropLink> - use this for <b>flexible columns</b>. Behaves like the flex CSS property.\n- <PropLink name=\"columnSizing.width\">width</PropLink> - use this for <b>fixed sized columns</b>\n- <PropLink name=\"columnSizing.minWidth\">minWidth</PropLink> - specifies the minimum width of the column. Useful for flexible columns or for restricting users resizing both fixed and flexible columns.\n- <PropLink name=\"columnSizing.maxWidth\">maxWidth</PropLink> - specifies the maximum width of the column. Useful for flexible columns or for restricting users resizing both fixed and flexible columns.\n\n<Note>\n\nIf a column is not specified in the <PropLink name=\"columnSizing\" /> prop (or its uncontrolled variant), or sized otherwise (eg: via the column type), it will have a fixed size, defaulting to <PropLink name=\"columnDefaultWidth\"/> (which also defaults to `200` if no value is passed in). You can also specify a <PropLink name=\"columnMinWidth\" /> and <PropLink name=\"columnMaxWidth\" /> - those will be applied for all columns (namely for those that dont explicitly specify other min/max widths).\n\n</Note>\n\n```tsx\nconst columnSizing: InfiniteTablePropColumnSizing = {\n  country: {\n    flex: 1,\n    // minWidth is optional\n    minWidth: 200,\n  },\n  city: {\n    width: 400,\n    // and so is maxWidth\n    maxWidth: 500,\n  },\n  salary: {\n    flex: 3,\n  },\n};\n// any column not specified in the columnSizing (or defaultColumnSizing) prop\n// will have fixed width (defaulting to `columnDefaultWidth`, which in turn defaults to 200px)\n```\n\n<Note>\n\nYou might find specifying the column size outside the column object to be a bit verbose to start with, but it will be easier to manage in many cases and is much more flexible. For example, when the user resizes a column via drag & drop and you want to persist the new column sizes, you don't have to update the whole `columns` object but instead update <PropLink name=\"columnSizing\"/> alone.\nThe same principle is true for <PropLink name=\"columnPinning\" /> and other column-level props.\n\n</Note>\n\n<Note>\n\nThe `columnSizing` prop also has an uncontrolled version, namely <PropLink name=\"defaultColumnSizing\" />.\n\n</Note>\n\n## Using flexible column sizing\n\n<Note>\n\nThe way flex sizing is implemented is similar to how CSS flexbox algorithm works. Explore this section to find out more details.\n\n</Note>\n\nImagine you have `1000px` of space available to the viewport of `InfiniteTable` and you have 3 columns:\n\n- a fixed column `100px` wide - name it col `A`\n- a fixed column `300px` wide - name it col `B`\n- a flexible column with `flex: 1` - name it col `F1`\n- a flexible column with `flex: 2` - name it col `F2`\n\nThe space remaining for the flexible columns is `1000px - 400px = 600px` and the sum of all flex values is `3`, that means each `flex` unit will be `600px / 3 = 200px`.\n\nThis means columns will have the following sizes:\n\n- col `A` will be `100px`\n- col `B` will be `300px`\n- col `F1` will be `200px` ( so a flex unit)\n- col `F2` will be `400px` ( so the equivalent of `2` flex units)\n\nIf the browser changes the layout of the component, so `InfiniteTable` has only `700px` available, then a flex unit would be `(700px - 400px) / 3 = 100px`.\n\nThis means columns will have the following sizes:\n\n- col `A` will be `100px`\n- col `B` will be `300px`\n- col `F1` will be `100px` ( so a flex unit)\n- col `F2` will be `200px` ( so the equivalent of `2` flex units)\n\nThe flexbox algorithm also uses <PropLink name=\"viewportReservedWidth\" /> to determine the width of the viewport to use for sizing columns - you can use <PropLink name=\"viewportReservedWidth\">viewportReservedWidth=100</PropLink> to always have a `100px` reserved area that won't be used for flexing columns.\n\n <Sandpack title=\"Using viewportReservedWidth to reserve whitespace when you have flexible columns\">\n\n <Description>\n\nThis example has a `viewportReservedWidth` of `50px`.\n\n </Description>\n\n```tsx file=\"$DOCS/reference/viewportReservedWidth-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nTake a look at the snippet below to see column sizing at work with flexible and fixed columns.\n\n<Sandpack title=\"Using controlled columnSizing\">\n\n```tsx file=\"$DOCS/reference/columnSizing-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nYou might find <PropLink name=\"viewportReservedWidth\" /> useful for advanced configuration when you have flexible columns.\n\n</Note>\n\n<Note>\n\nWhen he user is performing a column resize (via drag & drop), <PropLink name=\"onViewportReservedWidth\" /> is called when the resize is finished (not the case for resizing with the **SHIFT** key pressed, when adjacent columns share the space between them).\n\n</Note>\n\n<Note>\n\nYou can also size (generated) group columns by using their <PropLink name=\"columns.id\">column.id</PropLink> property.\n\nFor <PropLink name=\"groupRenderStrategy\">groupRenderStrategy=\"multi-column\"</PropLink>, if no `id` is specified in the group column configuration, each column will have a generated id like this: `\"group-by-${field}\"`.\n\nFor <PropLink name=\"groupRenderStrategy\">groupRenderStrategy=\"single-column\"</PropLink>, if no `id` is specified in the <PropLink name=\"groupColumn\" /> it will default to: `\"group-by\"`.\n\n</Note>\n\n## Resizing columns via drag & drop\n\nColumns are user-resizable via drag & drop. If you don't want a column to be resizable, specify <PropLink name=\"columns.resizable\">column.resizable=false</PropLink>\n\n<Note>\n\nBy default, all columns are resizable since <PropLink name=\"resizableColumns\" /> defaults to `true`. The <PropLink name=\"resizableColumns\" /> prop controls the behavior for all columns that don't explicitly specify their <PropLink name=\"columns.resizable\">column.resizable</PropLink> property.\n\n</Note>\n\nWhen initially rendered, columns are displayed with their <PropLink name=\"columns.defaultWidth\" /> (you can also use <PropLink name=\"columnDefaultWidth\" />) or <PropLink name=\"columns.defaultFlex\" />. Flexible columns take up available space taking into account their flex value, as detailed above.\n\nWhen the user is resizing columns (or column groups), the effect is seen in real-time, so it's very easy to adjust the columns to desired widths. After the user drops the resize handle to the desired position, <PropLink name=\"onColumnSizingChange\" /> is being called, to allow the developer to react to column sizing changes. Also <PropLink name=\"onViewportReservedWidth\" /> is called as well when the resize is finished (not the case for resizing with the **SHIFT** key pressed, when adjacent columns share the space between them).\n\n<Note>\n\nWhen flexible columns are resized, they are kept flexible even after the resize. Note however that their flex values will be different to the original flex values and will reflect the new proportions each flex column is taking up at the moment of the resize.\n\nMore exactly, the new flex values will be the actual pixel widths. As an example, say there are 2 flex columns, first one with flex `1` and second one with flex `3` and they have an available space of `800px`.\n\n```ts\nconst columns = {\n  first: { flex: 1, field: 'one' },\n  second: { flex: 2, field: 'two' },\n};\n```\n\nInitially they will occupy `200px` and `600px` respectively. If the user resizes them to be of equal size, <PropLink name=\"onColumnSizingChange\" /> will be called with an object like\n\n```ts\n{\n  first: { flex: 400 },\n  second: {flex: 400 }\n}\n```\n\nsince those are the actual widths measured from the DOM. This works out well, even if the available space of the table grows, as the proportions will be the same.\n\n</Note>\n\n### Resize Restrictions\n\nWhen resizing, the user needs to drag the resize handle to adjust the columns to new sizes. While doing so, the resize handle has a (green) color to indicate everything is okay. However, when restrictions are hit (either column <PropLink name=\"columns.minWidth\">min</PropLink> or <PropLink name=\"columns.maxWidth\">max</PropLink> widths), the resize handle turns red to indicate further resizing is not possible.\n\n### Sharing space on resize\n\nBy default when resizing a specific column, the following columns are pushed to the right (when making the column wider) or moved to the left (when making the column narrower).\n\nFor sharing space between resizable columns when resizing, the user needs to **hold the SHIFT key** when grabbing the resize handle. When the handle is dropped and the resize confirmed, <PropLink name=\"onColumnSizingChange\" /> is called, but <PropLink name=\"onViewportReservedWidth\" /> is not called for this scenario, since the reserved width is preserved.\n\n### Resizing column groups\n\nJust as columns are being resized, it is also possible to resize column groups. For this, the user needs to hover over the right border of the column group and start dragging the resize handle.\n\n<Note>\n\nFor multi-level column groups, it's possible to resize any of them. Just grab the handle from the desired group and start dragging. The handle height will indicate which column group is being resized.\n\n</Note>\n\n<Note>\n\nIf a column group has at least one resizable column, it can be resized.\n\nWhen resizing, the space is shared proportionally betweem all resizable columns in the group.\n\nOnce a min/max limit has been reached for a certain column in the group, the column respects the limit and the other columns keep resizing as usual. When the min/max limit has been reached for all columns in the group, the resize handle turns red to indicate further resizing is no longer possible.\n\n</Note>\n\n<Sandpack title=\"Resizing column groups\">\n<Description>\n\nTry resizing the `Finance` and `Regional Info` column groups.\n\nThe columns in the `Finance` group can be resized an extra `30px` (they have a `maxWidth` of `130px`).\n\n</Description>\n\n```tsx file=\"$DOCS/reference/column-groups-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Customizing the resize handle colors\n\nIt's possible to customize the resize handle colors and width.\n\nFor adjusting the handle colors, use the following CSS variables:\n\n- `--infinite-resize-handle-hover-background` - the color of the resize handle when it's in a `green`/all good state.\n- `--infinite-resize-handle-constrained-hover-background` - the color of the resize handle when it has reached a min/max constraint.\n\nYou can also adjust the width of the resize handle:\n\n- `--infinite-resize-handle-width` - the width of the `green`/`red` column resize handle. Defaults to `2px`\n- `--infinite-resize-handle-active-area-width` - the width of the area you can hover over in order to grab the resize handle. Defaults to `20px`. The purpose of this active area is to make it easier to grab the resize handle.\n\n## Auto-sizing columns\n\nFor sizing columns to the width of their content, you can use <PropLink name=\"autoSizeColumnsKey\" /> to declaratively auto-size columns:\n\n- when <PropLink name=\"autoSizeColumnsKey\" /> is a `string` or `number` and the value of the prop is changed, all columns will be auto-sized.\n- when <PropLink name=\"autoSizeColumnsKey\" /> is an object, it needs to have a `key` property (of type `string` or `number`), so whenever the `key` changes, the columns will be auto-sized. Specifying an object for <PropLink name=\"autoSizeColumnsKey\" /> gives you more control over which columns are auto-sized and if the size measurements include the header or not.\n\nWhen an object is used, the following properties are available:\n\n- `key` - mandatory property, which, when changed, triggers the update\n- `includeHeader` - optional boolean, - decides whether the header will be included in the auto-sizing calculations. If not specified, `true` is assumed.\n- `columnsToSkip` - a list of column ids to skip from auto-sizing. If this is used, all columns except those in the list will be auto-sized.\n- `columnsToResize` - the list of column ids to include in auto-sizing. If this is used, only columns in the list will be auto-sized.\n\n<Sandpack title=\"Auto-sizing columns\">\n\n```tsx file=\"$DOCS/reference/autoSizeColumnsKey-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/columns/": {
      "filePath": "/docs/learn/columns/index",
      "routePath": "/docs/learn/columns/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/columns/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/learn/columns/",
      "frontmatter": {
        "title": "Working with Columns",
        "description": "Define columns to configure your Infinite Table React DataGrid - fixed and flexible columns, resize, column groups and more"
      },
      "excerpt": "Columns are a central feature in `InfiniteTable`.",
      "readingTime": "4 min read",
      "content": "\nColumns are a central feature in `InfiniteTable`.\n\nYou define columns as a an object, with keys being column ids while values are the column definitions.\n\nYou then use them in the `columns` prop in your `InfiniteTable` component.\n\nThe <PropLink name=\"columns\" /> prop is typed either as\n\n- `Record<string, InfiniteTableColumn<DATA_TYPE>>`\n- or `InfiniteTablePropColumns<DATA_TYPE>`, which is an alias for the type above\n\n<Note title=\"Understanding column id\">\n\nIn `InfiniteTable`, columns are identified by their key in the <PropLink name=\"columns\" /> object. **We'll refer to this as the column id**.\nThe column ids are used in many places - like defining the <PropLink name=\"columnOrder\" code={false}>column order</PropLink>, column pinning, column visibility, etc.\n\n</Note>\n\n```ts\nexport type Employee = {\n  id: number;\n  companyName: string;\n  firstName: string;\n  lastName: string;\n  country: string;\n  city: string;\n  department: string;\n  team: string;\n  salary: number;\n\n};\n\n// InfiniteTableColumn is a generic type, you have to bind it to a specific data-type\nimport { InfiniteTableColumn } from '@infinite-table/infinite-react';\n\n// we're binding it here to the `Employee` type\n// which means the `column.field` has to be `keyof Employee`\nexport const columns: Record<string, InfiniteTableColumn<Employee>> = {\n  'firstName':\n  {\n    field: 'firstName',\n    header: 'First Name',\n  },\n  'country':\n  {\n    field: 'country',\n  },\n  'city':\n  {\n    field: 'city'\n  },\n  'salary':\n  {\n    field: 'salary',\n    type: 'number'\n  },\n}\n<InfiniteTable columns={columns} />\n```\n\n<Note>\n\nIt's very important to remember you should not pass a different reference of a prop on each render. `<InfiniteTable />` is a optimized to only re-render when props change - so if you change the props on every re-render you will get a performance penalty.\n\nYou should use `React.useCallback` / `React.useMemo` / `React.useState` to make sure you only update the props you pass down to `InfiniteTable` when you have to.\n\n</Note>\n\n<Sandpack title=\"Basic Column Configuration\">\n\n```ts file=\"basic-columns-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<YouWillLearnCard inline title=\"Learn more about customizing Column Rendering\" path=\"./columns/column-rendering\">\nFind out how to render custom content inside columns or even take full control of column cells and header.\n</YouWillLearnCard>\n\n## Column Types\n\nColumn types allow you to customize column behavior and appearance for multiple columns at once. Most of the properties available for columns are also available for column types - for a full list, see <PropLink>columnTypes</PropLink> reference.\n\nThere are two special <PropLink code={false} name=\"columns.type\">column types</PropLink> for now, but more are coming soon:\n\n- `default` - all columns have this type, if not otherwise specified. The type does not contain any configuration, but allows you to define it and apply common configuration to all columns.\n- `number` - if specified on a column (in combination with local uncontrolled sorting), the column will be sorted numerically.\n\n<YouWillLearnCard inline title=\"Learn more on Column Types\" path=\"./columns/column-types\">\nFind out how to use column types to customize the appearance and behaviour of your columns.\n</YouWillLearnCard>\n\n## Column Order\n\nThe implicit column order is the order in which columns have been defined in the <PropLink name=\"columns\" /> object. You can however control that explicitly by using the `columnOrder: string[]` prop.\n\n```tsx\n\nconst columnOrder = ['firstName','id','curency']\n\nconst App = () => {\n  return <DataSource<DATA_TYPE> primaryKey={\"id\"} dataSource={...}>\n    <InfiniteTable<DATA_TYPE>\n      columnOrder={columnOrder}\n      onColumnOrderChange={(columnOrder: string[]) => {}}\n    />\n  </DataSource>\n}\n```\n\nThe <PropLink name=\"columnOrder\" /> prop is an array of strings, representing the column ids. A column id is the key of the column in the <PropLink name=\"columns\" /> object.\n\n<Note>\n\nThe <PropLink name=\"columnOrder\" /> array can contain identifiers that are not yet defined in the <PropLink name=\"columns\" /> Map, or can contain duplicate ids. This is a feature, not a bug. We want to allow you to use the <PropLink name=\"columnOrder\" /> in a flexible way so it can define the order of current and future columns.\n\n</Note>\n\n<Note>\n<PropLink name=\"columnOrder\" /> is a controlled prop. For the uncontrolled version, see <PropLink name=\"defaultColumnOrder\" />\n\nWhen using controlled <PropLink name=\"columnOrder\" />, make sure you also update the order by using the <PropLink name=\"onColumnOrderChange\" /> callback prop.\n</Note>\n\n<Sandpack title=\"Column Order demo, with firstName col displayed twice\">\n\n```tsx file=\"$DOCS/reference/columnOrder-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nBy keeping the column order simple, namely an array of strings, ordering becomes much easier.\n\nThe alternative would be to make `columns` an array, which most DataGrids do - and whenever they are reordered, a new `columns` array would be needed.\n\n</Note>\n"
    },
    "/docs/learn/context-menus/using-context-menus": {
      "filePath": "/docs/learn/context-menus/using-context-menus",
      "routePath": "/docs/learn/context-menus/using-context-menus",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/context-menus/using-context-menus.page.md",
      "fileName": "using-context-menus.page.md",
      "folderPath": "/docs/learn/context-menus/",
      "frontmatter": {
        "title": "Using Context Menus",
        "description": "InfiniteTable DataGrid allows you to easily configure context menus for any row and cell in the table and for the whole table body."
      },
      "excerpt": "The easiest way to configure a context menu is to provide the <PropLink name=\"getCellContextMenuItems\" /> callback function and use it to return the menu items you want to show in the context menu.",
      "readingTime": "3 min read",
      "content": "\nThe easiest way to configure a context menu is to provide the <PropLink name=\"getCellContextMenuItems\" /> callback function and use it to return the menu items you want to show in the context menu.\n\n```tsx\nconst getCellContextMenuItems = ({ column, value }) => {\n  if (column.id === 'currency') {\n    return [\n      {\n        label: `Convert ${value}`,\n        key: 'currency-convert',\n      },\n    ];\n  }\n\n  if (column.id === 'age') {\n    return null;\n  }\n\n  return [\n    {\n      label: `Welcome ${value}`,\n      key: 'hi',\n    },\n  ];\n};\n\n<DataSource<Developer> data={data} primaryKey=\"id\">\n  <InfiniteTable<Developer>\n    getCellContextMenuItems={getCellContextMenuItems}\n    columns={columns}\n  />\n</DataSource>;\n```\n\n<Sandpack title=\"Using context menus\">\n\n<Description>\n\nRight-click any cell in the table to see the custom context menu.\n\n</Description>\n\n```ts file=\"basic-cells-context-menu-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nThe <PropLink name=\"getCellContextMenuItems\" /> function can return one of the following:\n\n- `null` - no custom context menu will be displayed, the default context menu will be shown (default event behavior not prevented)\n- `[]` - an empty array - no custom context menu will be displayed, but the default context menu is not shown - the default event behavior is prevented\n- `Array<MenuItem>` - an array of menu items to be displayed in the context menu - each `MenuItem` should have:\n  - a unique `key` property,\n  - a `label` property with the value to display in the menu cell - it's called `label` because this is the name of the default column in the context menu\n  - an optional `onClick` callback function to handle the click event on the menu item.\n\nIn addition, if you need to configure the context menu to have other columns rather than the default column (named `label`), you can do so by returning an object with `columns` and `items`:\n\n```tsx\nconst getCellContextMenuItems = () => {\n  return {\n    columns: [{ name: 'label' }, { name: 'lcon' }],\n    items: [\n      {\n        label: 'Welcome',\n        icon: 'üëã',\n        key: 'hi',\n        onAction: () => {\n          // do something\n        },\n        hideMenuOnAction: true,\n      },\n      {\n        label: 'Convert',\n        icon: 'üîÅ',\n        key: 'convert',\n      },\n    ],\n  };\n};\n```\n\n<Sandpack title=\"Customising columns in the context menu\">\n\n<Description>\n\nRight-click any cell in the table to see a context menu with multiple columns (`icon`, `label` and `description`).\n\n</Description>\n\n```ts file=\"custom-columns-context-menu-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Note>\n\n## Context Menus for the Table Body\n\nYou might want to show a context menu for the table body, when the user right-clicks outside of any existing cell.\n\nFor this, you can use the <PropLink name=\"getContextMenuItems\" /> prop.\n\nThis function has almost the same signature as <PropLink name=\"getCellContextMenuItems\" />, with the following differences in the object passed as first parameter:\n\n- all cell-related properties (`column`, `data`, `value`, etc) can be `undefined`\n- it contains an `event` property with the original event object for the right-click event\n\n<Sandpack title=\"Context menu for outside cells\">\n\n<Description>\n\nRight-click outside cells in the table to see a context menu for the table body.\n\n</Description>\n\n```ts file=\"table-context-menu-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Hiding the Context Menu\n\nTo hide the context menu when you click a menu item, you can use the `hideMenuOnAction` property on the menu item.\n\nAlternatively, you can use the object passed in as a parameter to the `item.onAction` callback function to hide the menu:\n\n```tsx {12}\nconst getCellContextMenuItems = () => {\n  return {\n    items: [\n      {\n        label: 'Hello',\n        key: 'hi',\n        onAction: ({ key, hideMenu }) => {\n          // do something\n          console.log('Hello');\n\n          // hide the menu\n          hideMenu();\n        },\n      },\n    ],\n  };\n};\n```\n\nThe third option is to use the <ApiLink name=\"hideContextMenu\" /> function in the [API](/docs/reference/api).\n"
    },
    "/docs/learn/getting-started/": {
      "filePath": "/docs/learn/getting-started/index",
      "routePath": "/docs/learn/getting-started/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/getting-started/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/learn/getting-started/",
      "frontmatter": {
        "title": "Getting Started",
        "description": "Get help starting with Infinite Table for React. Our DataGrid component helps with sorting, filtering, row/column grouping, pivoting, aggregations ..."
      },
      "excerpt": "> `Infinite Table` is a UI component for data virtualization - helps you display huge datasets of tabular data.",
      "readingTime": "4 min read",
      "content": "\n> `Infinite Table` is a UI component for data virtualization - helps you display huge datasets of tabular data.\n\nIt's built specifically for React from the ground up and with performance in mind.\n\n# Installation\n\n`Infinite Table` is available on the public [npm registry](https://www.npmjs.com/package/@infinite-table/infinite-react) - install it by running the following command:\n\n<TerminalBlock>\nnpm i @infinite-table/infinite-react\n</TerminalBlock>\n\n## Meet the Code\n\n<Snippet>\n\n<Description>\n\nThis is an example to get you started with Infinite Table with minimal setup.\n</Description>\n\n```ts file=\"meet-the-code.page.tsx\"\n\n```\n\n</Snippet>\n\n\n<Note>\n\nDon't forget to import the CSS to see the component in action!\n\n```tsx \nimport '@infinite-table/infinite-react/index.css';\n```\n</Note>\n\n## Using the Components\n\nIn the code snippet above, you notice we're using 2 components:\n\n- `DataSource` - this needs to be a parent (or ancestor, at any level) of the `InfiniteTable` component - it controls which `data` the table is rendering\n- `InfiniteTable` - the actual virtualized table component - needs to be inside a `DataSource` (can be at any level of nesting).\n\nBoth components are named exports of the `@infinite-table/infinite-react` package.\n\n## TypeScript Types\n\nOur `TypeScript` types are published as part of the package, as named exports from the root of the package.\n\nThere are 2 components that you can use and import:\n\n- `InfiniteTable`\n- `DataSource`\n\nEach of those has types provided for all the props it exposes, with the pattern of `<COMPONENT_NAME>Prop<PROP_NAME>`, so here are a few examples to clarify the rule:\n\n```ts\nimport {\n  InfiniteTablePropColumns, // or accessible as InfiniteTableProps['columns']\n  // corresponding to the `columns` prop\n  DataSourcePropGroupBy, // or accessible as DataSourceProps['groupBy']\n  // corresponding to the `groupBy` prop\n} from '@infinite-table/infinite-react';\n```\n\n<HeroCards>\n<YouWillLearnCard title=\"Learn about our TypeScript typings\" path=\"/docs/learn/getting-started/typescript-types\">\nRead more about how to use our TypeScript types.\n</YouWillLearnCard>\n\n</HeroCards>\n\n## Built for React from the ground-up\n\n`Infinite Table` is built specifically for React and is fully declarative and fully typed. When you use `Infinite Table`, it feels at-home in your React application - every prop has both a controlled and uncontrolled version so you get full control over every area of the component.\n\n<Snippet>\n\n<Description>\n\nThis is an example of how you might configure `InfiniteTable` in a real-world application and puts together several functionalities:\n\n- grouping\n- aggregation\n- pinned columns\n- sorting\n- multiple selection\n- custom cell rendering\n\n</Description>\n\n```ts file=\"$DOCS/../../src/demo.tsx\"\n\n```\n\n</Snippet>\n\n## Licensing\n\nYou can use `@infinite-table/infinite-react` in 2 ways:\n\n- with a license - requests for license quotations and additional quotations must be made by email to admin@infinite-table.com. After purchasing, you will receive a `licenseKey` which you will provide as a prop when you instantiate Infinite Table. This will make the [Powered by Infinite Table](https://infinite-table.com) footer go away.\n- without a license, but it will include a [Powered by Infinite Table](https://infinite-table.com) link in the table footer. This way you can use it for free in any product, but make sure the footer is always visible when Infinite Table is visible. For demo purposes, we don't show any license error for embeds in [codesandbox.io](https://codesandbox.io) - which are used throughout this demo site. Check the demo below to see the license footer in action.\n\n```ts live title=\"Invalid License Demo\" files=\"invalid-license.page.tsx,data.tsx\"\n```\n\n\n\n<HeroCards>\n<YouWillLearnCard title=\"More on Licensing\" path=\"/docs/learn/getting-started/licensing\">\nRead more about our licensing model and how you can use Infinite Table.\n</YouWillLearnCard>\n\n</HeroCards>\n\n## About the Docs\n\n> We're grateful for the work done by the [team behind reactjs.org](https://github.com/reactjs/reactjs.org) and the new React documentation found at [beta.reactjs.org](https://beta.reactjs.org/) - we've built our documentation on their excellent work üôè and we're grateful for that.\n\nThe documentation is versioned, and we will publish a new version of the documentation when there are any significant changes in the corresponding `@infinite-table/infinite-react` version.\n"
    },
    "/docs/learn/getting-started/licensing": {
      "filePath": "/docs/learn/getting-started/licensing",
      "routePath": "/docs/learn/getting-started/licensing",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/getting-started/licensing.page.md",
      "fileName": "licensing.page.md",
      "folderPath": "/docs/learn/getting-started/",
      "frontmatter": {
        "title": "Licensing Infinite Table",
        "description": "Free Usage and Licensing with Infinite Table"
      },
      "excerpt": "## Free Usage",
      "readingTime": "1 min read",
      "content": "\n## Free Usage\n\nYou can immediately download and use [Infinite Table from the NPM registry](https://www.npmjs.com/package/@infinite-table/infinite-react) free of charge.\n\n<Note>\n\nWhen using Infinite Table for free, you have access to **all the features** of Infinite Table, but you will see a [Powered by Infinite Table](https://infinite-table.com) link in the table footer.\n\n</Note>\n\nYou can use it for free in any product, but make sure the footer is always visible when Infinite Table is visible. For demo purposes, we don't show any license error for embeds in [codesandbox.io](https://codesandbox.io) - which are used throughout this demo site. Check the demo below to see the license footer in action.\n\n<Sandpack title=\"Invalid License Demo\">\n\n```ts files=[\"invalid-license.page.tsx\",\"data.tsx\"]\n\n```\n\n</Sandpack>\n\n## Licensed Usage\n\nWe invite you to try out Infinite Table and explore all the features it has to offer. We're confident it will be a useful addition to your React applications.\n\nWe encourage companies üôå to purchase development licenses for their teams and help us improve the product and support the development of new features.\n\n<HeroCards>\n<YouWillLearnCard title=\"See Pricing\" path=\"/pricing\">\nSee our pricing page for more information on how to purchase a license.\n</YouWillLearnCard>\n\n</HeroCards>\n"
    },
    "/docs/learn/getting-started/test": {
      "filePath": "/docs/learn/getting-started/test",
      "routePath": "/docs/learn/getting-started/test",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/getting-started/test.page.md",
      "fileName": "test.page.md",
      "folderPath": "/docs/learn/getting-started/",
      "frontmatter": {
        "title": "Getting Started Test",
        "description": "Get help starting with Infinite Table for React. Our DataGrid component helps with sorting, filtering, row/column grouping, pivoting, aggregations ..."
      },
      "excerpt": "good morning `radu` how are you?",
      "readingTime": "1 min read",
      "content": "\ngood morning `radu` how are you?\n\n```hello```\n\nhave a good day\n\n\n```ts live files=[\"$DOCS/learn/working-with-data/refetch-example.page.tsx\",\"$DOCS/learn/working-with-data/columns.ts\"]\n\n```\n"
    },
    "/docs/learn/getting-started/typescript-types": {
      "filePath": "/docs/learn/getting-started/typescript-types",
      "routePath": "/docs/learn/getting-started/typescript-types",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/getting-started/typescript-types.page.md",
      "fileName": "typescript-types.page.md",
      "folderPath": "/docs/learn/getting-started/",
      "frontmatter": {
        "title": "TypeScript Types",
        "description": "Infinite Table types for TypeScript are published as part of the package, as named exports from the root of the package."
      },
      "excerpt": "Our `TypeScript` types are published as part of the package, as named exports from the root of the package.",
      "readingTime": "3 min read",
      "content": "\nOur `TypeScript` types are published as part of the package, as named exports from the root of the package.\n\nThe 2 main components that you can need to use and import are:\n\n- `InfiniteTable`\n- `DataSource`\n\n```tsx title=\"Importing InfiniteTable and DataSource components\"\nimport { InfiniteTable, DataSource } from '@infinite-table/infinite-react';\n```\n\n<Note>\n\nIn our TypeScript typings, those components are exported as generic components, so they need to be bound to the type of the data they are rendering.\n\n```tsx\ntype Developer = {\n  id: number;\n\n  firstName: string;\n  lastName: string;\n\n  currency: string;\n  salary: number;\n}\n\nconst App = () => {\n  return <DataSource<Developer> data={data} primaryKey=\"id\">\n    <InfiniteTable<Developer>\n      columns={{...}}\n    />\n  </DataSource>\n}\n```\n\nThroughout the documentation, we will use the `DATA_TYPE` placeholder to refer to the type of the data that the `InfiniteTable` and `DataSource` components are bound to.\n\n</Note>\n\n<Note>\n\nYou can still use `InfiniteTable` in plain JavaScript, but you won't get all the type-checking benefits.\n\n</Note>\n\nBoth `InfiniteTable` and `DataSource` components have types provided for most of the props they support. Generally the naming pattern is `<COMPONENT_NAME>Prop<PROP_NAME>`, so here are a few examples to clarify the rule:\n\n```ts\nimport type {\n  InfiniteTablePropColumns,\n  // corresponding to the `columns` prop\n  DataSourcePropGroupBy,\n  // corresponding to the `groupBy` prop\n} from '@infinite-table/infinite-react';\n```\n\n## `DataSource` Types\n\nHere are a few examples for types for the `DataSource` component:\n\n- `DataSourcePropGroupBy<DATA_TYPE>` - the type for <DPropLink name=\"groupBy\">DataSource.groupBy</DPropLink>\n\n```tsx\nimport type { DataSourcePropGroupBy } from '@infinite-table/infinite-react';\n```\n\n- `DataSourcePropAggregationReducers<DATA_TYPE>` - the type for <DPropLink name=\"aggregationReducers\">DataSource.aggregationReducers</DPropLink>\n\n```tsx\nimport type { DataSourcePropAggregationReducers } from '@infinite-table/infinite-react';\n```\n\n<Note>\n\nNot all the `DataSource` props have types exported that follow this convention, so you can always use `DataSourceProps<DATA_TYPE>` to get the type that define all the props.\n\nIn this way you can access specific prop types by name\n\n- `DataSourceProps<DATA_TYPE>['groupBy']` - the type for <DPropLink name=\"groupBy\">DataSource.groupBy</DPropLink>\n- `DataSourceProps<DATA_TYPE>['data']` - the type for <DPropLink name=\"data\">DataSource.data</DPropLink>\n- etc\n\n</Note>\n\n## `InfiniteTable` Types\n\nBelow you can find a few examples for types for the `InfiniteTable` component:\n\n- `InfiniteTablePropColumns<DATA_TYPE>` - the type for <PropLink name=\"columns\">InfiniteTable.columns</PropLink>\n\n```tsx\nimport type { InfiniteTablePropColumns } from '@infinite-table/infinite-react';\n```\n\n- `InfiniteTablePropRowStyle<DATA_TYPE>` - the type for <PropLink name=\"rowStyle\">InfiniteTable.rowStyle</PropLink>\n\n```tsx\nimport type { InfiniteTablePropRowStyle } from '@infinite-table/infinite-react';\n```\n\n- `InfiniteTablePropColumnGroups<DATA_TYPE>` - the type for <PropLink name=\"columnGroups\">InfiniteTable.columnGroups</PropLink>\n\n```tsx\nimport type { InfiniteTablePropColumnGroups } from '@infinite-table/infinite-react';\n```\n\n<Note>\n\nNot all the `InfiniteTable` props have types exported that follow this convention, so you can always use `InfiniteTableProps<DATA_TYPE>` to get the type that define all the props the `InfiniteTable` component supports.\n\nIn this way you can access specific prop types by name:\n\n- `InfiniteTableProps<DATA_TYPE>['columns']` - the type for <PropLink name=\"columns\">InfiniteTable.columns</PropLink>\n- `InfiniteTableProps<DATA_TYPE>['columnSizing']` - the type for <PropLink name=\"columnSizing\">InfiniteTable.columnSizing</PropLink>\n- etc\n\n</Note>\n\n<Note>\n\nWorth mentioning is the `InfiniteTableColumn<DATA_TYPE>` prop, which defines the type for the table <PropLink name=\"columns\" />.\n\n</Note>\n"
    },
    "/docs/learn/examples/change-datasource": {
      "filePath": "/docs/learn/examples/change-datasource",
      "routePath": "/docs/learn/examples/change-datasource",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/examples/change-datasource.page.md",
      "fileName": "change-datasource.page.md",
      "folderPath": "/docs/learn/examples/",
      "frontmatter": {
        "title": "Changing the Data Source"
      },
      "excerpt": "This example show how you can change the data source and the columns of the DataGrid.",
      "readingTime": "1 min read",
      "content": "\nThis example show how you can change the data source and the columns of the DataGrid.\n\n<HeroCards>\n<YouWillLearnCard title=\"Working with Data\" path=\"/docs/learn/working-with-data\">\nFind out more about how to work with data - both client-side and server-side.\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"Working with Columns\" path=\"/docs/learn/working-with-columns\">\nSee our page on using and configuring columns. It shows you how to use and customize columns to your needs.\n</YouWillLearnCard>\n</HeroCards>\n\n<Sandpack  size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nIn this demo you can toggle between 2 data sources and 2 sets of columns.\n\n</Description>\n\n```tsx file=\"change-datasource-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nInfinite Table guarantees you that the user will NEVER see white space when scrolling horizontally or vertically.\n</Note>\n"
    },
    "/docs/learn/examples/dynamic-pivoting-example": {
      "filePath": "/docs/learn/examples/dynamic-pivoting-example",
      "routePath": "/docs/learn/examples/dynamic-pivoting-example",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/examples/dynamic-pivoting-example.page.md",
      "fileName": "dynamic-pivoting-example.page.md",
      "folderPath": "/docs/learn/examples/",
      "frontmatter": {
        "title": "Dynamic Pivoting Example"
      },
      "excerpt": "This example showcases client-side grouping, pivoting and aggregation.",
      "readingTime": "1 min read",
      "content": "\nThis example showcases client-side grouping, pivoting and aggregation.\nThese properties are changed dynamically at run-time via the UI.\n\nIt also showcases different way of customizing columns based on dynamic conditions:\n\n- uses custom `number` and `currency` column types, to format values\n- has a custom border for rows that have `canDesign=yes`\n- the custom column type `number` has a background color based on the color input\n\n<Sandpack deps=\"react-select\" viewMode=\"preview\" size=\"lg\">\n\n```tsx files=[\"dynamic-advanced-pivoting-example.page.tsx\",\"Settings.tsx\",\"types.ts\"]\n\n```\n\n</Sandpack>\n\n## Server-side Dynamic Pivoting Example\n\nThis example is very similar with the above one, but pivoting, grouping and aggregation is done on the server-side.\n\n<Sandpack viewMode=\"preview\" size=\"lg\">\n\n```tsx files=[\"dynamic-pivoting-serverside-example.page.tsx\",\"Settings.tsx\",\"types.ts\"]\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/examples/live-updates-example": {
      "filePath": "/docs/learn/examples/live-updates-example",
      "routePath": "/docs/learn/examples/live-updates-example",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/examples/live-updates-example.page.md",
      "fileName": "live-updates-example.page.md",
      "folderPath": "/docs/learn/examples/",
      "frontmatter": {
        "title": "Live Updates Example"
      },
      "excerpt": "This example shows how you can update the grid data in real-time.",
      "readingTime": "1 min read",
      "content": "\nThis example shows how you can update the grid data in real-time.\n\n<HeroCards>\n<YouWillLearnCard title=\"Updating Data in Real-Time\" path=\"/docs/learn/working-with-data/updating-data-in-realtime\">\nFind out more about how to update data in real-time\n</YouWillLearnCard>\n\n</HeroCards>\n\n<Sandpack size=\"md\" viewMode=\"preview\">\n\n<Description>\n\nThe DataSource has 10k items - use the **Start/Stop** button to see updates in real-time.\n\nIn this example, we're updating 5 rows (in the visible viewport) every 30ms.\n\nThe update rate could be much higher, but we're keeping it at current levels to make it easier to see the changes.\n\n</Description>\n\n```tsx file=\"$DOCS/learn/working-with-data/realtime-updates-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/examples/performance-many-rows-and-columns": {
      "filePath": "/docs/learn/examples/performance-many-rows-and-columns",
      "routePath": "/docs/learn/examples/performance-many-rows-and-columns",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/examples/performance-many-rows-and-columns.page.md",
      "fileName": "performance-many-rows-and-columns.page.md",
      "folderPath": "/docs/learn/examples/",
      "frontmatter": {
        "title": "Performance with Many Rows and Columns"
      },
      "excerpt": "This example showcases a DataGrid with **10.000 rows** and **12 columns**.",
      "readingTime": "1 min read",
      "content": "\nThis example showcases a DataGrid with **10.000 rows** and **12 columns**.\n\n<HeroCards>\n<YouWillLearnCard title=\"Working with Data\" path=\"/docs/learn/working-with-data\">\nFind out more about how to work with data - both client-side and server-side.\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"Working with Columns\" path=\"/docs/learn/working-with-columns\">\nSee our page on using and configuring columns. It shows you how to use and customize columns to your needs.\n</YouWillLearnCard>\n</HeroCards>\n\n<Sandpack  size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nDataGrid with 10k rows and 12 columns.\n\nAdding more columns will not affect performance, as the DataGrid uses virtualization for both rows and **columns**.\n\n</Description>\n\n```tsx file=\"many-rows-and-columns-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nInfinite Table guarantees you that the user will NEVER see white space when scrolling horizontally or vertically.\n</Note>\n"
    },
    "/docs/learn/examples/using-sparklines": {
      "filePath": "/docs/learn/examples/using-sparklines",
      "routePath": "/docs/learn/examples/using-sparklines",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/examples/using-sparklines.page.md",
      "fileName": "using-sparklines.page.md",
      "folderPath": "/docs/learn/examples/",
      "frontmatter": {
        "title": "Sparklines Example"
      },
      "excerpt": "This example shows how to use integrate a sparkline component in a DataGrid column.",
      "readingTime": "1 min read",
      "content": "This example shows how to use integrate a sparkline component in a DataGrid column.\n\nFor this demo, we're using the [`react-sparklines`](https://www.npmjs.com/package/react-sparklines)  library.\n\nThe most important part is the <PropLink name=\"columns.renderValue\" /> property, which allows you to render a custom React component for the cell value.\n\n```tsx {11-26} title=\"Using column.renderValue to render a sparkline\"\nconst columns = {\n  // ... other columns\n  id: {\n    field: 'id',\n    defaultWidth: 100,\n  },\n  bugFixes: {\n    field: 'bugFixes',\n    header: 'Bug Fixes',\n    defaultWidth: 300,\n    renderValue: ({ value, data }) => {\n      const color =\n        data?.department === 'IT' || data?.department === 'Management'\n          ? 'tomato'\n          : '#253e56';\n      return (\n        <Sparklines\n          data={value}\n          style={{\n            width: '100%',\n          }}\n          height={30}\n        >\n          <SparklinesLine color={color} />\n        </Sparklines>\n      );\n    },\n  },\n}\n```\n\n\n<Sandpack size=\"md\" viewMode=\"preview\" deps=\"react-sparklines\" title=\"Using a sparkline component\">\n\n<Description>\nThis demo renders a sparkline and changes the color of the sparkline based on the `department` field in the row (red for IT or Management, blue for everything else).\n</Description>\n\n```tsx file=\"./using-sparklines-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/filtering/extending-existing-filters": {
      "filePath": "/docs/learn/filtering/extending-existing-filters",
      "routePath": "/docs/learn/filtering/extending-existing-filters",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/filtering/extending-existing-filters.page.md",
      "fileName": "extending-existing-filters.page.md",
      "folderPath": "/docs/learn/filtering/",
      "frontmatter": {
        "title": "Extending existing filters",
        "description": "Learn how to extend existing filters and filter types for your Infinite Table React DataGrid"
      },
      "excerpt": "By default `InfiniteTable` has the following default filter types:",
      "readingTime": "3 min read",
      "content": "\nBy default `InfiniteTable` has the following default filter types:\n\n- `string`\n- `number`\n\nand each of them has a collection of operators that are supported - see <DPropLink name=\"filterTypes\" /> for the respective list of supported operators.\n\nYou may find those operators limiting - but it's easy to extend them and add new operators or even new filter types.\n\n## Adding new operators to existing filter types\n\nYou can import `defaultFilterTypes` from the root of the package.\n\n```ts title=\"Adding a new operator to the string filter type\"\nimport { defaultFilterTypes¬†} from '@infinite-table/infinite-react';\n\n// add new operators for the `string` filter type\ndefaultFilterTypes.string.operators.push({\n  name: 'notContains',\n  component: { Icon: ReactComponentForIcon }\n  label: 'Not Contains',\n  fn: ({currentValue, filterValue }) => {\n    return typeof currentValue === 'string' &&\n            typeof filterValue == 'string' &&\n            !currentValue.toLowerCase().includes(filterValue.toLowerCase())\n  }\n})\n```\n\n<Note>\n\nWhen you import the named `defaultFilterTypes` value and extend it, that will affect all `InfiniteTable` components in your application.\n\nIf you don't want that, you need to use the `filterTypes` prop of the `<DataSource />` component. Either build an entirely new object for `filterTypes`, or start by cloning `defaultFilterTypes` and extend it.\n\n</Note>\n\n<Sandpack title=\"Enhanced string filter type - new 'Not includes' operator\">\n\n<Description>\n\nThe `string` columns have a new `Not includes` operator.\n\n</Description>\n\n```ts file=\"customised-default-filter-types-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Adding new filter types\n\nIf the existing filter types are not enough, it's easy to add new ones.\n\nAs already mentioned, you can either update the value of `defaultFilterTypes` or use the `filterTypes` prop of the `<DataSource />` component. Updating the value `defaultFilterTypes` will affect all your `InfiniteTable` DataGrid components.\n\n```ts title=\"Adding a new filter type by updating defaultFilterTypes\"\nimport { defaultFilterTypes } from '@infinite-table/infinite-react';\n\ndefaultFilterTypes.bool = {\n  defaultOperator: 'eq',\n  emptyValues: [null],\n  operators: [\n    {\n      name: 'eq',\n      label: 'Equals',\n      fn: ({ currentValue, filterValue }) => currentValue === filterValue,\n    },\n  ],\n};\n```\n\n```ts title=\"Adding a new filter type by using the filterTypes prop\"\nimport { DataSource } from '@infinite-table/infinite-react';\n\n<DataSource\n  filterTypes={{\n    bool: {\n      defaultOperator: 'eq',\n      emptyValues: [null],\n      operators: [\n        {\n          name: 'eq',\n          label: 'Equals',\n          fn: ({ currentValue, filterValue }) => currentValue === filterValue,\n        },\n      ],\n    },\n  }}\n/>;\n```\n\n<Note>\n\nWhen passing `filterTypes` to the `<DataSource />` component, the object will be merged with the `defaultFilterTypes`. As a result, the existing `string` and `number` filterTypes will be preserved, unless explicitly overridden.\n\n</Note>\n\n<Sandpack title=\"Writing a `bool` filter type with a custom filter editor\">\n\n<Description>\n\nThe `canDesign` column is using a custom `bool` filter type with a custom filter editor.\n\n</Description>\n\n```ts file=\"checkbox-filter-editor-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/filtering/filtering-client-side": {
      "filePath": "/docs/learn/filtering/filtering-client-side",
      "routePath": "/docs/learn/filtering/filtering-client-side",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/filtering/filtering-client-side.page.md",
      "fileName": "filtering-client-side.page.md",
      "folderPath": "/docs/learn/filtering/",
      "frontmatter": {
        "title": "Client-side Filtering",
        "description": "Learn how to configure client-side filtering for your Infinite Table React DataGrid"
      },
      "excerpt": "The most common way to use filtering in Infinite Table is by configuring filters for columns (this works both for client-side and server-side filtering).",
      "readingTime": "5 min read",
      "content": "\nThe most common way to use filtering in Infinite Table is by configuring filters for columns (this works both for client-side and server-side filtering).\n\nIf the DataSource <DPropLink name=\"data\" /> property is a function (and not an array or a `Promise`), then the filtering will happen server-side by default.\n\n<Note>\n\nTo force client-side filtering, you can explicitly set the <DPropLink name=\"filterMode\">filterMode=\"local\"</DPropLink> property on the `<DataSource />` component.\n\nThe possible values for this prop are:\n\n- `filterMode=\"local\"` - filtering will happen client-side\n- `filterMode=\"remote\"` - filtering will happen remotely and the <DPropLink name=\"filterValue\" /> will be passed as a property to the parameter object sent to the <DPropLink name=\"data\"/> function.\n\n</Note>\n\n## Showing the Column Filters\n\nIn order to show the column filter editors in the column headers, you need to specify either the uncontrolled <DPropLink name=\"defaultFilterValue\" /> property or the controlled <DPropLink name=\"filterValue\" /> version.\n\n<Sandpack title=\"Client-side filtering in action\">\n\n<Description>\n\nThis example shows remote data with local filtering - it sets `filterMode=\"local\"` on the `<DataSource />` component.\n\nIn addition, the `filterDelay` property is set to `0` for instant feedback.\n\n</Description>\n\n```ts file=\"basic-local-filter-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf you still want filtering to be enabled with the default functionality of using the <DPropLink name=\"filterValue\" /> (or uncontrolled <DPropLink name=\"defaultFilterValue\" />), but want to hide the column filter editors, you can set the <DPropLink name=\"showColumnFilters\">showColumnFilters</DPropLink> property to `false`.\n\n</Note>\n\n## Using Filter Types\n\nAs already documented in the [Understanding Filter Types](./#understanding-filter-types) section, you can specify the types of the filters the `<DataSource />` will support, by using the <DPropLink name=\"filterTypes\" /> property.\n\nThe default filter types are `string` and `number` - read the next section to see how you can add new operators to those filter types.\n\nA filter type is basically a collection of operators available for a type of data. Each operator needs a name and a function that will be used to filter the data, when that operator is applied.\n\n```tsx {5,14} title=\"Using_filter_types_for_filterValue\"\nfilterValue={[\n  {\n    field: 'firstName',\n    filter: {\n      type: 'string',\n      operator: 'includes',\n      value: 'John'\n    }\n\n  },\n  {\n    field: 'age',\n    filter: {\n      type: 'number',\n      operator: 'gt',\n      value: 30\n    }\n  }\n]}\n```\n\nThe above filter value specifies that there are 2 filters applied:\n\n- the `firstName` column applies a filter that will only match rows with `firstName` containining the string `John`\n- the `age` column has an additional filter, that will only match rows with `age` greater than `30`\n\nIf <DPropLink name=\"filterMode\" /> is set to `local`, then the filtering will happen client-side, using the filtering functions specified by `includes` operator in the `string` filter type and the `gt` operator in the `number` filter type.\n\nHere's a snippet of code from the `string` filter type showing the `includes` operator:\n\n```tsx\noperators: [\n  {\n    name: 'includes',\n    components: { Icon: /* a React Component */ },\n    label: 'Includes',\n    fn: ({ currentValue, filterValue }) => {\n      return (\n        typeof currentValue === 'string' &&\n        typeof filterValue == 'string' &&\n        currentValue.toLowerCase().includes(filterValue.toLowerCase())\n      );\n    },\n  },\n  //...\n]\n```\n\nLet's now look at another example, of implementing a custom `salary` filter type.\n\nFor this, we override the `filterTypes` property of the `<DataSource />` component:\n\n```tsx\nconst filterTypes = {\n  salary: {\n    defaultOperator: 'gt',\n    emptyValues: ['', null, undefined],\n    operators: [ /*...*/ ]\n  }\n}\n\n<DataSource<Developer>\n  filterTypes={filterTypes}\n/>\n```\n\n<Note>\n\nWhen you specify new <DPropLink name=\"filterTypes\"/>, the default filter types of `string` and `number` are still available - unless the new object contains those keys and overrides them explicitly.\n\n</Note>\n\n<Sandpack title=\"Client-side filtering in action with custom filter type\">\n\n<Description>\n\nThe `salary` column has a custom filter type, with the following operators: `gt`, `gte`, `lt` and `lte`.\n\n</Description>\n\n```ts file=\"filter-custom-filter-type-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Customizing Default Filter Types\n\nBy default, the `string` and `number` filter types are available. You can import the default filter types like this:\n\n```ts\nimport { defaultFilterTypes } from '@infinite-table/infinite-react';\n```\n\nIf you want to make all your instances of `InfiniteTable` have new operators for those filter types, you can simply mutate the exported `defaultFilterTypes` object.\n\n<Sandpack title=\"Enhanced string filter type - new 'Not includes' operator\">\n\n<Description>\n\nThe `string` columns have a new `Not includes` operator.\n\n</Description>\n\n```ts file=\"customised-default-filter-types-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nWhen you specify new <DPropLink name=\"filterTypes\"/>, the default filter types of `string` and `number` are still available - unless the new object contains those keys and override them explicitly.\n\n</Note>\n\n## Using a Filter Delay\n\nIn order to save some resources, filtering is batched by default. This is controlled by the <DPropLink name=\"filterDelay\"/> prop, which, if not specified, defaults to `200` milliseconds. This means, any changes to the column filters, that happen inside a 200ms window (or the current value of <DPropLink name=\"filterDelay\"/>), will be debounced and only the last value will be used to trigger a filter.\n\n<Note>\n\nIf you want to prevent debouncing/batching filter values, you can set <DPropLink name=\"filterDelay\"/> to `0`.\n\n</Note>\n\n<Note>\n\nAPI calls to <ApiLink name=\"setColumnFilter\"/> or <ApiLink name=\"clearColumnFilter\"/> are not batched.\n\n</Note>\n\n## Using a Filter Function Instead of the Column Filters\n\nFor client-side rendering, it's possible that instead of showing a column filter bar, you use a custom <DPropLink name=\"filterFunction\" /> to filter the data.\n\nIn this case, the filtering will happen client-side ... of course ü§¶‚Äç‚ôÇÔ∏è.\n\n<Sandpack title=\"Custom filterFunction example\">\n\n<Description>\n\nLoads data from remote location but will only show rows that have `id > 100`.\n\n</Description>\n\n```ts file=\"filter-function-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/filtering/filtering-server-side": {
      "filePath": "/docs/learn/filtering/filtering-server-side",
      "routePath": "/docs/learn/filtering/filtering-server-side",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/filtering/filtering-server-side.page.md",
      "fileName": "filtering-server-side.page.md",
      "folderPath": "/docs/learn/filtering/",
      "frontmatter": {
        "title": "Server-side Filtering",
        "description": "Learn how to integrate server-side filtering with your InfiniteTable React DataGrid"
      },
      "excerpt": "If you're using a remote <DPropLink name=\"data\" /> prop (a function that returns a `Promise`) on the `<DataSource />` component, the filtering will happen server-side by default.",
      "readingTime": "2 min read",
      "content": "\nIf you're using a remote <DPropLink name=\"data\" /> prop (a function that returns a `Promise`) on the `<DataSource />` component, the filtering will happen server-side by default.\n\n<Note>\n\nYou can explicitly configure server-side filtering by using <DPropLink name=\"filterMode\">filterMode=\"remote\"</DPropLink>.\n\n</Note>\n\nWhen remote filtering is enabled, the <DPropLink name=\"data\" /> function prop will be called with an object argument that includes the `filterValue` property, so the filters can be sent to the server for performing the correct filtering operations.\n\n<Note>\n\nObviously the filtering can be combined with sorting, grouping, etc.\n\nIt's up to the <DPropLink name=\"data\" /> function prop to send the correct parameters to the server for remote operations.\n\nThe returned JSON can include both\n\n- a `totalCount` property (`number`) and\n- a `totalCountUnfiltered` property (also `number`) - to inform the `<DataSource />` of the size of the data, both with and without the applied filters.\n\n</Note>\n\n<Sandpack title=\"Server-side filtering example\">\n\n<Description>\n\nAll the filtering in this example happens server-side.\n\nThis example also does server-side (multiple) sorting.\n\n</Description>\n\n```ts file=\"server-side-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nWhen the filter value for a column matches the empty value - as specified in the <DPropLink name=\"filterTypes\">filterTypes.operator.emptyValues</DPropLink> - that value is not sent to the server as part of the `filterValue` array.\n</Note>\n\n<Note>\n\nWhen doing server-side filtering, it's your responsability as a developer to make sure you're sending the correct filtering parameters to the server, in a way the server understands it.\n\nThis means that the filter values, the filter type and the names of the operators are known to the server and there is a clear convention of what is supported or not.\n\n</Note>\n\n## Batch filtering\n\nIn order to reduce the number of requests sent to the server, filtering will be batched by default.\n\nBatching is controlled by the <DPropLink name=\"filterDelay\"/> prop, which, if not specified, defaults to `200` milliseconds. This means, any changes to the column filters, that happen inside a 200ms window (or the current value of <DPropLink name=\"filterDelay\"/>), will be debounced and only the last value will be sent to the server.\n\n<Note>\n\nIf you want to prevent debouncing/batching filter values, you can set <DPropLink name=\"filterDelay\"/> to `0`.\n\n</Note>\n"
    },
    "/docs/learn/filtering/": {
      "filePath": "/docs/learn/filtering/index",
      "routePath": "/docs/learn/filtering/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/filtering/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/learn/filtering/",
      "frontmatter": {
        "title": "Filtering",
        "description": "Learn how to configure client-side and server-side filtering in Infinite Table for React"
      },
      "excerpt": "Filtering allows you to limit the rows available in the table.",
      "readingTime": "6 min read",
      "content": "\nFiltering allows you to limit the rows available in the table.\n\nBoth client-side and server-side filtering are available in Infinite Table - but the way the are configured is pretty similar, so this page documents the common parts, while pointing to the respective pages for the differences.\n\n## Configuring Filters for Columns\n\nThe most common way to use filtering in Infinite Table is by configuring filters for columns (this works both for client-side and server-side filtering).\n\nYou specify an uncontrolled <DPropLink name=\"defaultFilterValue\" /> on the `<DataSource />` component (or the controlled version, <DPropLink name=\"filterValue\" />) and the specified value will be used as the initial filter.\n\nBased on the <PropLink name=\"columns.type\" code={false}>column type</PropLink>, the correct filter editor is displayed in the column header, along with the correct operator icon. In the UI, you can change the operator being used for the filter.\n\n```tsx title=\"Specifying an initial filter value for the DataSource\"\n<DataSource<Developer>\n  data={...}\n  defaultFilterValue={[\n    {\n      field: 'age',\n      filter: {\n        operator: 'gt',\n        value: 30,\n        type: 'number'\n      }\n    }\n  ]}\n>\n  <InfiniteTable<Developer>\n    columns={...}\n  />\n</DataSource>\n```\n\n<Note>\n\nIf you don't need to specify some initial filters, but want the column filter bar to be visible, you need to specify `defaultFilterValue = []` (or the controlled `filterValue = []`).\n\nSpecifying any of those props will make the column filter bar visible.\n\nWhenever filters change, <DPropLink name=\"onFilterChange\" /> will be called with the new filter value - note however, it might not be called immediately, due to the <DPropLink name=\"filterDelay\" /> prop.\n\n</Note>\n\nThe above snippet will show a `number` filter for the `age` column. There are two filter types available at this stage in Infinite Table:\n\n- `string` - with the following operators available: `contains`, `eq`, `startsWith` and `endsWith`\n- `number` - with the following operators available: `eq`,`neq`, `gt`, `gte`, `lt` and `lte`\n\n## Defining Filterable Columns\n\nBy default, all columns are filterable.\n\nIf you want to make columns by default not filterable, use the <PropLink name=\"columnDefaultFilterable\" /> prop and set it to `false`.\n\nYou can specifically configure each column by using the <PropLink name=\"columns.defaultFilterable\">defaultFilterable</PropLink> property - this overrides the global <PropLink name=\"columnDefaultFilterable\" /> prop.\n\n## Defining a Filter Type for a Column\n\nBesides being filterable, a column can decide what type of filter it will display.\n\nUse the <PropLink name=\"columns.type\" /> property to specify the type of filter the column will use. Using the `type` property also configures the data type of the column, which in turn determines the sort type.\n\n<Note>\n\nIf the type of filter you want to show does not match the column <PropLink name=\"columns.type\">type</PropLink>, you can specify the filter with the <PropLink name=\"columns.filterType\">column.filterType</PropLink> property. Only use this when the type of the data differs from the type of the filter (eg: you have a numeric column, with a custom filter type).\n\n</Note>\n\n## Understanding Filter Types\n\nA filter type is a concept that defines how a certain type of data is to be filtered.\nA filter type will have\n\n- a `key` - the key used to define the filter in the <DPropLink name=\"filterTypes\" /> object\n- a `label`,\n- an array of values considered to be empty values - when any of these values is used in the filter, the filter will not be applied.\n- an array of `operators`\n- a default operator.\n\nLet's imagine you have a `DataSource` with developers, each with a `salary` column, and for that column you want to allow `>`, `>=`, `<` and `<=` comparisons (operators).\n\nFor this, you would define the following filter type:\n\n```tsx\nconst filterTypes = {\n  income: {\n    label: 'Income',\n    emptyValues: ['', null, undefined],\n    defaultOperator: 'gt',\n    operators: [\n      {\n        name: 'gt',\n        label: 'Greater than',\n        fn: ({ currentValue, filterValue, emptyValues }) => {\n          if (emptyValues.has(currentValue)) {\n            return true;\n          }\n          return currentValue > filterValue;\n        },\n      },\n      {\n        name: 'gte',\n        //...\n      },\n      {\n        name: 'lt',\n        //...\n      },\n      {\n        name: 'lte',\n        //...\n      },\n    ],\n  },\n};\n```\n\n<Note>\n\nEach operator for a certain filter type needs to at least have a `name` and `fn` defined. The `fn` property is a function that will be called when client-side filtering is enabled, with an object that has the following properties:\n\n- `currentValue` - the cell value of the current row for the column being filtered\n- `filterValue` - the value of the filter editor\n- `emptyValues` - the array of values considered to be empty values for the filter type\n- `data` - the current row data object - `typeof DATA_TYPE`\n- `index` - the index of the current row in the table - `number`\n- `dataArray` - the array of all rows originally in the table - `typeof DATA_TYPE[]`\n- `field?` - the field the current column is bound to (can be undefined if the column is not bound to a field)\n\n</Note>\n\n<Sandpack title=\"Client-side filtering in action with custom filter type\">\n\n<Description>\n\nThe `salary` column has a custom filter type, with the following operators: `gt`, `gte`, `lt` and `lte`.\n\n</Description>\n\n```ts file=\"filter-custom-filter-type-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Specifying the filter mode\n\nAs already mentioned, filtering can happen either client-side or server-side. If the DataSource <DPropLink name=\"data\" /> property is a function (and not an array or a `Promise`), then the filtering will happen server-side by default.\n\nHowever, you can explicitly specify where the filtering should happen by setting the <DPropLink name=\"filterMode\" /> property on the `<DataSource />` component - possible values are\n\n- `filterMode=\"local\"` - filtering will happen client-side\n- `filterMode=\"remote\"` - filtering will happen remotely and the <DPropLink name=\"filterValue\" /> will be passed as a property to the parameter object sent to the <DPropLink name=\"data\"/> function.\n\n<Note title=\"Filter mode ‚ö†Ô∏è\">\n\nExplicitly specify <DPropLink name=\"filterMode\" /> as either `\"local\"` or `\"remote\"` if you want to change the default behavior.\n\n</Note>\n\n## Filtering Columns Not Bound to a Field\n\nIf a column is not bound to a `field`, it can still be used for filtering, even client-side filtering, if it is configured with a <PropLink name=\"columns.valueGetter\" />.\n\n<Note>\n\nIf you don't need a default filter value, the <DPropLink name=\"filterValue\" /> that's set when the user interacts with the column filter will use the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> to filter values.\n\nIf however, you need initial filtering by that column, the <DPropLink name=\"filterValue\" /> needs to specify a `valueGetter` itself.\n\n```tsx\ndefaultFilterValue={[\n  {\n    id: 'salary',\n    valueGetter: ({ data }) => data.salary,\n    filter: {\n      operator: 'gt',\n      value: '',\n      type: 'number',\n    }\n  },\n]}\n```\n\n</Note>\n\n<Sandpack title=\"Filtering a column not bound to a field\">\n\n<Description>\n\nThe `salary` column is not bound to a `field` - however, it can still be used for filtering, as it's configured with a `valueGetter`.\n\n</Description>\n\n```ts file=\"filter-column-with-id-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Customizing the Filter Icon for Columns\n\nColumns can customize the filter icon by using the <PropLink name=\"columns.renderFilterIcon\" /> property.\n\n<Sandpack title=\"Custom filter icons for salary and name columns\">\n\n<Description>\n\nThe `salary` column will show a bolded label when filtered.\n\nThe `firstName` column will show a custom filter icon when filtered.\n\n</Description>\n\n```ts file=\"$DOCS/learn/columns/column-filter-icon-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<HeroCards>\n<YouWillLearnCard title=\"Client-side filtering\" path=\"./filtering/filtering-client-side\">\nLearn how to use filtering in the browser.\n</YouWillLearnCard>\n<YouWillLearnCard title=\"Server-side filtering\" path=\"./filtering/filtering-server-side\">\nFigure out how to use filtering with server-side integration.\n</YouWillLearnCard>\n</HeroCards>\n"
    },
    "/docs/learn/filtering/providing-a-custom-filter-editor": {
      "filePath": "/docs/learn/filtering/providing-a-custom-filter-editor",
      "routePath": "/docs/learn/filtering/providing-a-custom-filter-editor",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/filtering/providing-a-custom-filter-editor.page.md",
      "fileName": "providing-a-custom-filter-editor.page.md",
      "folderPath": "/docs/learn/filtering/",
      "frontmatter": {
        "title": "Providing a Custom Filter Editor",
        "description": "Writing a custom filter editor for a column in Infinite Table is straightforward."
      },
      "excerpt": "Almost certainly, our current `string` and `number` filters are not enough for you. You will definitely need to write your custom filter editor.",
      "readingTime": "3 min read",
      "content": "\nAlmost certainly, our current `string` and `number` filters are not enough for you. You will definitely need to write your custom filter editor.\n\nFortunately, doing this is straightforward - it involves using the <HookLink name=\"useInfiniteColumnFilterEditor\" /> hook.\n\nThe next snippet shows our implementation of the `number` filter editor:\n\n```tsx\nexport function NumberFilterEditor<T>() {\n  const { ariaLabel, value, setValue, className, disabled } =\n    useInfiniteColumnFilterEditor<T>();\n\n  return (\n    <input\n      aria-label={ariaLabel}\n      type=\"number\"\n      disabled={disabled}\n      value={value as any as number}\n      onChange={(event) => {\n        let value = isNaN(event.target.valueAsNumber)\n          ? event.target.value\n          : event.target.valueAsNumber;\n        setValue(value as any as T);\n      }}\n      className={className}\n    />\n  );\n}\n```\n\n<Note>\n\nThis `NumberFilterEditor` is configured in the `components.FilterEditor` property for the `number` filter type.\n\nIf you want to import the `NumberFilterEditor`, you can do so with the following code:\n\n```tsx\nimport { components } from '@infinite-table/infinite-react';\n\nconst { NumberFilterEditor, StringFilterEditor } = components;\n```\n\n</Note>\n\nAs an exercise, let's write a custom filter editor that shows a checkbox and uses that to filter the values.\n\nFirst step is to define the `bool` filter type:\n\n```tsx {6} title=\"Defining the bool filter type with one emptyValue\"\nfilterTypes={{\n  bool: {\n    label: 'Boolean',\n    defaultOperator: 'eq',\n    // when the filter checkbox is indeterminate state, that's mapped to `null`\n    emptyValues: [null],\n    operators: [\n      // operators will come here\n    ],\n  }\n}}\n```\n\nNote in the code above, we have `emptyValues: [null]` - so when the filter checkbox is in indeterminate state, it should show all the rows.\n\nNow it's time to define the operators - more exactly, just one operator, `eq`:\n\n```tsx {7} title=\"Defining the eq operator\"\nfilterTypes={{\n  bool: {\n    defaultOperator: 'eq',\n    emptyValues: [null],\n    operators: [\n      {\n        name: 'eq',\n        label: 'Equals',\n        fn: ({ currentValue, filterValue }) => currentValue === filterValue,\n      },\n    ],\n  },\n}}\n```\n\nThe last part of the `bool` filter type will be to specify the `FilterEditor` component - this can be either specified as part of the filter type or as part of the operator definition (each operator can override the `components.FilterEditor`).\n\n```tsx {6} title=\"Specifying the FilterEditor component\"\nfilterTypes={{\n  bool: {\n    defaultOperator: 'eq',\n    emptyValues: [null],\n    components: {\n      FilterEditor: BoolFilterEditor,\n      FilterOperatorSwitch: () => null,\n    },\n    operators: [\n      {\n        name: 'eq',\n        label: 'Equals',\n        fn: ({ currentValue, filterValue }) =>\n          currentValue === filterValue,\n      },\n    ],\n  },\n}}\n```\n\nNow it's time to write the actual `BoolFilterEditor` that the `bool` filter type is using:\n\n```tsx {9} title=\"BoolFilterEditor\"\nimport {\n  components,\n  useInfiniteColumnFilterEditor,\n} from '@infinite-table/infinite-react';\n\nconst { CheckBox } = components;\n\nfunction BoolFilterEditor() {\n  const { value, setValue, className } =\n    useInfiniteColumnFilterEditor<Developer>();\n  return (\n    <div className={className} style={{ textAlign: 'center' }}>\n      <CheckBox\n        checked={value}\n        onChange={(newValue) => {\n          if (value === true) {\n            // after the value was true, make it go to indeterminate state\n            newValue = null;\n          }\n          if (value === null) {\n            // from indeterminate, goto false\n            newValue = false;\n          }\n          setValue(newValue);\n        }}\n      />\n    </div>\n  );\n}\n```\n\n<Note>\n\nIn the snippet above, note how we're using the <HookLink name=\"useInfiniteColumnFilterEditor\" /> hook to get the current `value` of the filter and also to retrieve the `setValue` function that we need to call when we want to update filtering.\n\n</Note>\n\n<Sandpack title=\"Writing a `bool` filter type with a custom filter editor\">\n\n<Description>\n\nThe `canDesign` column is using a custom `bool` filter type with a custom filter editor.\n\n</Description>\n\n```ts file=\"checkbox-filter-editor-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/grouping-and-pivoting/group-aggregations": {
      "filePath": "/docs/learn/grouping-and-pivoting/group-aggregations",
      "routePath": "/docs/learn/grouping-and-pivoting/group-aggregations",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/grouping-and-pivoting/group-aggregations.page.md",
      "fileName": "group-aggregations.page.md",
      "folderPath": "/docs/learn/grouping-and-pivoting/",
      "frontmatter": {
        "title": "Aggregations",
        "description": "Learn how to define & use aggregations on grouped rows in Infinite Table for React."
      },
      "excerpt": "A natural next step when grouping data is **aggregating the grouped values**. We allow developers to define any number of aggregations and bind them to any column.",
      "readingTime": "8 min read",
      "content": "\nA natural next step when grouping data is **aggregating the grouped values**. We allow developers to define any number of aggregations and bind them to any column.\n\nThe aggregations are defined on the `<DataSource />` component and are easily available at render time. A client-side aggregation needs a reducer function that accumulates the values in the data array and computes the final result.\n\n<Note>\n\nThroughout the docs, we might refer to aggregations as reducers - which, more technically, they are, since they reduce an array of values (from a group) to a single value.\n\n</Note>\n\n## Client-Side Aggregations\n\nWhen using client-side aggregation, each <DataSourcePropLink name=\"aggregationReducers\" code={false}>aggregation</DataSourcePropLink> can have the following:\n\n### An initial value\n\nThe `initialValue` is optional value to use as the initial (accumulator) value for the reducer function. You can think of aggregations as an \"enhanced\" version of [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce), so initial value should sound familiar.\n\n<Note>\n\nThe `initialValue` can be a function - in this case it will be called to compute the initial value.\n\n</Note>\n\n### A reducer function\n\n`reducer` is the function to call for each value in the (grouped) data array. It is called with the following arguments:\n\n- `accumulator` - the value returned by the previous call to the reducer function, or the `initialValue` if this is the first call. You return the new accumulator value from this function.\n- `value` - the value of the current item in the data array. If the aggregation has a `field`, this is the value of that field in the current item. Otherwise, value is the result of calling the `reducer.getter(data)` function (if one exists) or null if no getter is defined.\n- `dataItem` - the current item in the data array.\n- `index` - the index of the current item in the data array.\n\n### A `field` property or a `getter` function\n\nFor simple use-cases of client-side aggregations, a `field` is the way to go. This defines the field property (from the DATA_TYPE) to which the aggregation is bound.\n\nFor more complex scenarios, the aggregation should have a `getter` function. If both a `field` and a `getter` are provided, the `getter` has higher priority and will be used.\n\nUse this `getter` function to compute the value the current item in the array brings to the aggregation.\n\n```tsx title=\"Aggregation_custom_getter_function\"\n// useful for retrieving nested values\n\ngetter: (dataItem: Developer) => data.salary.net;\n```\n\n<Note>\n\nFor using nested values inside aggregations, use the aggregation `getter` function.\n\n</Note>\n\n### A completion `done` function\n\nThe completion `done` function is optional - if specified, will be after iterating over all the values in the grouped data array. Can be used to change the final result of the aggregation. It is called with the following arguments:\n\n- `accumulator` - the value returned by the last call to the reducer function\n- `data` - the grouped data array.\n  This is useful for computing averages, for example:\n\n```tsx title=\"Done function for avg reducer\"\ndone: (acc, data) => acc / data.length;\n```\n\n### Putting it all together\n\nLet's take a look at a simple example of aggregating two columns, one to display the avg and the other one should compute the sum of the salary column for grouped rows.\n\n```tsx title=\"Average Aggregation\"\nimport { DataSource, InfiniteTable } from '@infinite-table/infinite-react';\n\nconst sum = (a: number, b: number) => a + b;\n\nconst reducers = {\n  avg: {\n    initialValue: 0,\n    field: 'age',\n    reducer: sum,\n    done: (acc, data) => Math.round(acc / data.length),\n  },\n\n  sumAgg: {\n    initialValue: 0,\n    field: 'salary',\n    reducer: sum\n  }\n}\n\nfunction App() {\n  return <DataSource<Developer>\n    aggregationReducers={reducers}\n  >\n    <InfiniteTable<Developer> {...} />\n  </DataSource>\n}\n```\n\nIn the above example, note that aggregations are an object where the keys of the object are used to identify the aggregation and the values are the aggregation configuration objects, as described above.\n\n<Note>\n\nAt run-time, you have access to the aggregation reducer results inside group rows - you can use the `rowInfo.reducerResults` object to access those values. For the example above, you change how group rows are rendered for a certain column and display the aggregation results in a custom way:\n\n```tsx {9} title=\"Custom_group_row_rendering_for_the_country_column\"\n\ncountry: {\n  field: 'country',\n\n  // define a custom renderGroupValue fn for the country column\n\n  renderGroupValue: ({ rowInfo }) => {\n    const { reducerResults = {} } = rowInfo;\n    // note the keys in the reducerResults objects match the keys in the aggregationReducers object\n    return `Avg age: ${reducerResults.avg}, total salary ${reducerResults.sumAgg}`;\n  },\n},\n```\n\n</Note>\n\n<Sandpack title=\"Sum and average aggregation example\">\n\n```ts file=\"aggregations-simple-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Server-Side Aggregations\n\nServer-side aggregations are defined in the same way as client-side aggregations (except the `reducer` function is missing), but the aggregation values are computed by the server and returned as part of the data response.\n\nFor computing the grouping and aggregations on the server, the backend needs to know the grouping and aggregation configuration. As such, Infinite Table will call the <DPropLink name=\"data\" code={false}>DataSource data</DPropLink> function with an object that contains all the required info:\n\n- `groupBy` - the array of grouping fields, as passed to the `<DataSource />` component.\n- `pivotBy` - the array of pivot fields, as passed to the `<DataSource />` component.\n- `aggregationReducers` - the value of the <DPropLink name=\"aggregationReducers\" /> prop, as configured on the `<DataSource />` component.\n- `sortInfo` - the current <DPropLink name=\"sortInfo\" code={false}>sorting information</DPropLink> for the data.\n\nFor the lazy-loading use-case, there are other useful properties you can use from the object passed into the `data` function:\n\n- `groupKeys: string[]` - the group keys for the current group - the `data` fn is generally called lazily when the user expands a group row. This info is useful for fetching the data for a specific group.\n- `lazyLoadStartIndex` - provided when batching is also enabled via the <DPropLink name=\"lazyLoad\" /> prop. This is the index of the first item in the current batch.\n- `lazyLoadBatchSize` - also used when batching is enabled. This is the number of items in the current batch.\n\nBesides the above information, if filtering is used, a `fiterValue` is also made available.\n\nIn order to showcase the server-side aggregations, let's build an example similar to the above one, but let's lazily load group data.\n\n```tsx {2} title=\"DataSourcewith lazyLoad enabled\"\n<DataSource\n  lazyLoad\n  ...\n/>\n```\n\nAs soon a grouping and aggregations are no longer computed on the client, your `data` function needs to send those configurations on the backend, so it needs to get a bit more complicated:\n\n```tsx title=\"Data_function_sending_configurations_to_the_backend\"\nconst data = ({ groupBy, aggregationReducers, sortInfo, groupKeys }) => {\n   // it's important to send the current group keys - for top level, this will be []\n  const args: string[] = [`groupKeys=${JSON.stringify(groupKeys)}`];\n\n  // turn the sorting info into an array\n  if (sortInfo && !Array.isArray(sortInfo)) {\n    sortInfo = [sortInfo];\n  }\n\n  if (sortInfo) {\n    // the backend expects the sort info to be an array of field,dir pairs\n    args.push(\n      'sortInfo=' +\n        JSON.stringify(\n          sortInfo.map((s) => ({\n            field: s.field,\n            dir: s.dir,\n          })),\n        ),\n    );\n  }\n\n  if (groupBy) {\n    // for grouping, send an array of objects with the `field` property\n    args.push(\n      'groupBy=' + JSON.stringify(groupBy.map((p) => ({ field: p.field }))),\n    );\n  }\n\n  if (aggregationReducers) {\n    args.push(\n      'reducers=' +\n        JSON.stringify(\n          // by convention, we send an array of reducers, each with `field` `name`(= \"avg\") and `id`\n          // it's up to you to decide what the backend needs\n          Object.keys(aggregationReducers).map((key) => ({\n            field: aggregationReducers[key].field,\n            id: key,\n            name: aggregationReducers[key].reducer,\n          })),\n        ),\n    );\n  }\n\n  const url = BASE_URL + `/developers10k-sql?` + args.join('&');\n  return fetch(url).then(r=>r.json())\n}\n\n<DataSource\n  data={data}\n  lazyLoad\n  ...\n/>\n```\n\nWhen fetching without grouping (or with local grouping and aggregations), the `<DataSource />` component expects a flat array of data items coming from the server.\n\nHowever, when the grouping is happening server-side, the `<DataSource />` component expects a response that has the following shape:\n\n- `data` - the root array with grouping and aggregation info. Each item in the array should have the following:\n  - `keys` - an array of the keys for the current group - eg `['USA']` or `['USA', 'New York']`\n  - `data` - an object with all the common values for the group - eg `{ country: 'USA' }` or `{ country: 'USA', city: 'New York' }`\n  - `aggregations` - an object with the aggregation values for the group - eg `{ age: 30, salary: 120300 }`. The keys in this object should match the keys in the <DPropLink name=\"aggregationReducers\" /> object.\n  - `pivot` - pivoting information for the current group - more on that on the dedicated [Pivoting page](./pivoting/overview).\n\nWhen the user is expanding the last level, in order to see the leaf rows, the shape of the response is expected to be the same as when there is no grouping - namely an array of data items or an object where the `data` property is an array of data items.\n\nLet's put all of this into a working example.\n\n<Sandpack>\n\n<Description>\n\nThis showcases grouping and aggregations on the server - both the `age` and `salary` columns have an AVG aggregation defined.\n\nGrouping is done by the `country`, `city` and `stack` columns.\n\n</Description>\n\n```tsx file=\"grouping-and-aggregations-with-lazy-load-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nWhen the user is doing a sort on the table, the `<DataSource />` is fetched from scratch, but the expanded/collapsed state is preserved, and all the required groups that need to be re-fetched are reloaded as needed (if they are not eagerly included in the served data).\n\n</Note>\n"
    },
    "/docs/learn/grouping-and-pivoting/grouping-rows": {
      "filePath": "/docs/learn/grouping-and-pivoting/grouping-rows",
      "routePath": "/docs/learn/grouping-and-pivoting/grouping-rows",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/grouping-and-pivoting/grouping-rows.page.md",
      "fileName": "grouping-rows.page.md",
      "folderPath": "/docs/learn/grouping-and-pivoting/",
      "frontmatter": {
        "title": "Grouping rows"
      },
      "excerpt": "You can use any `field` available in the `DataSource` to do the grouping - it can even be a `field` that is not a column.",
      "readingTime": "15 min read",
      "content": "\nYou can use any `field` available in the `DataSource` to do the grouping - it can even be a `field` that is not a column.\n\n<Note>\n\nWhen using TypeScript, both `DataSource` and `InfiniteTable` components are generic and need to be rendered/instantiated with a `DATA_TYPE` parameter. The fields in that `DATA_TYPE` can then be used for grouping.\n\n</Note>\n\n```tsx\ntype Person = {\n  name: string;\n  age: number;\n  country: string;\n  id: string;\n}\n\nconst groupBy = [{field: 'country'}]\n\n<DataSource<Person> groupBy={groupBy}>\n  <InfiniteTable<Person> />\n</DataSource>\n\n```\n\nIn the example above, we're grouping by `country`, which is a field available in the `Person` type. Specifying a field not defined in the `Person` type would be a type error.\n\nAdditionally, a `column` object can be used together with the `field` to define how the group column should be rendered.\n\n```tsx {4}\nconst groupBy = [\n  {\n    field: 'country',\n    column: {\n      // custom column configuration for group column\n      width: 150,\n      header: 'Country group',\n    },\n  },\n];\n```\n\nThe example below puts it all together.\n\nAlso see the <DataSourcePropLink name=\"groupBy\" code={false}>groupBy API reference</DataSourcePropLink> to find out more.\n\n<Sandpack title=\"Simple row grouping\">\n\n```ts file=\"row-grouping-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nIn `groupBy.column` you can use any column property - so, for example, you can define a custom `renderValue` function to customize the rendering.\n\n```tsx {5}\nconst groupBy = [\n  {\n    field: 'country',\n    column: {\n      renderValue: ({ value }) => <>Country: {value}</>,\n    },\n  },\n];\n```\n\n<Note>\n\nThe generated group column(s) - can be one for all groups or one for each group - will inherit the `style`/`className`/renderers from the columns corresponding to the group fields themselves (if those columns exist).\n\nAdditionally, there are other ways to override those inherited configurations, in order to configure the group columns:\n\n- use <PropLink name=\"groupBy.column\" /> to specify how each grouping column should look for the respective field (in case of <PropLink name=\"groupRenderStrategy\">groupRenderStrateg=\"multi-column\"</PropLink>)\n- use <PropLink name=\"groupColumn\" /> prop\n  - can be used as an object - ideal for when you have simple requirements and when <PropLink name=\"groupRenderStrategy\">groupRenderStrateg=\"single-column\"</PropLink>\n  - as a function that returns a column configuration - can be used like this in either single or multiple group render strategy\n\n</Note>\n\n## Controlling the collapse/expand state\n\nWhen you do grouping, by default, all row groups are expanded. Of course you have full control over this and you do this via the <DPropLink name=\"groupRowsState\" />/<DPropLink name=\"defaultGroupRowsState\" /> props.\n\nIf you simply want to specify the initial expanded/collapsed state, you should use the <DPropLink name=\"defaultGroupRowsState\" /> prop.\n\n```tsx title=\"Specifying the default state for group rows\"\nconst defaultGroupRowsState: DataSourcePropGroupRowsStateObject = {\n  collapsedRows: true,\n  expandedRows: [['Mexico'], ['Mexico', 'backend'], ['India']],\n};\n```\n\nThe two properties in this object are `collapsedRows` and `expandedRows`, and each can have the following values:\n - `true` - meaning that all groups have this state\n - an array of arrays - representing the exceptions to the default value\n\n\nSo if you have `collapsedRows` set to `true` and then `expandedRows` set to `[['Mexico'], ['Mexico', 'backend'], ['India']]` then all rows are collapsed by default, except the rows specified in the `expandedRows`.\n\n\n<Sandpack title=\"Everything is collapsed except a few rows\">\n\n```ts file=\"row-grouping-state-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nYou can specify expand/collapse state at any level of nesting.\n\nLet's suppose by default all rows are collapsed - if you want a node to be visible then you have to specify all its parents as expanded.\n\nSo having this\n```tsx \nconst defaultGroupRowsState = {\n  collapsedRows: true,\n  expandedRows: [['Mexico', 'backend']],\n};\n```\nwill show all rows as collapsed, and just as soon as you expand `Mexico` you will see the `backend` group row for Mexico to be expanded.\n</Note>\n\nThis data format gives you ultimate flexibility and allows you to easily restore an expand/collpase state at a later time, if you wanted to.\n\n<Note>\nIf you use the controlled <DPropLink name=\"groupRowsState\" />, make sure you update it by leveraging the <DPropLink name=\"onGroupRowsStateChange\" /> callback prop.\n</Note>\n\n\n<Sandpack title=\"Using controlled expanded/collapsed state for group rows\">\n\n```ts file=\"row-grouping-state-controlled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nIn addition to simple objects with the shape described above, the <DPropLink name=\"groupRowsState\" />/<DPropLink name=\"defaultGroupRowsState\" /> can also be instanges of `GroupRowsState` class, which is exported by the Infinite Table package. This class is simply a wrapper around those objects, but it gives you additional utility methods.\n\n<Note>\n\nThe <DPropLink name=\"onGroupRowsStateChange\" /> callback gives you an instance of <DPropLink name=\"GroupRowsState\" /> back as the single argument. If you're using plain objects, just do `groupRowsState.getState()` and you'll get the corresponding plain object for the current expand/collapse state.\n\n<TypeLink name=\"GroupRowsState\" /> give you some additional helper methods, which you can read about <TypeLink name=\"GroupRowsState\">here</TypeLink>\n</Note>\n\n## Grouping strategies\n\nMultiple grouping strategies are supported by, `InfiniteTable` DataGrid:\n\n- multi column mode - multiple group columns are generated, one for each specified group field\n- single column mode - a single group column is generated, even when there are multiple group fields\n\nYou can specify the rendering strategy explicitly by setting the <PropLink name=\"groupRenderStrategy\" /> property to any of the following: `multi-column`, `single-column`. If you don't set it explicitly, it will choose the best default based on your configuration.\n\n### Multiple groups columns\n\nWhen grouping by multiple fields, by default the component will render a group column for each group field\n\n```tsx\nconst groupBy = [\n  {\n    field: 'age',\n    column: {\n      width: 100,\n      renderValue: ({ value }) => <>Age: {value}</>,\n    },\n  },\n  {\n    field: 'companyName',\n  },\n  {\n    field: 'country',\n  },\n];\n```\n\nLet's see an example of how the component would render the table with the multi-column strategy.\n\n<Sandpack title=\"Multi-column group render strategy\">\n\n```ts files=[\"row-grouping-multi-column-example.page.tsx\",\"columns.ts\"]\n\n```\n\n</Sandpack>\n\nFor the `multi-column` strategy, you can use <PropLink name=\"hideEmptyGroupColumns\" /> in order to hide columns for groups which are currently not visible.\n\n<Sandpack title=\"Hide Empty Group Columns\">\n\n```ts files=[\"$DOCS/reference/hideEmptyGroupColumns-example.page.tsx\",\"$DOCS/reference/employee-columns.ts\"]\n\n```\n\n</Sandpack>\n\n<Note>\n\nYou can specify an `id` for group columns. This is helpful if you want to size those columns (via <PropLink name=\"columnSizing\" />) or pin them (via <PropLink name=\"columnPinning\" />) or configure them in other ways. If no `id` is specified, it will be generated like this: `\"group-by-${field}\"`\n\n</Note>\n\n### Single group column\n\nYou can group by multiple fields, yet only render a single group column. To choose this rendering strategy, specify <PropLink name=\"groupRenderStrategy\" /> property to be `single-column` (or specify <PropLink name=\"groupColumn\" /> as an object.)\n\nIn this case, you can't override the group column for each group field, as there's only one group column being generated. However, you can specify a <PropLink name=\"groupColumn\" /> property to customize the generated column.\n\n<Note>\n\nBy default the generated group column will \"inherit\" many of the properties (the column style or className or renderers) of the columns corresponding to the group fields (if such columns exist, because it's not mandatory that they are defined).\n\n</Note>\n\n<Sandpack title=\"Single-column group render strategy\">\n\n```ts files=[\"row-grouping-single-column-example.page.tsx\",\"columns.ts\"]\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf <PropLink name=\"groupColumn\" /> is specified to an object and no <PropLink name=\"groupRenderStrategy\" /> is passed, the render strategy will be `single-column`.\n\n<PropLink name=\"groupColumn\" /> can also be a function, which allows you to individually customize each group column - in case the `multi-column` strategy is used.\n\n</Note>\n\n<Note>\n\nYou can specify an `id` for the single <PropLink name=\"groupColumn\" />. This is helpful if you want to size this column (via <PropLink name=\"columnSizing\" />) or pin it (via <PropLink name=\"columnPinning\" />) or configure it in other ways. If no `id` is specified, it will default to `\"group-by\"`.\n\n</Note>\n\n## Customizing the group column\n\nThere are many ways to customize the group column(s) and we're going to show a few of them below:\n\n### Binding the group column to a `field`\n\nBy default, group columns only show values in the group rows - but they are normal columns, so why not bind them to a <PropLink name=\"columns.field\" code={false}>field</PropLink> of the `DATA_TYPE`?\n\n```tsx {6,11}\nconst groupColumn = {\n  id: 'the-group', // can specify an id\n  style: {\n    color: 'tomato',\n  },\n  field: 'firstName', // non-group rows will render the first name\n};\nconst columns = {\n  theFirstName: {\n    field: 'firstName',\n    style: {\n      // this style will also be applied in the group column,\n      // since it is bound to this same `field`\n      fontWeight: 'bold',\n    },\n  },\n};\n```\n\nThis makes the column display the value of the `field` in non-group/normal rows. Also, if you have another column bound to that `field`, the renderers/styling of that column will be used for the value of the group column, in non-group rows.\n\n<Sandpack title=\"Bind group column to a field\">\n\n```ts file=\"$DOCS/reference/bind-group-column-to-field-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Use `groupColumn` to customize rendering\n\nThe <PropLink name=\"groupColumn\" /> will inherit its own rendering and styling from the columns that are bound to the fields used in <DataSourcePropLink name=\"groupBy.field\" />. However, you can override any of those properties so you have full control over the rendering process.\n\n```tsx {3,6}\nconst groupColumn = {\n  field: 'firstName',\n  renderGroupValue: ({ value }) => {\n    return `Group: ${value}`;\n  },\n  renderLeafValue: ({ value }) => {\n    return `First name: ${value}`;\n  },\n};\n```\n\n<Sandpack title=\"Customize group column renderer\">\n\n<Description>\n\nThe column that renders the `firstName` has a custom renderer that adds a `.` at the end.\nThe group column is bound to the same `firstName` field, but specifies a different renderer, which will be used instead.\n\n</Description>\n\n```ts file=\"$DOCS/reference/group-column-custom-renderers-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<HeroCards>\n<YouWillLearnCard title=\"Column rendering\" path=\"../columns/column-rendering\">\nLearn more about customizing column rendering via multiple renderer functions.\n</YouWillLearnCard>\n</HeroCards>\n\n## Hiding columns when grouping\n\nWhen grouping is enabled, you can choose to hide some columns. Here are the two main ways to do this:\n\n- use <PropLink name=\"hideColumnWhenGrouped\" /> - this will make columns bound to the group fields be hidden when grouping is active\n- use <PropLink name=\"columns.defaultHiddenWhenGroupedBy\" /> (also available on the column types, as <PropLink name=\"columnTypes.defaultHiddenWhenGroupedBy\" />) - this is a column-level property, so you have more fine-grained control over what is hidden and when.\n\nValid values for <PropLink name=\"columns.defaultHiddenWhenGroupedBy\" /> are:\n\n- `\"*\"` - when any grouping is active, hide the column that specifies this property\n- `true` - when the field this column is bound to is used in grouping, hides this column\n- `keyof DATA_TYPE` - specify an exact field that, when grouped by, makes this column be hidden\n- `{[k in keyof DATA_TYPE]: true}` - an object that can specify more fields. When there is grouping by any of those fields, the current column gets hidden.\n\n<Sandpack title=\"Hide columns when grouping\">\n\n<Description>\n\nIn this example, the column bound to `firstName` field is set to hide when any grouping is active, since the group column is anyways found to the `firstName` field.\n\nIn addition, <PropLink name=\"hideColumnWhenGrouped\" /> is set to `true`, so the `stack` and `preferredLanguage` columns are also hidden, since they are grouped by.\n\n</Description>\n\n```ts file=\"$DOCS/reference/hide-columns-when-grouping-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Sorting the group column\n\nWhen <PropLink name=\"groupRenderStrategy\">groupRenderStrategy=\"single-column\"</PropLink> is used, the group column is sortable by default if all the columns that are involved in grouping are sortable. Sorting the group column makes the `sortInfo` have a value that looks like this:\n\n```ts\nconst sortInfo = [\n  {\n    dir: 1,\n    id: 'group-by',\n    field: ['stack', 'age'],\n    type: ['string', 'number'],\n  },\n];\n```\n\n<PropLink name=\"groupRenderStrategy\">groupRenderStrategy=\"multi-column\"</PropLink>, each group column is sortable by default if the column with the corresponding field is sortable.\n\n <Note>\n\nThe <PropLink name=\"columnDefaultSortable\" /> property can be used to override the default behavior.\n\n </Note>\n\n<Sandpack title=\"Group column with initial descending sorting\">\n\n```ts file=\"$DOCS/reference/group-column-sorted-initially-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nWhen a group column is configured and the `groupBy` fields are not bound to actual columns in the table, the group column will not be sortable by default.\n\nIf you want to make it sortable, you have to specify a <PropLink name=\"columns.sortType\" /> array, of the same length as the `groupBy` array, that specifies the sort type for each group field.\n\n</Note>\n\n## Aggregations\n\nWhen grouping, you can also aggregate the values of the grouped rows. This is done via the <DataSourcePropLink name=\"aggregationReducers\" code>DataSource.aggregationReducers</DataSourcePropLink> property. See the example below\n\n<Sandpack title=\"Grouping with aggregations\">\n\n```ts file=\"grouping-with-aggregations-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nEach <DataSourcePropLink name=\"aggregationReducers\" code={false}>reducer</DataSourcePropLink> from the `aggregationReducers` map can have the following properties:\n\n- `field` - the field to aggregate on\n- `getter(data)` - a value-getter function, if the aggregation values are are not mapped directly to a `field`\n- `initialValue` - the initial value to start with when computing the aggregation (for client-side aggregations only)\n- `reducer: string | (acc, current, data: DATA_TYPE, index)=>value` - the reducer function to use when computing the aggregation (for client-side aggregations only). For server-side aggregations, this will be a `string`\n- `done(value, arr)` - a function that is called when the aggregation is done (for client-side aggregations only) and returns the final value of the aggregation\n- `name` - useful especially in combination with <DataSourcePropLink name=\"pivotBy\" />, as it will be used as the pivot column header.\n\nIf an aggregation reducer is bound to a `field` in the dataset, and there is a column mapped to the same `field`, that column will show the corresponding aggregation value for each group row, as shown in the example above.\n\n<Note>\n\nIf you want to prevent the user to expand the last level of group rows, you can override the `render` function for the group column\n\n<Sandpack title=\"Customized group expand on last group level\">\n\n```ts file=\"grouping-with-aggregations-discard-expand-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Note>\n\n<HeroCards>\n<YouWillLearnCard title=\"Aggregations\" path=\"group-aggregations\">\nDive deeper into the aggregation reducers and how they work.\n</YouWillLearnCard>\n</HeroCards>\n\n## Server side grouping with lazy loading\n\nLazy loading becomes all the more useful when working with grouped data.\n\nThe `DataSource` <DataSourcePropLink name=\"data\"/> function is called with an object that has all the information about the current `DataSource` state(grouping/pivoting/sorting/lazy-loading, etc) - see the paragraphs above for details.\n\nServer side grouping needs two kinds of data responses in order to work properly:\n\n- response for **non-leaf row groups** - these are groups that have children. For such groups (including the top-level group), the `DataSource.data` function must return a promise that's resolved to an object with the following properties:\n  - `totalCount` - the total number of records in the group\n  - `data` - an array of objects that describes non-leaf child groups, each object has the following properties:\n    - `keys` - an array of the group keys (usually strings) that uniquely identifies the group, from the root to the current group\n    - `data` - an object that describes the common properties of the group\n    - `aggregations` - an object that describes the aggregations for the current group\n- response for **leaf rows** - these are normal rows - rows that would have been served in the non-grouped response. The resolved object should have the following properties:\n  - `data` - an array of objects that describes the rows\n  - `totalCount` - the total number of records on the server, that are part of the current group\n\nHere's an example, that assumes grouping by `country` and `city` and aggregations by `age` and `salary` (average values):\n\n```tsx\n//request:\ngroupKeys: [] // empty keys array, so it's a top-level group\ngroupBy: [{\"field\":\"country\"},{\"field\":\"city\"}]\nreducers: [{\"field\":\"salary\",\"id\":\"avgSalary\",\"name\":\"avg\"},{\"field\":\"age\",\"id\":\"avgAge\",\"name\":\"avg\"}]\n// lazyLoadStartIndex: 0, - passed if lazyLoad is configured with a batchSize\n// lazyLoadBatchSize: 20 - passed if lazyLoad is configured with a batchSize\n\n//response\n{\n  cache: true,\n  totalCount: 20,\n  data: [\n    {\n      data: {country: \"Argentina\"},\n      aggregations: {avgSalary: 20000, avgAge: 30},\n      keys: [\"Argentina\"],\n    },\n    {\n      data: {country: \"Australia\"},\n      aggregations: {avgSalary: 25000, avgAge: 35},\n      keys: [\"Australia\"],\n    }\n    //...\n  ]\n}\n```\n\nNow let's expand the first group and see how the request/response would look like:\n\n```tsx\n\n//request:\ngroupKeys: [\"Argentina\"]\ngroupBy: [{\"field\":\"country\"},{\"field\":\"city\"}]\nreducers: [{\"field\":\"salary\",\"id\":\"avgSalary\",\"name\":\"avg\"},{\"field\":\"age\",\"id\":\"avgAge\",\"name\":\"avg\"}]\n\n//response\n{\n  totalCount: 4,\n  data: [\n    {\n      data: {country: \"Argentina\", city: \"Buenos Aires\"},\n      aggregations: {avgSalary: 20000, avgAge: 30},\n      keys: [\"Argentina\", \"Buenos Aires\"],\n    },\n    {\n      data: {country: \"Argentina\", city: \"Cordoba\"},\n      aggregations: {avgSalary: 25000, avgAge: 35},\n      keys: [\"Argentina\", \"Cordoba\"],\n    },\n    //...\n  ]\n}\n```\n\nFinally, let's have a look at the leaf/normal rows and a request for them:\n\n```tsx\n\n//request\ngroupKeys: [\"Argentina\",\"Buenos Aires\"]\ngroupBy: [{\"field\":\"country\"},{\"field\":\"city\"}]\nreducers: [{\"field\":\"salary\",\"id\":\"avgSalary\",\"name\":\"avg\"},{\"field\":\"age\",\"id\":\"avgAge\",\"name\":\"avg\"}]\n\n//response\n{\n  totalCount: 20,\n  data: [\n    {\n      id: 34,\n      country: \"Argentina\",\n      city: \"Buenos Aires\",\n      age: 30,\n      salary: 20000,\n      stack: \"full-stack\",\n      firstName: \"John\",\n      //...\n    },\n    {\n      id: 35,\n      country: \"Argentina\",\n      city: \"Buenos Aires\",\n      age: 35,\n      salary: 25000,\n      stack: \"backend\",\n      firstName: \"Jane\",\n      //...\n    },\n    //...\n  ]\n}\n```\n\n<Note>\n\nWhen a row group is expanded, since `InfiniteTable` has the group `keys` from the previous response when the node was loaded, it will use the `keys` array and pass them to the `DataSource.data` function when requesting for the children of the respective group.\n\nYou know when to serve last-level rows, because in that case, the length of the `groupKeys` array will be equal to the length of the `groupBy` array.\n\n</Note>\n\n<Sandpack title=\"Server side grouping with lazy loding\">\n\n```ts file=\"server-side-grouping-with-lazy-load-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Eager loading for group row nodes\n\nWhen using lazy-loading together with batching, node data (without children) is loaded when a node (normal or grouped) comes into view. Only when a group node is expanded will its children be loaded. However, you can do this loading eagerly, by using the `dataset` property on the node you want to load.\n\n<Note>\n\nThis can be useful in combination with using `dataParams.groupRowsState` from the <DataSourcePropLink name=\"data\"/> function - so your datasource can know which groups are expanded, and thus it can serve those groups already loaded with children.\n\n</Note>\n\n```tsx {18}\n//request:\ngroupKeys: [] // empty keys array, so it's a top-level group\ngroupBy: [{\"field\":\"country\"},{\"field\":\"city\"}]\nreducers: [{\"field\":\"salary\",\"id\":\"avgSalary\",\"name\":\"avg\"},{\"field\":\"age\",\"id\":\"avgAge\",\"name\":\"avg\"}]\n// lazyLoadStartIndex: 0, - passed if lazyLoad is configured with a batchSize\n// lazyLoadBatchSize: 20 - passed if lazyLoad is configured with a batchSize\n\n//response\n{\n  cache: true,\n  totalCount: 20,\n  data: [\n    {\n      data: {country: \"Argentina\"},\n      aggregations: {avgSalary: 20000, avgAge: 30},\n      keys: [\"Argentina\"],\n      // NOTE this dataset property used for eager-loading of group nodes\n      dataset: {\n        // the shape of the dataset is the same as the one normally returned by the datasource\n        cache: true,\n        totalCount: 4,\n        data: [\n          {\n            data: {country: \"Argentina\", city: \"Buenos Aires\"},\n            aggregations: {avgSalary: 20000, avgAge: 30},\n            keys: [\"Argentina\", \"Buenos Aires\"],\n          },\n          {\n            data: {country: \"Argentina\", city: \"Cordoba\"},\n            aggregations: {avgSalary: 25000, avgAge: 35},\n            keys: [\"Argentina\", \"Cordoba\"],\n          },\n        ]\n      }\n    },\n    {\n      data: {country: \"Australia\"},\n      aggregations: {avgSalary: 25000, avgAge: 35},\n      keys: [\"Australia\"],\n    }\n    //...\n  ]\n}\n```\n"
    },
    "/docs/learn/grouping-and-pivoting/": {
      "filePath": "/docs/learn/grouping-and-pivoting/index",
      "routePath": "/docs/learn/grouping-and-pivoting/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/grouping-and-pivoting/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/learn/grouping-and-pivoting/",
      "frontmatter": {
        "title": "Grouping and Pivoting"
      },
      "excerpt": "Infinite Table comes with grouping and pivoting capabilities built-in. The `DataSource` component does the actual data grouping and pivoting - while the `InfiniteTable` component does the specialized rendering.",
      "readingTime": "1 min read",
      "content": "\nInfinite Table comes with grouping and pivoting capabilities built-in. The `DataSource` component does the actual data grouping and pivoting - while the `InfiniteTable` component does the specialized rendering.\n\n<HeroCards>\n<YouWillLearnCard title=\"Grouping Rows\" path=\"./grouping-and-pivoting/grouping-rows\">\nLearn row grouping and explore the possibilities.\n</YouWillLearnCard>\n<YouWillLearnCard title=\"Pivoting\" path=\"./grouping-and-pivoting/pivoting/overview\">\nRead thorough documentation covering pivoting and aggregation.\n</YouWillLearnCard>\n</HeroCards>\n\n<Sandpack title=\"Simple row grouping\">\n\n```ts files=[\"row-grouping-example.page.tsx\",\"columns.ts\"]\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/keyboard-navigation/keyboard-shortcuts": {
      "filePath": "/docs/learn/keyboard-navigation/keyboard-shortcuts",
      "routePath": "/docs/learn/keyboard-navigation/keyboard-shortcuts",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/keyboard-navigation/keyboard-shortcuts.page.md",
      "fileName": "keyboard-shortcuts.page.md",
      "folderPath": "/docs/learn/keyboard-navigation/",
      "frontmatter": {
        "title": "Keyboard Shorcuts",
        "description": "Infinite React DataGrid supports user-friendly keyboard shortcuts for executing custom actions.",
        "since": "3.3.3"
      },
      "excerpt": "The React DataGrid supports defining <PropLink name=\"keyboardShortcuts\" code={false}>keyboard shorcuts</PropLink> for performing custom actions.",
      "readingTime": "3 min read",
      "content": "\nThe React DataGrid supports defining <PropLink name=\"keyboardShortcuts\" code={false}>keyboard shorcuts</PropLink> for performing custom actions.\n\nA keyboard shortcut is defined as an object of the following shape:\n  \n```ts\n{\n  key: string;\n  when?: (context) => boolean | Promise<boolean>;\n  handler: (context, event) => void | Promise<void>;\n}\n```\n\nThe `key` definition is what you're used to from VS Code and other applications - it can be\n * a single character: `t`, `x`, etc...\n * a combination of characters (e.g. `Ctrl+Shift+p`,`Cmd+Shift+Enter`) - key modifiers are supported, and can be added with the `+` (plus) sign.\n * or a special key (e.g. `Enter`, `ArrowUp`, `ArrowDown`, ` ` (space), `Escape`, `Delete`, `Insert`, `PageDown`,`PageUp`,`F1`, `F2`, etc).\n\n Examples of valid shortcuts: `Cmd+Shift+e`, `Alt+Shift+Enter`, `Shift+PageDown`, `Ctrl+x`\n\n\n<Note>\n\nThere's a special key `*` that matches any key. This can be useful when you want to define a keyboard shortcut that should be triggered on any key press.\n\n</Note>\n\n<Note>\n\nAnother important key is the `Cmd|Ctrl` key, which matches both the `Cmd` key on Mac and the `Ctrl` key on Windows/Linux.\n\nExample combinations: `Cmd|Ctrl+Shift+Enter`, `Cmd|Ctrl+e`, `Cmd|Ctrl+Shift+i`.\n\n</Note>\n\n<Sandpack>\n\n<Description>\nClick on a cell and use the keyboard to navigate.\n\nPress `Shift+Enter` to show an alert with the current active cell position.\n\n</Description>\n\n```ts file=\"$DOCS/reference/keyboard-shortcuts-initial-example.page.tsx\"\n```\n</Sandpack>\n\n<Note>\n\nKeyboard shortcuts have a `when` optional property. If defined, it restricts when the `handler` function is called. The handler will only be called when the handler returns `true`.\n\n</Note>\n\n## Implementing Keyboard Shortcut Handlers\n\nBoth the `handler` function and the `when` function of a keyboard shorcut are called with an object that gives access to the following:\n - `api` - a reference to the [Infinite Table API](/docs/reference/api) object.\n - `dataSourceApi` - a reference to the [DataSource API](/docs/reference/datasource-api) object.\n - `getState` - a function that returns the current state of the grid.\n - `getDataSourceState` - a function that returns the current state of the data source.\n\nThe second parameter of the `handler` function is the `event` object that triggered the keyboard shortcut.\n\n## Predefined Keyboard Shortcuts\n\nInfinite Table DataGrid comes with some predefined keyboard shorcuts.\nyou can import from the `keyboardShortcuts` named export.\n```ts\nimport { keyboardShortcuts } from '@infinite-table/infinite-react'\n```\n\n### Instant Edit\n\n```ts {4,12}\nimport {\n  DataSource,\n  InfiniteTable,\n  keyboardShortcuts\n} from '@infinite-table/infinite-react';\n\n function App() {\n  return <DataSource<Developer> primaryKey=\"id\" data={dataSource}>\n    <InfiniteTable<Developer>\n      columns={columns}\n      keyboardShortcuts={[\n        keyboardShortcuts.instantEdit\n      ]}\n    />\n  </DataSource>\n}\n```\n\n\n<Note>\n\nFor now, the only predefined keyboard shorcut is `keyboardShortcuts.instantEdit`. This keyboard shorcut starts cell editing when any key is pressed on the active cell. This is the same behavior found in Excel/Google Sheets.\n\n</Note>\n\n<Sandpack>\n\n<Description>\n\nClick on a cell and then start typing to edit the cell.\n\n</Description>\n\n```ts file=\"$DOCS/reference/keyboard-shortcuts-instant-edit-example.page.tsx\"\n```\n</Sandpack>"
    },
    "/docs/learn/keyboard-navigation/navigating-cells": {
      "filePath": "/docs/learn/keyboard-navigation/navigating-cells",
      "routePath": "/docs/learn/keyboard-navigation/navigating-cells",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/keyboard-navigation/navigating-cells.page.md",
      "fileName": "navigating-cells.page.md",
      "folderPath": "/docs/learn/keyboard-navigation/",
      "frontmatter": {
        "title": "Keyboard Navigation for Table Cells",
        "description": "Documentation for Cell Keyboard Navigation for your React Infinite Table DataGrid component"
      },
      "excerpt": "By default, <PropLink name=\"keyboardNavigation\" code={false}>keyboard navigation</PropLink> for table cells is enabled in React Infinite Table. When a cell is clicked, it shows a highlight that indicates it is the currently active cell. From that point onwards, the user can use the keyboard to navigate the table cells.",
      "readingTime": "5 min read",
      "content": "\nBy default, <PropLink name=\"keyboardNavigation\" code={false}>keyboard navigation</PropLink> for table cells is enabled in React Infinite Table. When a cell is clicked, it shows a highlight that indicates it is the currently active cell. From that point onwards, the user can use the keyboard to navigate the table cells.\n\n<Sandpack>\n\n<Description>\n\nClick on a cell in the table and use the arrow keys to navigate around.\n\n</Description>\n\n```ts file=\"navigating-cells-initial-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\n- Use `ArrowUp` and `ArrowDown` to navigate to the previous and next cells vertically.\n- Use `ArrowLeft` and `ArrowRight` to navigate to the previous and next cells horizontally.\n\n---\n\n- Use `PageUp` and `PageDown` to navigate the cells vertically by pages (a page is considered equal to the visible row count).\n- Use `Shift+PageUp` and `Shift+PageDown` to navigate the cells horizontally by pages (a page is considered equal to the visible column count).\n\n---\n\n- Use `Home` and `End` to navigate vertically to the cell above (that's on the first row) and the cell below (that's on the last row),\n- Use `Shift+Home` and `Shift+End` to navigate horizontally to the first and respectively last cell in the current row.\n\n</Note>\n\n<YTEmbed code=\"D4_jFYkfsUI\" />\n\nKeyboard navigation is controlled by the <PropLink name=\"keyboardNavigation\" /> prop, which can be either `\"cell\"`, `\"row\"` or `false`. Navigating table cells is the default behavior.\n\n## Using a default active cell\n\nYou can also specify an initial active cell, by using <PropLink name=\"defaultActiveCellIndex\">defaultActiveCellIndex=[2,4]</PropLink>. This tells the table that there should be a default active cell, namely the one at index 2,4 (row 2, so third row; column 4, so fifth column).\n\n<Note>\n\nThe active cell should be an array of length 2, where the first number is the index of the row and the second number is the index of the column (both are zero-based).\n\n</Note>\n\n<Sandpack>\n\n<Description>\n\nThis example starts with cell `[2,0]` already active.\n\n</Description>\n\n```ts file=\"navigating-cells-uncontrolled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Listening to active cell changes\n\nYou can easily listen to changes in the cell navigation by using the <PropLink name=\"onActiveCellIndexChange\">onActiveCellIndexChange</PropLink> callback.\n\n<Note>\n\nWhen you use controlled <PropLink name=\"activeCellIndex\" />, make sure to use <PropLink name=\"onActiveCellIndexChange\">onActiveCellIndexChange</PropLink> to update the prop value, as otherwise the component will not update on navigation\n\n</Note>\n\n<Sandpack>\n\n<Description>\n\nThis example starts with cell `[2,0]` already active and uses <PropLink name=\"onActiveCellIndexChange\">onActiveCellIndexChange</PropLink> to update <PropLink name=\"activeCellIndex\" />.\n\n</Description>\n\n```ts file=\"navigating-cells-controlled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Toggling group rows\n\nWhen the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>, you can use the keyboard to collapse/expand group rows, by pressing the `Enter` key on the active row.\n\n<Note>\n\nYour active cell doesn't need to be in the group column in order for `Enter` key to collapse/expand the group row - being on a group row is enough.\n\n</Note>\n\n<Sandpack>\n\n<Description>\n\nPress the `Enter` key on the active group row to toggle it.\n\n</Description>\n\n```ts file=\"$DOCS/reference/keyboard-toggle-group-rows-cell-nav.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Selecting Rows with the Keyboard\n\nWhen <DPropLink name=\"rowSelection\" /> is enabled (read more about it in the [row selection page](../selection/row-selection)), you can use the spacebar key to select a group row (or `shift` + spacebar to do multiple selection).\n\nBy default <PropLink name=\"keyboardSelection\" /> is enabled, so you can use the **spacebar** key to select multiple rows, when <DPropLink name=\"selectionMode\">selectionMode=\"multi-row\"</DPropLink>. Using the spacebar key is equivalent to doing a mouse click, so expect the combination of **spacebar** + `cmd`/`ctrl`/`shift` modifier keys to behave just like clicking + the same modifier keys.\n\n<Sandpack title=\"Multi row selection with keyboard support\">\n\n<Description>\n\nUse spacebar + optional `cmd`/`ctrl`/`shift` modifier keys just like you would do clicking + the same modifier keys.\n\n</Description>\n\n```ts file=\"$DOCS/reference/default-selection-mode-multi-row-keyboard-toggle-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nFor selection all the rows in the table, you can use `cmd`/`ctrl` + `A` keyboard shortcut.\n\n</Note>\n\n<Note>\n\nKeyboard selection is also possible when there's a column configured with checkbox selection - [make sure you read more about it](../selection/row-selection#using-a-selection-checkbox).\n\n</Note>\n\n## Theming\n\nThere are a number of ways to customize the appearance of the element that highlights the active cell.\n\nThe easiest is to override those three CSS variables:\n\n- `--infinite-active-cell-border-color--r` - the `red` component of the border color\n- `--infinite-active-cell-border-color--g` - the `green` component of the border color\n- `--infinite-active-cell-border-color--b` - the `blue` component of the border color\n\nThe initial values for those are `77`, `149` and`215` respectively, so the border color is `rgb(77, 149, 215)`.\nIn addition, the background color of the active cell highlight element is set to the same color as the border color (computed based on the above `r`, `g` and `b` variables), but with an opacity of `0.25`, configured via the `--infinite-active-cell-background-alpha` CSS variable.\n\nWhen the table is not focused, the opacity for the background color is set to `0.1`, which is the default value of the `--infinite-active-cell-background-alpha--table-unfocused` CSS variable.\n\n<Note>\n \nTo summarize, use\n\n- `--infinite-active-cell-border-color--r`\n- `--infinite-active-cell-border-color--g`\n- `--infinite-active-cell-border-color--b`\n\nto control border and background color of the active cell highlight element.\n\n</Note>\n\nThere are other CSS variables as well, that give you fined-tuned control over both the border and background color for the active cell, if you don't want to use the above three variables to propagate the same color across both border and background.\n\n- `--infinite-active-cell-background` - the background color. If you use this, you need to set opacity yourself.\n- `--infinite-active-cell-border` - border configuration (eg:`2px solid magenta`). If you use this, it will not be propagated to the background color.\n\n<Sandpack title=\"Theming active cell highlight\">\n\n<Description>\n\nUse the color picker to configured the desired color for the active cell highlight\n\n</Description>\n\n```ts file=\"navigating-cells-theming-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/keyboard-navigation/navigating-rows": {
      "filePath": "/docs/learn/keyboard-navigation/navigating-rows",
      "routePath": "/docs/learn/keyboard-navigation/navigating-rows",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/keyboard-navigation/navigating-rows.page.md",
      "fileName": "navigating-rows.page.md",
      "folderPath": "/docs/learn/keyboard-navigation/",
      "frontmatter": {
        "title": "Keyboard Navigation for Table Rows"
      },
      "excerpt": "To enable keyboard navigation for table rows, specify <PropLink name=\"keyboardNavigation\">keyboardNavigation=\"row\"</PropLink> in your React Infinite Table component.",
      "readingTime": "5 min read",
      "content": "\nTo enable keyboard navigation for table rows, specify <PropLink name=\"keyboardNavigation\">keyboardNavigation=\"row\"</PropLink> in your React Infinite Table component.\n\nWhen row navigation is enabled, clicking a row highlights it and the user can use the arrow keys to navigate the table rows.\n\n<Sandpack>\n\n<Description>\n\nClick on the table and use the arrow keys to navigate the rows.\n\n</Description>\n\n```ts file=\"navigating-rows-initial-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\n- Use `ArrowUp` and `ArrowDown` to navigate to the previous and next row.\n- Use `PageUp` and `PageDown` to navigate the rows vertically by pages (a page is considered equal to the visible row count).\n- Use `Home` and `End` to navigate vertically to the first and last row respectively\n\n</Note>\n\nOther possible values for the <PropLink name=\"keyboardNavigation\" /> prop, besides `\"row\"`, are `\"cell\"` and `false`.\n\n## Using a default active row\n\nYou can also specify an initial active row, by using <PropLink name=\"defaultActiveRowIndex\">defaultActiveRowIndex=2</PropLink>. This tells the table that there should be a default active row, namely the one at index 2 (so the third row).\n\n<Sandpack>\n\n<Description>\n\nThis example starts with row at index `2` already active.\n\n</Description>\n\n```ts file=\"navigating-rows-uncontrolled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Listening to active row changes\n\nYou can easily listen to changes in the row navigation by using the <PropLink name=\"onActiveRowIndexChange\" /> callback.\n\n<Note>\n\nWhen you use controlled <PropLink name=\"activeRowIndex\" />, make sure to use <PropLink name=\"onActiveRowIndexChange\">onActiveRowIndexChange</PropLink> to update the prop value, as otherwise the component will not update on navigation\n\n</Note>\n\n<Sandpack>\n\n<Description>\n\nThis example starts with row at index `2` already active and uses <PropLink name=\"onActiveRowIndexChange\">onActiveRowIndexChange</PropLink> to update <PropLink name=\"activeRowIndex\" />.\n\n</Description>\n\n```ts file=\"navigating-rows-controlled-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Toggling group rows\n\nWhen the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>, you can use the keyboard to collapse/expand group rows, by pressing the `Enter` key on the active row.\n\n<Note>\n\nSince you're in row navigation mode, you can also use\n\n- `‚Üê` to collapse a group row\n- `‚Üí` to expand a group row\n\n</Note>\n\n<Sandpack>\n\n<Description>\n\nPress the `Enter` key on the active group row to toggle it. `ArrowLeft` will collapse a group row and `ArrowRight` will expand a group row.\n\n</Description>\n\n```ts file=\"$DOCS/reference/keyboard-toggle-group-rows.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Selecting Rows with the Keyboard\n\nWhen <DPropLink name=\"rowSelection\" /> is enabled (read more about it in the [row selection page](../selection/row-selection)), you can use the spacebar key to select a group row (or `shift` + spacebar to do multiple selection).\n\nBy default <PropLink name=\"keyboardSelection\" /> is enabled, so you can use the **spacebar** key to select multiple rows, when <DPropLink name=\"selectionMode\">selectionMode=\"multi-row\"</DPropLink>. Using the spacebar key is equivalent to doing a mouse click, so expect the combination of **spacebar** + `cmd`/`ctrl`/`shift` modifier keys to behave just like clicking + the same modifier keys.\n\n<Sandpack title=\"Multi row selection with keyboard support\">\n\n<Description>\n\nUse spacebar + optional `cmd`/`ctrl`/`shift` modifier keys just like you would do clicking + the same modifier keys.\n\n</Description>\n\n```ts file=\"$DOCS/reference/default-selection-mode-multi-row-keyboard-toggle-example-row-navigation.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nFor selection all the rows in the table, you can use `cmd`/`ctrl` + `A` keyboard shortcut.\n\n</Note>\n\n<Note>\n\nKeyboard selection is also possible when there's a column configured with checkbox selection - [make sure you read more about it](../selection/row-selection#using-a-selection-checkbox).\n\n</Note>\n\n## Theming\n\nBy default, the style of the element that highlights the active row is the same style as that of the element that highlights the active cell.\n\nThe easiest is to override the style is via those three CSS variables:\n\n- `--infinite-active-cell-border-color--r` - the `red` component of the border color\n- `--infinite-active-cell-border-color--g` - the `green` component of the border color\n- `--infinite-active-cell-border-color--b` - the `blue` component of the border color\n\nThe initial values for those are `77`, `149` and`215` respectively, so the border color is `rgb(77, 149, 215)`.\n\nIn addition, the background color of the element that highlights the active row is set to the same color as the border color (computed based on the above `r`, `g` and `b` variables), but with an opacity of `0.25`, configured via the `--infinite-active-row-background-alpha` CSS variable.\n\nWhen the table is not focused, the opacity for the background color is set to `0.1`, which is the default value of the `--infinite-active-row-background-alpha--table-unfocused` CSS variable.\n\n<Note>\n \nTo summarize, use\n\n- `--infinite-active-cell-border-color--r`\n- `--infinite-active-cell-border-color--g`\n- `--infinite-active-cell-border-color--b`\n\nto control border and background color of the active row highlight element.\n\nNo, it's not a mistake that the element that highlights the active row is configured via the same CSS variables as the element that highlights the active cell. This is deliberate - so override CSS variables for cell, and those are propagated to the row highlight element.\n\n</Note>\n\nThere are other CSS variables as well, that give you fined-tuned control over both the border and background color for the active row, if you don't want to use the above three variables to propagate the same color across both border and background.\n\n- `--infinite-active-cell-background` - the background color. If you use this, you need to set opacity yourself. Applied for both cell and row.\n- `--infinite-active-row-background` - the background color. If you use this, you need to set opacity yourself. If this is specified, it takes precendence over `--infinite-active-cell-background`\n- `--infinite-active-cell-background` - the background color. If you use this, you need to set opacity yourself. Applied for both cell and row.\n- `--infinite-active-row-background` - the background color. If this is specified, it takes precedence over `--infinite-active-cell-background`\n- `--infinite-active-row-border` - border configuration (eg:`2px solid magenta`). If you use this, it will not be propagated to the background color.\n\nFor more details on the CSS variables, see the [CSS Variables documentation](../theming/css-variables##active-row-background).\n\n<Sandpack title=\"Theming active row highlight\">\n\n<Description>\n\nUse the color picker to configured the desired color for the active row highlight\n\n</Description>\n\n```ts file=\"navigating-rows-theming-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/editing/column-editors": {
      "filePath": "/docs/learn/editing/column-editors",
      "routePath": "/docs/learn/editing/column-editors",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/editing/column-editors.page.md",
      "fileName": "column-editors.page.md",
      "folderPath": "/docs/learn/editing/",
      "frontmatter": {
        "title": "Column Editors",
        "description": "Learn how to use configure editors for columns in Infinite Table"
      },
      "excerpt": "For now, Infinite Table comes with a default built-in editor that's rendered when editing starts on any editable cell.",
      "readingTime": "2 min read",
      "content": "\nFor now, Infinite Table comes with a default built-in editor that's rendered when editing starts on any editable cell.\n\nIt's very easy to configure columns with your own custom editors via the <PropLink name=\"columns.components.Editor\" /> property.\n\n```tsx\nconst columns: InfiniteTablePropColumns<Developer> = {\n  canDesign: {\n    field: 'canDesign',\n    defaultEditable: true,\n    components: {\n      // don't forget to provide an implementation\n      // for the BoolEditor component\n      Editor: BoolEditor,\n    },\n  },\n  id: {\n    field: 'id',\n  },\n};\n```\n\n<Note title=\"No built-in custom editors!\">\n\nFor now, we're not shipping any extra editors with Infinite Table.\n\nThere are a few reasons for that:\n\n- we want to keep our bundle size small\n- we're aware people have their own preferences - especially **select/combo boxes** and **date pickers** are very complex components on their own and there are many different popular alternatives many teams already use in their projects\n\nSo in this page and other parts of the docs, we'll use some popular alternatives, to show how to integrate them with Infinite Table.\n\n</Note>\n\n## Using Date Editors\n\nA common use-case is integrating date editors, so in the following example we'll use the [MUI X Date Picker](https://mui.com/x/react-date-pickers/date-picker/) component.\n\n<Sandpack size=\"lg\" title=\"Using MUI X Date Picker for editing dates in the DataGrid\" deps=\"@emotion/react,@emotion/styled,@mui/material,@mui/x-date-pickers,dayjs\">\n\n<Description>\n\nThis is a basic example integrating with the [MUI X Date Picker](https://mui.com/x/react-date-pickers/date-picker/) - click any cell in the **Birth Date** column to show the date picker.\n\n</Description>\n\n```ts file=\"date-editor-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Configure Editors for Column Types\n\nWhen you have more than one column that needs to use the same editor, you can use the <PropLink name=\"columnTypes\" code={false}>column types</PropLink> and associate the editor with the column type.\n\nAfter defining your generic column types, make sure you assign them to the columns that need that specific type\n\n<Sandpack size=\"lg\" title=\"Using MUI X Date Picker with custom 'date' type columns\" deps=\"@emotion/react,@emotion/styled,@mui/material,@mui/x-date-pickers,dayjs\">\n\n<Description>\n\nThis is a basic example integrating with the [MUI X Date Picker](https://mui.com/x/react-date-pickers/date-picker/) - click any cell in the **Birth Date** or **Date Hired** columns to show the date picker.\n\nThis example uses the <PropLink name=\"columnTypes\" code={false}>column types</PropLink> to give each date column the same editor and styling.\n\n</Description>\n\n```ts file=\"column-types-date-editor-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/editing/custom-editor": {
      "filePath": "/docs/learn/editing/custom-editor",
      "routePath": "/docs/learn/editing/custom-editor",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/editing/custom-editor.page.md",
      "fileName": "custom-editor.page.md",
      "folderPath": "/docs/learn/editing/",
      "frontmatter": {
        "title": "Custom Editor",
        "description": "Writing a custom editor for a inline editing in Infinite Table for React"
      },
      "excerpt": "For writing a custom editor, you can use the <HookLink name=\"useInfiniteColumnEditor\" /> hook.",
      "readingTime": "2 min read",
      "content": "\nFor writing a custom editor, you can use the <HookLink name=\"useInfiniteColumnEditor\" /> hook.\n\nFor any column (or <PropLink name=\"columnTypes\" code={false}>column type</PropLink> - which can then get applied to multiple columns), you can specify a custom editor component to be used for editing the column's value, via the <PropLink name=\"columns.components.editor\">column.components.editor</PropLink> property.\n\n```tsx {10}\nconst columns: InfiniteTablePropColumns<Developer> = {\n  id: {\n    field: 'id',\n    defaultEditable: false,\n  },\n  firstName: {\n    field: 'firstName',\n    components: {\n      // this is using a custom editor component\n      editor: CustomEditor,\n    },\n  },\n  age: {\n    field: 'age',\n    type: 'number',\n    defaultEditable: false,\n  },\n  stack: { field: 'stack' },\n  currency: { field: 'currency' },\n};\n```\n\nThe editor component should use the <HookLink name=\"useInfiniteColumnEditor\"/> hook to have access to cell-related information and to confirm, cancel or reject the edit.\n\n```tsx {3} title=\"CustomEditor.tsx\"\nimport { useInfiniteColumnEditor } from '@infinite-table/infinite-react';\nconst CustomEditor = () => {\n  const { initialValue, confirmEdit, cancelEdit } = useInfiniteColumnEditor();\n\n  const domRef = React.useRef<HTMLInputElement>(null);\n\n  const onKeyDown = useCallback((event: React.KeyboardEvent) => {\n    const { key } = event;\n    if (key === 'Enter' || key === 'Tab') {\n      confirmEdit(domRef.current?.value);\n    } else if (key === 'Escape') {\n      cancelEdit();\n    } else {\n      event.stopPropagation();\n    }\n  }, []);\n\n  return (\n    <div>\n      <input\n        style={{ width: '100%' }}\n        autoFocus\n        ref={domRef}\n        defaultValue={initialValue}\n        onKeyDown={onKeyDown}\n      />\n    </div>\n  );\n};\n```\n\n<Note>\n\nInside any custom editor component, you can use the <HookLink name=\"useInfiniteColumnCell\"/> hook to get access to the cell-related information.\n\n</Note>\n\n<Sandpack title=\"Using a custom editor\" >\n\n<Description>\n\nIn this example, the `salary` column is configured with a custom editor component.\n\n</Description>\n\n```ts file=\"custom-editor-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Using Custom Date Editors\n\nA common use-case is integrating date editors, so in the following example we'll use the [MUI X Date Picker](https://mui.com/x/react-date-pickers/date-picker/) component.\n\n<Sandpack size=\"lg\" title=\"Using MUI X Date Picker for editing dates in the DataGrid\" deps=\"@emotion/react,@emotion/styled,@mui/material,@mui/x-date-pickers,dayjs\">\n\n<Description>\n\nThis is a basic example integrating with the [MUI X Date Picker](https://mui.com/x/react-date-pickers/date-picker/) - click any cell in the **Birth Date** column to show the date picker.\n\n</Description>\n\n```ts file=\"date-editor-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/editing/excel-like-editing": {
      "filePath": "/docs/learn/editing/excel-like-editing",
      "routePath": "/docs/learn/editing/excel-like-editing",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/editing/excel-like-editing.page.md",
      "fileName": "excel-like-editing.page.md",
      "folderPath": "/docs/learn/editing/",
      "frontmatter": {
        "title": "Excel-like Editing",
        "description": "Configuring the DataGrid to use Excel-like editing via keyboard shortcuts"
      },
      "excerpt": "InfiniteTable offers support for Excel-like editing. This means users can simply start typing in an editable cell and the editor is displayed and updated immediately (no `Enter` key is required to start typing).",
      "readingTime": "2 min read",
      "content": "\nInfiniteTable offers support for Excel-like editing. This means users can simply start typing in an editable cell and the editor is displayed and updated immediately (no `Enter` key is required to start typing).\n\nThis behavior is achieved by using the [Instant Edit keyboard shorcut](/docs/learn/keyboard-navigation/keyboard-shortcuts#instant-edit).\n\n\n```ts {4,12}\nimport {\n  DataSource,\n  InfiniteTable,\n  keyboardShortcuts\n} from '@infinite-table/infinite-react';\n\n function App() {\n  return <DataSource<Developer> primaryKey=\"id\" data={dataSource}>\n    <InfiniteTable<Developer>\n      columns={columns}\n      keyboardShortcuts={[\n        keyboardShortcuts.instantEdit\n      ]}\n    />\n  </DataSource>\n}\n```\n\nThe `instantEdit` keyboard shorcut is configured (by default) to respond to any key (via the special `*` identifier which matches anything) and will start editing the cell as soon as a key is pressed. This behavior is the same as in Excel, Google Sheets, Numbers or other spreadsheet software.\n\n<Sandpack>\n\n<Description>\n\nClick on a cell and then start typing to edit the cell.\n\n</Description>\n\n```ts file=\"$DOCS/reference/keyboard-shortcuts-instant-edit-example.page.tsx\"\n```\n\n</Sandpack>\n\n\n<Note>\n\nTo confirm the editing, press the `Enter` key.\n\n</Note>\n\n## Simulating formulas with `column.valueGetter`\n\nYou can use the <PropLink name=\"columns.valueGetter\" /> property to simulate formulas in your cells.\n\nFor example, you might want to have a column that multiplies or divides a value by a constant.\n\n```ts {6}\nconst columns = {\n  salary: {\n    field: 'salary'\n  },\n  salaryK: {\n    valueGetter: ({data}) => data.salary / 1000\n  }\n}\n```\n\n\n<Sandpack>\n\n<Description>\n\nEdit the `salary` column and see the `Salary (thousands)` col update.\n\n</Description>\n\n```ts file=\"$DOCS/reference/keyboard-shortcuts-instant-edit-with-valuegetter-example.page.tsx\"\n```\n\n</Sandpack>"
    },
    "/docs/learn/editing/inline-edit-flow": {
      "filePath": "/docs/learn/editing/inline-edit-flow",
      "routePath": "/docs/learn/editing/inline-edit-flow",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/editing/inline-edit-flow.page.md",
      "fileName": "inline-edit-flow.page.md",
      "folderPath": "/docs/learn/editing/",
      "frontmatter": {
        "title": "Inline Editing Flow",
        "description": "Flow chart of inline editing - understand the flow of operations when performing edits in Infinite Table for React"
      },
      "excerpt": "Editing is described in great detail in the [Inline Editing](/docs/learn/editing/inline-editing) page - so make sure you read that first.",
      "readingTime": "2 min read",
      "content": "\nEditing is described in great detail in the [Inline Editing](/docs/learn/editing/inline-editing) page - so make sure you read that first.\n\nThis page is just a chart that describes the editing flow with the most important steps:\n\n- starting the edit - via the API or by user interaction (which triggers the API call)\n- checking if the cell is editable - async checks are also supported\n- retrieving the value to edit\n- stopping the edit - via API or by user interaction\n  - an edit can be cancelled - value discarded\n  - an edit can be rejected - value rejected with error\n  - an edit can be accepted - value accepted and passed to the persit layer\n- persisting the edit\n  - defaulting to updating data to the data source\n  - a custom persist function can be provided via <PropLink name=\"persistEdit\" />\n- notifying the user of the result of the edit\n  - `onEditCancelled`\n  - `onEditRejected`\n  - `onEditAccepted` - after accepting the edit, either the persist success or error is called\n    - `onEditPersistSuccess`\n    - `onEditPersistError`\n\n```mmd\ngraph TD;\n    startEdit-->editable;\n    editable--\"yes\"-->editable_yes;\n    editable--\"no\"-->done;\n\n    editable_yes--column.getValueToEdit--->editing_active\n\n\n    editing_active--\"stopEdit({ cancel })\"-->cancel\n    editing_active--\"stopEdit({ reject })\"-->reject\n    editing_active--\"stopEdit({ value? })\"-->should_accept_edit\n\n    cancel-->onEditCancelled\n    reject-->onEditRejected\n    onEditCancelled-->done\n\n    should_accept_edit--yes-->value_accepted\n    should_accept_edit--no-->onEditRejected\n    value_accepted --\"column.getValueToPersist(async)\"--> persist_value\n    persist_value--no--> default_persist\n    persist_value--yes--> custom_persist\n\n\n    default_persist-->onEditPersistSuccess\n    custom_persist-->onEditPersistSuccess\n    custom_persist-->onEditPersistError\n    onEditPersistSuccess-->done\n    onEditPersistError-->done\n    onEditRejected-->done\n\n\n\n    startEdit[\"API.startEdit({rowIndex, columnId})\"]\n    editable{\"editable?(async)\"}\n\n    editing_active([\"Editing active\"])\n    editable_yes([\"Yes\"])\n\n\n    cancel(\"Cancel - value discarded\")\n    reject(\"Reject - value rejected with error\")\n\n    onEditCancelled[\"onEditCancelled()\"]\n    onEditRejected[\"onEditRejected()\"]\n\n    should_accept_edit{\"shouldAcceptEdit?(async)\"}\n    value_accepted([\"onEditAccepted()\"])\n    persist_value{\"props.persistEdit defined?\"}\n\n    default_persist[\"dataSourceApi.updateData(...)\"]\n    custom_persist[\"props.persistEdit(...) async\"]\n    onEditPersistSuccess[\"onEditPersistSuccess()\"]\n    onEditPersistError[\"onEditPersistError()\"]\n```\n"
    },
    "/docs/learn/editing/inline-editing": {
      "filePath": "/docs/learn/editing/inline-editing",
      "routePath": "/docs/learn/editing/inline-editing",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/editing/inline-editing.page.md",
      "fileName": "inline-editing.page.md",
      "folderPath": "/docs/learn/editing/",
      "frontmatter": {
        "title": "Inline Editing",
        "description": "Learn how to use inline editing to update your data with Infinite Table for React",
        "redirect_to": "/docs/learn/editing/overview"
      },
      "excerpt": "",
      "readingTime": "0 min read",
      "content": ""
    },
    "/docs/learn/editing/overview": {
      "filePath": "/docs/learn/editing/overview",
      "routePath": "/docs/learn/editing/overview",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/editing/overview.page.md",
      "fileName": "overview.page.md",
      "folderPath": "/docs/learn/editing/",
      "frontmatter": {
        "title": "Editing",
        "description": "Learn how to use inline editing to update your data with Infinite Table for React"
      },
      "excerpt": "By default, editing is not enabled.",
      "readingTime": "5 min read",
      "content": "\nBy default, editing is not enabled.\n\nTo enable editing globally, you can use the <PropLink name=\"columnDefaultEditable\" /> boolean prop on the `InfiniteTable` component. This will enable the editing on all columns.\n\nOr you can be more specific and choose to make individual columns editable via the <PropLink name=\"columns.defaultEditable\">column.defaultEditable</PropLink> prop. This overrides the global <PropLink name=\"columnDefaultEditable\" />.\n\n<Sandpack title=\"Inline Editing in action\">\n\n<Description>\n\nAll columns (except id) are editable.\n\n</Description>\n\n```ts file=\"inline-editing-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<HeroCards>\n<YouWillLearnCard title=\"Column Editors\" path=\"/docs/learn/editing/column-editors\">\nRead about how you can configure various editors for your columns.\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"Editing Flow Chart\" path=\"/docs/learn/editing/inline-edit-flow\">\nA picture is worth a thousand words - see a chart for the editing flow.\n</YouWillLearnCard>\n\n</HeroCards>\n\n<Note>\n\nThe <PropLink name=\"columns.defaultEditable\">column.defaultEditable</PropLink> property can be either a `boolean` or a `function`.\n\nIf it is a function, it will be called when an edit is triggered on the column. The function will be called with a single object that contains the following properties:\n\n- `value` - the current value of the cell (the value currently displayed, so after <PropLink name=\"columns.valueFormatter\" /> and <PropLink name=\"columns.renderValue\" /> have been applied)\n- `rawValue` - the current value of the cell, but before any formatting and custom rendering has been applied. This is either the field value from the current data object, or the result of the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `data` - the data object (of type `DATA_TYPE`) for the current row\n- `rowInfo` - the row info object that underlies the row\n- `column` - the current column on which editing is invoked\n- `api` - a reference to the [InfiniteTable API](/docs/reference/api)\n- `dataSourceApi` - - a reference to the [DataSource API](/docs/reference/datasource-api)\n\nThe function can return a boolean value or a Promise that resolves to a boolean value - this means you can asynchronously decide whether the cell is editable or not.\n\nMaking <PropLink name=\"columns.defaultEditable\">column.defaultEditable</PropLink> a function gives you the ability to granularly control which cells are editable or not (even within the same column, based on the cell value or other values you have access to).\n\n</Note>\n\nIn addition to the flags mentioned above, you can use the <PropLink name=\"editable\" /> prop on the `InfiniteTable` component. This overrides all other properties and when it is defined, is the only source of truth for whether something is editable or not.\n\n<Note>\n\nThe <PropLink name=\"editable\" /> prop allows you to centralize editing logic in one place.\n\nIt has the same signature as the <PropLink name=\"columns.defaultEditable\">column.defaultEditable</PropLink> function.\n\n</Note>\n\n## Start Editing\n\nEditing can be started either by user interaction or programmatically via the [API](/docs/reference/api).\n\nThe user can start editing by double-clicking on a cell or by pressing the `Enter` key while the cell is active (see [Keyboard Navigation for Cells](docs/learn/keyboard-navigation/navigating-cells)).\n\nTo start editing programmatically, use the <ApiLink name=\"startEdit\">{`startEdit({ columnId, rowIndex })`}</ApiLink> method.\n\n<Sandpack title=\"Starting an Edit via the API\">\n\n```ts file=\"api-inline-editing-custom-edit-value-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nEither way, be it user interaction or API call, those actions will trigger checks to see if the cell is editable - taking into account the <PropLink name=\"columnDefaultEditable\"/>, <PropLink name=\"columns.defaultEditable\">column.defaultEditable</PropLink> or <PropLink name=\"editable\" /> props, as described in the paragraphs above. Only if the result is `true` will the cell editor be displayed.\n\n## Customize Edit Value When Editing Starts\n\nWhen editing starts, the column editor is displayed with the value that was in the cell. This (initial) edit value can be customized via the <PropLink name=\"columns.getValueToEdit\">column.getValueToEdit</PropLink> prop. This allows you to start editing with a different value than the one that is displayed in the cell - and even with a value fetched asynchronously.\n\n```tsx\nconst columns = {\n  salary: {\n    field: 'salary',\n    // this can return a Promise\n    getValueToEdit: ({ value, data, rowInfo, column }) => {\n      // suppose the value is a string like '$1000'\n      // but we want to start editing with the number 1000\n      return value.replace('$', '');\n    },\n  },\n};\n```\n\n<Sandpack title=\"Inline Editing with custom getter for edit value\">\n\n<Description>\n\nTry editing the salary column - it has a custom getter for the edit value, which removes the curency string.\n\n</Description>\n\n```ts file=\"inline-editing-custom-edit-value-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Finishing an Edit\n\nAn edit is generally finished by user interaction - either the user confirms the edit by pressing the `Enter` key or cancels it by pressing the `Escape` key.\n\nAs soon as the edit is confirmed by the user, the `InfiniteTable` needs to decide whether the edit should be accepted or not.\n\nIn order to decide (either synchronously or asynchronously) whether an edit should be accepted or not, you can use the global <PropLink name=\"shouldAcceptEdit\"/> prop or the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> alternative.\n\n<Note>\n\nWhen neither the global <PropLink name=\"shouldAcceptEdit\"/> nor the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> are defined, all edits are accepted by default.\n\n</Note>\n\n<Note>\n\nOnce an edit is accepted, the <PropLink name=\"onEditAccepted\"/> callback prop is called, if defined.\n\nWhen an edit is rejected, the <PropLink name=\"onEditRejected\"/> callback prop is called instead.\n\nThe accept/reject status of an edit is decided by using the `shouldAcceptEdit` props described above. However an edit can also be cancelled by the user pressing the `Escape` key in the cell editor - to be notified of this, use the <PropLink name=\"onEditCancelled\"/> callback prop.\n\n</Note>\n\n<Sandpack title=\"Using shouldAcceptEdit to decide whether a value is acceptable or not\">\n\n<Description>\n\nIn this example, the `salary` column is configured with a <PropLink name=\"columns.shouldAcceptEdit\">shouldAcceptEdit</PropLink> function property that rejects non-numeric values.\n\n</Description>\n\n```ts file=\"inline-editing-custom-edit-value-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Persisting an Edit\n\nBy default, accepted edits are persisted to the `DataSource` via the <DApiLink name=\"updateData\">DataSourceAPI.updateData</DApiLink> method.\n\nTo change how you persist values (which might include persisting to remote locations), use the <PropLink name=\"persistEdit\"/> function prop on the `InfiniteTable` component.\n\n<Note>\n\nThe <PropLink name=\"persistEdit\"/> function prop can return a `Promise` for async persistence. To signal that the persisting failed, reject the promise or resolve it with an `Error` object.\n\nAfter persisting the edit, if all went well, the <PropLink name=\"onEditPersistSuccess\" /> callback prop is called. If the persisting failed (was rejected), the <PropLink name=\"onEditPersistError\" /> callback prop is called instead.\n\n</Note>\n"
    },
    "/docs/learn/master-detail/caching-detail-datagrid": {
      "filePath": "/docs/learn/master-detail/caching-detail-datagrid",
      "routePath": "/docs/learn/master-detail/caching-detail-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/master-detail/caching-detail-datagrid.page.md",
      "fileName": "caching-detail-datagrid.page.md",
      "folderPath": "/docs/learn/master-detail/",
      "frontmatter": {
        "title": "Master Detail - Caching Detail DataGrid",
        "description": "Learn how to use master-detail with caching for a better user-experience"
      },
      "excerpt": "By far the most common scenario will be to render another DataGrid in the detail row.",
      "readingTime": "2 min read",
      "content": "\nBy far the most common scenario will be to render another DataGrid in the detail row.\n\nFor such cases we offer a caching mechanism that will keep the state of the detail DataGrid when the user collapses and then expands the row again.\n\n<Note>\n\nThe most important part of the state of detail DataGrid that will be cached is the data-related.\n\nMore specifically, when cached, the detail `<DataSource />` will get its data from the cache and will not call the <DPropLink name=\"data\" /> function when mounted.\n\nOther persisted parts of the state are the sorting, filtering and grouping information.\n\n</Note>\n\nTo enable caching, use the <PropLink name=\"rowDetailCache\" /> prop.\n\nIt can be one of the following:\n\n- `false` - caching is disabled - this is the default\n- `true` - enables caching for all detail DataGrids\n- `number` - the maximum number of detail DataGrids to keep in the cache. When the limit is reached, the oldest detail DataGrid will be removed from the cache.\n\n<Sandpack title=\"Master detail DataGrid with caching for 5 detail DataGrids\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nThis example will cache the last 5 detail DataGrids - meaning they won't reload when you expand them again.\nYou can try collapsing a row and then expanding it again to see the caching in action - it won't reload the data.\nBut when you open up a row that hasn't been opened before, it will load the data from the remote location.\n\n</Description>\n\n```ts file=master-detail-caching-with-default-expanded-example.page.tsx\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/master-detail/collapsing-and-expanding-rows": {
      "filePath": "/docs/learn/master-detail/collapsing-and-expanding-rows",
      "routePath": "/docs/learn/master-detail/collapsing-and-expanding-rows",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/master-detail/collapsing-and-expanding-rows.page.md",
      "fileName": "collapsing-and-expanding-rows.page.md",
      "folderPath": "/docs/learn/master-detail/",
      "frontmatter": {
        "title": "Master Detail - Collapsing and Expanding Rows",
        "description": "Learn how to use master-detail and configure the state of the row details as expanded or collapsed"
      },
      "excerpt": "You can control the collapsed/expanded state of rows in the master-detail configuration.",
      "readingTime": "5 min read",
      "content": "\nYou can control the collapsed/expanded state of rows in the master-detail configuration.\n\nBy default, all row details are collapsed. You can very easily change this by using the <PropLink name=\"defaultRowDetailState\" /> prop.\n\n```tsx title=\"Specyfing the default row detail state\" {8}\nconst defaultRowDetailState = {\n  collapsedRows: true,\n  expandedRows: [39, 54],\n};\n\n<InfiniteTable\n  columns={...}\n  defaultRowDetailState={defaultRowDetailState}\n  rowDetailRenderer={...}\n/>\n\n```\n\n<Sandpack title=\"Master detail DataGrid with some row details expanded by default\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nSome of the rows in the master DataGrid are expanded by default.\n\nAlso, we have a default sort defined, by the `country` and `city` columns.\n\n</Description>\n\n```ts file=\"master-detail-default-expanded-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Understanding and defining the collapse/expand state for row details\n\nWhen you want to specify a different collapse/expand state of the row details (since by default they are all collapsed, and you might want to expand some of them), you need to use the <PropLink name=\"defaultRowDetailState\" /> prop, or its controlled counterpart - the <PropLink name=\"rowDetailState\" /> prop.\n\nThe <TypeLink name=\"RowDetailState\" code={false}>row detail state</TypeLink> can be defined in two ways:\n\n- either specify `collapsedRows: true` (which means all rows are collapsed by default) and specify an array of `expandedRows`, which will contain the ids of the rows that should be rendered as expanded.\n\n```tsx\nconst defaultRowDetailState = {\n  collapsedRows: true,\n  expandedRows: ['id-1', 'id-2', 'id-56'],\n};\n```\n\n- or specify `expandedRows: true` (which means all rows are expanded by default) and specify an array of `collapsedRows`, which will contain the ids of the rows that should be rendered as collapsed.\n\n```tsx\nconst rowDetailState = {\n  expandedRows: true,\n  collapsedRows: ['id-1', 'id-2', 'id-56'],\n};\n```\n\nYou can pass these objects into either the <PropLink name=\"defaultRowDetailState\" /> (uncontrolled) or the <PropLink name=\"rowDetailState\" /> (controlled).\n\n<Note>\n\nIf you're using the controlled <PropLink name=\"rowDetailState\" /> prop, you'll need to respond to user interaction by listening to <PropLink name=\"onRowDetailStateChange\" /> and updating the value of <PropLink name=\"rowDetailState\" /> accordingly.\n\n</Note>\n\n<Note>\n\nAs an alternative to using the object literals as specified above, you can import the `RowDetailState` class from `@infinite-table/infinite-react` and use it to define the state of the row details. You can pass instances of `RowDetailState` into the <PropLink name=\"defaultRowDetailState\" /> or <PropLink name=\"rowDetailState\" /> props.\n\n```tsx title=\"Passing an instance of RowDetailState to the InfiniteTable\"\nimport { RowDetailState } from '@infinite-table/infinite-react';\n\nconst rowDetailState = new RowDetailState({\n  collapsedRows: true,\n  expandedRows: [2, 3, 4],\n});\n\n<InfiniteTable<DATA_TYPE> rowDetailState={rowDetailState} />;\n```\n\n```tsx title=\"Passing an object literal to the InfiniteTable\"\n<InfiniteTable<DATA_TYPE>\n  rowDetailState={{\n    collapsedRows: true,\n    expandedRows: [2, 3, 4],\n  }}\n/>\n```\n\nSee our type definitions for <TypeLink name=\"RowDetailState\" code={false}>more details on row detail state</TypeLink>.\n\n</Note>\n\n<Sandpack title=\"Master detail DataGrid with listener for row expand/collapse\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nSome of the rows in the master DataGrid are expanded by default.\n\nWe use the controlled <PropLink name=\"rowDetailState\" /> prop to manage the state of the row details and update it by using <PropLink name=\"onRowDetailStateChange\" />.\n\n</Description>\n\n```ts file=master-detail-controlled-expanded-enhanced-example.page.tsx\n\n```\n\n</Sandpack>\n\n## Listening to row detail state changes\n\nIn order to be notified when the collapse/expand state of row details changes, you can use the <PropLink name=\"onRowDetailStateChange\" /> prop.\n\n<Note>\n\nThis function is called with only one argument - the new <PropLink name=\"rowDetailState\" />. Please note this is an instance of <TypeLink name=\"RowDetailState\"/>. If you want to use the object literal, make sure you call `getState()` on the instance of `RowDetailState`.\n\n```tsx title=\"Using the onRowDetailStateChange listener\" {11}\nfunction App() {\n  const [rowDetailState, setRowDetailState] = React.useState<RowDetailStateObject>({\n    collapsedRows: true as const,\n    expandedRows: [39, 54],\n  });\n\n  return <DataSource<DATA_TYPE> {...}>\n    <InfiniteTable<DATA_TYPE>\n      rowDetailState={rowDetailState}\n      onRowDetailStateChange={(rowDetailStateInstance) => {\n        setRowDetailState(rowDetailStateInstance.getState());\n      }}\n      columnMinWidth={50}\n      columns={masterColumns}\n      rowDetailHeight={200}\n      rowDetailRenderer={renderDetail}\n    />\n  </DataSource>\n}\n```\n\n</Note>\n\nWhen using the controlled <PropLink name=\"rowDetailState\" />, you'll need to respond to the user interaction by using the <PropLink name=\"onRowDetailStateChange\"/> listener, in order to update the controlled <PropLink name=\"rowDetailState\" />.\n\nThis allows you to manage the state of the row details yourself - making it easy to expand/collapse all rows, or to expand/collapse a specific row by simply updating the value of the <PropLink name=\"rowDetailState\" /> prop.\n\n```tsx\nconst [rowDetailState, setRowDetailState] =\n  React.useState<RowDetailStateObject>({\n    collapsedRows: true,\n    expandedRows: [39, 54],\n  });\n\nconst expandAll = () => {\n  setRowDetailState({\n    collapsedRows: [],\n    expandedRows: true,\n  });\n};\nconst collapseAll = () => {\n  setRowDetailState({\n    collapsedRows: true,\n    expandedRows: [],\n  });\n};\n\nreturn (\n  <>\n    <button onClick={expandAll}>Expand All</button>\n    <button onClick={collapseAll}>Collapse All</button>\n    <InfiniteTable<DATA_TYPE> rowDetailState={rowDetailState} />\n  </>\n);\n```\n\n<Note>\n\nIf you prefer the more imperative approach, you can still use the [Row Detail API](/docs/reference/row-detail-api) to <RowDetailApiLink name=\"expandRowDetail\">expand</RowDetailApiLink> or <RowDetailApiLink name=\"collapseRowDetail\">collapse</RowDetailApiLink> details for rows.\n\n</Note>\n\n\n## Single row expand\n\nUsing the controlled <PropLink name=\"rowDetailState\" /> prop is very powerful - it allows you to configure the expand state to only allow one row to be expanded at a time, if that's something you need.\n\nThis means that if any other row(s) are expanded and you expand a new row, the previously expanded rows will all be collapsed.\n\n\n<Sandpack title=\"Master detail only one row expanded at a time\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nIn this demo we allow only one row to be expanded at any given time.\n\nWe use the controlled <PropLink name=\"rowDetailState\" /> prop to manage the state of the row details and update it by using <PropLink name=\"onRowDetailStateChange\" />.\n\n</Description>\n\n```ts file=master-detail-one-expanded-row-example.page.tsx\n\n```\n\n</Sandpack>"
    },
    "/docs/learn/master-detail/custom-row-detail-content": {
      "filePath": "/docs/learn/master-detail/custom-row-detail-content",
      "routePath": "/docs/learn/master-detail/custom-row-detail-content",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/master-detail/custom-row-detail-content.page.md",
      "fileName": "custom-row-detail-content.page.md",
      "folderPath": "/docs/learn/master-detail/",
      "frontmatter": {
        "title": "Master Detail with Custom Row Detail Contents",
        "description": "Learn how to use master-detail to customise your row detail contents"
      },
      "excerpt": "The Infinite Table React DataGrid allows you to render any valid JSX nodes as row details.",
      "readingTime": "3 min read",
      "content": "\nThe Infinite Table React DataGrid allows you to render any valid JSX nodes as row details.\n\nYou can render a DataGrid directly or you can nest the DataGrid at any level of nesting inside the row details.\nOr you can simply choose to render anything else - no DataGrid required.\n\n## Rendering a detail DataGrid\n\nYour row detail content can include another Infinite Table DataGrid.\n\n<Note>\n\nThe DataGrid you're rendering inside the row detail doesn't need to be the return value of the <PropLink name=\"rowDetailRenderer\" /> function - it can be nested inside other valid JSX nodes you return from the function.\n\n</Note>\n\n<Sandpack title=\"Master detail with custom content & DataGrid\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nIn this example, the row detail contains custom content, along with another Infinite Table DataGrid. You can nest a child DataGrid inside the row details at any level of nesting.\n\n</Description>\n\n```ts file=\"master-detail-custom-datagrid-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nYou'll probably want to configure the height of the row detail content. Use the <PropLink name=\"rowDetailHeight\" /> prop to do that.\n\n</Note>\n\n## Rendering a chart component as row detail\n\n\n<Sandpack title=\"Retrieving cell selection value by mapping over them\" size=\"lg\" deps=\"ag-charts-react,ag-charts-community\">\n\n```ts file=master-detail-chart-detail-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIn the above example, please note that on every render (after the detail component is mounted), we pass the same `dataSource`, `groupBy` and `aggregationReducers` props to the `<DataSource />` component. The references for all those objects are stable. We don't want to pass new references on every render, as that would cause the `<DataSource />` to reload and reprocess the data.\n\n</Note>\n\n\n## Multiple levels of nesting\n\nThe master-detail configuration for the DataGrid can contain any level of nesting.\n\nThe example below shows 3 levels of nesting - so a master DataGrid, a detail DataGrid and another third-level detail with custom content.\n\n<Sandpack title=\"Master detail with 3 levels of nesting\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nIn this example, we have 3 levels of nesting:\n\n- The master DataGrid shows cities/countries\n- The first level of detail shows developers in each city\n- The second level of detail shows custom data about each developer\n\n</Description>\n\n```ts file=\"master-detail-3-levels-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Understanding the lifecycle of the row detail component\n\nYou have to keep in mind that the content you render in the row detail can be mounted and unmounted multiple times. Whenever the user expands the row detail, it gets mounted and rendered, but then it will be unmounted when the user scrolls the content out of view. This can happen very often.\n\nAlso note that the content can be recycled - meaning the same component can be reused for different rows. If you don't want recycling to happen, make sure you use a unique key for the row detail content - you can use the `masterRowInfo.id` for that.\n\n<Note>\n\nIn practice this means that it's best if your row detail content is using controlled state and avoids using local state.\n\n</Note>\n"
    },
    "/docs/learn/master-detail/overview": {
      "filePath": "/docs/learn/master-detail/overview",
      "routePath": "/docs/learn/master-detail/overview",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/master-detail/overview.page.md",
      "fileName": "overview.page.md",
      "folderPath": "/docs/learn/master-detail/",
      "frontmatter": {
        "title": "Master Detail",
        "description": "Learn how to use master-detail rendering with the React DataGrid"
      },
      "excerpt": "The React DataGrid that Infinite Table offers has native support for master-detail rows.",
      "readingTime": "4 min read",
      "content": "\nThe React DataGrid that Infinite Table offers has native support for master-detail rows.\n\n<Note>\n\nThe single most important property for the master-detail DataGrid configuration is the <PropLink name=\"rowDetailRenderer\" /> function prop - which makes the DataGrid be considered master-detail.\n\nIn addition, make sure you have a column with the `renderRowDetailIcon: true` flag set. <PropLink name=\"columns.renderRowDetailIcon\" /> on a column makes the column display the row detail expand icon.\n\nThe row detail in the DataGrid can contain another DataGrid or any other custom content.\n</Note>\n\n<Note>\n\nIt's very imporant that the <PropLink name=\"rowDetailRenderer\" /> function prop you pass into `<InfiniteTable />` is stable and doesn't change on every render. So make sure you pass a reference to the same function every time - except of course if you want the row detail to change based on some other state.\n</Note>\n\n<Sandpack title=\"Basic master detail DataGrid example\" size=\"lg\">\n\n<Description>\n\nThis example shows a master DataGrid with cities & countries.\n\nThe details for each city shows a DataGrid with developers in that city.\n\nThe detail DataGrid is configured with remote sorting.\n\n</Description>\n\n```ts file=\"master-detail-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\nIf you want to use a component instead of the <PropLink name=\"rowDetailRenderer\" /> function, you can use the <PropLink name=\"components.RowDetail\" /> property. This works similarly and makes the DataGrid be considered master-detail. Inside the component, you can use the <HookLink name=\"useMasterRowInfo\" /> hook to get the master row information.\n\n\n\n## Loading the Detail DataSource\n\nWhen master-detail is configured and the row detail renders a DataGrid, the <DPropLink name=\"data\" /> function for the detail `<DataSource />` will be called with the `masterRowInfo` as a property available in the object passed as argument.\n\n```tsx title=\"Loading the detail DataGrid data\" {2}\nconst detailDataFn: DataSourceData<Developer> = ({\n  masterRowInfo,\n  sortInfo,\n  ...\n}) => {\n\n  return Promise.resolve([...])\n}\n\n<DataSource<Developer> data={detailDataFn}>\n  {...}\n</DataSource>\n```\n\nYou can see the live example above for more details.\n\n## Rendering a detail DataGrid\n\nUsing the <PropLink name=\"rowDetailRenderer\" /> prop, you can render any custom content for the row details.\n\nThe content doesn't need to include Infinite Table.\n\nYou can, however, render an Infinite Table React DataGrid, at any level of nesting inside the row detail content.\n\n<Sandpack title=\"Master detail with custom content & DataGrid\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nIn this example, the row detail contains custom content, along with another Infinite Table DataGrid. You can nest a child DataGrid inside the row details at any level of nesting.\n\n</Description>\n\n```ts file=\"master-detail-custom-datagrid-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Configuring the master-detail height\n\nIn order to configure the height of the row details, you can use the <PropLink name=\"rowDetailHeight\" /> prop.\n\n```tsx title=\"Configuring the row detail height\" {3}\n<InfiniteTable<City>\n  columns={masterColumns}\n  rowDetailHeight={500}\n  rowDetailRenderer={renderDetail}\n/>\n```\n\nThe default value for the <PropLink name=\"rowDetailHeight\" /> is `300` px.\n\n<PropLink name=\"rowDetailHeight\" /> can be one of the following:\n\n- `number` - the height in pixels\n- `string` - the name of a CSS variable that configures the height - eg: `--master-detail-height`\n- `(rowInfo) => number` - a function that can return a different height for each row. The sole argument is the <TypeLink name=\"InfiniteTableRowInfo\">rowInfo object</TypeLink>.\n\n<Sandpack title=\"Master detail DataGrid with custom height for row details\" size=\"lg\">\n\n<Description>\n\nThis master-detail DataGrid is configured with a custom <PropLink name=\"rowDetailHeight\" /> of `200px`.\n\n</Description>\n\n```ts file=\"master-detail-custom-detail-height-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n## Conditional row details\n\nNot all rows in a DataGrid need to have details. To configure which rows have details, you can use the <PropLink name=\"isRowDetailEnabled\" /> function prop.\n\n```tsx title=\"Using conditional row details\" {5}\n<InfiniteTable<City>\n  columns={masterColumns}\n  rowDetailHeight={500}\n  rowDetailRenderer={renderDetail}\n  isRowDetailEnabled={(rowInfo) => rowInfo.data.cityName.contains('i')}\n/>\n```\n\nThe <PropLink name=\"isRowDetailEnabled\" /> function prop is called with the <TypeLink name=\"InfiniteTableRowInfo\">rowInfo object</TypeLink> and is expected to return a boolean value.\n\n\n<Sandpack title=\"Master detail DataGrid with conditional details\" size=\"lg\">\n\n<Description>\n\nThis example shows a master DataGrid with cities & countries.\n\nNot all rows have details - every other row is configured without details via the <PropLink name=\"isRowDetailEnabled\" /> function prop.\n\n</Description>\n\n```ts file=\"master-detail-per-row-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/rows/disabled-rows": {
      "filePath": "/docs/learn/rows/disabled-rows",
      "routePath": "/docs/learn/rows/disabled-rows",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/rows/disabled-rows.page.md",
      "fileName": "disabled-rows.page.md",
      "folderPath": "/docs/learn/rows/",
      "frontmatter": {
        "title": "Disabled Rows"
      },
      "excerpt": "Disabling rows allows you to have some rows that are not selectable, not clickable, not reacheable via keyboard navigation and other interactions.",
      "readingTime": "2 min read",
      "content": "\nDisabling rows allows you to have some rows that are not selectable, not clickable, not reacheable via keyboard navigation and other interactions.\n\nThe `DataSource` manages the disabled state of rows, via the <DPropLink name=\"defaultRowDisabledState\" /> (uncontrolled) prop and <DPropLink name=\"rowDisabledState\" /> (controlled) prop.\n\n```tsx\n<DataSource<DATA_TYPE>\n  idProperty=\"id\"\n  data={[]}\n  defaultRowDisabledState={{\n    enabledRows: true,\n    disabledRows: ['id1', 'id4', 'id5']\n  }}\n/>\n  <InfiniteTable<DATA_TYPE>\n    {/* ... */}\n  />\n</DataSource>\n```\n\n<Note>\n\nIn addition to using the <DPropLink name=\"defaultRowDisabledState\" />/<DPropLink name=\"rowDisabledState\" /> props, you can also specify the <DPropLink name=\"isRowDisabled\" /> function prop, which overrides those other props and ultimately determines whether a row is disabled or not.\n\n</Note>\n\n<Sandpack title=\"Specify some rows as initially disabled\">\n\n```tsx file=\"initialRowDisabledState-example.page.tsx\"\n```\n\n</Sandpack>\n\n## Using disabled rows while rendering\n\nWhen rendering a cell, you have access to the row disabled state - the <TypeLink name=\"InfiniteTableRowInfo\" /> type has a `rowDisabled` property which is true if the row is disabled.\n\n<Sandpack title=\"Using the row disabled state while rendering\">\n\n<Description>\n  This example uses custom rendering for the `firstName` column to render an emoji for disabled rows.\n</Description>\n\n```tsx file=\"custom-rendering-for-disabled-rows-example.page.tsx\"\n```\n\n</Sandpack>\n\n## Using the API to enable/disable rows\n\nYou can use the `DataSourceApi` to enable or disable rows programmatically.\n\n<DApiLink name=\"setRowEnabled\" />\n\n```tsx\ndataSourceApi.setRowEnabled(rowId, enabled);\n\n```\n\n<DApiLink name=\"setRowEnabledAt\" />\n\n```tsx\ndataSourceApi.setRowEnabledAt(rowIndex, enabled);\n```\n\n<Sandpack title=\"Using the API to enable/disable rows\">\n\n<Description>\nUse the context menu on each row to toggle the disabled state of the respective row.\n</Description>\n\n```tsx file=\"using-api-to-disable-rows-example.page.tsx\"\n```\n\n</Sandpack>"
    },
    "/docs/learn/rows/styling-rows": {
      "filePath": "/docs/learn/rows/styling-rows",
      "routePath": "/docs/learn/rows/styling-rows",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/rows/styling-rows.page.md",
      "fileName": "styling-rows.page.md",
      "folderPath": "/docs/learn/rows/",
      "frontmatter": {
        "title": "Styling Rows"
      },
      "excerpt": "Rows can be styled by using the `rowStyle` and the `rowClassName` props",
      "readingTime": "1 min read",
      "content": "\nRows can be styled by using the `rowStyle` and the `rowClassName` props\n\n- the <PropLink name=\"rowStyle\" /> prop can be a style `object` or a `function` that returns a style `object` or `undefined`\n- the <PropLink name=\"rowClassName\"/> prop can be a `string` (the name of a CSS class) or a `function` that returns a `string` or `undefined`\n\n```tsx title=\"Defining-a-rowStyle-function\"\nconst rowStyle: InfiniteTablePropRowStyle<Employee> = ({\n  data,\n  rowInfo,\n}: {\n  data: Employee | null;\n  rowInfo: InfiniteTableRowInfo<Employee>;\n}) => {\n  const salary = data ? data.salary : 0;\n\n  if (salary > 150_000) {\n    return { background: 'tomato' };\n  }\n  if (rowInfo.indexInAll % 10 === 0) {\n    return { background: 'lightblue', color: 'black' };\n  }\n};\n```\n\n<Note>\n\nThe <PropLink name=\"rowClassName\" /> function prop has the same signature as the <PropLink name=\"rowStyle\" /> function prop.\n\n</Note>\n\n## Row styling example\n\n<Sandpack>\n\n```ts files=[\"$DOCS/reference/rowStyle-example.page.tsx\",\"$DOCS/reference/rowStyle-example-columns.ts\"]\n\n```\n\n</Sandpack>\n\n<Note>\n\nIn the <PropLink name=\"rowStyle\" /> function, you can access the rowInfo object, which contains information about the current row. It's especially useful when you have grouping and aggregation, as it contains the aggregation values and other extra info.\n\n</Note>\n"
    },
    "/docs/learn/rows/using-row-info": {
      "filePath": "/docs/learn/rows/using-row-info",
      "routePath": "/docs/learn/rows/using-row-info",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/rows/using-row-info.page.md",
      "fileName": "using-row-info.page.md",
      "folderPath": "/docs/learn/rows/",
      "frontmatter": {
        "title": "Using Rows at Runtime"
      },
      "excerpt": "At runtime, the <PropLink name=\"columns.render\" /> function and a <PropLink name=\"rowStyle\">lot</PropLink> <PropLink name=\"rowClassName\">of</PropLink> <PropLink name=\"columns.style\">other</PropLink> functions use the <TypeLink name=\"InfiniteTableRowInfo\">rowInfo</TypeLink> object to access the current row and use it to decide how to render the current cell or row.",
      "readingTime": "7 min read",
      "content": "\nAt runtime, the <PropLink name=\"columns.render\" /> function and a <PropLink name=\"rowStyle\">lot</PropLink> <PropLink name=\"rowClassName\">of</PropLink> <PropLink name=\"columns.style\">other</PropLink> functions use the <TypeLink name=\"InfiniteTableRowInfo\">rowInfo</TypeLink> object to access the current row and use it to decide how to render the current cell or row.\n\nThe `rowInfo` object has a few variations, depending on the presence or absence of grouping. See <TypeLink name=\"InfiniteTableRowInfo\" code={false}>type definition here</TypeLink>.\n\n<Note>\n\nAll those variations are discriminated in the `TypeScript` typings, so you can easily use the different types of `rowInfo` objects.\n\n</Note>\n\n## Ungrouped Scenario - normal `rowInfo`\n\nWhen there is no <DataSourcePropLink name=\"groupBy\">grouping</DataSourcePropLink>, the `rowInfo` object has the following properties:\n\n- `data` - type: `DATA_TYPE`\n- `dataSourceHasGrouping` - type: `false`\n- `isGroupRow` - type: `false`\n- `id` - type: `any`. The id of the row, as defined by the <DataSourcePropLink name=\"idProperty\" /> prop.\n- `selfLoaded` - type: `boolean`. Useful in lazy-loading scenarios, when there is batching present. If you're not in such a scenario, the value will be `false`. You can use this to show a loading indicator for the row.\n- `indexInAll` - type `number`. The index of the row in the full dataset. Called like this because for grouping scenarios, there's also an `indexInGroup`\n\n### Discriminator\n\n```ts\nrowInfo.dataSourceHasGrouping === false;\n```\n\n## Grouped scenario - normal `rowInfo`\n\nWhen there is <DataSourcePropLink name=\"groupBy\">grouping</DataSourcePropLink> defined, and the row is not a group row, the `rowInfo` object has the following properties:\n\n- `data` - type: `DATA_TYPE`\n- `dataSourceHasGrouping` - type: `true`\n- `isGroupRow` - type: `false`\n- `indexInAll` - like the above\n- `indexInGroup` - type: `number`. The index of the row in its parent group.\n- `groupKeys` - type: `any[]`, but usually it's actually `string[]`. For normal rows, the group keys will have all the keys starting from the topmost parent down to the last group row in the hierarchy (the direct parent of the current row).\n\n```txt\nExample: People grouped by country and city\n\n> Italy  - country         - groupKeys: ['Italy']\n  > Rome - city           - groupKeys: ['Italy', 'Rome']\n     - Marco    - person   - groupKeys: ['Italy', 'Rome']\n     - Luca     - person   - groupKeys: ['Italy', 'Rome']\n     - Giuseppe  - person  - groupKeys: ['Italy', 'Rome']\n```\n\n- `groupBy` - type `(keyof T)[]`. Has the same structure as groupKeys, but it will contain the fields used to group the rows.\n- `rootGroupBy` - type `(keyof T)[]`. The groupBy value of the DataSource component, mapped to the `groupBy.field`\n- `parents` - a list of `rowInfo` objects that are the parents of the current row.\n- `indexInParentGroups[]` - type: `number[]`. See below for an example\n\n```\n> Italy  - country         - indexInParentGroups: [0]\n  > Rome - city           - indexInParentGroups: [0,0]\n    - Marco    - person   - indexInParentGroups: [0,0,0]\n    - Luca     - person   - indexInParentGroups: [0,0,1]\n    - Giuseppe  - person  - indexInParentGroups: [0,0,2]\n> USA - country            - indexInParentGroups: [1]\n  > LA - city             - indexInParentGroups: [1,0]\n    - Bob  - person       - indexInParentGroups: [1,0,2]\n```\n\n- `groupCount` - type: `number`. The count of leaf rows that the current group (in this case, the parent group) contains\n- `groupNesting` - type `number`. The nesting of the parent group.\n- `collapsed` - type `boolean`.\n- `selfLoaded` - type: `boolean`. Useful in lazy-loading scenarios, when there is batching present. If you're not in such a scenario, the value will be `false`.\n\n### Discriminator\n\n```ts\nrowInfo.dataSourceHasGrouping === true && rowInfo.isGroupRow === false;\n```\n\n## Grouped scenario - group `rowInfo`\n\nWhen there is <DataSourcePropLink name=\"groupBy\">grouping</DataSourcePropLink> defined, and the row is a group row, the `rowInfo` object has the following properties:\n\n- `data` - type: `Partial<DATA_TYPE> | null`. The `data` object that might be available is the result of the <DataSourcePropLink name=\"aggregationReducers\">aggregation reducers</DataSourcePropLink>. If none are specified, `data` will be `null`\n- `dataSourceHasGrouping` - type: `true`\n- `isGroupRow` - type: `true`\n- `error` - type: `string?`. If there was an error while loading the group (when the group row is expanded), this will contain the error message. If the group row was loaded with the `cache: true` flag sent in the server response, the error will remain on the `rowInfo` object even when you collapse the group row, otherwise, if `cache: true` was not present, the `error` property will be removed on collapse.\n- `indexInAll` - like the above\n- `indexInGroup` - type: `number`. The index of the row in the its parent group.\n- `deepRowInfoArray` - an array of `rowInfo` objects. This array contains all the (uncollapsed, so visible) row infos under this group, at any level of nesting, in the order in which they are visible in the table.\n- `reducerResults` - type `Record<string, AggregationReducerResult>`. The result of the <DataSourcePropLink name=\"aggregationReducers\">aggregation reducers</DataSourcePropLink> for each field in the <DataSourcePropLink name=\"aggregationReducers\" /> prop.\n- `groupCount` - type: `number`. The count of leaf rows that the current group (in this case, the parent group) contains\n- `groupData` - type: `DATA_TYPE[]`. The array of the data of all leaf nodes (normal nodes) that are inside this group.\n\n```txt\nExample: People grouped by country and city\n\n> Italy  - country         - groupKeys: ['Italy']\n  > Rome - city           - groupKeys: ['Italy', 'Rome']\n     - Marco    - person   - groupKeys: ['Italy', 'Rome']\n     - Luca     - person   - groupKeys: ['Italy', 'Rome']\n     - Giuseppe  - person  - groupKeys: ['Italy', 'Rome']\n```\n\n- `collapsedChildrenCount` - type: `number`. The count of all leaf nodes (normal rows) inside the group that are not being visible due to collapsing (either the current row is collapsed or any of its children)\n- `directChildrenCount` - type: `number`. The count of the direct children of the current group. Direct children can be either normal rows or groups.\n- `directChildrenLoadedCount` - type: `number`. Like `directChildrenCount`, but only counts the rows that are loaded (when batched lazy loading is configured).\n- `childrenAvailable` - type: `boolean`. For lazy/batched grouping, this is true if the group has been expanded at least once. NOTE: if this is true, it doesn't mean that all the children have been loaded, it only means that at least some children have been loaded and are available. Use `directChildrenCount` and `directChildrenLoadedCount` to know if all the children have been loaded or not.\n- `childrenLoading` - type: `boolean`. Boolean flag that will be true while lazy loading direct children of the current row group. Use `directChildrenLoadedCount` and `directChildrenCount` to know if all the children have been loaded or not.\n- `childrenSelectedCount` the number of all leaf rows in the current group that are selected.\n- `groupKeys` - type: `any[]`, but usually it's actually `string[]`. For group rows, the group keys will have all the keys starting from the topmost parent down to the current group row (key for current group row is included).\n- `groupBy` - type `(keyof T)[]`. Has the same structure as groupKeys, but it will contain the fields used to group the rows.\n- `rootGroupBy` - type `(keyof T)[]`. The groupBy value of the DataSource component, mapped to the `groupBy.field`\n- `groupCount` - type: `number`. The count of leaf rows that the current group (in this case, the parent group) contains\n- `groupNesting` - type `number`. The nesting of the parent group.\n- `parents` - a list of `rowInfo` objects that are the parents of the current row.\n- `indexInParentGroups[]` - type: `number[]`. See below for an example\n\n```\n> Italy  - country         - indexInParentGroups: [0]\n  > Rome - city           - indexInParentGroups: [0,0]\n    - Marco    - person   - indexInParentGroups: [0,0,0]\n    - Luca     - person   - indexInParentGroups: [0,0,1]\n    - Giuseppe  - person  - indexInParentGroups: [0,0,2]\n> USA - country            - indexInParentGroups: [1]\n  > LA - city             - indexInParentGroups: [1,0]\n    - Bob  - person       - indexInParentGroups: [1,0,2]\n```\n\n- `collapsed` - type `boolean`.\n- `selfLoaded` - type: `boolean`. Useful in lazy-loading scenarios, when there is batching present. If you're not in such a scenario, the value will be `false`.\n\n### Discriminator\n\n```ts\nrowInfo.dataSourceHasGrouping === true && rowInfo.isGroupRow === true;\n```\n"
    },
    "/docs/learn/selection/cell-selection": {
      "filePath": "/docs/learn/selection/cell-selection",
      "routePath": "/docs/learn/selection/cell-selection",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/selection/cell-selection.page.md",
      "fileName": "cell-selection.page.md",
      "folderPath": "/docs/learn/selection/",
      "frontmatter": {
        "title": "Cell Selection",
        "description": "InfiniteTable DataGrid component supports single and multiple cell selection."
      },
      "excerpt": "To use multi-cell selection, you need to configure the `<DataSource />` component with `selectionMode=\"multi-cell\"` - see <DPropLink name=\"selectionMode\" /> for details. For selecting rows, see the [Row Selection](/docs/learn/selection/row-selection) page.",
      "readingTime": "4 min read",
      "content": "\nTo use multi-cell selection, you need to configure the `<DataSource />` component with `selectionMode=\"multi-cell\"` - see <DPropLink name=\"selectionMode\" /> for details. For selecting rows, see the [Row Selection](/docs/learn/selection/row-selection) page.\n\n```tsx title=\"Configuring the selection mode\"\n<DataSource selectionMode=\"multi-cell\" />\n\n// can be \"single-row\", \"multi-row\", \"multi-cell\" or false\n```\n\n<Sandpack title=\"Multiple cell selection example\">\n\n<Description>\n\nClick cells in the grid to add to the selection.\n\nUse `Shift+Click` to select a range of cells and `Cmd/Ctrl+Click` to add single cells to the selection.\n\n</Description>\n\n```ts file=\"./cell-selection-default-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Using default selection\n\nYou can specify a default value for cell selection by using the <DPropLink name=\"defaultCellSelection\" /> prop.\n\n```tsx title=\"Using default selection\"\n\nconst defaultCellSelection = {\n  defaultSelection: false,\n  selectedCells: [\n    [3, \"stack\"], // rowId + colId\n    [5, \"stack\"], // rowId + colId\n    [0, \"firstName\"], // rowId + colId\n  ]\n}\n\n<DataSource\n  selectionMode=\"multi-cell\"\n  defaultCellSelection={defaultCellSelection}\n/>\n```\n\n<Note>\n\nCell selection uses `[rowId, colId]` cell descriptors to identify cells to be marked as selected or deselected - read more in the [Cell selection format](#cell-selection-format).\n\n</Note>\n\n<Sandpack title=\"Multiple cell selection with a default selection value\">\n\n<Description>\n\nBy default some cells are already selected in the grid below, by using the <DPropLink name=\"defaultCellSelection\" /> prop on the `<DataSource />` component.\n\n</Description>\n\n```ts file=\"./cell-selection-default-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nWhe you're using cell selection with or without any default value (via the <DPropLink name=\"defaultCellSelection\" />), you're using an uncontrolled prop. This means that the selection state is managed by the `<DataSource />` component and not by you. If you want to control the selection state yourself, you can use the controlled <DPropLink name=\"cellSelection\" /> prop instead - see [Using controlled selection](#using-controlled-selection) for details.\n\n## Cell selection format\n\nThe <DPropLink name=\"cellSelection\" /> prop is an object with the following shape:\n\n- `defaultSelection` - `boolean` - whether or not cells are selected by default.\n- either:\n  - `selectedCells`: `[rowId, colId][]` - an array of cells that should be selected (this is combined with `defaultSelection: false`)\n- or\n  - `deselectedCells`: `[rowId, colId][]` - an array of cells that should be deselected (this is combined with `defaultSelection: true`)\n\n<Note>\n\nWhen `defaultSelection` is `true`, you will only need to specify the `deselectedCells` prop.\n\nAnd when `defaultSelection` is `false`, you will only need to specify the `selectedCells` prop.\n\n</Note>\n\nIn this way, you can either specify which cells should be selected or which cells should be deselected - and have a default that matches the most common case.\n\n<Note>\n\nThe `selectedCells`/`deselectedCells` are arrays of `[rowId, colId]` tuples. The `rowId` is the `id` of the row (<DPropLink name=\"primaryKey\" code={false}>the primary key</DPropLink>), and the `colId` is the `id` of the column (the identifier of the column in the <PropLink name=\"columns\" /> prop).\n\n</Note>\n\nThe following scenarios are all possible:\n\n```tsx title=\"Just a few specified cells are selected\"\nconst defaultCellSelection = {\n  defaultSelection: false,\n  selectedCells: [\n    ['id2', 'stack'],\n    ['id2', 'stack'],\n    ['id0', 'firstName'],\n  ],\n};\n```\n\n```tsx title=\"Everything is selected, except a few cells\"\nconst defaultCellSelection = {\n  defaultSelection: true,\n  deselectedCells: [\n    ['row2', 'stack'],\n    ['row3', 'stack'],\n    ['row5', 'firstName'],\n  ],\n};\n```\n\n### Using wildcards for selection\n\nIt's also possible to use wildcards for selecting cells. This is useful if you want to select all cells in a column, or all cells in a row.\n\n```tsx title=\"Selecting all cells in a column\"\nconst defaultCellSelection = {\n  defaultSelection: false,\n  selectedCells: [\n    ['*', 'stack'],\n    ['row2', 'firstName'],\n  ],\n};\n```\n\n```tsx title=\"Selecting all cells in a row\"\nconst defaultCellSelection = {\n  defaultSelection: false,\n  selectedCells: [\n    ['row1', '*'],\n    ['row2', 'firstName'],\n  ],\n};\n```\n\n```tsx title=\"Selecting everything except a column\"\nconst defaultCellSelection = {\n  defaultSelection: true,\n  deselectedCells: [['*', 'stack']],\n};\n```\n\n## Using controlled selection\n\nWhen using the controlled <DPropLink name=\"cellSelection\" /> you have to update the value of the property yourself, by listening to the <DPropLink name=\"onCellSelectionChange\" /> event.\n\n<Sandpack title=\"Using controlled cell selection\" size=\"lg\">\n\n<Description>\n\nThis example shows how to use the <DPropLink name=\"onCellSelectionChange\" /> callback prop to listen to changes to the controlled <DPropLink name=\"cellSelection\" /> prop on the `<DataSource />` component.\n\n</Description>\n\n```ts file=\"./controlled-cell-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Using the Cell Selection API\n\nThe `<DataSource />` component also exposes a [Cell Selection API](/docs/reference/cell-selection-api), which you can use to select and deselect cells programmatically.\n\n<Sandpack title=\"Using the CellSelectionAPI to select a column\" size=\"lg\">\n\n```ts file=\"$DOCS/reference/datasource-props/controlled-cell-selection-with-api-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/selection/row-selection": {
      "filePath": "/docs/learn/selection/row-selection",
      "routePath": "/docs/learn/selection/row-selection",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/selection/row-selection.page.md",
      "fileName": "row-selection.page.md",
      "folderPath": "/docs/learn/selection/",
      "frontmatter": {
        "title": "Row Selection",
        "description": "InfiniteTable DataGrid component supports single and multiple row selection, including checkbox column selection and lazy rows selection"
      },
      "excerpt": "`InfiniteTable` offers support for both single and multiple row selection. For selecting cells, see the [Cell Selection](/docs/learn/selection/cell-selection) page.",
      "readingTime": "11 min read",
      "content": "\n`InfiniteTable` offers support for both single and multiple row selection. For selecting cells, see the [Cell Selection](/docs/learn/selection/cell-selection) page.\n\n```tsx title=\"Configure the selection mode on the DataSource component\"\n<DataSource selectionMode=\"single-row\" />\n\n// can be \"single-row\", \"multi-row\", \"multi-cell\" or false\n```\n\nMultiple row selection allows people to select rows just like they would in their MacOS Finder app, by clicking desired rows and using the cmd/shift keys as modifiers.\n\nThe DataGrid also offers support for **checkbox selection**, which is another easy way of interacting with grid rows, especially when grouped or nested data is used.\n\nRow selection (both single and multiple) is driven by the <DPropLink name=\"rowSelection\" /> prop, which will contain **primary keys of the selected rows**.\n\n<Note>\n\nThe value or values you specify for row selection are primary keys of the rows in the DataGrid.\n\nRow selection is defined on the `DataSource` component, so that's where you specify your <DPropLink name=\"rowSelection\" /> prop (or the uncontrolled version of it, namely <DPropLink name=\"defaultRowSelection\" /> and also the callback prop of <DPropLink name=\"onRowSelectionChange\" />).\n\n</Note>\n\n<Note>\n\nYou can explicitly specify the <DPropLink name=\"selectionMode\" /> as `\"single-row\"` or `\"multi-row\"` (or `false`) but it will generally be derived from the value of your <DPropLink name=\"rowSelection\" />/<PropLink name=\"defaultRowSelection\" /> prop.\n\n</Note>\n\n# Single Row Selection\n\nThis is the most basic row selection - in this case the <DPropLink name=\"rowSelection\" /> prop (or the uncontrolled variant <DPropLink name=\"defaultRowSelection\" />) will be the primary key of the selected row (a string or a number or `null` for no selection).\n\n```ts {4}\n<DataSource<DATA_TYPE>\n  primaryKey=\"id\"\n  data={[...]}\n  defaultRowSelection={4}\n>\n  <InfiniteTable {...} />\n</DataTable>\n\n```\n\n<Sandpack title=\"Uncontrolled single row selection\">\n\n<Description>\n\nSingle row selection example - click a row to see selection change. You can also use your keyboard - press the spacebar to select/deselect a row.\n\n</Description>\n\n```ts file=\"$DOCS/reference/default-single-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nRow selection is changed when the user clicks a row. Clicking a row selects it and clicking it again keeps the row selected. For deselecting the row with the mouse use `cmd`/`ctrl` + click.\n\n## Keybord support\n\nYou can also use your keyboard to select a row, as by default, <PropLink name=\"keyboardSelection\" /> is `true`. Using your keyboard, navigate to the desired row and then press the spacebar to select it. Pressing the spacebar again on the selected row will deselect it.\n\n<Note>\n\nBoth `cell` and `row` <PropLink name=\"keyboardNavigation\" /> are available and you can use either of them to perform row selection.\n\n</Note>\n\n## Controlled single row selection\n\nRow selection can be used as a <DPropLink name=\"rowSelection\" code={false}>controlled</DPropLink> or <PropLink name=\"defaultRowSelection\" code={false}>uncontrolled</PropLink> property. For the controlled version, make sure you also define your <DPropLink name=\"onRowSelectionChange\" /> callback prop to update the selection.\n\n<Sandpack title=\"Controlled single row selection\">\n\n<Description>\n\nThis example uses <DPropLink name=\"onRowSelectionChange\" /> callback prop to update the controlled <DPropLink name=\"rowSelection\" />\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-single-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n# Multi Row Selection\n\nYou can configure multiple selection for rows so users can interact with it through clicking around or via a checkbox selection column.\n\n## Using your mouse and keyboard to select rows\n\nIf you're using checkboxes for selection, users will be selecting rows via click or click + `cmd`/`ctrl` and `shift` keys, just like they are used to in their native Finder/Explorer applications.\n\n### Mouse interactions\n\nFor selecting with the mouse, the following gestures are supported (we tried to exactly replicate the logic/behaviour from MacOS Finder app, so most people should find it really intuitive):\n\n- clicking a row (with no modifier keys) will select that row, while clearing any existing selection\n- click + `cmd`/`ctrl` modifier key will toggle the selection for the clicked row while keeping any other existing selection. So if the row was not selected, it's being added to the current selection, while if the row was already selected, it's being removed from the selection\n- click + `shift` modifier key will perform a multi selection, starting from the last selection click where the `shift` key was not used.\n\n<Sandpack title=\"Multi row selection\">\n\n<Description>\n\nUse your mouse to select multiple rows. Expect click and click + `cmd`/`ctrl`/`shift` modifier keys to behave just like they are in the MacOS Finder app.\n\n</Description>\n\n```ts file=\"$DOCS/reference/default-selection-mode-multi-row-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Keyboard interactions\n\nBy default <PropLink name=\"keyboardSelection\" /> is enabled, so you can use the **spacebar** key to select multiple rows. Using the spacebar key is equivalent to doing a mouse click, so expect the combination of **spacebar** + `cmd`/`ctrl`/`shift` modifier keys to behave just like clicking + the same modifier keys.\n\n<Sandpack title=\"Multi row selection with keyboard support\">\n\n<Description>\n\nUse spacebar + optional `cmd`/`ctrl`/`shift` modifier keys just like you would do clicking + the same modifier keys.\n\n</Description>\n\n```ts file=\"$DOCS/reference/default-selection-mode-multi-row-keyboard-toggle-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nFor selecting all the rows in the table, you can use `cmd`/`ctrl` + `A` keyboard shortcut.\n\n</Note>\n\n## Using a selection checkbox\n\nSelection multiple rows is made easier when there is a checkbox column and even-more-so when there is grouping.\n\nConfiguring checkbox selection is as easy as specifying <PropLink name=\"columns.renderSelectionCheckBox\">renderSelectionCheckBox</PropLink> on any of the columns in the grid. <PropLink name=\"columns.renderSelectionCheckBox\">renderSelectionCheckBox</PropLink> can either be the boolean `true` or a render function that allows the customization of the selection checkbox.\n\n```ts {8}\nconst columns: InfiniteTablePropColumns<Developer> = {\n  id: {\n    field: 'id',\n    defaultWidth: 80,\n  },\n  country: {\n    // show the selection checkbox for this column\n    renderSelectionCheckBox: true,\n    field: 'country',\n  },\n  firstName: {\n    field: 'firstName',\n  },\n};\n```\n\n<Note>\n\nAny column can show a selection checkbox if <PropLink name=\"columns.renderSelectionCheckBox\">column.renderSelectionCheckBox</PropLink> is set to `true`.\n\nThere is nothing prevening you from providing multiple checkbox columns.\n\n</Note>\n\n<Sandpack title=\"Multi row selection with checkbox support\">\n\n<Description>\n\nUse the selection checkboxes to select rows. You can also use the spacebar key (+ optional shift modifier) to modify the selection\n\n</Description>\n\n```ts file=\"$DOCS/reference/default-checkbox-selection-multi-row-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Mouse interactions\n\nThe mouse interactions are the obvious ones you would expect from checkbox selection. Clicking a checkbox will toggle the selection for the correspondign row. Also, clicking the header checkbox will select/deselect all the rows in the table. The selection checkbox in the column header can be in an indeterminate state (when just some of the rows are selected), and when clicking it, it will become checked and select all rows.\n\n<Note>\n\nYou can use <PropLink name=\"columns.renderHeaderSelectionCheckBox\">renderHeaderSelectionCheckBox</PropLink> for a column to customize the checkbox in the column header. If no header selection checkbox is specified, <PropLink name=\"columns.renderSelectionCheckBox\">renderSelectionCheckBox</PropLink> will be used for the column header as well, just like it's used for grid rows.\n\n</Note>\n\n### Keyboard interactions\n\nWhen multi-row selection is configured to use checkboxes, you can still use your keyboard to select rows. Navigate to the desired row (you can have <PropLink name=\"keyboardNavigation\">keyboard navigation</PropLink> active for either cells or rows) and press the spacebar. If the row is not selected it will select it, otherwise it will deselect it.\n\n<Note>\n\nThe only supported modifier key when selecting a row by pressing **spacebar** is the `shift` key - it allows users to extend the selection over multiple rows, which is handy.\n\n</Note>\n\n## Specify a `rowSelection` value\n\nWhen multiple row selection is used, the <DPropLink name=\"rowSelection\" /> prop should be an object that can have the following shape:\n\n```ts\nconst rowSelection = {\n  selectedRows: [3, 6, 100, 23], // those specific rows are selected\n  defaultSelection: false, // while all other rows are deselected by default\n};\n\n// or\nconst rowSelection = {\n  deselectedRows: [3, 6, 100, 23], // those specific rows are deselected\n  defaultSelection: true, // all other rows are selected\n};\n\n// or, for grouped data - this example assumes groupBy=continent,country,city\n\n// for using this form of multi-row selection when you have grouping,\n// you have to specify DataSource.useGroupKeysForMultiRowSelection = true\nconst rowSelection = {\n  selectedRows: [\n    45, // row with id 45 is selected, no matter the group it is nested in\n    ['Europe', 'France'], // all rows in Europe/France are selected\n    ['Asia'], // all rows in Asia are selected\n  ],\n  deselectedRows: [\n    ['Europe', 'France', 'Paris'], // all rows in Paris are deselected\n  ],\n  defaultSelection: false, // all other rows are selected\n};\n```\n\nAs shown above, the `rowSelection.selectedRows` and `rowSelection.deselectedRows` arrays can either contain:\n\n- primary keys of rows (which are usually strings or numbers) - any non-array value inside `rowSelection.selectedRows`/`rowSelection.deselectedRows` is considered an id/primaryKey value for a leaf row in the grouped dataset.\n- arrays of group keys (can be combined with primary keys as well) - those arrays describe the path of the specified selected group. Please note that `rowSelection.selectedRows` can contain certain paths while `rowSelection.deselectedRows` can contain child paths of those paths ... or any other imaginable combination. For this kind of <DPropLink name=\"rowSelection\" />, you need to enable <DPropLink name=\"useGroupKeysForMultiRowSelection\" />.\n\n<Note>\n \nRow Selection only uses primary keys by default, even when you have grouped data.\n\nFor grouping however, you might want to use selection with group keys - for doing that, specify <DPropLink name=\"useGroupKeysForMultiRowSelection\">DataSource.useGroupKeysForMultiRowSelection=true</DPropLink>.\nNote that if you use selection with group keys, the selection will not be relevant/consistent when the <DPropLink name=\"groupBy\" /> changes.\n\nWhen you have both grouping and <DPropLink name=\"lazyLoad\">lazy loading</DPropLink>, <DPropLink name=\"useGroupKeysForMultiRowSelection\" /> must be enabled - read more about it in the note below.\n\n</Note>\n\n<Note>\n\nWhen <DPropLink name=\"lazyLoad\" /> is being used - this means not all available groups/rows have actually been loaded yet in the dataset - we need a way to allow you to specify that those possibly unloaded rows/groups are selected or not. In this case, the `rowSelection.selectedRows`/`rowSelection.deselectedRows` arrays should not have row primary keys as strings/numbers, but rather rows/groups specified by their full path (so <DPropLink name=\"useGroupKeysForMultiRowSelection\" /> should be set to `true`).\n\n```ts {6}\n// this example assumes groupBy=continent,country,city\nconst rowSelection = {\n  selectedRows: [\n    // row with id 45 is selected - we need this because in the lazyLoad scenario,\n    // not all parents might have been made available yet\n    ['Europe','Italy', 'Rome', 45],\n    ['Europe','France'], // all rows in Europe/France are selected\n    ['Asia'] // all rows in Asia are selected\n  ]\n  deselectedRows: [\n    ['Europe','Italy','Rome'] // all rows in Rome are deselected\n    // but note that row with id 45 is selected, so Rome will be\n    // rendered with an indeterminate selection state\n  ],\n  defaultSelection: false // all other rows are selected\n}\n```\n\nIn the example above, we know that there are 3 groups (`continent`, `country`, `city`), so any item in the array that has a 4th element is a fully specified leaf node. While lazy loading, we need this fully specified path for specific nodes, so we know which group rows to render with indeterminate selection.\n\n</Note>\n\n### Controlled selection with checkbox column\n\nWhen using the controlled <DPropLink name=\"rowSelection\" />, make sure to specify the <DPropLink name=\"onRowSelectionChange\" /> callback prop to update the selection accordingly as a result of user interaction.\n\n<Sandpack title=\"Multi row checkbox selection with grouping\" >\n\n<Description>\n\nThis example shows how you can use multiple row selection with a predefined controlled value.\n\nGo ahead and select some groups/rows and see the selection value adjust.\n\nThe example also shows how you can use the `InfiniteTableApi` to retrieve the actual ids of the selected rows.\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-multi-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Multi Selection with Lazy Load and Grouping\n\nProbably the most complex use-case for multi selection (with checkbox) is the combination of grouping and lazy-loading.\n\nIn this scenario, not all groups and/or rows are loaded at a given point in time, but we need to be able to know how to render each checkbox for each group - either checked, unchecked or indeterminate, all this depending on whether all children, at any nesting levels are selected or not.\n\nIn order to make this possible, the <DPropLink name=\"rowSelection\" /> value will only contain arrays (and not individual primary keys) in the `selectedRows` and `deselectedRows` arrays and the DataSource will be configured with <DPropLink name=\"useGroupKeysForMultiRowSelection\" />.\n\n<Sandpack title=\"Multi row checkbox selection with lazy data and grouping\" >\n\n<Description>\n\nThe `DataSet` has lazy loading and grouping.\n\nThe selection uses group keys (see <DPropLink name=\"useGroupKeysForMultiRowSelection\" />), so it can specify as selected even rows/groups that have not been loaded yet.\n\nNote in the example below that some of the group rows are partly selected, even if the leaf rows which are specified as selected in the <DPropLink name=\"rowSelection\" /> are not yet loaded.\n\n</Description>\n\n```ts file=\"$DOCS/reference/lazy-multi-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/sorting/multiple-sorting": {
      "filePath": "/docs/learn/sorting/multiple-sorting",
      "routePath": "/docs/learn/sorting/multiple-sorting",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/sorting/multiple-sorting.page.md",
      "fileName": "multiple-sorting.page.md",
      "folderPath": "/docs/learn/sorting/",
      "frontmatter": {
        "title": "Multiple Sorting",
        "description": "Docs and examples on applying multiple sorting to the DataSource for Infinite Table DataGrid"
      },
      "excerpt": "By default, if you don't specify otherwise, the DataGrid is configured with single sorting. For multiple sorting, you need to specify the sorting information as an array:",
      "readingTime": "6 min read",
      "content": "\nBy default, if you don't specify otherwise, the DataGrid is configured with single sorting. For multiple sorting, you need to specify the sorting information as an array:\n\n```tsx\n<DataSource<Developer>\n  primaryKey=\"id\"\n  data={data}\n  // we want an array here\n  defaultSortInfo={[]}\n>\n  <InfiniteTable<Developer> columns={columns} />\n</DataSource>\n```\n\n<Note>\n\nAn empty array means no sorting. However, it does specify that sorting is configured as multiple sorting, so it's useful to set it to `[]`\n\n</Note>\n\n<Sandpack title=\"Configuring multiple sorting with uncontrolled behavior\">\n\n<Description>\n\nTry clicking the `age` column and then the `firstName` column.\n\nIf the multi-sort behavior is `replace`, clicking the second column will remove the sort from the first column.\nIn order for the sorting to be additive, even if the behavior is `replace`, use the `Ctrl`/`Cmd` key while clicking the column header.\n\nIf the multi-sort behavior is `append`, clicking the second column will add it to the sort.\n\n</Description>\n\n```ts file=\"local-multi-sorting-example-defaults-with-local-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n## User interaction and multi sort behavior\n\nWhen `InfiniteTable` is configured with multiple sorting there are two supported behaviors:\n\n- `append` - when this behavior is used, clicking a column header adds that column to the alredy existing sort. If the column is already sorted, the sort direction is reversed. In order to remove a column from the sort, the user needs to click the column header in order to toggle sorting from ascending to descending and then to no sorting.\n- `replace` - the default behavior - a user clicking a column header removes any existing sorting and sets that column as sorted. In order to add a new column to the sort, the user needs to hold the `Ctrl/Cmd` key while clicking the column header.\n\n<Note>\n\nThe behavior of multiple sorting is configured via the <PropLink name=\"multiSortBehavior\" /> - the default value for this prop is `\"replace\"`.\n\n‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è The <PropLink name=\"multiSortBehavior\" /> prop is defined on the `InfiniteTable` component, not on the `DataSource` component - as it's the `InfiniteTable` that handles user interaction, even though the `DataSource` does the actual sorting.\n\n</Note>\n\n### Multi sort behavior - `append`\n\n#### Scenario 1\n\n- user clicks a column header to sort by that column - an ascending sort is added, and the column header will contain the sort index - `1`\n- if user clicks the same column, the sort direction is reversed - sort index is preserved as `1`, but descending order is set.\n- user clicks the same column again - the column is removed from the sort.\n\n#### Scenario 2\n\n- user clicks a column header to sort by that column - an ascending sort is added, and the column header will contain the sort index - `1`\n- user clicks another column - the new column is added to the sort, with ascending order and sort index `2`. The initial clicked column is still the sorted, and that sort is applied first. For equal values on column `1`, the sort by column `2` is applied.\n- user clicks column `2` again - the sort direction is reversed for the second column. So now the sort order is `1` ascending, `2` descending.\n- user clicks column `2` again - the column is removed from the sort. The sorting now only contains the first column, in ascending order.\n\n### Multi sort behavior - `replace`\n\n<Note>\n\nThis is the <PropLink code={false} name=\"multiSortBehavior\">default behavior</PropLink> for multiple sorting.\n</Note>\n\nIn the `replace` behavior, clicking a column header will remove any existing sorting and set that specific column as sorted.\n\nIn order to add a new column to the sort, the user needs to hold the `Ctrl`/`Cmd` key while clicking a column header. Holding the `Ctrl`/`Cmd` key while clicking a column header results in the same behavior as the `append`.\n\n## Controlled and uncontrolled sorting\n\nAs noted above, for multiple sorting, you need to specify an array of objects - see <TypeLink name=\"DataSourceSingleSortInfo\" /> for more on the shape of those objects:\n\n```ts\n// sort by age in descending order, then by `firstName` in ascending order\nsortInfo = [\n  { field: 'age', type: 'number', dir: -1 },\n  { field: 'firstName', dir: 1 },\n];\n\n// no sorting\nsortInfo = [];\n```\n\nThe simplest way to use multiple sorting is via the uncontrolled <DPropLink name=\"defaultSortInfo\" /> prop. Specify an empty array as the default value, and multiple sorting will be enabled.\n\nThis allows sorting by multiple fields (to which columns are bound) - you can specify however many you want - so when sorting two objects in the `DataSource`, the first `sortInfo` is used to compare the two, and then, on equal values, the next `sortInfo` is used and so on.\n\n<Note>\n\nIf you want to change the sorting from code, after the component is mounted, you need to use the controlled <DPropLink name=\"sortInfo\" /> prop.\n\nIn this case, make sure you update the <DPropLink name=\"sortInfo\" /> prop as a result of user interaction, by using the <DPropLink name=\"onSortInfoChange\" /> callback.\n\n</Note>\n\n<Sandpack title=\"Local + uncontrolled multi-sorting example\">\n\n<Description>\n\nThis table allows sorting multiple columns - initially the `country` column is sorted in descending order and the `salary` column is sorted in ascending order. `Ctrl`/`Cmd` + click the `salary` column to toggle the column sort to descending. `Ctrl`/`Cmd` clicking it a second time will remove it from the sort altogether.\n\n</Description>\n\n```ts file=\"local-uncontrolled-multi-sorting-example-with-remote-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Remote + uncontrolled multi-sorting example\">\n\n```ts file=\"remote-uncontrolled-multi-sorting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf you use uncontrolled sorting via <DataSourcePropLink name=\"defaultSortInfo\" /> there's no way to switch between single and multiple sorting after the component is mounted. If you have this use-case, you need to use the controlled <DataSourcePropLink name=\"sortInfo\" /> prop.\n\n</Note>\n\n## Remote Sorting\n\nSorting remotely makes a lot of sense when using a function as your <DataSourcePropLink name=\"data\" /> source. Whenever the sort information is changed, the function will be called with all the information needed to retrieve the data from the remote endpoint.\n\n<Note>\n\nFor remote sorting, make sure you specify <DataSourcePropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=true</DataSourcePropLink> - if you don't, the data will also be sorted locally in the browser (which most of the times will be harmless, but it means wasted CPU cycles).\n\n</Note>\n\n<Sandpack title=\"Remote + controlled multi-sorting example\">\n\n```ts file=\"remote-controlled-multi-sorting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nIn the example above, remote and controlled sorting are combined - because `shouldReloadData.sortInfo=true` is specified, the `<DataSource />` will call the `data` function whenever sorting changes, and will pass in the `dataParams` object that contains the sort information.\n"
    },
    "/docs/learn/sorting/overview": {
      "filePath": "/docs/learn/sorting/overview",
      "routePath": "/docs/learn/sorting/overview",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/sorting/overview.page.md",
      "fileName": "overview.page.md",
      "folderPath": "/docs/learn/sorting/",
      "frontmatter": {
        "title": "Sorting",
        "description": "Docs and examples on sorting the DataSource for Infinite Table DataGrid"
      },
      "excerpt": "`InfiniteTable` comes with multiple sorting behaviours, which are described below.",
      "readingTime": "10 min read",
      "content": "\n`InfiniteTable` comes with multiple sorting behaviours, which are described below.\n\nBoth [single sorting](/docs/learn/sorting/single-sorting) and [multiple sorting](/docs/learn/sorting/multiple-sorting) are supported via the <DataSourcePropLink name=\"sortInfo\" /> and <DataSourcePropLink name=\"defaultSortInfo\" /> props.\n\n### Single Sorting\n\nFor [single sorting](/docs/learn/sorting/single-sorting), <DataSourcePropLink name=\"sortInfo\" /> (or the uncontrolled <DataSourcePropLink name=\"defaultSortInfo\" />) should an object like\n\n```ts\n// sort by `firstName`, in ascending order\nsortInfo = { field: 'firstName', dir: 1 };\n```\n\nor you can use\n\n```ts\n// no sorting\nsortInfo = null;\n```\n\nfor explicit no sorting.\n\n<Note>\n\nWhen you use controlled sorting via <DataSourcePropLink name=\"sortInfo\" />, make sure you also listen to <DataSourcePropLink name=\"onSortInfoChange\" /> for changes, to get notifications when sorting is changed by the user. Also, for controlled sorting, it's your responsibility to sort the data - read bellow in the [controlled and uncontrolled section](#controlled-and-uncontrolled-sorting).\n\n</Note>\n\nThe sort information object has the following shape (see <TypeLink name=\"DataSourceSingleSortInfo\" /> for details):\n\n- `dir` - `1 | -1` - the direction of the sorting\n- `field?` - `keyof DATA_TYPE` - the field to sort by - optional.\n- `id?` - `string` - if you don't sort by a field, you can specify an id of the column this sorting is bound to. Note that columns have a <PropLink name=\"columns.valueGetter\">valueGetter</PropLink>, which will be used when doing local sorting and the column is not bound to an exact field.\n- `type?` - the sort type - one of the keys in <DataSourcePropLink name=\"sortTypes\"/> - eg `\"string\"`, `\"number\"`, `\"date\"` - will be used for local sorting, to provide the proper comparison function.\n\n<Sandpack title=\"Local + uncontrolled single-sorting example\">\n\n<Description>\n\nThis example shows initial sorting by `salary` in ascending order. Click the header of the `salary` column to sort in descending order and then click it again to unsort.\n\n</Description>\n\n```ts file=\"local-uncontrolled-single-sorting-example-with-local-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nBy default, columns in the InfiniteTable DataGrid are sortable.\n\nIf you want to disable column sorting for all columns, use <PropLink name=\"columnDefaultSortable\">columnDefaultSortable=false</PropLink> and then you can turn it back on per-column, by setting <PropLink name=\"columns.sortable\">column.defaultSortable=true</PropLink>.\n\n</Note>\n\n### Multiple Sorting\n\nIf you want to use [multiple sorting](/docs/learn/sorting/multiple-sorting), specify an array of objects like\n\n```ts\n// sort by age in descending order, then by `firstName` in ascending order\nsortInfo = [\n  { field: 'age', type: 'number', dir: -1 },\n  { field: 'firstName', dir: 1 },\n];\n\n// no sorting\nsortInfo = [];\n```\n\nThis allows sorting by multiple fields (to which columns are bound) - you can specify however many you want - so when sorting two objects in the `DataSource`, the first `sortInfo` is used to compare the two, and then, on equal values, the next `sortInfo` is used and so on.\n\n<Sandpack title=\"Local + uncontrolled multi-sorting example\">\n\n<Description>\n\nThis table allows sorting multiple columns - initially the `country` column is sorted in descending order and the `salary` column is sorted in ascending order. Click the `salary` column to toggle the column sort to descending. Clicking it a second time will remove it from the sort altogether.\n\n</Description>\n\n```ts file=\"local-uncontrolled-multi-sorting-example-with-remote-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Remote + uncontrolled multi-sorting example\">\n\n```ts file=\"remote-uncontrolled-multi-sorting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf you use uncontrolled sorting via <DataSourcePropLink name=\"defaultSortInfo\" /> there's no way to switch between single and multiple sorting after the component is mounted. If you have this use-case, you need to use the controlled <DataSourcePropLink name=\"sortInfo\" /> prop.\n\n</Note>\n\n## Understanding local and remote sorting\n\nSorting can be done both locally in the browser and remotely on the server. When you want sorting to be performed remotely on the server, a change on the <DPropLink name=\"sortInfo\" /> should trigger a reload of the datasource. In order to achieve this, you need to specify <DPropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=true</DPropLink>.\n\nPossible values for <DPropLink name=\"shouldReloadData.sortInfo\"/> are `false` (sorting will be performed locally and won't trigger a reload of the <DPropLink name=\"data\" /> source) and `true` (sorting will be performed remotely and will trigger a reload of the data).\n\nThis allows you fine-grained control on how sorting is done, either in the client or on the server.\n\n### Uncontrolled sorting\n\nIf you use uncontrolled sorting (namely you don't care about updating the <DPropLink name=\"sortInfo\" /> yourself as a result of user interaction - via <DPropLink name=\"onSortInfoChange\" />) - then by default, the <DPropLink name=\"shouldReloadData.sortInfo\" /> is `false` unless you specify otherwise.\n\nYou can initially render the component with no sort state or you can specify a default sorting state, via the uncontrolled prop <DPropLink name=\"defaultSortInfo\" />.\n\n```tsx\n// initially render the component with ascending sorting on `firstName` field\n// also, note this is an array, so multiple sorting will be enabled\nconst defaultSortInfo = [{ field: 'firstName', dir: 1 }];\n\n<DataSource<Developer>\n  primaryKey=\"id\"\n  data={data}\n  defaultSortInfo={defaultSortInfo}\n>\n  <InfiniteTable />\n</DataSource>;\n```\n\nIf your data is remote and you want the sorting to happen on the backend, you can still use uncontrolled sorting, but you need to specify <DPropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=true</DPropLink>.\n\nUsing remote sort mode will trigger a call to the <DPropLink name=\"data\" /> function whenever sorting changes, so you can re-fetch the data from the backend, according to the new `sortInfo`.\n\nWhe `local` uncontrolled sorting is used, the `<DataSource />` sorts the data internally, based on the existing sorting information. To start with a specific `sortInfo`, use the <DataSourcePropLink name=\"defaultSortInfo\" /> prop. As the user interacts with the table, <DataSourcePropLink name=\"onSortInfoChange\" /> is being called with updated sort info and the `<DataSource />` continues to sort the data accordingly.\n\n<Note>\n\nThe <DataSourcePropLink name=\"defaultSortInfo\" /> prop is an uncontrolled prop, so it's all managed inside the `<DataSource />` component and you can't change it from the outside. If you need to control it from outside the component, use the <DataSourcePropLink name=\"sortInfo\" code={false}>controlled sortInfo</DataSourcePropLink> prop - read the next section for more details\n\n</Note>\n\n### Controlled Sorting\n\nWhen you use the controlled <DataSourcePropLink name=\"sortInfo\" /> prop, by default the <DPropLink name=\"shouldReloadData.sortInfo\" /> is set to `true`, unless you specify otherwise.\n\nAlso, be aware that when the user interacts with the DataGrid when controlled sorting is configured, the <DPropLink name=\"sortInfo\" /> prop will not update automatically - you need to listen to <DPropLink name=\"onSortInfoChange\" /> and update the <DPropLink name=\"sortInfo\" /> yourself.\n\nJust like with uncontrolled sorting, updating the controlled <DPropLink name=\"sortInfo\" /> when `shouldReloadData.sortInfo` is `true`, will trigger a call to the <DPropLink name=\"data\" /> function, so new sorted data can be re-fetched.\n\n<Note>\n\nWhen the controlled <DPropLink name=\"sortInfo\" /> is combined with <DPropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=false</DPropLink>, the `<DataSource />` will sort the data internally, on any changes of the sorting information.\n\nBut remember it's your responsibility to update the <DPropLink name=\"sortInfo\" /> prop when the user interacts with the DataGrid.\n\n</Note>\n\nBoth controlled <DataSourcePropLink name=\"sortInfo\" /> and uncontrolled <DataSourcePropLink name=\"defaultSortInfo\" /> work in combination with <DataSourcePropLink name=\"onSortInfoChange\" /> - use it to be notified when sorting changes, so you can react and update your app accordingly if needed.\n\n### Local Sorting\n\nWhen you use uncontrolled sorting locally, the `<DataSource />` will sort the data internally, based on the <DataSourcePropLink name=\"defaultSortInfo\" /> prop. Local sorting is available for any configured <DataSourcePropLink name=\"data\" /> source - be it an array or a function that returns a promise.\n\n<Note>\n\nYou can use <DataSourcePropLink name=\"onDataParamsChange\" />, which is called whenever any of the sorting, filtering, grouping or pivoting information changes.\n\n</Note>\n\n<Sandpack title=\"Local uncontrolled sorting + local data\">\n\n```ts file=\"local-uncontrolled-single-sorting-example-with-remote-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Local uncontrolled sorting + remote data\">\n\n```ts file=\"local-uncontrolled-single-sorting-example-with-remote-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Remote Sorting\n\nSorting remotely makes a lot of sense when using a function as your <DataSourcePropLink name=\"data\" /> source. Whenever the sort information is changed, the function will be called with all the information needed to retrieve the data from the remote endpoint.\n\n<Note>\n\nFor remote sorting, make sure you specify <DataSourcePropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=true</DataSourcePropLink> - if you don't, the data will also be sorted locally in the browser (which most of the times will be harmless, but it means wasted CPU cycles).\n\n</Note>\n\n<Sandpack title=\"Remote + controlled multi-sorting example\">\n\n```ts file=\"remote-controlled-multi-sorting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nIn the example above, remote and controlled sorting are combined - because `shouldReloadData.sortInfo=true` is specified, the `<DataSource />` will call the `data` function whenever sorting changes, and will pass in the `dataParams` object that contains the sort information.\n\n## Custom Sort Functions with `sortTypes`\n\nBy default, all columns are sorted as strings, even if they contain numeric values. To make numeric columns sort as numbers, you need to specify <PropLink name=\"columns.dataType\" code={false}>a `dataType` for the column</PropLink>, or, <PropLink name=\"columns.sortType\" code={false}>a column `sortType`</PropLink>.\n\nThere are 3 `dataType` values that can be used:\n\n- `\"string\"`\n- `\"number\"`\n- `\"date\"`\n\nEach dataType has its own sorting function and its own filtering operators & functions.\n\nSorting works in combination with the <PropLink name=\"sortTypes\" /> property, which is an object with keys being sort types and values being functions that compare two values of the same type.\n\n```ts\nconst sortTypes = {\n  string: (a, b) => a.localeCompare(b),\n  number: (a, b) => a - b,\n  date: (a, b) => a - b,\n};\n```\n\nThose are the three sort types supported by default.\n\n<Note>\n\nThe functions specified in the <PropLink name=\"sortTypes\" /> object need to always sort data in ascending order.\n\n</Note>\n\n<Note>\n\nA column can choose to use a specific <PropLink name=\"columns.sortType\" />, in which case, for local sorting, the corresponding sort function will be used, or, it can simply specify a <PropLink name=\"columns.dataType\">dataType</PropLink> and the `sortType` with the same name will be used (when no explicit <PropLink name=\"columns.sortType\">sortType</PropLink> is defined).\n\nTo conclude, the <PropLink name=\"columns.dataType\">dataType</PropLink> of a column will be used as the <PropLink name=\"columns.sortType\">sortType</PropLink> and <PropLink name=\"columns.filterType\">filterType</PropLink>, when those are not explicitly specified.\n\n</Note>\n\n<Sandpack  title=\"Custom sort by color - magenta will come first\">\n\n```ts file=\"$DOCS/reference/datasource-props/sortTypes-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIn this example, for the `\"color\"` column, we specified <PropLink name=\"columns.sortType\">column.sortType=\"color\"</PropLink> - we could have passed that as `column.dataType` instead, but if the grid had filtering, it wouldn't know what filters to use for \"color\" - so we used <PropLink name=\"columns.sortType\">column.sortType</PropLink> to only change how the data is sorted.\n\n</Note>\n\n<Note>\n\nWhen you provide a <DataSourcePropLink name=\"defaultSortInfo\"/> prop and the sorting information uses a custom <DataSourcePropLink name=\"sortTypes\">sortType</DataSourcePropLink>, make sure you specify that as the `type` property of the sorting info object.\n\n```tsx\ndefaultSortInfo={{\n  field: 'color',\n  dir: 1,\n  // note this custom sort type\n  type: 'color',\n}}\n```\n\nYou will need to have a property for that type in your <DataSourcePropLink name=\"sortTypes\"/> object as well.\n\n```tsx\nsortTypes={{\n  color: (a, b) => //...\n}}\n```\n\n</Note>\n\n## Replacing the sort function\n\nWhile there are many ways to customise sorting, including the <DPropLink name=\"sortTypes\" /> mentioned above, you might want to completely replace the sorting function used by the `<DataSource />` component.\n\nYou can do this by configuring the <DPropLink name=\"sortFunction\" /> prop.\n\n```tsx\nconst sortFunction = (sortInfo, dataArray) => {\n  // sort the dataArray according to the sortInfo\n  // and return the sorted array\n  // return sortedDataArray;\n};\n<DataSource<T> sortFunction={sortFunction} />;\n```\n\nThe function specified in the <DPropLink name=\"sortFunction\" /> prop is called with the <DPropLink name=\"sortInfo\" /> as the first argument and the data array as the second. It should return a sorted array, as per the <DPropLink name=\"sortInfo\" /> it was called with.\n\n<Note>\n\nWhen <DPropLink name=\"sortFunction\" /> is specified, <DPropLink name=\"shouldReloadData.sortInfo\" /> will be forced to `false`, as the sorting is done in the browser.\n</Note>\n\n<Sandpack  title=\"Using a custom sortFunction\">\n\n```ts file=\"$DOCS/reference/datasource-props/local-sortFunction-single-sorting-example-with-local-data-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/sorting/single-sorting": {
      "filePath": "/docs/learn/sorting/single-sorting",
      "routePath": "/docs/learn/sorting/single-sorting",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/sorting/single-sorting.page.md",
      "fileName": "single-sorting.page.md",
      "folderPath": "/docs/learn/sorting/",
      "frontmatter": {
        "title": "Single Sorting",
        "description": "Docs and examples on single-column sorting for Infinite Table DataGrid"
      },
      "excerpt": "By default, the Infinite Table is sortable - clicking a column will sort the grid by that column. Clicking again will reverse the sort and a third click on the column removes the sort altogether.",
      "readingTime": "10 min read",
      "content": "\nBy default, the Infinite Table is sortable - clicking a column will sort the grid by that column. Clicking again will reverse the sort and a third click on the column removes the sort altogether.\n\nAt any point, clicking another column header removes any existing column sort and performs a new sort by the clicked column.\n\n<Note>\n\nThis is called single sorting - only one column can be sorted at a time.\n\nTechnically, it's the `<DataSource />` that's being sorted, not the `<InfiniteTable />` component.\n\n</Note>\n\n<Sandpack title=\"Default behavior is single sorting.\">\n\n<Description>\n\nBy default, clicking a column header sorts the column.\n\n</Description>\n\n```ts file=\"local-single-sorting-example-defaults-with-local-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Apply a default sort order\n\nYou can specify a default sort order by using the <DataSourcePropLink name=\"defaultSortInfo\" /> prop - specify an object like\n\n```ts\n// sort by `firstName`, in ascending order\ndefaultSortInfo = { field: 'firstName', dir: 1 };\n```\n\n<Note>\n\n<DataSourcePropLink name=\"defaultSortInfo\" /> is an uncontrolled property, so updating the sorting by clicking a column header does not require you to respond to user actions via the <DataSourcePropLink name=\"onSortInfoChange\" />.\n\nUncontrolled sorting is managed internally by the `<DataSource />` component, so you don't need to worry about it.\n\nFor controlled sorting, make sure you use the <DataSourcePropLink name=\"sortInfo\" /> prop and the <DataSourcePropLink name=\"onSortInfoChange\" /> callback.\n\n</Note>\n\n<Sandpack title=\"Local + uncontrolled single-sorting example\">\n\n<Description>\n\nThe `age` column is sorted in ascending order.\n\n</Description>\n\n```ts file=\"local-uncontrolled-single-sorting-example-with-local-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Controlled sorting\n\nFor controlled, single sorting, use the <DataSourcePropLink name=\"sortInfo\" /> as an object like this:\n\n```ts\n// sort by `firstName`, in ascending order\nsortInfo = { field: 'firstName', dir: 1 };\n```\n\nor you can specify `null` for explicit no sorting\n\n```ts\n// no sorting\nsortInfo = null;\n```\n\n<Note>\n\nWhen you use controlled sorting via <DataSourcePropLink name=\"sortInfo\" />, make sure you also listen to <DataSourcePropLink name=\"onSortInfoChange\" /> for changes, to get notifications when sorting is changed by the user. Also, for controlled sorting, it's your responsibility to sort the data - read bellow in the [controlled and uncontrolled section](#controlled-and-uncontrolled-sorting).\n\n</Note>\n\n## Describing the sort order\n\nTo describe the sorting order, you have to use an object that has the following shape:\n\n- `dir` - `1 | -1` - the direction of the sorting\n- `field?` - `keyof DATA_TYPE` - the field to sort by - optional.\n- `id?` - `string` - if you don't sort by a field, you can specify an id of the column this sorting is bound to. Note that columns have a <PropLink name=\"columns.valueGetter\">valueGetter</PropLink>, which will be used when doing local sorting and the column is not bound to an exact field.\n- `type?` - the sort type - one of the keys in <DataSourcePropLink name=\"sortTypes\"/> - eg `\"string\"`, `\"number\"`, `\"date\"` - will be used for local sorting, to provide the proper comparison function.\n\n### Multiple Sorting\n\nIf you want to use multiple sorting, specify an array of objects like\n\n```ts\n// sort by age in descending order, then by `firstName` in ascending order\nsortInfo = [\n  { field: 'age', type: 'number', dir: -1 },\n  { field: 'firstName', dir: 1 },\n];\n\n// no sorting\nsortInfo = [];\n```\n\nThis allows sorting by multiple fields (to which columns are bound) - you can specify however many you want - so when sorting two objects in the `DataSource`, the first `sortInfo` is used to compare the two, and then, on equal values, the next `sortInfo` is used and so on.\n\n<Sandpack title=\"Local + uncontrolled multi-sorting example\">\n\n<Description>\n\nThis table allows sorting multiple columns - initially the `country` column is sorted in descending order and the `salary` column is sorted in ascending order. Click the `salary` column to toggle the column sort to descending. Clicking it a second time will remove it from the sort altogether.\n\n</Description>\n\n```ts file=\"local-uncontrolled-multi-sorting-example-with-remote-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Remote + uncontrolled multi-sorting example\">\n\n```ts file=\"remote-uncontrolled-multi-sorting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf you use uncontrolled sorting via <DataSourcePropLink name=\"defaultSortInfo\" /> there's no way to switch between single and multiple sorting after the component is mounted. If you have this use-case, you need to use the controlled <DataSourcePropLink name=\"sortInfo\" /> prop.\n\n</Note>\n\n## Understanding sort mode\n\nSorting can be done both locally in the browser and remotely on the server. For configuring where sorting is performed you need to specify the <DPropLink name=\"shouldReloadData.sortInfo\" ></DPropLink>. Possible values for <DPropLink name=\"shouldReloadData.sortInfo\"/> are `false` (for local sorting) and `true` (for remote sorting).\n\nThis allows you fine-grained control on how sorting is done, either in the client or on the server.\n\n### Uncontrolled sorting\n\nIf you use uncontrolled sorting (namely you don't care about updating the <DPropLink name=\"sortInfo\" /> yourself as a result of user interaction - via <DPropLink name=\"onSortInfoChange\" />) - then by default, the <DPropLink name=\"shouldReloadData.sortInfo\" /> is `false` (so local sorting) unless you specify otherwise.\n\nYou can initially render the component with no sort state or you can specify a default sorting state, via the uncontrolled prop <DPropLink name=\"defaultSortInfo\" />.\n\n```tsx\n// initially render the component with ascending sorting on `firstName` field\n// also, note this is an array, so multiple sorting will be enabled\nconst defaultSortInfo = [{ field: 'firstName', dir: 1 }];\n\n<DataSource<Developer>\n  primaryKey=\"id\"\n  data={data}\n  defaultSortInfo={defaultSortInfo}\n>\n  <InfiniteTable />\n</DataSource>;\n```\n\nIf your data is remote and you want the sorting to happen on the backend, you can still use uncontrolled sorting, but you need to specify <DPropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=true</DPropLink>.\n\nUsing remote sort mode will trigger a call to the <DPropLink name=\"data\" /> function whenever sorting changes, so you can re-fetch the data from the backend, according to the new `sortInfo`.\n\nWhe `local` uncontrolled sorting is used, the `<DataSource />` sorts the data internally, based on the existing sorting information. To start with a specific `sortInfo`, use the <DataSourcePropLink name=\"defaultSortInfo\" /> prop. As the user interacts with the table, <DataSourcePropLink name=\"onSortInfoChange\" /> is being called with updated sort info and the `<DataSource />` continues to sort the data accordingly.\n\n<Note>\n\nThe <DataSourcePropLink name=\"defaultSortInfo\" /> prop is an uncontrolled prop, so it's all managed inside the `<DataSource />` component and you can't change it from the outside. If you need to control it from outside the component, use the <DataSourcePropLink name=\"sortInfo\" code={false}>controlled sortInfo</DataSourcePropLink> prop - read the next section for more details\n\n</Note>\n\n### Controlled Sorting\n\nWhen you use the controlled <DataSourcePropLink name=\"sortInfo\" /> prop, by default the <DPropLink name=\"shouldReloadData.sortInfo\" /> is `true` (remote sorting), unless you specify otherwise.\n\nAlso, be aware that when the user interacts with the DataGrid when controlled sorting is configured, the <DPropLink name=\"sortInfo\" /> prop will not update automatically - you need to listen to <DPropLink name=\"onSortInfoChange\" /> and update the <DPropLink name=\"sortInfo\" /> yourself.\n\nJust like with uncontrolled sorting, updating the controlled <DPropLink name=\"sortInfo\" /> when `shouldReloadData.sortInfo=true`, will trigger a call to the <DPropLink name=\"data\" /> function, so new sorted data can be re-fetched.\n\n<Note>\n\nWhen the controlled <DPropLink name=\"sortInfo\" /> is combined with <DPropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=false</DPropLink>, the `<DataSource />` will sort the data internally, on any changes of the sorting information.\n\nBut remember it's your responsibility to update the <DPropLink name=\"sortInfo\" /> prop when the user interacts with the DataGrid.\n\n</Note>\n\nBoth controlled <DataSourcePropLink name=\"sortInfo\" /> and uncontrolled <DataSourcePropLink name=\"defaultSortInfo\" /> work in combination with <DataSourcePropLink name=\"onSortInfoChange\" /> - use it to be notified when sorting changes, so you can react and update your app accordingly if needed.\n\n### Local Sorting\n\nWhen you use uncontrolled sorting locally, the `<DataSource />` will sort the data internally, based on the <DataSourcePropLink name=\"defaultSortInfo\" /> prop. Local sorting is available for any configured <DataSourcePropLink name=\"data\" /> source - be it an array or a function that returns a promise.\n\n<Note>\n\nYou can use <DataSourcePropLink name=\"onDataParamsChange\" />, which is called whenever any of the sorting, filtering, grouping or pivoting information changes.\n\n</Note>\n\n<Sandpack title=\"Local uncontrolled sorting + local data\">\n\n```ts file=\"local-uncontrolled-single-sorting-example-with-remote-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Local uncontrolled sorting + remote data\">\n\n```ts file=\"local-uncontrolled-single-sorting-example-with-remote-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Remote Sorting\n\nSorting remotely makes a lot of sense when using a function as your <DataSourcePropLink name=\"data\" /> source. Whenever the sort information is changed, the function will be called with all the information needed to retrieve the data from the remote endpoint.\n\n<Note>\n\nFor remote sorting, make sure you specify <DataSourcePropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=true</DataSourcePropLink> - if you don't, the data will also be sorted locally in the browser (which most of the times will be harmless, but it means wasted CPU cycles).\n\n</Note>\n\n<Sandpack title=\"Remote + controlled multi-sorting example\">\n\n```ts file=\"remote-controlled-multi-sorting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nIn the example above, remote and controlled sorting are combined - because `shouldReloadData.sortInfo=true` is specified, the `<DataSource />` will call the `data` function whenever sorting changes, and will pass in the `dataParams` object that contains the sort information.\n\n## Custom Sort Functions with `sortTypes`\n\nBy default, all columns are sorted as strings, even if they contain numeric values. To make numeric columns sort as numbers, you need to specify <PropLink name=\"columns.dataType\" code={false}>a `dataType` for the column</PropLink>, or, <PropLink name=\"columns.sortType\" code={false}>a column `sortType`</PropLink>.\n\nThere are two `dataType` values that can be used:\n\n- `\"string\"`\n- `\"number\"`\n\nEach dataType has its own sorting function and its own filtering operators & functions.\n\nSorting works in combination with the <PropLink name=\"sortTypes\" /> property, which is an object with keys being sort types and values being functions that compare two values of the same type.\n\n```ts\nconst sortTypes = {\n  string: (a, b) => a.localeCompare(b),\n  number: (a, b) => a - b,\n};\n```\n\nThose are the two sort types supported by default.\n\n<Note>\n\nThe functions specified in the <PropLink name=\"sortTypes\" /> object need to always sort data in ascending order.\n</Note>\n\n<Note>\n\nA column can choose to use a specific <PropLink name=\"columns.sortType\" />, in which case, for local sorting, the corresponding sort function will be used, or, it can simply specify a <PropLink name=\"columns.dataType\">dataType</PropLink> and the `sortType` with the same name will be used (when no explicit <PropLink name=\"columns.sortType\">sortType</PropLink> is defined).\n\nTo conclude, the <PropLink name=\"columns.dataType\">dataType</PropLink> of a column will be used as the <PropLink name=\"columns.sortType\">sortType</PropLink> and <PropLink name=\"columns.filterType\">filterType</PropLink>, when those are not explicitly specified.\n\n</Note>\n\n<Sandpack  title=\"Custom sort by color - magenta will come first\">\n\n```ts file=\"$DOCS/reference/datasource-props/sortTypes-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIn this example, for the `\"color\"` column, we specified <PropLink name=\"columns.sortType\">column.sortType=\"color\"</PropLink> - we could have passed that as `column.dataType` instead, but if the grid had filtering, it wouldn't know what filters to use for \"color\" - so we used <PropLink name=\"columns.sortType\">column.sortType</PropLink> to only change how the data is sorted.\n\n</Note>\n\n<Note>\n\nWhen you provide a <DataSourcePropLink name=\"defaultSortInfo\"/> prop and the sorting information uses a custom <DataSourcePropLink name=\"sortTypes\">sortType</DataSourcePropLink>, make sure you specify that as the `type` property of the sorting info object.\n\n```tsx\ndefaultSortInfo={{\n  field: 'color',\n  dir: 1,\n  // note this custom sort type\n  type: 'color',\n}}\n```\n\nYou will need to have a property for that type in your <DataSourcePropLink name=\"sortTypes\"/> object as well.\n\n```tsx\nsortTypes={{\n  color: (a, b) => //...\n}}\n```\n\n</Note>\n\n## Replacing the sort function\n\nWhile there are many ways to customise sorting, including the <DPropLink name=\"sortTypes\" /> mentioned above, you might want to completely replace the sorting function used by the `<DataSource />` component.\n\nYou can do this by configuring the <DPropLink name=\"sortFunction\" /> prop.\n\n```tsx\nconst sortFunction = (sortInfo, dataArray) => {\n  // sort the dataArray according to the sortInfo\n  // and return the sorted array\n  // return sortedDataArray;\n};\n<DataSource<T> sortFunction={sortFunction} />;\n```\n\nThe function specified in the <DPropLink name=\"sortFunction\" /> prop is called with the <DPropLink name=\"sortInfo\" /> as the first argument and the data array as the second. It should return a sorted array, as per the <DPropLink name=\"sortInfo\" /> it was called with.\n\n<Note>\n\nWhen <DPropLink name=\"sortFunction\" /> is specified, <DPropLink name=\"shouldReloadData.sortInfo\" /> will be forced to `false`, as the sorting is done in the browser.\n</Note>\n\n<Sandpack  title=\"Using a custom sortFunction\">\n\n```ts file=\"$DOCS/reference/datasource-props/local-sortFunction-single-sorting-example-with-local-data-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/theming/css-variables": {
      "filePath": "/docs/learn/theming/css-variables",
      "routePath": "/docs/learn/theming/css-variables",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/theming/css-variables.page.md",
      "fileName": "css-variables.page.md",
      "folderPath": "/docs/learn/theming/",
      "frontmatter": {
        "title": "CSS Variables",
        "description": "Reference list of CSS variables that can be used to style the Infinite Table for React"
      },
      "excerpt": "Below you can find the complete list of CSS variables that can be used to style the component.",
      "readingTime": "9 min read",
      "content": "\nBelow you can find the complete list of CSS variables that can be used to style the component.\n\n{/* START VARS */}\n### Accent color\n\nBrand-specific accent color. This probably needs override to match your app.\n\n```css\n--infinite-accent-color\n```\n\n### Error color\n\n\n\n```css\n--infinite-error-color\n```\n\n### Color\n\nThe text color inside the component\n\n```css\n--infinite-color\n```\n\n### Space 0\n\n\n\n```css\n--infinite-space-0\n```\n\n### Space 1\n\n\n\n```css\n--infinite-space-1\n```\n\n### Space 2\n\n\n\n```css\n--infinite-space-2\n```\n\n### Space 3\n\n\n\n```css\n--infinite-space-3\n```\n\n### Space 4\n\n\n\n```css\n--infinite-space-4\n```\n\n### Space 5\n\n\n\n```css\n--infinite-space-5\n```\n\n### Space 6\n\n\n\n```css\n--infinite-space-6\n```\n\n### Space 7\n\n\n\n```css\n--infinite-space-7\n```\n\n### Space 8\n\n\n\n```css\n--infinite-space-8\n```\n\n### Space 9\n\n\n\n```css\n--infinite-space-9\n```\n\n### Space 10\n\n\n\n```css\n--infinite-space-10\n```\n\n### Font size 0\n\n\n\n```css\n--infinite-font-size-0\n```\n\n### Font size 1\n\n\n\n```css\n--infinite-font-size-1\n```\n\n### Font size 2\n\n\n\n```css\n--infinite-font-size-2\n```\n\n### Font size 3\n\n\n\n```css\n--infinite-font-size-3\n```\n\n### Font size 4\n\n\n\n```css\n--infinite-font-size-4\n```\n\n### Font size 5\n\n\n\n```css\n--infinite-font-size-5\n```\n\n### Font size 6\n\n\n\n```css\n--infinite-font-size-6\n```\n\n### Font size 7\n\n\n\n```css\n--infinite-font-size-7\n```\n\n### Font family\n\n\n\n```css\n--infinite-font-family\n```\n\n### Min height\n\n\n\n```css\n--infinite-min-height\n```\n\n### Border radius\n\n\n\n```css\n--infinite-border-radius\n```\n\n### Background\n\nThe background color for the whole component.\n\nOverriden in the `dark` theme.\n\n```css\n--infinite-background\n```\n\n### Icon size\n\n\n\n```css\n--infinite-icon-size\n```\n\n### Load mask padding\n\nThe padding used for the content inside the LoadMask.\n\n```css\n--infinite-load-mask-padding\n```\n\n### Load mask color\n\n\n\n```css\n--infinite-load-mask-color\n```\n\n### Load mask text background\n\n\n\n```css\n--infinite-load-mask-text-background\n```\n\n### Load mask overlay background\n\n\n\n```css\n--infinite-load-mask-overlay-background\n```\n\n### Load mask overlay opacity\n\n\n\n```css\n--infinite-load-mask-overlay-opacity\n```\n\n### Load mask border radius\n\n\n\n```css\n--infinite-load-mask-border-radius\n```\n\n### Header background\n\nBackground color for the header. Defaults to [`--infinie-header-cell-background`](#header-cell-background).\n\nOverriden in the `dark` theme.\n\n```css\n--infinite-header-background\n```\n\n### Header color\n\nThe text color inside the header.\n\nOverriden in the `dark` theme.\n\n```css\n--infinite-header-color\n```\n\n### Column header height\n\nThe height of the column header.\n\n```css\n--infinite-column-header-height\n```\n\n### Header cell background\n\nBackground for header cells.\n\nOverriden in the `dark` theme.\n\n```css\n--infinite-header-cell-background\n```\n\n### Header cell hover background\n\n\n\n```css\n--infinite-header-cell-hover-background\n```\n\n### Header cell padding\n\n\n\n```css\n--infinite-header-cell-padding\n```\n\n### Header cell padding x\n\n\n\n```css\n--infinite-header-cell-padding-x\n```\n\n### Header cell padding y\n\n\n\n```css\n--infinite-header-cell-padding-y\n```\n\n### Header cell icon size\n\n\n\n```css\n--infinite-header-cell-icon-size\n```\n\n### Header cell menu icon line width\n\n\n\n```css\n--infinite-header-cell-menu-icon-line-width\n```\n\n### Header cell sort icon margin\n\n\n\n```css\n--infinite-header-cell-sort-icon-margin\n```\n\n### Resize handle active area width\n\nThe width of the area you can hover over in order to grab the column resize handle.\nDefaults to `20px`.\n\nThe purpose of this active area is to make it easier to grab the resize handle.\n\n```css\n--infinite-resize-handle-active-area-width\n```\n\n### Resize handle width\n\nThe width of the colored column resize handle that is displayed on hover and on drag. Defaults to `2px`\n\n```css\n--infinite-resize-handle-width\n```\n\n### Resize handle hover background\n\nThe color of the column resize handle - the resize handle is the visible indicator that you see\nwhen hovering over the right-edge of a resizable column. Also visible on drag while doing a column resize.\n\n```css\n--infinite-resize-handle-hover-background\n```\n\n### Resize handle constrained hover background\n\nThe color of the column resize handle when it has reached a min/max constraint.\n\n```css\n--infinite-resize-handle-constrained-hover-background\n```\n\n### Filter operator padding x\n\n\n\n```css\n--infinite-filter-operator-padding-x\n```\n\n### Filter editor padding x\n\n\n\n```css\n--infinite-filter-editor-padding-x\n```\n\n### Filter editor margin x\n\n\n\n```css\n--infinite-filter-editor-margin-x\n```\n\n### Filter operator padding y\n\n\n\n```css\n--infinite-filter-operator-padding-y\n```\n\n### Filter editor padding y\n\n\n\n```css\n--infinite-filter-editor-padding-y\n```\n\n### Filter editor margin y\n\n\n\n```css\n--infinite-filter-editor-margin-y\n```\n\n### Filter editor background\n\n\n\n```css\n--infinite-filter-editor-background\n```\n\n### Filter editor border\n\n\n\n```css\n--infinite-filter-editor-border\n```\n\n### Filter editor focus border color\n\n\n\n```css\n--infinite-filter-editor-focus-border-color\n```\n\n### Filter editor border radius\n\n\n\n```css\n--infinite-filter-editor-border-radius\n```\n\n### Filter editor color\n\n\n\n```css\n--infinite-filter-editor-color\n```\n\n### Cell padding\n\n\n\n```css\n--infinite-cell-padding\n```\n\n### Cell border width\n\n\n\n```css\n--infinite-cell-border-width\n```\n\n### Cell border\n\nSpecifies the border for cells.\n\nOverriden in the `dark` theme - eg: `1px solid #2a323d`\n\n```css\n--infinite-cell-border\n```\n\n### Cell border invisible\n\n\n\n```css\n--infinite-cell-border-invisible\n```\n\n### Cell border radius\n\n\n\n```css\n--infinite-cell-border-radius\n```\n\n### Column reorder effect duration\n\n\n\n```css\n--infinite-column-reorder-effect-duration\n```\n\n### Pinned cell border\n\n\n\n```css\n--infinite-pinned-cell-border\n```\n\n### Cell color\n\nText color inside rows. Defaults to `currentColor`\n\nOverriden in `dark` theme.\n\n```css\n--infinite-cell-color\n```\n\n### Selected cell background\n\nThe background for selected cells, when cell selection is enabled.\n\nIf not specified, it will default to `var(--infinite-active-cell-background)`.\n\n```css\n--infinite-selected-cell-background\n```\n\n### Selected cell background default\n\n\n\n```css\n--infinite-selected-cell-background-default\n```\n\n### Selected cell background alpha\n\nThe opacity of the background color for the selected cell.\n\nIf not specified, it will default to the value for `var(--infinite-active-cell-background-alpha)`\n\n```css\n--infinite-selected-cell-background-alpha\n```\n\n### Selected cell background alpha table unfocused\n\nThe opacity of the background color for the selected cell, when the table is unfocused.\nIf not specified, it will default to `var(--infinite-active-cell-background-alpha--table-unfocused)`.\n\n```css\n--infinite-selected-cell-background-alpha--table-unfocused\n```\n\n### Selected cell border color\n\nThe color for border of the selected cell (when cell selection is enabled).\n Defaults to `var(--infinite-active-cell-border-color)`.\n\n```css\n--infinite-selected-cell-border-color\n```\n\n### Selected cell border width\n\nThe width of the border for the selected cell. Defaults to `var(--infinite-active-cell-border-width)`.\n\n```css\n--infinite-selected-cell-border-width\n```\n\n### Selected cell border style\n\nThe style of the border for the selected cell (eg: 'solid', 'dashed', 'dotted') - defaults to 'dashed'.\nDefaults to `var(--infinite-active-cell-border-style)`.\n\n```css\n--infinite-selected-cell-border-style\n```\n\n### Selected cell border\n\nSpecifies the border for the selected cell. Defaults to `var(--infinite-selected-cell-border-width) var(--infinite-selected-cell-border-style) var(--infinite-selected-cell-border-color)`.\n\n```css\n--infinite-selected-cell-border\n```\n\n### Active cell background alpha\n\nThe opacity of the background color for the active cell (when cell keyboard navigation is enabled).\nEg: 0.25\n\nIf `activeBackground` is not explicitly defined (this is the default), the background color of the active cell\nis the same as the border color (`activeBorderColor`), but with this modified opacity.\n\nIf `activeBorderColor` is also not defined, the accent color will be used.\n\nThis is applied when the component has focus.\n\n```css\n--infinite-active-cell-background-alpha\n```\n\n### Active cell background alpha table unfocused\n\nSame as the above, but applied when the component does not have focus.\n\n```css\n--infinite-active-cell-background-alpha--table-unfocused\n```\n\n### Active cell background\n\nThe background color of the active cell.\n\nIf not specified, it will default to `activeBorderColor` with the opacity of `activeBackgroundAlpha`.\nIf `activeBorderColor` is not specified, it will default to the accent color, with the same opacity as mentioned.\n\nHowever, specify this to explicitly override the default.\n\n```css\n--infinite-active-cell-background\n```\n\n### Active cell background default\n\n\n\n```css\n--infinite-active-cell-background-default\n```\n\n### Active cell border color\n\nThe color for border of the active cell (when cell keyboard navigation is enabled).\n\n```css\n--infinite-active-cell-border-color\n```\n\n### Active cell border width\n\nThe width of the border for the active cell.\n\n```css\n--infinite-active-cell-border-width\n```\n\n### Active cell border style\n\nThe style of the border for the active cell (eg: 'solid', 'dashed', 'dotted') - defaults to 'dashed'.\n\n```css\n--infinite-active-cell-border-style\n```\n\n### Active cell border\n\nSpecifies the border for the active cell. Defaults to `var(--infinite-active-cell-border-width) var(--infinite-active-cell-border-style) var(--infinite-active-cell-border-color)`.\n\n```css\n--infinite-active-cell-border\n```\n\n### Selection checkbox margin inline\n\n\n\n```css\n--infinite-selection-checkbox-margin-inline\n```\n\n### Menu background\n\n\n\n```css\n--infinite-menu-background\n```\n\n### Menu color\n\n\n\n```css\n--infinite-menu-color\n```\n\n### Menu padding\n\n\n\n```css\n--infinite-menu-padding\n```\n\n### Menu cell padding vertical\n\n\n\n```css\n--infinite-menu-cell-padding-vertical\n```\n\n### Menu cell padding horizontal\n\n\n\n```css\n--infinite-menu-cell-padding-horizontal\n```\n\n### Menu cell margin vertical\n\n\n\n```css\n--infinite-menu-cell-margin-vertical\n```\n\n### Menu item disabled background\n\n\n\n```css\n--infinite-menu-item-disabled-background\n```\n\n### Menu item active background\n\n\n\n```css\n--infinite-menu-item-active-background\n```\n\n### Menu item active opacity\n\n\n\n```css\n--infinite-menu-item-active-opacity\n```\n\n### Menu item pressed opacity\n\n\n\n```css\n--infinite-menu-item-pressed-opacity\n```\n\n### Menu item pressed background\n\n\n\n```css\n--infinite-menu-item-pressed-background\n```\n\n### Menu item disabled opacity\n\n\n\n```css\n--infinite-menu-item-disabled-opacity\n```\n\n### Menu border radius\n\n\n\n```css\n--infinite-menu-border-radius\n```\n\n### Menu shadow color\n\n\n\n```css\n--infinite-menu-shadow-color\n```\n\n### Rowdetail background\n\n\n\n```css\n--infinite-rowdetail-background\n```\n\n### Rowdetail padding\n\n\n\n```css\n--infinite-rowdetail-padding\n```\n\n### Rowdetail grid height\n\n\n\n```css\n--infinite-rowdetail-grid-height\n```\n\n### Row background\n\nBackground color for rows. Defaults to [`--infinite-background`](#background).\n\nOverriden in `dark` theme.\n\n```css\n--infinite-row-background\n```\n\n### Row odd background\n\nBackground color for odd rows. Even rows will use [`--infinite-row-background`](#row-background).\n\nOverriden in `dark` theme.\n\n```css\n--infinite-row-odd-background\n```\n\n### Row selected background\n\n\n\n```css\n--infinite-row-selected-background\n```\n\n### Active row background\n\nThe background color of the active row. Defaults to the value of `var(--infinite-active-cell-background)`.\n\nHowever, specify this to explicitly override the default.\n\n```css\n--infinite-active-row-background\n```\n\n### Active row border color\n\nThe border color for the active row. Defaults to the value of `var(--infinite-active-cell-border-color)`.\n\n```css\n--infinite-active-row-border-color\n```\n\n### Active row border width\n\nThe width of the border for the active row. Defaults to the value of `var(--infinite-active-cell-border-width)`.\n\n```css\n--infinite-active-row-border-width\n```\n\n### Active row border style\n\nThe style of the border for the active row (eg: 'solid', 'dashed', 'dotted') - defaults to the value of `var(--infinite-active-cell-border-style)`, which is `dashed` by default.\n\n```css\n--infinite-active-row-border-style\n```\n\n### Active row border\n\nSpecifies the border for the active row. Defaults to `var(--infinite-active-row-border-width) var(--infinite-active-row-border-style) var(--infinite-active-row-border-color)`.\n\n```css\n--infinite-active-row-border\n```\n\n### Active row background alpha\n\nThe opacity of the background color for the active row (when row keyboard navigation is enabled).\nWhen you explicitly specify `--infinite-active-row-background`, this variable will not be used.\nInstead, this variable is used when the active row background uses the color of the active cell (border).\n\nThis is applied when the component has focus.\n\nDefaults to the value of `var(--infinite-active-cell-background-alpha)`.\n\n```css\n--infinite-active-row-background-alpha\n```\n\n### Active row background alpha table unfocused\n\nSame as the above, but applied when the component does not have focus.\n\nWhen you explicitly specify `--infinite-active-row-background`, this variable will not be used.\nInstead, this variable is used when the active row background uses the color of the active cell (border).\n\nDefaults to the value of `var(--infinite-active-cell-background-alpha--table-unfocused)`.\n\n```css\n--infinite-active-row-background-alpha--table-unfocused\n```\n\n### Row hover background\n\nBackground color for rows, on hover.\n\nOverriden in the `dark` theme.\n\n```css\n--infinite-row-hover-background\n```\n\n### Row selected hover background\n\n\n\n```css\n--infinite-row-selected-hover-background\n```\n\n### Group row background\n\n\n\n```css\n--infinite-group-row-background\n```\n\n### Group row column nesting\n\n\n\n```css\n--infinite-group-row-column-nesting\n```\n\n### Row pointer events while scrolling\n\n\n\n```css\n--infinite-row-pointer-events-while-scrolling\n```{/* END VARS */}\n"
    },
    "/docs/learn/theming/": {
      "filePath": "/docs/learn/theming/index",
      "routePath": "/docs/learn/theming/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/theming/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/learn/theming/",
      "frontmatter": {
        "title": "Theming",
        "description": "Read our docs on the available themes and how you can customize the look and feel of InfiniteTable for React."
      },
      "excerpt": "`<InfiniteTable />` ships with a CSS file that you need to import in your codebase to make the component look as intended.",
      "readingTime": "3 min read",
      "content": "\n`<InfiniteTable />` ships with a CSS file that you need to import in your codebase to make the component look as intended.\n\n```ts\nimport '@infinite-table/infinite-react/index.css';\n```\n\nThis root CSS file includes the `\"default\"` theme.\n\nThe other available themes are\n\n  - `shadcn`\n  - `minimalist`\n  - `ocean`\n  - `balsam`\n\nand if you want to use any of them, you have to import their respective CSS file explicitly:\n\n```ts\nimport '@infinite-table/infinite-react/theme/shadcn.css'\nimport '@infinite-table/infinite-react/theme/balsam.css'\nimport '@infinite-table/infinite-react/theme/minimalist.css'\nimport '@infinite-table/infinite-react/theme/ocean.css'\n```\n\nEach theme CSS file includes both the **`light`** and the **`dark`** modes.\n\n<Note>\n\nVersion `6.2.0` is the first version where the root CSS file (`@infinite-table/infinite-react/index.css`) doesn't include all the themes. Previous to this version, simply importing the root CSS file gave you access to all available themes.\n\nSplitting each theme into a dedicated CSS file helps reduce the bundle size for our users, as most people will only use one theme for `<InfiniteTable />` in their apps.\n\n</Note>\n\n## Applying a theme\n\nThe following themes are currently available:\n\n - `default` - applied by default, no special configuration needed. It's included in the root CSS you need to import from `@infinite-table/infinite-react/index.css`\n - `balsam`\n - `minimalist`\n - `ocean`\n - `shadcn` - for this theme to correctly show up, make sure the shadcn CSS vars are available on page - see [shadcn theming](https://ui.shadcn.com/docs/theming) for details\n\n\nTo apply a theme (except the default one), you have to set the className `\"infinite-theme-name--THEME_NAME\"` to any parent element of the `<InfiniteTable />` component (or even on the component itself).\n\nYou will want to apply the theme name and theme mode classNames to the same element, so you'll end up with a className like `\"infinite-theme-name--minimalist infinite-theme-mode--dark\"`.\n\n```tsx title=\"Applying the minimalist theme with dark mode explicitly\"\n<body className=\"infinite-theme-mode--dark infinite-theme-name--minimalist\">\n  <DataSource {...dataSouceProps}>\n    <InfiniteTable {...props} />\n  </DataSource>\n</body>\n```\n\n\n\n<Snippet>\n\n<Description>\n\nExample configured with `minimalist` theme and `dark` mode by default.\n</Description>\n\n```tsx live title=\"Theme switching demo - defaults to minimalist theme in dark mode\" size=\"md\" viewMode=\"preview\" files=\"theme-switching-minimalist-theme-default-example.page.tsx,columns.ts\"\n```\n\n</Snippet>\n\n\n## Theme mode - light or dark\n\nAt runtime, the `light` or `dark` mode is applied based on the user OS settings for the [preferred color scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme).\n\nTo explicitly apply the light mode, apply the className `\"infinite-theme-mode--light\"` to any parent element of the `<InfiniteTable />` component.\n\nTo explicitly apply the dark mode, apply the className `\"infinite-theme-mode--dark\"` to any parent element of the `<InfiniteTable />` component.\n\n```tsx title=\"Explicitly applying light mode via container className\"\n<div className=\"infinite-theme-mode--light\">\n  <DataSource {...dataSouceProps}>\n    <InfiniteTable {...props} />\n  </DataSource>\n</div>\n```\n\nIf instead you specify a `infinite-theme-mode--dark` CSS className, the dark mode will be applied\n\n```tsx title=\"Explicitly applying dark theme via container className\"\n<body className=\"infinite-theme-mode--dark\">\n  <div>\n    <DataSource {...dataSouceProps}>\n      <InfiniteTable {...props} />\n    </DataSource>\n  </div>\n</body>\n```\n\n\n<Description>\nExample configured with `default` theme and `light` mode by default.\n</Description>\n\n```tsx live title=\"Theme switching demo - defaults to light theme\" size=\"md\" viewMode=\"preview\"  files=\"theme-switching-example.page.tsx,columns.ts\"\n\n```\n\n<Note>\n\nIf you don't explicitly have a `infinite-theme-mode--light` or `infinite-theme-mode--dark` ancestor, `InfiniteTable` will use the browser/OS preference (via `@media (prefers-color-scheme: ...)`) to apply the dark or light theme.\n\n</Note>\n\n## Available themes\n\n### Default theme\n\nThe `default` theme is applied when you don't specify any explicit theme by default.\n\n### Minimalist theme\n\nThe `minimalist` theme is inspired from minimalistic designs and is a good choice if you want to keep the UI simple and clean."
    },
    "/docs/learn/tree-grid/overview": {
      "filePath": "/docs/learn/tree-grid/overview",
      "routePath": "/docs/learn/tree-grid/overview",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/tree-grid/overview.page.md",
      "fileName": "overview.page.md",
      "folderPath": "/docs/learn/tree-grid/",
      "frontmatter": {
        "title": "Using Tree Data",
        "description": "Learn how to use the Tree DataGrid to display tree data"
      },
      "excerpt": "",
      "readingTime": "5 min read",
      "content": "\n\nStarting with version `6.0.0`, Infinite Table has support for displaying tree data.\n\n<Note>\n\nTo show tree data, you have to use:\n - the `<TreeDataSource />` instead of `<DataSource />` component \n - the `<TreeGrid />` instead of `<InfiniteTable />` component.\n\nUnder the hood, those specialized components have better typing support for tree data, which will make it easier to work with them.\n</Note>\n\n<Note>\n\nTo specify which column will have the expand/collapse icon, set the <PropLink name=\"columns.renderTreeIcon\" /> prop to `true` for that column.\n\n</Note>\n\n\n<Sandpack title=\"Basic TreeGrid example\" size=\"lg\">\n\n```tsx file=\"basic-tree-grid-example.page.tsx\"\n```\n\n</Sandpack>\n\nThroughout the docs for the TreeGrid, we will use an example data source that illustrates file system data, as that will be familiar to most people.\n\n## Terminology\n\n\nWhen referring to rows in the TreeGrid, we'll prefer to use the term `\"node\"` instead of \"row\". So whenever you see `\"node\"` in the docs, you should know that it refers to a TreeGrid configuration of Infinite Table.\n\nAlso in the context of the TreeGrid, we'll use the term `\"node path\"` instead of row id. The `\"node path\"` is the array with the ids of all the parent nodes leading down to the current node. The node path includes the id of the current node.\n\n```tsx {2} title=\"Node path vs row id\"\nconst data = [\n  { id: '1', name: 'Documents',                // path: ['1']\n    children: [\n      { id: '10', name: 'Private',             // path: ['1', '10']\n        children: [\n          { id: '100', name: 'Report.docx' },  // path: ['1', '10', '100'] \n          { id: '101', name: 'Vacation.docx' },// path: ['1', '10', '101']\n        ],\n      },\n    ]\n  },\n  {\n    id: '2',\n    name: 'Downloads',                        // path: ['2']\n    children: [\n      {\n        id: '20',\n        name: 'cat.jpg',                      // path: ['2', '20']\n      },\n    ],\n  },\n];\n```\nIt's important to understand node paths, as that will be the primary way you'll interact with the TreeGrid/TreeDataSource.\n\n<Note>\n\nFor the initial version of the TreeGrid, it's safer if your node ids are unique globally, but as we refine the TreeGrid, it will be safe to use ids unique only within a node children (so unique relative to siblings).\n\n</Note>\n\n### Parent vs leaf nodes\n\nNodes with an array for their `nodesKey` property (defaults to `\"children\"`) are considered parent nodes. All other nodes are leaf nodes.\n\nWhen using the <TypeLink name=\"InfiniteTableRowInfo\" /> type, you can check for `isTreeNode` to determine if you're in a tree scenario. Also use the `isParentNode` property to check if a node is a parent node or not.\n\n## Data format for the TreeDataSource\n\nWhen using the `<TreeDataSource />` component, the data you specify in your `<DPropLink name=\"dataSource\" />` should resolve to a nested array - with the `nodesKey` containing the child items for each tree node.\n\n```tsx {2} title=\"Using the nodesKey prop to specify where the node children are\"\n<TreeDataSource\n  nodesKey=\"children\"\n  primaryKey=\"id\"\n  data={dataSource}\n/>\n```\n\nWith the `nodesKey` set to `\"children\"`, the `<TreeDataSource />` will look for the `children` property on each item in the data array, and use that to determine the child nodes for each tree node. Nodes without a `\"children\"` property are assumed to be leaf nodes.\n\n```tsx {2} title=\"Nested data structure for the TreeDataSource component\"\nconst dataSource = [\n  {\n    id: '1',\n    name: 'Documents',\n    children: [\n      {\n        id: '10',\n        name: 'Private',\n        children: [\n          {\n            id: '100',\n            name: 'Report.docx',\n          },\n          {\n            id: '101',\n            name: 'Vacation.docx',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: '2',\n    name: 'Downloads',\n    children: [] // will be a parent node, with no children\n  },\n];\n```\n\n\n## Tree collapse and expand state\n\nThe `<TreeDataSource />` component allows you to fully configure & control the collapse and expand state of the tree nodes, via the <DPropLink name=\"treeExpandState\" />/<DPropLink name=\"defaultTreeExpandState\" /> props.\n\nBy default, if no expand state is specified, the tree will be rendered as fully expanded.\n\nHowever, you can choose to specify the expand state with a default value and then with specific values for node paths (or node ids)\n\n<Sandpack title=\"Using controlled tree expand state\" size=\"large\">\n\n```ts file=\"$DOCS/reference/datasource-props/tree-controlled-expandstate-example.page.tsx\"\n```\n\n</Sandpack>\n\n\nWhen using node paths for <DPropLink name=\"treeExpandState\" />, the object should have the following properties:\n\n- `defaultExpanded`: `boolean` - whether the tree nodes are expanded by default or not.\n- `collapsedPaths`: `string[]` - when `defaultExpanded` is `true`, this is a mandatory prop.\n- `expandedPaths`: `string[]` - when `defaultExpanded` is `false`, this is a mandatory prop.\n\n```tsx title=\"Example of treeExpandState with node paths\"\nconst treeExpandState = {\n  defaultExpanded: true,\n  collapsedPaths: [\n    ['1', '10'],\n    ['2', '20'],\n    ['5']\n  ],\n  expandedPaths: [\n    ['1', '4'],\n    ['5','nested node in 5'],\n  ],\n};\n```\n\n<Note>\n\nAs seen above, you can have a node specifically collapsed while other child nodes specifically expanded.\nSo you can combine the expanded/collapsed paths to achieve very complex tree layouts, which can be restored later.\n\n</Note>\n\n## Working with horizontal layout\n\nThe <PropLink name=\"wrapRowsHorizontally\" /> prop can be used to enable horizontal layout, just like non-tree DataGrids.\n\n<Sandpack title=\"TreeGrid with horizontal layout\" >\n\n```tsx file=\"tree-grid-horizontal-layout-example.page.tsx\"\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/tree-grid/tree-column": {
      "filePath": "/docs/learn/tree-grid/tree-column",
      "routePath": "/docs/learn/tree-grid/tree-column",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/tree-grid/tree-column.page.md",
      "fileName": "tree-column.page.md",
      "folderPath": "/docs/learn/tree-grid/",
      "frontmatter": {
        "title": "Managing the tree column and expand/collapse icon",
        "description": "Learn how to render the tree expand/collapse icon and manage the tree column"
      },
      "excerpt": "When rendering a tree, you have to use the `<TreeGrid />` component instead of `<InfiniteTable />`.",
      "readingTime": "2 min read",
      "content": "\nWhen rendering a tree, you have to use the `<TreeGrid />` component instead of `<InfiniteTable />`.\n\nThe `<TreeGrid />` component is simply an `<InfiniteTable />` component with some props removed - those don't make sense for tree scenarios.\n\n\n<Note>\n\nBy default no tree column is rendered.\n\nTo specify the tree column, you have to to set the <PropLink name=\"columns.renderTreeIcon\" /> prop to `true` for your column of choice.\n\n</Note>\n\n```tsx {3} title=\"Specifying the tree column\"\nconst columns: Record<string, InfiniteTableColumn<FileSystemNode>> = {\n  name: { \n    renderTreeIcon: true,\n    field: 'name',\n    header: 'Name' \n  },\n  type: { field: 'type', header: 'Type' },\n  size: { field: 'sizeInKB', type: 'number', header: 'Size (KB)' },\n};\n```\nThis is very similar to how you specify the [selection column for multi-select configurations](/docs/learn/selection/row-selection#using-a-selection-checkbox).\n\n<Sandpack title=\"Specifying the tree column\">\n\n```tsx file=\"$DOCS/reference/treegrid-rendericon-default-example.page.tsx\"\n\n```\n</Sandpack>\n\n## Customizing the expand/collapse icon\n\nUsing the <PropLink name=\"columns.renderTreeIcon\">column.renderTreeIcon=true</PropLink> is obviously not enough to customize the expand/collapse icon.\n\nThis prop can also be a function that returns a React node.\n\n<Note>\n\nWith the default value of `true` for <PropLink name=\"columns.renderTreeIcon\" />, an icon will be rendered only for parent nodes.\n\nIf you want to render an icon for all nodes, specify a function (and differentiate between parent and leaf nodes), and it will be called regardless of whether the node is a parent or a leaf.\n\n</Note>\n\n<Sandpack title=\"Customizing the expand/collapse icon\">\n\n```tsx file=\"tree-custom-renderTreeIcon-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n\n"
    },
    "/docs/learn/tree-grid/tree-expand-and-collapse-state": {
      "filePath": "/docs/learn/tree-grid/tree-expand-and-collapse-state",
      "routePath": "/docs/learn/tree-grid/tree-expand-and-collapse-state",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/tree-grid/tree-expand-and-collapse-state.page.md",
      "fileName": "tree-expand-and-collapse-state.page.md",
      "folderPath": "/docs/learn/tree-grid/",
      "frontmatter": {
        "title": "Managing the tree expand/collapse state",
        "description": "Learn how to control which tree nodes are expanded or collapsed"
      },
      "excerpt": "By default, the tree will be rendered with all nodes expanded. This is fine for basic use cases, but as soon as you go into more complex scenarios, you will want to control which nodes are expanded or collapsed.",
      "readingTime": "3 min read",
      "content": "\nBy default, the tree will be rendered with all nodes expanded. This is fine for basic use cases, but as soon as you go into more complex scenarios, you will want to control which nodes are expanded or collapsed.\n\nThis is easy to achieve via the <DPropLink name=\"defaultTreeExpandState\" /> prop. This is an uncontrolled prop and allows you to initially specify the expand/collapse state of the tree - all subsequent user updates will result in the tree state being updated to match the UI actions.\n\n<Sandpack title=\"Specifying an initial tree expand state\" size=\"lg\">\n\n```tsx file=\"tree-default-expand-collapse-example.page.tsx\"\n```\n\n</Sandpack>\n\n## Understanding the tree expand state\n\n\nYou can specify the expand/collapse state of the tree in two ways:\n\n1. With node paths (recommended)\n\nWhen using node paths, the object should have the following properties:\n\n- `defaultExpanded`: `boolean` - whether the tree nodes are expanded by default or not.\n- `collapsedPaths`: `string[]` - when `defaultExpanded` is `true`, this is a mandatory prop.\n- `expandedPaths`: `string[]` - when `defaultExpanded` is `false`, this is a mandatory prop.\n\n```tsx title=\"Example of treeExpandState with node paths\"\nconst treeExpandState = {\n  defaultExpanded: true,\n  collapsedPaths: [\n    ['1', '10'],\n    ['2', '20'],\n    ['5']\n  ],\n  expandedPaths: [\n    ['1', '4'],\n    ['5','nested node in 5'],\n  ],\n};\n```\n\n2. With node ids\n\nWhen using node ids, the object should have the following properties:\n\n- `defaultExpanded`: `boolean` - whether the tree nodes are expanded by default or not.\n- `collapsedIds`: `string[]` - when `defaultExpanded` is `true`, this is a mandatory prop.\n- `expandedIds`: `string[]` - when `defaultExpanded` is `false`, this is a mandatory prop.\n\n\n```tsx title=\"Example of treeExpandState with node ids\"\nconst treeExpandState = {\n  defaultExpanded: true,\n  collapsedIds: ['1', '2', '5'],\n  expandedIds: ['10', '20', 'nested node in 5'],\n};\n```\n\n## Reacting to user actions\n\nYou can listen to the user interactions with the tree by using the <DPropLink name=\"onTreeExpandStateChange\">{`onTreeExpandStateChange(treeExpandState, {dataSourceApi, nodePath, nodeState})`}</DPropLink> callback. This callback is called with the new tree state whenever the user expands or collapses a node.\n\nIn addition to this callback, you can also use the following:\n\n - <DPropLink name=\"onNodeExpand\">{`onNodeExpand(nodePath, {dataSourceApi})`}</DPropLink>\n - <DPropLink name=\"onNodeCollapse\">{`onNodeCollapse(nodePath, {dataSourceApi})`}</DPropLink>\n\n<Note>\n\nThe <DPropLink name=\"onNodeExpand\" /> and <DPropLink name=\"onNodeCollapse\" /> callbacks are called when a node is expanded or collapsed, respectively - either via user interaction or by an API call. However, they will not be called when the <TreeApiLink name=\"expandAll\" /> or <TreeApiLink name=\"collapseAll\" /> methods are called.\n\n</Note>\n\n\n## Using controlled expand/collapse state\n\nIf you want maximum control over the collapse/expand state, you should use the controlled <DPropLink name=\"treeExpandState\" /> prop.\n\nThis will allow you to own the collapse/expand state entirely - but make sure you use the <DPropLink name=\"onTreeExpandStateChange\" /> callback to react to user actions or API calls being made to update the tree state.\n\n<Sandpack title=\"Using controlled expand/collapse state\" size=\"lg\">\n\n```tsx file=\"$DOCS/reference/datasource-props/tree-controlled-expandstate-example.page.tsx\"\n```\n</Sandpack>\n\n<Note>\n\nWhen using controlled <DPropLink name=\"treeExpandState\" />, you no longer need to use API calls.\n\nWhen you need to expand all nodes, simply set the <DPropLink name=\"treeExpandState\" /> to `{defaultExpanded: true, collapsedPaths: []}`.\n\nWhen you need to collapse all nodes, simply set the <DPropLink name=\"treeExpandState\" /> to `{defaultExpanded: false, expandedPaths: []}`.\n\n</Note>\n"
    },
    "/docs/learn/tree-grid/tree-icon-rendering": {
      "filePath": "/docs/learn/tree-grid/tree-icon-rendering",
      "routePath": "/docs/learn/tree-grid/tree-icon-rendering",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/tree-grid/tree-icon-rendering.page.md",
      "fileName": "tree-icon-rendering.page.md",
      "folderPath": "/docs/learn/tree-grid/",
      "frontmatter": {
        "title": "Using & rendering tree icons",
        "description": "Learn how to customize the tree icons"
      },
      "excerpt": "",
      "readingTime": "3 min read",
      "content": "\n\nTo make a column render the tree icon, you have to set <PropLink name=\"columns.renderTreeIcon\" /> to `true`. This will cause the default tree icon to be rendered for non-leaf nodes.\n\n```tsx {4} title=\"Specifying the tree icon for a column\"\nconst columns: Record<string, InfiniteTableColumn<FileSystemNode>> = {\n  name: {\n    field: 'name',\n    renderTreeIcon: true,\n  },\n  type: { field: 'type' },\n  extension: { field: 'extension' },\n  size: { field: 'sizeInKB', type: 'number' },\n};\n```\n\n<Note>\n\nIf you don't have <PropLink name=\"columns.renderTreeIcon\" /> set, there will be no tree column to render the tree icon.\n\n</Note>\n\n<Sandpack title=\"Tree icon rendering\" >\n\n```tsx file=\"tree-icon-default-example.page.tsx\"\n```\n\n</Sandpack>\n\n\n## Customizing the tree icon\n\nThere are multiple ways to customize the tree icon.\n\nFirst, you can very easily change the color of the icon. The color of the icon is controlled by the `--infinite-expand-collapse-icon-color` CSS variable, and defaults to  `--infinite-accent-color`, but you can also set it to any other color you want.\n\n```css title=\"Changing the color of the tree icon\"\n.Infinite {\n  --infinite-expand-collapse-icon-color: #6f6f6f;\n}\n```\n\n<Sandpack title=\"Customizing the tree icon color\" >\n\n```tsx file=\"tree-icon-custom-color-example.page.tsx\"\n```\n\n</Sandpack>\n\nIf you want to go further, use a function for the `column.renderTreeIcon` property - the next section will go into more detail on this.\n\n## Rendering a custom tree icon for both parent and leaf nodes\n\nWhen <PropLink name=\"columns.renderTreeIcon\" /> is `true`, the tree icon will be rendered only for parent nodes.\n\n<Note>\n\nIn your implementation of the `renderTreeIcon` function, you'll use the `rowInfo.nodeExpanded` property.\n\nNote that the property is only available for parent nodes, so you'll first have to use the `rowInfo.isParentNode` property as a TS discriminator to check if the node is a parent node.\n\n```tsx title=\"Checking if the node is a parent node\"\nconst renderTreeIcon = ({ rowInfo }) => {\n  if (!rowInfo.isParentNode) {\n    // rowInfo.nodeExpanded not available here\n    return <FileIcon />;\n  }\n  \n  // it's now OK for TS to use rowInfo.nodeExpanded\n  return  <FolderIcon open={rowInfo.nodeExpanded} onClick={toggleCurrentTreeNode} />\n};\n```\n</Note>\n\nHowever when you specify a function, it will be called for both parent and leaf nodes (if you don't want an icon for leaf nodes, simply return `null`).\n\nThis gives you maximum flexibility to icons. A common example is a file explorer, where you might want to render icons not only for folders, but also for files.\n\n<Sandpack title=\"Rendering a custom tree icon for both parent and leaf nodes\" >\n\n<Description>\n\nThis example renders a custom tree icon and uses the `toggleCurrentTreeNode` function to toggle the node state when Clicked. `toggleCurrentTreeNode` is a property of the argument passed to the `renderTreeIcon` function.\n\n</Description>\n\n```tsx file=\"tree-icon-custom-example.page.tsx\"\n```\n\n</Sandpack>\n\n\n<Note>\n\nIf you implement a custom <PropLink name=\"columns.renderTreeIcon\" /> function for your column, you can still use the default tree icon.\n\nUse `renderBag.treeIcon` property in the JSX you return (the `renderBag` is available as a property of the `cellContext` argument of the `renderTreeIcon` function).\n\n</Note>\n"
    },
    "/docs/learn/tree-grid/tree-selection": {
      "filePath": "/docs/learn/tree-grid/tree-selection",
      "routePath": "/docs/learn/tree-grid/tree-selection",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/tree-grid/tree-selection.page.md",
      "fileName": "tree-selection.page.md",
      "folderPath": "/docs/learn/tree-grid/",
      "frontmatter": {
        "title": "Using tree selection",
        "description": "Learn how to leverage the tree and specify the tree selection state"
      },
      "excerpt": "When using a tree grid, a common use-case is to allow users to select nodes, both parent and child nodes.",
      "readingTime": "3 min read",
      "content": "\nWhen using a tree grid, a common use-case is to allow users to select nodes, both parent and child nodes.\n\nThe `<TreeDataSource>` component allows you to specify an initial tree selection, via the `defaultTreeSelection` prop.\n\n<Note>\n\nWhen using <DPropLink name=\"defaultTreeSelection\" /> or its controlled counterpart <DPropLink name=\"treeSelection\" />, if no <DPropLink name=\"selectionMode\" /> is specified, the selection mode will default to `\"multi-row\"`.\n\n</Note>\n\n<Note>\n\nIf you enable selection, don't forget to specify which column should render a selection checkbox, by using <PropLink name=\"columns.renderSelectionCheckBox\">renderSelectionCheckBox=true</PropLink>.\n\n</Note>\n\n```tsx title=\"Example of tree selection value with default selection set to false\"\nimport type { TreeSelectionValue } from '@infinite-table/infinite-react';\n\n// Default selection is false, with some selected node paths: ['1'] and ['2', '20']\n// however, node ['1', '10'] is deselected\nconst treeSelectioDefaultDeselected: TreeSelectionValue = {\n  defaultSelection: false,\n  selectedPaths: [['1'], ['2', '20']],\n  deselectedPaths: [['1', '10']],\n};\n\n```\n\n```tsx title=\"Example of tree selection value with default selection set to true\"\n// Default selection is true, with some deselected node paths: ['2'] and ['3']\n// however, inside ['3'], we have a selected node ['3','30','301']\nconst treeSelectionDefaultSelected: TreeSelectionValue = {\n  defaultSelection: true,\n  deselectedPaths: [['2'], ['3']],\n  selectedPaths: [['3','30','301']],\n};\n```\n\n<Sandpack title=\"Using default tree selection\" size=\"lg\">\n\n```tsx file=\"tree-default-selection-example.page.tsx\"\n```\n\n</Sandpack>\n\n\nWhen using <DPropLink name=\"defaultTreeSelection\" code={false}>uncontrolled tree selection</DPropLink>, the `<TreeDataSource />` will manage the selection state internally, and will update it as a result of user actions. If you want to change the selection, you can use [the Tree API](/docs/reference/tree-api) to do so: <TreeApiLink name=\"selectNode\"  />, <TreeApiLink name=\"deselectNode\" />, <TreeApiLink name=\"selectAll\" />, <TreeApiLink name=\"deselectAll\" />, etc.\n\n## Reacting to user actions\n\nTo listen to selection changes, you can use the <DPropLink name=\"onTreeSelectionChange\" /> callback.\n\nThis callback is called both when the user interacts with the grid, and when you use the [Tree API](/docs/reference/tree-api) to change the selection.\n\n\n## Using controlled tree selection\n\nWhen using the controlled <DPropLink name=\"treeSelection\" /> prop, you have to make sure you update the tree selection via <DPropLink name=\"onTreeSelectionChange\" />.\n\nControlled tree selection also gives you a more declarative way to manage the selection state.\nYou no longer have to call [Tree API](/docs/reference/tree-api) methods to change the selection. Simply pass a new tree selection state object to the <DPropLink name=\"treeSelection\" /> prop and the tree grid will be updated accordingly.\n\nFor example, if you want to select all nodes, set the <DPropLink name=\"treeSelection\" /> prop to:\n\n```tsx title=\"Tree selection value to show all nodes as selected\"\n{\n  defaultSelection: true,\n  deselectedPaths: [],\n}\n```\n\nFor deselecting all nodes, the value should be:\n\n```tsx title=\"All nodes as deselected\"\n{\n  defaultSelection: false,\n  selectedPaths: [],\n}\n```\n\nUsing controlled tree selection also gives you an easy way to restore a previously saved tree selection at any point in time.\n\n<Sandpack title=\"Using controlled tree selection\" size=\"lg\">\n\n```tsx file=\"tree-controlled-selection-example.page.tsx\"\n```\n\n</Sandpack>\n\n"
    },
    "/docs/learn/working-with-data/handling-dates": {
      "filePath": "/docs/learn/working-with-data/handling-dates",
      "routePath": "/docs/learn/working-with-data/handling-dates",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/working-with-data/handling-dates.page.md",
      "fileName": "handling-dates.page.md",
      "folderPath": "/docs/learn/working-with-data/",
      "frontmatter": {
        "title": "Handling Date Objects",
        "description": "Learn how to display, manipulate and render dates with Infinite Table"
      },
      "excerpt": "InfiniteTable can handle dates just like any other data type - make sure you specify <PropLink name=\"columns.type\" code={false}>type=\"date\"</PropLink> for date columns.",
      "readingTime": "2 min read",
      "content": "\nInfiniteTable can handle dates just like any other data type - make sure you specify <PropLink name=\"columns.type\" code={false}>type=\"date\"</PropLink> for date columns.\n\nIf your date column does not specify a custom <PropLink name=\"columns.valueFormatter\" code={false}>formatter</PropLink> or <PropLink code={false} name=\"columns.renderValue\">renderer</PropLink>, by default the date will be formatted using the [`toLocaleDateString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString) method of the date object.\n\n<Note>\n\nFor date columns, make sure you specify <PropLink name=\"columns.type\">column.type=\"date\"</PropLink>.\n\nThis will ensure that the column is sorted correctly (as per the available <DPropLink name=\"sortTypes\"/>) and that the default date formatting is applied.\n\n</Note>\n\n<Sandpack title=\"Using date objects\">\n\n<Description>\n\nIn this example, the `birthDate` column contains dates and we customized the way they are displayed.\n\n```tsx\nconst renderValue = ({ value }: { value: Date }) => {\n  return <b>{value.toISOString().split('T')[0]}</b>;\n};\n```\n\nIf no custom `renderValue` was specified, the dates would have been formatted using the `Date.toLocaleDateString()`\n</Description>\n\n```ts file=\"dates-with-local-data-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Using date strings\n\n<Note>\n\nIf your dates are not `instanceof Date` but strings or numbers (timestamps) then it's better not to use the <PropLink name=\"columns.type\">column.type=\"date\"</PropLink> but rather to specify a custom <PropLink name=\"columns.type\">column.type</PropLink> along with <DPropLink name=\"sortTypes\"/>.\n</Note>\n\nFor the case when your dates are not actually dates, but date strings (the same applies to timestamps), you have to define your sorting function.\n\n```tsx\nconst sortTypes = {\n  mydatestring: (a: string, b: string) => {\n    // use your preferred date parsing library\n    // to turn a string into date and then compare the two values\n    return new Date(a).getTime() - new Date(b).getTime();\n  },\n};\n```\n\nWhen then pass the <DPropLink name=\"sortTypes\"/> to the `<DataSource />` component and configure our date column to be of type `\"mydatestring\"` (it should match the key you specified in your `sortTypes` definition).\n\n<Sandpack title=\"Using date strings\">\n\n<Description>\n\nIn this example, the `birthDate` column contains dates as strings, so we have to define a custom column.type and sort type.\n\n</Description>\n\n```ts file=\"date-strings-with-local-data-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/working-with-data/": {
      "filePath": "/docs/learn/working-with-data/index",
      "routePath": "/docs/learn/working-with-data/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/working-with-data/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/learn/working-with-data/",
      "frontmatter": {
        "title": "Working with Data",
        "description": "Learn how to visualise and manage your data in new ways with Infinite Table"
      },
      "excerpt": "When working with data, you will mostly interact with the `<DataSource />` component, which is responsible for handling and managing the data and passing it down to the `<InfiniteTable />` component, which is the rendering engine for the DataGrid.",
      "readingTime": "4 min read",
      "content": "\nWhen working with data, you will mostly interact with the `<DataSource />` component, which is responsible for handling and managing the data and passing it down to the `<InfiniteTable />` component, which is the rendering engine for the DataGrid.\n\nSo we provide those two components (as named exports) inside `@infinite-table/infinite-react` package:\n\n- `<DataSource />` - our data-handling component\n- `<InfiniteTable />` - our virtualized component\n\nThe `<DataSource/>` component is responsible for the data the management layer.\n\n<Note>\n\nProbably the most important prop for the `<DataSource />` component is the <DPropLink name=\"idProperty\" /> prop. It specifies the property of the data object that is used as a unique identifier for data rows/items.\n\n```tsx\n<DataSource<DATA_TYPE>\n  idProperty=\"id\"\n  data={[]} // or a Promise or function returning a Promise.\n/>\n```\n\n</Note>\n\nThe `<DataSource />` is a generic React TypeScript component that can be bound to an array of items of the generic type.\n\n<Note>\n\nIn this documentation, we'll use `DATA_TYPE` when referring to the generic type. Rarely, we'll use `T`.\n\n```tsx\n<DataSource<DATA_TYPE>>\n  <InfiniteTable<DATA_TYPE> />\n</DataSource>\n```\n\nMost of our examples in these docs have a `Developer` or `Employee` TypeScript data type used as the generic type for the `<DataSource />` component.\n\n</Note>\n\n```tsx\nimport { DataSource } from '@infinite-table/infinite-react';\n\ntype Employee = {\n  id: string | number;\n  name: string;\n  salary: number;\n  department: string;\n  company: string;\n};\n\nconst employees: Employee[] = [\n  { id: 1, name: 'Bob', salary: 10_000, department: 'IT', company: 'Bobsons' },\n  {\n    id: 2,\n    name: 'Alice',\n    salary: 20_000,\n    department: 'IT',\n    company: 'Bobsons',\n  },\n  { id: 3, name: 'John', salary: 30_000, department: 'IT', company: 'Bobsons' },\n];\n\n<DataSource<Employee> primaryKey={'id'} data={employees} />;\n```\n\nIn the snippet above, we see 3 important details:\n\n1. the component is bound to the `Employee` type\n2. we use a `primaryKey` property - here it is `id`, but since the bound type is `Employee`, `primaryKey` is `keyof Employee`\n3. we pass the `employees` array as the `data` property.\n\n<Note>\n\nThe <DataSourcePropLink name=\"data\" /> prop can be either:\n\n- an array of the bound generic type - here `Employee[]`\n- a Promise tha resolves to an array like the above\n- a function that returns any of the above\n\n</Note>\n\n```ts live title=\"Data loading example with promise\" file=\"basic-example.page.tsx\"\n\n```\n\n\n## Data Loading Strategies\n\nWe're aware there are countless strategies for loading data - each with its own strengths. We decided we should focus on building what we do best, namely building virtualized components, so we encourage you to use your preferred data-fetching library/solution. This being said, we still provide you with the flexibility you need when using the `<DataSource/>`, so here's what you can use for the <DPropLink name=\"data\" /> prop of the component:\n\n- an array of the bound type\n- a Promise that resolves to an array of the bound type\n- a function that returns any of the above\n\nWhile you're loading the data, you can always render a loading indicator - pass the <DataSourcePropLink name=\"loading\" /> prop into the component (along with <PropLink name=\"loadingText\" /> prop in the `<InfiniteTable />` component if you want to customize the message).\n\n### Using fetch\n\nFor basic datasets, which have simple data requirements, using `fetch` is probably sufficient, so here is an example:\n\n<Sandpack title=\"Using fetch for remote data\">\n\n```ts files=[\"using-fetch-example.page.tsx\",\"columns.ts\"]\n\n```\n\n</Sandpack>\n\n#### Re-fetching on change\n\nIt's important to note you can re-fetch data by changing the reference you pass as the `data` prop to the `<DataSource/>` component.\n\n<Note>\n\nPassing another <DPropLink name=\"data\"/> function, will cause the component to re-execute the function and thus load new data.\n\nAlternatively, you can use the <DPropLink name=\"refetchKey\" /> prop to trigger a re-fetch - give it a new value (eg: use it as a counter, and increment it) and the component will re-fetch the data.\n\n</Note>\n\n<Sandpack title=\"Re-fetching data\">\n\n```ts files=[\"refetch-example.page.tsx\",\"columns.ts\"]\n\n```\n\n</Sandpack>\n\n## Live Updates\n\nYou can update your data in real-time by using our [DataSource API](/docs/reference/datasource-api).\n\n<HeroCards>\n<YouWillLearnCard title=\"DataSource API\" path=\"/docs/learn/working-with-data/updating-data-in-realtime\">\nRead more about how to use our API to update your data in real-time\n</YouWillLearnCard>\n\n</HeroCards>\n"
    },
    "/docs/learn/working-with-data/lazy-loading": {
      "filePath": "/docs/learn/working-with-data/lazy-loading",
      "routePath": "/docs/learn/working-with-data/lazy-loading",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/working-with-data/lazy-loading.page.md",
      "fileName": "lazy-loading.page.md",
      "folderPath": "/docs/learn/working-with-data/",
      "frontmatter": {
        "title": "Lazy Loading"
      },
      "excerpt": "With `InfiniteTable` you can lazily load data on demand - loading data is triggered by the user scrolling to a certain visible row range. So when the user stopped scrolling (after <PropLink name=\"scrollStopDelay\" /> ms passed), the `DataSource` is loading the records that are in the viewport. Also, the table will render as if all the remote data is loaded into viewport - so the scroll height is correspondingly set.",
      "readingTime": "3 min read",
      "content": "\nWith `InfiniteTable` you can lazily load data on demand - loading data is triggered by the user scrolling to a certain visible row range. So when the user stopped scrolling (after <PropLink name=\"scrollStopDelay\" /> ms passed), the `DataSource` is loading the records that are in the viewport. Also, the table will render as if all the remote data is loaded into viewport - so the scroll height is correspondingly set.\n\nWe call this `\"lazy loading\"`, and it needs to be enabled by specifying the <DataSourcePropLink name=\"lazyLoad\">DataSource.lazyLoad</DataSourcePropLink> prop.\n\n<Sandpack title=\"Lazy loading ungrouped and unpivoted data\">\n\n```ts file=\"simple-lazy-load-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nThe <DataSourcePropLink name=\"lazyLoad\">DataSource.lazyLoad</DataSourcePropLink> prop can be either a boolean or an object with a `batchSize: number` property. If `batchSize` is not specified, it will load all records from the current row group (makes sense for grouped and/or pivoted data). For ungrouped and unpivoted data, make sure you set `batchSize` to a conveninent number.\n\nSimply specifying `lazyLoad=true` makes more sense for grouped (or/and pivoted) data, where you want to load all records from the current level at once. If you want configure it this way, new data will only be requested when a group row is expanded.\n\n</Note>\n\nFor lazy loading to work, the <DataSourcePropLink name=\"data\" /> function in the `<DataSource/>` component must return a Promise that resolves to an an object with `data` and `totalCount` properties.\n\n```tsx\n{\n  data: [ ... ],\n  totalCount: 10000\n}\n```\n\nThe <DPropLink name=\"data\">DataSource.data</DPropLink> function will be called with an object with the following properties:\n\n- `sortInfo` - details about current sorting state\n- `pivotBy` - an array that describes the current pivot state\n- `aggregationReducers` - an object with the aggregation to apply to the data\n- `groupBy` - array that specifies the current grouping information\n- `groupKeys` - an array of the current group keys (if grouping is enabled). This uniquely identifies the current group.\n\n- `lazyLoadStartIndex` - the index (in the total remote datasource) of the first record to be loaded\n- `lazyLoadBatchSize` - the number of records to be loaded in this batch\n\n<HeroCards>\n<YouWillLearnCard title=\"Server-side Grouping Rows\" path=\"/docs/learn/grouping-and-pivoting/grouping-rows#server-side-grouping-with-lazy-loading\">\nFind out about server-side grouping\n</YouWillLearnCard>\n<YouWillLearnCard title=\"Pivoting\" path=\"/docs/learn/grouping-and-pivoting/pivoting/overview#server-side-pivoting\">\nFind out about server-side pivoting\n</YouWillLearnCard>\n</HeroCards>\n\n## How lazy loading fetches data\n\nWhen lazy loading is enabled, and the <DPropLink name=\"sortInfo\" />  changes (eg: user clicks on a column header), the DataGrid will discard current data and call the <DPropLink name=\"data\" /> function prop again, to fetch the new data. The same happens when the <DPropLink name=\"filterValue\" /> or <DPropLink name=\"groupBy\" /> changes. This is done automatically by the component, and you don't need to do anything.\n\n<Sandpack title=\"Lazy loading grouped data\" viewMode=\"preview\">\n\n<Description>\n\nThis demo lazily loads grouped data as the user scrolls down. Expand some groups to see the lazy loading in action.\n\nWhen the user stops scrolling, after <PropLink name=\"scrollStopDelay\" /> milliseconds, the DataGrid will fetch the next batch of data from the server.\n\n</Description>\n\n```ts file=\"grouped-lazy-load-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n<Note>\n\nBatching also happens for groups - when a group is expanded, the DataGrid will fetch the first batch of data in the expanded group and then fetch additional batches as the user scrolls down. When scrolling goes beyound the group, the DataGrid is smart enough to request a batch of data from sibling groups.\n\n</Note>\n\n<Note>\n\nLazy loading when grouping is enabled needs data for non-leaf rows to be in another format (as opposed to the format used for non-grouped data or for the non-grouped scenario). See example above for details.\n\nFor more docs on this, read [Server side grouping with lazy loading](/docs/learn/grouping-and-pivoting/grouping-rows#server-side-grouping-with-lazy-loading).\n\n</Note>"
    },
    "/docs/learn/working-with-data/live-pagination": {
      "filePath": "/docs/learn/working-with-data/live-pagination",
      "routePath": "/docs/learn/working-with-data/live-pagination",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/working-with-data/live-pagination.page.md",
      "fileName": "live-pagination.page.md",
      "folderPath": "/docs/learn/working-with-data/",
      "frontmatter": {
        "title": "Live Pagination",
        "description": "Live Pagination DataSource documentation and examples for Infinite Table DataGrid"
      },
      "excerpt": "`InfiniteTable` supports live pagination in its `DataSource` via the <DataSourcePropLink name=\"livePagination\" /> prop together with <DataSourcePropLink name=\"livePaginationCursor\" />",
      "readingTime": "2 min read",
      "content": "\n`InfiniteTable` supports live pagination in its `DataSource` via the <DataSourcePropLink name=\"livePagination\" /> prop together with <DataSourcePropLink name=\"livePaginationCursor\" />\n\nSpecify `DataSource.livePagination=true` and provide a pagination cursor (a good cursor would be the id of the last item in the `DataSource`).\n\nIn addition, you have to listen to <DataSourcePropLink name=\"onDataParamsChange\" /> which will be triggered with an object that contains the following properties:\n\n- `sortInfo` - information about the current sort state\n- `groupBy` - current grouping info\n- `livePaginationCursor` - the current pagination cursor\n\nWhen `dataParams` change (you will be notified via <DataSourcePropLink name=\"onDataParamsChange\" />), you have to fetch new data using the cursor from `dataParams` object.\n\n<Note title=\"onDataParamsChange trigger\">\n\nBasically <DataSourcePropLink name=\"onDataParamsChange\" /> is triggered whenever props (and state) that affect the `DataSource` change - be it via sorting, filtering, live pagination, pivoting, etc.\n</Note>\n\nBelow you can see a live pagination demo implemented in combination with [react-query](https://react-query.tanstack.com/).\n\n<Sandpack title=\"Live pagination - with react-query\" deps=\"react-query\">\n\n```ts file=\"live-pagination-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nIn the example above, play around and scroll the table and also make sure to try sorting (eg: sort by country or city).\n\n<Note>\n\nFor demo purposes, the page size in the example above is small - it shows that `InfiniteTable` handles infinite pagination correctly by immediately triggering <DataSourcePropLink name=\"onDataParamsChange\" /> when there are not enough rows to fill the viewport.\n\nOn the other hand, when there are many rows and there is a horizontal scrollbar, it triggers <DataSourcePropLink name=\"onDataParamsChange\" /> only when the user scrolls to the end of the table.\n\nIt also handles the case when there is a vertical scrollbar and then the user resizes the viewport to make it bigger and no more vertical scrollbar is needed - again <DataSourcePropLink name=\"onDataParamsChange\" /> is triggered to request more rows.\n\n</Note>\n"
    },
    "/docs/learn/working-with-data/updating-data-in-realtime": {
      "filePath": "/docs/learn/working-with-data/updating-data-in-realtime",
      "routePath": "/docs/learn/working-with-data/updating-data-in-realtime",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/working-with-data/updating-data-in-realtime.page.md",
      "fileName": "updating-data-in-realtime.page.md",
      "folderPath": "/docs/learn/working-with-data/",
      "frontmatter": {
        "title": "Updating Data in Real-Time"
      },
      "excerpt": "Real-Time updates of data are possible via the [DataSource API](/docs/reference/datasource-api).",
      "readingTime": "5 min read",
      "content": "\nReal-Time updates of data are possible via the [DataSource API](/docs/reference/datasource-api).\n\nIn this page we explain some of the complexities and features involved.\n\n## Getting a reference to the DataSource API\n\n<Note>\n\nData Updates are related to the `DataSource` component, therefore make sure you use the [DataSource API](/docs/reference/datasource-api) for this.\n\nYou can get a reference to the [DataSource API](/docs/reference/datasource-api)\n\n- either by using <DPropLink name=\"onReady\" code={false}>the DataSource onReady</DPropLink> prop\n\n```tsx\nconst onReady = (dataSourceApi) => {\n  // do something with the dataSourceApi\n};\n\n<DataSource onReady={onReady} />;\n```\n\n- or by using the <PropLink name=\"onReady\" code={false}>InfiniteTable onReady</PropLink> prop.\n\n```tsx\nconst onReady = ({ api, dataSourceApi }) => {\n  // note for InfiniteTable.onReady, you get back an object\n  // with both the InfiniteTable API (the `api` property)\n  // and the DataSource API (the `dataSourceApi` property)\n}\n\n<DataSource {...}>\n  <InfiniteTable onReady={onReady}/>\n</DataSource>\n```\n\n</Note>\n\n## Updating Rows\n\nTo update the data of a row, you need to know the `primaryKey` for that row and use the <DApiLink name=\"updateData\" /> method of the [DataSource API](/docs/reference/datasource-api).\n\n```tsx {1,3} title=\"Updating_a_single_row_using_dataSourceApi.updateData\"\ndataSourceApi.updateData({\n  // if the primaryKey is the \"id\" field, make sure to include it\n  id: 1,\n\n  // and then include any properties you want to update - in this case, the name and age\n  name: 'Bob Blue',\n  age: 35,\n});\n```\n\nTo update multiple rows, you need to pass the array of data items to the <DApiLink name=\"updateDataArray\" /> method.\n\n```tsx {1,3,8} title=\"Updating_multiple_rows\"\ndataSourceApi.updateDataArray([\n  {\n    id: 1, // if the primaryKey is the \"id\" field, make sure to include it\n    name: 'Bob Blue',\n    age: 35,\n  },\n  {\n    id: 2, // primaryKey for this row\n    name: 'Alice Green',\n    age: 25,\n  },\n]);\n```\n\n<Sandpack title=\"Live data updates with DataSourceApi.updateData\">\n\n<Description>\n\nThe DataSource has 10k items - use the **Start/Stop** button to see updates in real-time.\n\nIn this example, we're updating 5 rows (in the visible viewport) every 30ms.\n\nThe update rate could be much higher, but we're keeping it at current levels to make it easier to see the changes.\n\n</Description>\n\n```ts file=\"realtime-updates-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nFor updating multiple rows, use the <DApiLink name=\"updateDataArray\" /> method.\n\nWhen updating a row, the data object you pass to the `updateData` method needs to at least include the <DPropLink name=\"primaryKey\" /> field. Besides that field, it can include any number of properties you want to update for the specific row.\n\n</Note>\n\n## Batching updates\n\nAll the methods for updating/inserting/deleting rows exposed via the [DataSource API](/docs/reference/datasource-api) are batched by default. So you can call multiple methods on the same raf (requestAnimationFrame), and they will trigger a single render.\n\nAll the function calls made in the same raf return the same promise, which is resolved when the data is persisted to the `DataSource`\n\n```tsx title=\"Updates_made_on_the_same_raf_are_batched_together\"\nconst promise1 = dataSourceApi.updateData({\n  id: 1,\n  name: 'Bob Blue',\n});\n\nconst promise2 = dataSourceApi.updateDataArray([\n  { id: 2, name: 'Alice Green' },\n  { id: 3, name: 'John Red' },\n]);\n\npromise1 === promise2; // true\n```\n\n## Inserting Rows\n\nTo insert a new row into the `DataSource`, you need to use the <DApiLink name=\"insertData\" /> method. For inserting multiple rows at once, use the <DApiLink name=\"insertDataArray\" /> method.\n\n```tsx title=\"Inserting_a_single_row\"\ndataSourceApi.insertData(\n  {\n    id: 10,\n    name: 'Bob Blue',\n    age: 35,\n    salary: 12_000,\n    stack: 'frontend',\n    //...\n  },\n  {\n    position: 'before',\n    primaryKey: 2,\n  },\n);\n```\n\nWhen you insert new data, as a second parameter, you have to provide an object that specifies the insert `position`.\n\nValid values for the insert `position` are:\n\n- `start` | `end` - inserts the data at the beginning or end of the data source. In this case, no `primaryKey` is needed.\n\n```tsx\ndataSourceApi.insertData({ ... }, { position: 'start'})\n// or insert multiple items via\ndataSourceApi.insertDataArray([{ ... }, { ... }], { position: 'start'})\n```\n\n- `before` | `after` - inserts the data before or after the data item that has the specified primary key. **In thise case, the `primaryKey` is required.**\n\n```tsx {5,10}\ndataSourceApi.insertData(\n  { /* ... all data properties here */ },\n  {\n    position: 'before',\n    primaryKey: 2\n  }\n)\n// or insert multiple items via\ndataSourceApi.insertDataArray([{ ... }, { ... }], {\n  position: 'after',\n  primaryKey: 10\n})\n```\n\n<Sandpack title=\"Using dataSourceApi.insertData\">\n\n<Description>\n\nClick any row in the table to make it the current active row, and then use the second button to add a new row after the active row.\n\n</Description>\n\n```ts file=\"insert-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n### Adding rows\n\nIn addition to the <DApiLink name=\"insertData\" /> and <DApiLink name=\"insertDataArray\" /> methods, the `DataSource` also exposes the <DApiLink name=\"addData\" /> and <DApiLink name=\"addDataArray\" /> methods (same as insert with `position=end`).\n\n## Deleting Rows\n\nTo delete rows from the `DataSource` you either need to know the `primaryKey` for the row you want to delete, or you can pass the data object (or at least a partial that contains the `primaryKey`) for the row you want to delete.\n\nAll the following methods are available via the [DataSource API](/docs/reference/datasource-api):\n\n- <DApiLink name=\"removeData\" />\n- <DApiLink name=\"removeDataArray\" />\n- <DApiLink name=\"removeDataByPrimaryKey\" />\n- <DApiLink name=\"removeDataArrayByPrimaryKeys\" />\n"
    },
    "/docs/reference/api/": {
      "filePath": "/docs/reference/api/index",
      "routePath": "/docs/reference/api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/api/",
      "frontmatter": {
        "title": "Infinite Table API",
        "layout": "API"
      },
      "excerpt": "When rendering the `InfiniteTable` component, you can get access to the API by getting it from the <PropLink name=\"onReady\" /> callback prop.",
      "readingTime": "8 min read",
      "content": "\nWhen rendering the `InfiniteTable` component, you can get access to the API by getting it from the <PropLink name=\"onReady\" /> callback prop.\n\n```tsx {2}\nconst onReady = (\n  {api, dataSourceApi}: {\n    api: InfiniteTableApi<DATA_TYPE>,\n    dataSourceApi: DataSourceApi<DATA_TYPE>\n  }) => {\n  // api is accessible here\n  // you may want to store a reference to it in a ref or somewhere in your app state\n}\n\n<InfiniteTable<DATA_TYPE>\n  columns={[...]}\n  onReady={onReady}\n/>\n```\n\nFor API on row/group selection, see the [Selection API page](/docs/reference/selection-api).\n\nSee the [Infinite Table Cell Selection API page](/docs/reference/cell-selecti-api) for the cell selection API.\nSee the [Infinite Table Column API page](/docs/reference/column-api) for the column API.\nSee the [Infinite Table Keyboard Navigation API page](/docs/reference/keyboard-navigation-api) for the keyboard navigation API.\n\nSee the [Infinite Table Row Details API page](/docs/reference/row-detail-api) for the row detail API (when master-detail is configured).\nSee the [Tree API page](/docs/reference/tree-api) for the tree API (when using the `<TreeDataSource />` component).\n\n<PropTable sort searchPlaceholder=\"Type to filter API methods\">\n\n<Prop name=\"confirmEdit\" type=\"(value?: any) => void\">\n\n> Confirms the current edit operation and closes the editor.\n\nIf the `value` parameter is provided, it will be used as the value the cell will be updated with. If the `value` parameter is not provided, the current value of the cell will be used.\n\nSee related <ApiLink name=\"cancelEdit\" /> and <ApiLink name=\"rejectEdit\" />.\n\n</Prop>\n\n<Prop name=\"cancelEdit\" type=\"() => void\">\n\n> Cancels the current edit operation and closes the editor.\n\nSee related <ApiLink name=\"confirmEdit\" /> and <ApiLink name=\"rejectEdit\" />.\n\n</Prop>\n\n<Prop name=\"hideContextMenu\" type=\"() => void\">\n\n> Hides the context menu that's currently displayed (if there's one).\n\n</Prop>\n\n<Prop name=\"rejectEdit\" type=\"(error: Error) => void\">\n\n> Rejects the current edit operation with the specified error and closes the editor.\n\nThe error will later be available to the <PropLink name=\"columns.renderValue\" /> callback prop, via the parameter of the function (also applicable for related functions that are called with same the same parameter).\n\nSee related <ApiLink name=\"confirmEdit\" /> and <ApiLink name=\"cancelEdit\" />.\n\n</Prop>\n\n<Prop name=\"clearColumnFilter\" type=\"(columnId: string) => void\">\n\n> Clears any filter for the specified column\n\n</Prop>\n\n<Prop name=\"toggleSortingForColumn\" type=\"(columnId: string, options?) => void\">\n\n> Toggles the sorting for the specified column.\n\nThis is the same method the component uses internally when the user clicks a column header.\n\nIf the column is not sorted, it gets sorted in ascending order.\n\nIf the column is sorted in ascending order, it gets sorted in descending order.\n\nIf the column is sorted in descending order, the sorting is cleared.\n\n<Note>\n\nThe `options` is optional and can have the `multiSortBehavior` property, which can be either `append` or `replace`. See related <PropLink name=\"multiSortBehavior\" /> prop. If not provided, the default behavior is used.\n\n</Note>\n\nSee related <ApiLink name=\"setSortingForColumn\" /> and <ApiLink name=\"getSortingForColumn\" />.\n\n</Prop>\n\n<Prop name=\"setSortingForColumn\" type=\"(columnId: string, dir: 1|-1|null) => void\">\n\n> Sets the sorting for the specified column.\n\nThe sort direction is specified by the `dir` parameter, which can be:\n\n- `1` for ascending\n- `-1` for descending\n- `null` for clearing the sorting.\n\nSee related <ApiLink name=\"toggleSortingForColumn\" /> and <ApiLink name=\"getSortingForColumn\" />.\n\n</Prop>\n\n<Prop name=\"getSortingForColumn\" type=\"(columnId: string)=> 1|-1|null\">\n\n> Returns the sorting currently applied to the specified column.\n\nThe return value is:\n\n- `1` for ascending\n- `-1` for descending\n- `null` for no sorting.\n\nSee related <ApiLink name=\"toggleSortingForColumn\" /> and <ApiLink name=\"setSortingForColumn\" />.\n\n</Prop>\n\n<Prop name=\"collapseGroupRow\" type=\"(groupKeys: any[]) => boolean\">\n\n> Collapses the specified group row. Returns true if the group was expanded and is now being collapsed.\n\n```tsx\napi.collapseGroupRow(['USA', 'New York']); // collapses the group with these keys\n```\n\n</Prop>\n\n<Prop name=\"expandGroupRow\" type=\"(groupKeys: any[]) => boolean\">\n\n> Expands the specified group row. Returns true if the group was collapsed and is now being expanded.\n\n```tsx\napi.expandGroupRow(['USA', 'New York']); // expands the group with these keys\n```\n\n</Prop>\n\n<Prop name=\"getCellValue\" type=\"({columnId, rowIndex?, primaryKey? }) => any\">\n\n> Returns the value for the specified cell. The value is either the raw value (as retrieved via the `field` property of the column or by calling the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink>) or the formatted value - if the column has a <PropLink name=\"columns.valueFormatter\">valueFormatter</PropLink>.\n\nCall this function with an object that has a `columnId` and either a `rowIndex` or a `primaryKey` property.\n\nSee related <ApiLink name=\"getCellValues\" />.\n\n<Note>\n\nThis function should not be called during a cell render (eg: in <PropLink name=\"columns.render\"/>/<PropLink name=\"columns.renderValue\"/> or other functions called during render).\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getCellValues\" type=\"({columnId, rowIndex?, primaryKey? }) => ({value, rawValue, formattedValue })\">\n\n> Returns an object with raw and formatted values for the specified cell.\n\nCall this function with an object that has a `columnId` and either a `rowIndex` or a `primaryKey` property.\n\nThe returned object has the following properties:\n\n- `rawValue` - the raw value of the cell - as retrieved from the <PropLink name=\"columns.field\"/> property of the column or by calling the column <PropLink name=\"columns.valueGetter\">valueGetter</PropLink>\n- `formattedValue` - the formatted value of the cell - if the column has a <PropLink name=\"columns.valueFormatter\">valueFormatter</PropLink>, it's the value returned by the formatter, otherwise it's the same as the `rawValue`\n- `value` - it's either `formattedValue` or `rawValue`. If the column has a <PropLink name=\"columns.valueFormatter\">valueFormatter</PropLink>, it's the value returned by the formatter, otherwise it's the `rawValue`\n\nSee related <ApiLink name=\"getCellValue\" />.\n\n<Note>\n\nThis function should not be called during a cell render (eg: in <PropLink name=\"columns.render\"/>/<PropLink name=\"columns.renderValue\"/> or other functions called during render).\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getColumnApi\" type=\"(colIdOrIndex: string|number) => InfiniteTableColumnAPI\">\n\n> Returns [a column API object](/docs/reference/column-api) bound to the specified column\n\nThe parameter can be either a column id or a column index (note this is not the index in all columns, but rather the index in current visible columns).\n\n</Prop>\n\n<Prop name=\"getVerticalRenderRange\" type=\"() => { renderStartIndex, renderEndIndex }\">\n\n> Returns the vertical render range of the table\n\nThe vertical render range is the range of rows that are currently rendered in the table viewport.\n\n</Prop>\n\n<Prop name=\"onReady\" type=\"({ api, dataSourceApi }) => void\">\n\n> Called when the table has been layed out and sized and is ready to be used.\n\nThis callback prop will be called with an object containing the `api` (which is an instance of `InfiniteTableApi`) and [`dataSourceApi`](/docs/reference/datasource-api) objects.\n\n</Prop>\n\n<Prop name=\"startEdit\" type=\"({ rowIndex, columnId }) => Promise<boolean>\">\n\n> Tries to start editing the cell specified by the given row index and column id.\n\nReturns a promise that resolves to `true` if editing was started, or `false` if editing was not started because the cell is not editable.\n\nSee <PropLink name=\"columns.defaultEditable\" /> for more details on how to configure a cell as editable.\n\n<Sandpack title=\"Starting an Edit via the API\">\n\n```ts file=\"api-start-edit-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"scrollCellIntoView\" type=\"(rowIndex: number; colIdOrIndex: string | number) => boolean\">\n\n> Can be used to scroll a cell into the visible viewport\n\nIf scrolling was successful and the row and column combination was found, it returns `true`, otherwise `false`. The first arg of the function is the row index, while the second one is the column id or the column index (note this is not the index in all columns, but rather the index in current visible columns).\n\n</Prop>\n\n<Prop name=\"scrollColumnIntoView\" type=\"(colId: string) => boolean\">\n\n> Can be used to scroll a column into the visible viewport\n\nIf scrolling was successful and the column was found, it returns `true`, otherwise `false`.\nThe only parameter of this method is the column id.\n\n</Prop>\n\n<Prop name=\"scrollLeft\" type=\"getter<number>|setter<number>\">\n\n> Gets or sets the `scrollLeft` value in the grid viewport\n\nCan be used as either a setter, to set the scroll left position or a getter to read the scroll left position.\n\n```ts\n// use as setter - will scroll the table viewport\napi.scrollLeft = 200;\n\n// use as getter to read the current scroll left value\nconst scrollLeft = api.scrollLeft;\n```\n\n</Prop>\n\n<Prop name=\"scrollRowIntoView\" type=\"(rowIndex: number) => boolean\">\n\n> Can be used to scroll a row into the visible viewport\n\nIf scrolling was successful and the row was found, it returns `true`, otherwise `false`\n\n</Prop>\n\n<Prop name=\"scrollTop\" type=\"getter<number>|setter<number>\">\n\n> Gets or sets the `scrollTop` value in the grid viewport\n\nCan be used as either a setter, to set the scroll top position or a getter to read the scroll top position.\n\n```ts\n// use as setter - will scroll the table viewport\napi.scrollTop = 1200;\n\n// use as getter to read the current scroll top value\nconst scrollTop = api.scrollTop;\n```\n\n</Prop>\n\n<Prop name=\"rowSelectionApi\" type=\"InfiniteTableRowSelectionApi\">\n\n> Getter for the [Row Selection API](/docs/reference/row-selection-api)\n\n</Prop>\n\n<Prop name=\"rowDetailApi\" type=\"InfiniteTableRowDetailApi\">\n\n> Getter for the [Row Detail API](/docs/reference/row-detail-api)\n\n</Prop>\n<Prop name=\"cellSelectionApi\" type=\"InfiniteTableCellSelectionApi\">\n\n> Getter for the [Cell Selection API](/docs/reference/cell-selection-api)\n\n</Prop>\n\n<Prop name=\"setColumnFilter\" type=\"(columnId: string, value: any) =>void\">\n\n> Sets a filter value for the specified column\n\n</Prop>\n\n<Prop name=\"setColumnOrder\" type=\"(columnIds: string[] | true) => void\">\n\n> Set the column order.\n\nIf `true` is specified, it resets the column order to the order the columns are specified in the <PropLink name=\"columns\" /> prop (the iteration order of that object).\n\n```ts\napi.setColumnOrder(['id', 'firstName', 'age']);\n// restore default order\napi.setColumnOrder(true);\n```\n\n</Prop>\n\n<Prop name=\"toggleGroupRow\" type=\"(groupKeys: any[]) => void\">\n\n> Toggles the collapse/expand state of the specified group row\n\n```tsx\napi.toggleGroupRow(['USA', 'New York']); // toggle the group with these keys\n```\n\n</Prop>\n\n</PropTable>\n"
    },
    "/docs/reference/cell-selection-api/": {
      "filePath": "/docs/reference/cell-selection-api/index",
      "routePath": "/docs/reference/cell-selection-api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/cell-selection-api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/cell-selection-api/",
      "frontmatter": {
        "title": "Infinite Table Cell Selection API",
        "layout": "API"
      },
      "excerpt": "```tsx title=\"Configuring the selection mode to be 'multi-cell'\"",
      "readingTime": "4 min read",
      "content": "\n```tsx title=\"Configuring the selection mode to be 'multi-cell'\"\n<DataSource selectionMode=\"multi-cell\" />\n\n// can be \"single-row\", \"multi-row\", \"multi-cell\" or false\n```\n\n<Note>\n\nTo enable cell selection, you need to specify <DPropLink name=\"selectionMode\">selectionMode=\"multi-cell\"</DPropLink> on the `<DataSource />` component.\n\n</Note>\n\nYou can retrieve the cell selection api by reading it from the `api.cellSelectionApi` property.\n\n```tsx {4}\n\nconst onReady = ({api}: {api:InfiniteTableApi<DATA_TYPE>}) => {\n  // do something with it\n  api.cellSelectionApi.selectGroupRow(['USA'])\n}\n\n<InfiniteTable<DATA_TYPE>\n  columns={[...]}\n  onReady={onReady}\n/>\n```\n\nSee the [Infinite Table API page](/docs/reference/api) for the main API.\nSee the [Infinite Table Keyboard Navigation API page](/docs/reference/keyboard-navigation-api) for the keyboard navigation API.\nSee the [Infinite Table Row Selection API page](/docs/reference/row-selection-api) for the row selection API.\nSee the [Infinite Table Column API page](/docs/reference/column-api) for the column API.\n\n<PropTable sort searchPlaceholder=\"Type to filter API methods\">\n\n<Prop name=\"isCellSelected\" type=\"({rowIndex/rowId, colIndex/colId}) => boolean\">\n\n> Boolean getter to report if a cell is selected.\n\nThe accepted argument is an object with the following properties:\n\n- `rowIndex` (the index of the row) or `rowId` (the id of the row)\n- `colIndex` (the index of the column) or `colId` (the id of the column)\n\nYou can identify the cell by any of the valid combinations of `rowIndex`/`rowId` and `colIndex`/`colId`.\n\n<Note>\n\nUsing row and column indexes for selection is supported to make it easier to use the API, but in fact cells are selected by the `rowId/colId` combination.\n\nThis is important to keep in mind, as when columns are reordered or rows are sorted/filtered - the selection will be bound to the `rowId/colId` - so cells that were selected as siblings before a column reorder might not be siblings after the reorder, but they will still be rendered as selected.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"mapCellSelectionPositions\" type=\"(fn: (rowInfo, colId) => any, emptyValue)\">\n\n> Maps the selected cells using the passed fn.\n\nThis allows you to retrieve the values from the selected cells, by using a mapping function, so for each value (cell) in the selection, the passed `fn` is called, so you can return your own object with the values you need.\n\n<Sandpack title=\"Retrieving cell selection value by mapping over them\" size=\"lg\" deps=\"ag-charts-react,ag-charts-community\">\n\n```ts file=cell-selection-mapping-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"selectColumn\" type=\"(colId: string)=> void\">\n\n> Selects all cells in the specified column.\n\n<Sandpack title=\"Using `selectColumn` with controlled selection\" size=\"lg\">\n\n```ts file=\"$DOCS/reference/datasource-props/controlled-cell-selection-with-api-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"selectCell\" type=\"({ rowIndex/rowId, colIndex/colId, clear?: boolean}) => void\">\n\n> Selects the specified cell.\n\nFor the shape of the argument see related [isCellSelected](#isCellSelected).\n\nAdditionally, you can pass a `clear` property to clear the selection before selecting the cell.\n\nAlso see related [deselectCell](#deselectCell).\n\nIn order to select a cell via mouse interaction, simply click the desired cell. Clicking a cell without any modifier keys will clear the selection and select the clicked cell.\n\nYou can use `Cmd/Ctrl+Click` to add cells to the selection, or `Shift+Click` to select a range of cells.\n\n<Sandpack title=\"Selecting a cell via the Cell Selection API\">\n\n```ts file=\"select-cell-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"deselectCell\" type=\"({ rowIndex/rowId, colIndex/colId}) => void\">\n\n> Deselects the specified cell.\n\nFor the shape of the argument see related [isCellSelected](#isCellSelected).\n\nAlso see related [selectCell](#selectCell).\n\n</Prop>\n\n<Prop name=\"selectAll\" type=\"() => void\">\n\n> Selects all cells in the DataGrid.\n\nSee related [deselectAll](#deselectAll).\n\n</Prop>\n\n<Prop name=\"deselectAll\" type=\"() => void\">\n\n> Deselects all cells in the DataGrid.\n\nSee related [selectAll](#selectAll).\n\n</Prop>\n\n<Prop name=\"clear\" type=\"() => void\">\n\n> An alias for [deselectAll](#deselectAll).\n\n</Prop>\n\n<Prop name=\"selectRange\" type=\"(start, end) => void\">\n\n> Selects the specified cell range.\n\nThe `start` and `end` arguments are objects of the same shape as the argument for [isCellSelected](#isCellSelected).\n\nIn order to select a range via mouse interaction, use `Cmd/Ctrl+Click` and `Shift+Click` as you would in a spreadsheet application.\n\nClicking a cell without holding the modifier keys will clear the selection and select the clicked cell.\n\n<Sandpack title=\"Selecting a range via the Cell Selection API\">\n\n```ts file=\"select-range-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nDon't worry if the `start` or `end` are not passed in the correct order - Infinite Table will figure it out.\n\n</Note>\n\nFor deselecting a range see [deselectRange](#deselectRange).\n\n</Prop>\n\n<Prop name=\"deselectRange\" type=\"(start, end) => void\">\n\n> Deselects the specified cell range.\n\nThe `start` and `end` arguments are objects of the same shape as the argument for [isCellSelected](#isCellSelected).\n\n<Note>\n\nDon't worry if the `start` or `end` are not passed in the correct order - Infinite Table will figure it out.\n\n</Note>\n\nFor selecting a range see [selectRange](#selectRange).\n\n<Sandpack title=\"Deselecting a range via the Cell Selection API\">\n\n```ts file=\"deselect-range-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n</PropTable>\n"
    },
    "/docs/reference/column-api/": {
      "filePath": "/docs/reference/column-api/index",
      "routePath": "/docs/reference/column-api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/column-api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/column-api/",
      "frontmatter": {
        "title": "Infinite Table Column API",
        "layout": "API"
      },
      "excerpt": "When rendering the `InfiniteTable` component, you can get access to the Column API through various column render props (for example, the <PropLink name=\"columns.header\" /> render prop).",
      "readingTime": "3 min read",
      "content": "\nWhen rendering the `InfiniteTable` component, you can get access to the Column API through various column render props (for example, the <PropLink name=\"columns.header\" /> render prop).\n\nFor the root API see the [API page](/docs/reference/api).\nSee the [Infinite Table Keyboard Navigation API page](/docs/reference/keyboard-navigation-api) for the keyboard navigation API.\nFor API on row/group selection, see the [Selection API page](/docs/reference/selection-api).\nSee the [Infinite Table Row Selection API page](/docs/reference/row-selection-api) for the row selection API.\nSee the [Infinite Table Row Detail API page](/docs/reference/row-detail-api) for the row detail API (when master-detail is configured).\n\n<PropTable searchPlaceholder=\"Type to filter API methods\" sort>\n\n<Prop name=\"clearSort\">\n\n> Clears the sorting for the current column.\n\nSee related <PropLink name=\"setSort\" /> prop.\n\nCalling this will trigger <DPropLink name=\"onSortInfoChange\" />\n\n</Prop>\n\n<Prop name=\"hideContextMenu\" type=\"() => void\">\n\n> Hides the column context menu, if visible.\n\nFor showing the menu, see <PropLink name=\"showContextMenu\"/>. To toggle the menu, see <PropLink name=\"toggleContextMenu\"/>.\n\n</Prop>\n\n<Prop name=\"setSort\" type=\"(sortDir: 1|-1|null) => void\">\n\n> Sets the sort direction for the current column.\n\nTo clear the sort, pass `null` as the argument. See related <PropLink name=\"clearSort\"/>\n\nCalling this will trigger <DPropLink name=\"onSortInfoChange\" />.\n\n</Prop>\n\n<Prop name=\"toggleSort\" type=\"(options?) => void\">\n\n> Toggles the sorting for the current column. Aliased to <ApiLink name=\"toggleSortingForColumn\" />.\n\nThis is the same method the component uses internally when the user clicks a column header.\n\nIf the column is not sorted, it gets sorted in ascending order.\n\nIf the column is sorted in ascending order, it gets sorted in descending order.\n\nIf the column is sorted in descending order, the sorting is cleared.\n\n<Note>\n\nThe `options` is optional and can have the `multiSortBehavior` property, which can be either `append` or `replace`. See related <PropLink name=\"multiSortBehavior\" /> prop. If not provided, the default behavior is used.\n\n</Note>\n\nSee related <ColumnApiLink name=\"setSort\" /> and <ColumnApiLink name=\"getSortingForColumn\" />.\n\n</Prop>\n\n<Prop name=\"setSort\" type=\"(dir: 1|-1|null) => void\">\n\n> Sets the sorting for the current column. Aliased to <ApiLink name=\"setSortingForColumn\" />.\n\nThe sort direction is specified by the `dir` parameter, which can be:\n\n- `1` for ascending\n- `-1` for descending\n- `null` for clearing the sorting.\n\nSee related <ColumnApiLink name=\"toggleSort\" /> and <ColumnApiLink name=\"getSortDir\" />.\n\n</Prop>\n\n<Prop name=\"getSortDir\" type=\"()=> 1|-1|null\">\n\n> Returns the sorting currently applied to the current column. Aliased to <ApiLink name=\"getSortingForColumn\" />.\n\nThe return value is:\n\n- `1` for ascending\n- `-1` for descending\n- `null` for no sorting.\n\nSee related <ColumnApiLink name=\"toggleSortingForColumn\" /> and <ColumnApiLink name=\"setSortingForColumn\" />.\n\n</Prop>\n\n<Prop name=\"clearSort\" type=\"() => void\">\n\n> Clears the sorting for the current column.\n\nIt is the same as calling <ColumnApiLink name=\"setSort\" /> with `null` as the argument.\n\n</Prop>\n\n<Prop name=\"isSortable\" type=\"()=> boolean\">\n\n> Returns whether the current column is sortable.\n\nSee related <PropLink name=\"columnDefaultSortable\" />, <PropLink name=\"columns.defaultSortable\" />, <PropLink name=\"columnTypes.defaultSortable\" /> and <PropLink name=\"sortable\" />\n\n</Prop>\n\n<Prop name=\"showContextMenu\" type=\"() => void\">\n\n> Shows the column context menu, if not already visible.\n\nFor hiding the menu, see <PropLink name=\"hideContextMenu\"/>. To toggle the menu, see <PropLink name=\"toggleContextMenu\"/>.\n\n</Prop>\n\n<Prop name=\"toggleContextMenu\" type=\"() => void\">\n\n> Toggles the column context menu.\n\nFor showing the menu, see <PropLink name=\"showContextMenu\"/>. For hiding the menu, see <PropLink name=\"hideContextMenu\"/>.\n\n<Sandpack title=\"Custom header with button to trigger the column context menu using the Column API\">\n\n<Description>\n\nThe `preferredLanguage` column has a custom header that shows a button for triggering the column context menu using the Column API.\n\n</Description>\n\n```ts file=\"$DOCS/reference/getColumnMenuItems-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n</PropTable>\n"
    },
    "/docs/reference/datasource-api/": {
      "filePath": "/docs/reference/datasource-api/index",
      "routePath": "/docs/reference/datasource-api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/datasource-api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/datasource-api/",
      "frontmatter": {
        "title": "DataSource API",
        "layout": "API"
      },
      "excerpt": "When rendering the `DataSource` component, you can get access to the API by getting it from the <DPropLink name=\"onReady\" /> callback prop.",
      "readingTime": "16 min read",
      "content": "\nWhen rendering the `DataSource` component, you can get access to the API by getting it from the <DPropLink name=\"onReady\" /> callback prop.\n\n```tsx {3}\n<DataSource<DATA_TYPE>\n  onReady={(api: DataSourceApi<DATA_TYPE>) => {\n    // api is accessible here\n    // you may want to store a reference to it in a ref or somewhere in your app state\n  }}\n/>\n```\n\nYou can also get it from the `InfiniteTable` <PropLink name=\"onReady\" /> callback prop:\n\n```tsx {4}\n<InfiniteTable<DATA_TYPE>\n  columns={[...]}\n  onReady={(\n    {api, dataSourceApi}: {\n      api: InfiniteTableApi<DATA_TYPE>,\n      dataSourceApi: DataSourceApi<DATAT_TYPE>\n    }) => {\n\n    // both api and dataSourceApi are accessible here\n  }}\n/>\n```\n\nFor API on row/group selection, see the [Selection API page](/docs/reference/selection-api).\n\n<PropTable sort searchPlaceholder=\"Type to filter API methods\">\n\n<Prop name=\"isRowDisabledAt\" type=\"(rowIndex: number) => boolean\">\n\n> Returns `true` if the row at the specified index is disabled, `false` otherwise.\n\nSee the <DPropLink name=\"rowDisabledState\" /> prop for more information.\n\nFor checking if a row is disabled by its primary key, see the <DApiLink name=\"isRowDisabled\" /> method.\n\nFor changing the enable/disable state for the row, see the <DApiLink name=\"setRowEnabledAt\" />.\n\n<Sandpack title=\"Changing the enable/disable state for a row\">\n\n```ts file=\"../datasource-props/rowDisabledState-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"isRowDisabled\" type=\"(primaryKey: any) => boolean\">\n\n> Returns `true` if the row with the specified primary key is disabled, `false` otherwise.\n\nSee the <DPropLink name=\"rowDisabledState\" /> prop for more information.\n\nFor checking if a row is disabled by its index, see the <DApiLink name=\"isRowDisabledAt\" /> method.\n\nFor changing the enable/disable state for the row, see the <DApiLink name=\"setRowEnabled\" />.\n\n<Sandpack title=\"Changing the enable/disable state for a row\">\n\n```ts file=\"../datasource-props/rowDisabledState-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"setRowEnabled\" type=\"(primaryKey: any, enabled: boolean) => void\">\n\n> Sets the enable/disable state for the row with the specified primary key.\n\nSee the <DPropLink name=\"rowDisabledState\" /> prop for more information.\n\nFor setting the enable/disable state for a row by its index, see the <DApiLink name=\"setRowEnabledAt\" /> method.\n\n<Sandpack title=\"Changing the enable/disable state for a row\">\n\n```ts file=\"../datasource-props/rowDisabledState-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"treeApi\" type=\"TreeApi<DATA_TYPE>\">\n\n> A reference to the [Tree API](/docs/reference/tree-api).\n\nWhen using the `<TreeDataSource />` component, this property will be available on the `DataSourceApi` instance.\n\n</Prop>\n<Prop name=\"setRowEnabledAt\" type=\"(rowIndex: number, enabled: boolean) => void\">\n\n> Sets the enable/disable state for the row at the specified index.\n\nSee the <DPropLink name=\"rowDisabledState\" /> prop for more information.\n\nFor setting the enable/disable state for a row by its primary key, see the <DApiLink name=\"setRowEnabled\" /> method.\n\n<Sandpack title=\"Changing the enable/disable state for a row\">\n\n```ts file=\"../datasource-props/rowDisabledState-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"replaceAllData\" type=\"(data: DATA_TYPE[], options?: DataSourceCRUDParam) => Promise\">\n\n> Replaces all data in the DataSource with the provided data.\n\nClears the current data array in the `<DataSource />` and replaces it with the provided data.\n\nWhen calling this, if there are pending data mutations, they will be discarded.\n\nSee related <DApiLink name=\"clearAllData\" /> method.\n\n</Prop>\n\n<Prop name=\"clearAllData\" type=\"() => Promise\">\n\n> Clears all data in the DataSource.\n\nSee related <DApiLink name=\"replaceAllData\" /> method.\n\n</Prop>\n\n<Prop name=\"addData\" type=\"(data: DATA_TYPE) => Promise\">\n\n> Adds the specified data at the end of the data source.\n\nThe given data param should be of type `DATA_TYPE` (the TypeScript generic data type that the `DataSource` was bound to).\n\nFor adding an array of data, see the <DApiLink name=\"addDataArray\" /> method.\n\n<Note>\n\nIf the component has <DPropLink name=\"sortInfo\" code={false}>sorting</DPropLink>, the added data might not be displayed at the end of the data source.\n\n</Note>\n\nThis method batches data updates and waits for a request animation frame until it persists the data to the `DataSource`. This means you can execute multiple calls to `addData` (or <DPropLink name=\"updateData\"/>, <DPropLink name=\"removeData\"/>, <DPropLink name=\"insertData\"/>) in the same frame and they will be batched and persisted together.\n\nThe return value is a `Promise` that resolves when the data has been added. When multiple `addData` (and friends) calls are executed in the same frame, the result of those calls is a reference to the same promise.\n\n```ts\nconst promise1 = dataSourceApi.add({ ... })\nconst promise2 = dataSourceApi.add({ ... })\nconst promise3 = dataSourceApi.insertData({ ... }, { position: 'before', primaryKey: 4 })\n\n// promise1, promise2 and promise3 are the same promise\n// as the calls are run in the same raf and batched together\n// promise1 === promise2\n// promise1 === promise3\n```\n\nFor adding an array of data, see the <DApiLink name=\"addDataArray\" /> method.\nFor inserting data at a specific position, see the <DApiLink name=\"insertData\" /> method.\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n<Sandpack title=\"Using DataSourceApi.addData to update the DataSource\">\n\n```ts file=\"addData-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"addDataArray\" type=\"(data: DATA_TYPE[]) => Promise\">\n\n> Adds an array of data at the end of the data source\n\nSee related <DApiLink name=\"addData\" /> method.\n\nFor adding at the beginning of the data source, see the <DApiLink name=\"insertDataArray\" /> method.\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n</Prop>\n\n<Prop name=\"getDataByNodePath\" type=\"(nodePath: NodePath) => DATA_TYPE | null\">\n\n> Retrieves the data object for the specified node path.\n\n<Sandpack title=\"Retrieving data by node path\">\n\n```tsx file=\"tree-getDataByNodePath-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"getDataByPrimaryKey\" type=\"(primaryKey: string | number) => DATA_TYPE | null\">\n\n> Retrieves the data object for the specified primary key.\n\nYou can call this method to retrieve objects from the data source even when they have been filtered out via <DPropLink name=\"filterValue\" /> or <DPropLink name=\"filterFunction\" />, as long as they are present in the initial data.\n\n<Note>\n\nThe alternative API method <DApiLink name=\"getRowInfoByPrimaryKey\" /> can only be used to retrieve <TypeLink name=\"InfiniteTableRowInfo\" code={false}>row info objects</TypeLink> of rows that are not filtered out - so only rows that match the filtering, if one is present.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getIndexByPrimaryKey\" type=\"(id: any) => number\">\n> Retrieves the index of a row by its primary key. If the row is not found, returns `-1`. See related <DApiLink name=\"getPrimaryKeyByIndex\" />\n\n<Note>\n\nThe primary key you pass in needs to exist in the current data set. If you pass in a primary key that has been filtered out or that's not in the data set, the method will return `-1`.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getPrimaryKeyByIndex\" type=\"(index: number) => any | undefined \">\n\n> Retrieves the primary key of a row by its current index. If the row is not found, returns `undefined`. See related <DApiLink name=\"getIndexByPrimaryKey\" />\n\n<Note>\n\nThe index needs to be of an existing row, after all filtering is applied. If you pass in an non-existent index, the method will return `undefined`.\n\n</Note>\n\n</Prop>\n\n\n<Prop name=\"getDataByNodePath\" type=\"(nodePath: any[]) => DATA_TYPE | null\">\n\n> Retrieves the data object for the node with the specified path. If the node is not found, returns `null`. See related <DApiLink name=\"getDataByIndex\" />. See related <DApiLink name=\"getRowInfoByNodePath\" />.\n\n<Note>\n\nThe node path needs to be of an existing node. If you pass in a non-existent (or filtered out) node path, the method will return `null`.\n\n</Note>\n\n<Sandpack title=\"Retrieving data by node path\">\n\n```tsx file=\"tree-getDataByNodePath-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n\n<Prop name=\"getRowInfoByNodePath\" type=\"(nodePath: any[]) => InfiniteTableRowInfo<DATA_TYPE> | null\">\n\n> Retrieves the <TypeLink name=\"InfiniteTableRowInfo\" code={false}>row info object</TypeLink> for the node with the specified path. If the node is not found, returns `null`. See related <DApiLink name=\"getDataByNodePath\" />.\n\n<Note>\n\nThe node path needs to be of an existing node. If you pass in a non-existent (or filtered out) node path, the method will return `null`.\n\n</Note>\n\n\n</Prop>\n\n<Prop name=\"getRowInfoByIndex\" type=\"(index: number) => InfiniteTableRowInfo<DATA_TYPE> | null\">\n\n> Retrieves the <TypeLink name=\"InfiniteTableRowInfo\" code={false}>row info object</TypeLink> for the row at the specified index. If none found, returns `null`. See related <DApiLink name=\"getRowInfoByPrimaryKey\" />.\n\n</Prop>\n\n<Prop name=\"getRowInfoByPrimaryKey\" type=\"(id: any) => InfiniteTableRowInfo<DATA_TYPE> | null\">\n\n> Retrieves the <TypeLink name=\"InfiniteTableRowInfo\" code={false}>row info object</TypeLink> for the row with the specified primary key. If none found, returns `null`.\n\nThis method will only find row info objects for rows that are currently in the dataset and matching the filtering, if one is present. Can also be called for group rows.\n\n<Note>\n\nSee related <DApiLink name=\"getDataByPrimaryKey\" /> method, which retrieves the raw data object for the specified primary key, even if it has been filtered out.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getRowInfoArray\" type=\"() => InfiniteTableRowInfo[]\">\n\n> Returns the current row info array. See <TypeLink name=\"InfiniteTableRowInfo\" code={false}>the type definition of the row info object</TypeLink>.\n\nThe row info array represents the current state of the DataSource. This array may contain more items than the actual data array fetched initially by the DataSource. This is because it includes group rows, when grouping is defined, as well as unfetched rows in some advanced scenarios.\n\n</Prop>\n\n<Prop name=\"insertData\" type=\"(data: DATA_TYPE, { position, primaryKey }) => Promise\">\n\n> Inserts the given data at the specified position relative to the given primary key.\n\nThe `position` can be one of the following:\n\n- `start` | `end` - inserts the data at the beginning or end of the data source. In this case, no `primaryKey` is needed.\n- `before` | `after` - inserts the data before or after the data item that has the specified primary key. **In thise case, the `primaryKey` is required.**\n\nWe're intentionally not encouraging inserting at a specified `index`, as the index of rows in the visible viewport can change as the user sorts, filters or groups the data.\n\nFor inserting an array of data, see the <DApiLink name=\"insertDataArray\" /> method.\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n<Sandpack title=\"Inserting data at various locations\">\n\n<Description>\n\nClick any row in the table to make it the current active row, and then use the second button to add a new row after the active row.\n\n</Description>\n\n```ts file=\"insert-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"insertDataArray\" type=\"(data: DATA_TYPE[], { position, primaryKey?, nodePath?, waitForNode? }) => Promise\">\n\n> Inserts an array of data at the specified position (and relative to the given primary key or node path).\n\nJust like the <DApiLink name=\"insertData\" /> method, the `position` can be one of the following:\n\n- `start` | `end` - inserts the data at the beginning or end of the data source. In this case, no `primaryKey` is needed. If `nodePath` is provided, `\"start\"` means insert the data at the start of the children array of that node; `\"end\"` means insert the data at the end of the children array of that node.\n- `before` | `after` - inserts the data before or after the data item that has the specified primary key / node path. **In thise case, the `primaryKey` or the `nodePath` is required.**\n\nAll the data items passed to this method will be inserted (in the order in the array) at the specified position.\n\n<Note>\n\nWhen using this method for tree nodes, `waitForNode` defaults to `true` (you can specify a boolean value, or a number to override the default timeout). When `waitForNode` is `true`, the method will insert the data in the respective node's children array, after making sure the node exists.\n\n</Note>\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n</Prop>\n\n<Prop name=\"updateDataArrayByNodePath\" type=\"({data, nodePath}[]) => Promise\">\n\n> Updates the data for the nodes specified by the node paths.\n\nThe first parameter should be an array of objects, where each object has a `data` property (the data to update) and a `nodePath` property (the path of the node to update).\n\n\n```tsx title=\"Updating an aray of tree nodes\"\ndataSourceApi.updateDataArrayByNodePath([\n  {\n    data: {\n      fileName: 'Vacation.pdf',\n      sizeInKB: 1000,\n    },\n    nodePath: ['1', '10'],\n  },\n  {\n    data: {\n      fileName: 'Report.docx',\n      sizeInKB: 2000,\n    },\n    nodePath: ['1', '11'],\n  },\n]);\n```\n\n</Prop>\n\n\n<Prop name=\"updateChildrenByNodePath\" type=\"(children: DATA_TYPE[] | any | (children, data) => DATA_TYPE[] | any, nodePath: NodePath) => Promise, options?\">\n\n> Updates the children of the node specified by the node path.\n\nThe first parameter can be an array (or `null` or `undefined`) or a function that returns an array (or `null` or `undefined`).\n\nThe second parameter is the node path.\n\nWhen a function is passed as the first parameter, it will be called with the children of the node. The return value will be used as the new children of the node. This gives you an opportunity to update the children based on the current children state.\n\n```tsx title=\"Updating the children of a tree node\"\ndataSourceApi.updateChildrenByNodePath(\n  (currentChildren) => {\n    return [\n      ...(currentChildren || []),\n      {\n        name: 'untitled.txt',\n        id: '8',\n      },\n    ];\n  },\n  ['1', '3'],\n);\n```\n\n<Note>\n\nWhen using a function, it will be called with the current children of the node (1st parameter) and also with the node data object (2nd parameter).\n\n</Note>\n\n<Note>\n\nAs a third parameter, you can pass in an options object, which supports the `waitForNode` property (`boolean` or `number` to override the default timeout). When `waitForNode` is `true`, the method will update the children of the node, after making sure the node exists (and waiting for the specified timeout if needed).\n\n</Note>\n\n</Prop>\n\n<Prop name=\"waitForNodePath\" type=\"(nodePath: NodePath, options?: { timeout?: number }) => Promise<boolean>\">\n\n> Returns a promise that tells if the node path exists.\n\nCalling this method will give you a promise that will tell you if the node path exists or not.\n\nIf the `DataSource` can find the node path either immediately or before the specified timeout expires, the promise will resolve to `true`, otherwise it will resolve to `false`.\n\nIf no `timeout` is specified, it will default to `1000`ms.\n\n</Prop>\n\n<Prop name=\"updateDataByNodePath\" type=\"(data: Partial<DATA_TYPE>, nodePath: NodePath, options?) => Promise\">\n\n> Updates the data for the node specified by the node path.\n\n<Note>\n\nIf the primary keys in your `<TreeDataSource />` are unique globally (not just within the same node), you can still use the <DPropLink name=\"updateData\" /> method.\n\n</Note>\n\n\n```tsx title=\"Updating a tree node by path\"\ndataSourceApi.updateDataByNodePath({\n  fileName: 'New Name',\n  sizeInKB: 1000,\n}, ['1', '10']);\n```\n\n<Sandpack title=\"Updating a tree node by path\" size=\"lg\">\n\n```ts file=\"tree-updateDataByPath-example.page.tsx\"\n```\n\n</Sandpack>\n\n<Note>\n\nThe third parameter is an options object, which can have a `waitForNode` property (either `boolean` or `number` - use a `number` to override the default timeout). NOTE: if you don't pass it, it defaults to `1000ms`.\n\nWhen `waitForNode` is used, if the node does not exist yet, it will wait for the specified timeout and then update the data.\n\n</Note>\n</Prop>\n\n\n<Prop name=\"removeDataByNodePath\" type=\"(nodePath: NodePath) => Promise\">\n\n> Removes the node specified by the specified node path.\n\n<Note>\n\nIf the primary keys in your `<TreeDataSource />` are unique globally (not just within the same node), you can still use the <DPropLink name=\"removeDataByPrimaryKey\" /> method.\n\n</Note>\n\n\n```tsx title=\"Removing a tree node by path\"\ndataSourceApi.removeDataByNodePath(['1', '10']);\n```\n\n<Sandpack title=\"Removing a tree node by path\" size=\"lg\">\n\n```ts file=\"tree-removeDataByNodePath-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"updateData\" type=\"(data: Partial<DATA_TYPE>, options?) => Promise\">\n\n> Updates the data item to match the given data object. For updating tree nodes by path, see the <DApiLink name=\"updateDataByNodePath\" /> method.\n\n<Note>\n\nThe data object must have a primary key that matches the primary key of the data item that you want to update. Besides the primary key, it can contain any number of properties that you want to update.\n\n</Note>\n\n```ts\ndataSourceApi.updateData({\n  // if the primaryKey is the id, make sure to include it\n  id: 1,\n\n  // and then include any properties you want to update - in this case, the name and age\n  name: 'John Doe',\n  age: 30,\n});\n```\n\n<Sandpack title=\"Updating a row\">\n\n```ts file=\"simple-updateData-example.page.tsx\"\n```\n\n</Sandpack>\n\nFor updating an array of data, see the <DApiLink name=\"updateDataArray\" /> method.\n\n<Note>\n\nThe second parameter is an options object, which can have a `waitForNode` property (either `boolean` or `number` - use a `number` to override the default timeout). NOTE: if you don't pass it, it defaults to `1000ms`.\n\nWhen `waitForNode` is used, if the node does not exist yet, it will wait for the specified timeout and then update the data.\n\n</Note>\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n<Sandpack title=\"Live data updates with DataSourceApi.updateData\">\n\n<Description>\n\nThe DataSource has 10k items.\n\nIn this example, we're updating 5 rows (in the visible viewport) every 30ms.\n\nThe update rate could be much higher, but we're keeping it at current levels to make it easier to see the changes.\n\n</Description>\n\n```ts file=\"live-updates-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"updateDataArray\" type=\"(data: Partial<DATA_TYPE>[], options?) => Promise\">\n\n> Updates an array of data items to match the given data objects.\n\nSee related <DApiLink name=\"updateData\" /> method.\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n</Prop>\n\n<Prop name=\"onReady\" type=\"(api: DataSourceApi) => void\">\n\n> Called only once, after the DataSource component has been mounted.\n\nThis callback prop will be called with an `DataSourceApi` instance. For retrieving the [`InfiniteTableApi`](/docs/reference/api), see the `InfiniteTable` <PropLink name=\"onReady\" /> callback prop.\n\n</Prop>\n\n<Prop name=\"removeData\" type=\"(data: Partial<DATA_TYPE>) => Promise\">\n\n> Removes the data item that matches the given data object.\n\nThe data object must at least have a primary key that matches the primary key of the data item that you want to remove. All the other properties are ignored.\n\nFor removing an array of data, see the <DApiLink name=\"removeDataArray\" /> method.\n\nIf you only want to remove by a primary key, you can call <DApiLink name=\"removeDataByPrimaryKey\" /> instead.\nIf you have an array of primary keys, you can call <DApiLink name=\"removeDataArrayByPrimaryKeys\" /> instead.\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n</Prop>\n\n<Prop name=\"getOriginalDataArray\" type=\"() => DATA_TYPE[]\">\n\n> Returns the data array that was last loaded by the `DataSource`\n\nThis is the array loaded by the `DataSource`, before any filtering, sorting or grouping is applied.\n\n</Prop>\n\n<Prop name=\"removeDataArray\" type=\"(data: Partial<DATA_TYPE>[]) => Promise\">\n\n> Removes the data items that match the given data objects.\n\nThe data objects must at least have a primary key that matches the primary key of the data item that you want to remove. All the other properties are ignored.\n\nFor removing only one item, see the <DApiLink name=\"removeData\" /> method.\n\nIf you only want to remove by a primary key, you can call <DApiLink name=\"removeDataByPrimaryKey\" /> instead.\nIf you have an array of primary keys, you can call <DApiLink name=\"removeDataArrayByPrimaryKeys\" /> instead.\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n</Prop>\n\n<Prop name=\"removeDataArrayByPrimaryKeys\" type=\"(primaryKeys: (string | number)[]) => Promise\">\n\n> Removes the data items with the specified primary keys.\n\nFor removing only one data item, see the <DApiLink name=\"removeDataByPrimaryKey\" /> method.\n\nIf you have a data object, you can call <DApiLink name=\"removeData\" /> instead.\nIf you have an array of data objects, you can call <DApiLink name=\"removeDataArray\" /> instead.\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n\n</Prop>\n\n<Prop name=\"removeDataByPrimaryKey\" type=\"(primaryKey: string | number) => Promise\">\n\n> Removes the data item with the specified primary key.\n\nFor removing an array of data, see the <DApiLink name=\"removeDataArrayByPrimaryKeys\" /> method.\n\nIf you have a data object, you can call <DApiLink name=\"removeData\" /> instead.\nIf you have an array of data objects, you can call <DApiLink name=\"removeDataArray\" /> instead.\n\n<DPropLink name=\"onDataMutations\" /> allows you to listen to data mutations.\n</Prop>\n\n</PropTable>\n"
    },
    "/docs/reference/datasource-props/": {
      "filePath": "/docs/reference/datasource-props/index",
      "routePath": "/docs/reference/datasource-props/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/datasource-props/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/datasource-props/",
      "frontmatter": {
        "title": "DataSource Props",
        "layout": "API",
        "description": "Props Reference page for your DataSource in Infinite Table - with complete examples"
      },
      "excerpt": "In the API Reference below we'll use **`DATA_TYPE`** to refer to the TypeScript type that represents the data the component is bound to.",
      "readingTime": "39 min read",
      "content": "\nIn the API Reference below we'll use **`DATA_TYPE`** to refer to the TypeScript type that represents the data the component is bound to.\n\n<PropTable sort searchPlaceholder=\"Type to filter DataSource Props\">\n\n<Prop name=\"primaryKey\" type=\"string | (data: DATA_TYPE) => string\">\n\n> The name of the id/primary key property of an item in the <DPropLink name=\"data\" /> array. The value of this property needs to be unique.\n\nThis is probably one of the most important properties of the `<DataSource />` component, as it is used to identify items in the <DPropLink name=\"data\" /> array.\n\n<Note>\n\nUnlike with other DataGrid components, with `InfiniteTable` you don't need to have a column mapped to the primary key field.\n\nThe primary key is used internally by the component and is not displayed in the grid if you don't explicitly have a column bound to that field.\n\n</Note>\n\nIf the primary key is not unique, Infinite Table DataGrid won't work properly.\n\n<Sandpack title=\"Simple demo of using primaryKey\">\n\n```ts file=\"data-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nThe primary key can be either a string (the name of a property in the data object), or a function that returns a string.\n\nUsing functions (for more dynamic primary keys) is supported, but hasn't been tested extensively - so please report any issues you might encounter.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"treeExpandState\" type=\"TreeExpandStateValue\">\n\n> Specifies the expand/collapse state of the tree nodes. See <TypeLink name=\"TreeExpandStateValue\" /> for the shape of this object. For the uncontrolled version, see <DPropLink name=\"defaultTreeExpandState\" />.\n\nIf no `treeExpandState` prop is specified, the tree will be rendered as fully expanded by default.\n\nWhen using the controlled version, make sure to update the `treeExpandState` prop by using the <DPropLink name=\"onTreeExpandStateChange\" /> callback.\n\n<Sandpack title=\"Using controlled tree expand state\" size=\"large\">\n\n```ts file=\"tree-controlled-expandstate-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onTreeExpandStateChange\" type=\"(treeExpandState: TreeExpandStateValue, {dataSourceApi,nodePath, nodeState}) => void\">\n\n> Called when the tree expand state changes.\n\nWhen the user interacts with the tree (by expanding or collapsing a node), this callback is called with the new tree state.\n\nThe first parameter is the new tree state, and the second parameter is an object with the following properties:\n\n- `dataSourceApi` - the <TypeLink name=\"DataSourceApi\">DataSource API</TypeLink> instance\n- `nodePath` - the path of the node that changed state. If the state was produced by an <TreeApiLink name=\"expandAll\" /> or <TreeApiLink name=\"collapseAll\" /> call, this will be `null`.\n- `nodeState` - the new state of the node (`\"collapsed\"` or `\"expanded\"`)\n\n\n<Sandpack title=\"Using the onTreeExpandStateChange callback\">\n\n```ts file=\"tree-controlled-expandstate-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onNodeExpand\" type=\"(nodePath: NodePath, {dataSourceApi}) => void\">\n\n> Called when a node is expanded. See related <DPropLink name=\"onNodeCollapse\" /> and <DPropLink name=\"onTreeExpandStateChange\" /> props.\n\n\n<Note>\n\nThe <DPropLink name=\"onNodeExpand\" /> and <DPropLink name=\"onNodeCollapse\" /> callbacks are called when a node is expanded or collapsed, respectively - either via user interaction or by an API call. However, they will not be called when the <TreeApiLink name=\"expandAll\" /> or <TreeApiLink name=\"collapseAll\" /> methods are called.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"isNodeExpanded\" type=\"(rowInfo: InfiniteTable_Tree_RowInfoParentNode<DATA_TYPE>, treeExpandState: TreeExpandState) => boolean\">\n\n> Decides if the current (non-leaf) node is expanded. \n\nThe inverse prop, <DPropLink name=\"isNodeCollapsed\" /> is also available. Only one of these props can be specified.\n\n<Note>\n\nIf this prop is specified, <DPropLink name=\"treeSelectionState\" /> is ignored.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"isNodeCollapsed\" type=\"(rowInfo: InfiniteTable_Tree_RowInfoParentNode<DATA_TYPE>, treeExpandState: TreeExpandState) => boolean\">\n\n> Decides if the current (non-leaf) node is collapsed. See related <DPropLink name=\"treeExpandState\" /> prop.\n\nThe inverse prop, <DPropLink name=\"isNodeExpanded\" /> is also available. Only one of these props can be specified.\n\n<Note>\n\nIf this prop is specified, <DPropLink name=\"treeSelectionState\" /> is ignored.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"isNodeReadOnly\" type=\"(rowInfo: InfiniteTable_Tree_RowInfoParentNode<DATA_TYPE>) => boolean\">\n\n> Decides if the current (non-leaf) node can be expanded or collapsed and if the tree icon is disabled.\n\nBy default, parent nodes with `children: []` are read-only, meaning they won't respond to expand/collapse clicks.\n\nHowever, if you specify a custom `isNodeReadOnly` function, you can change this behavior.\n\n<Note>\n\nWhen a node is read-only, the <TreeApiLink name=\"expandNode\" /> and <TreeApiLink name=\"collapseNode\" /> methods need the `options.force` flag to be set to `true` in order to override the read-only restriction.\n\nHowever, <TreeApiLink name=\"expandAll\" /> and <TreeApiLink name=\"collapseAll\" /> will work regardless of the `isNodeReadOnly` setting.\n\nFor full control over the expand/collapse state of read-only nodes, you can use the <DPropLink name=\"isNodeExpanded\" />/<DPropLink name=\"isNodeCollapsed\" /> props.\n\n</Note>\n\n<Sandpack title=\"Using a custom isNodeReadOnly function\">\n\n```ts file=\"tree-isNodeReadOnly-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n<Prop name=\"onNodeCollapse\" type=\"(nodePath: NodePath, {dataSourceApi}) => void\">\n\n> Called when a node is collapsed. See related <DPropLink name=\"onNodeExpand\" /> and <DPropLink name=\"onTreeExpandStateChange\" /> props.\n\n\n<Note>\n\nThe <DPropLink name=\"onNodeExpand\" /> and <DPropLink name=\"onNodeCollapse\" /> callbacks are called when a node is expanded or collapsed, respectively - either via user interaction or by an API call. However, they will not be called when the <TreeApiLink name=\"expandAll\" /> or <TreeApiLink name=\"collapseAll\" /> methods are called.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"nodesKey\" type=\"string\" default=\"children\">\n\n> The name of the property in the data object that contains the child nodes for each tree node.\n\nOnly available when you're using the `<TreeDataSource />` component.\n\nIf not specified, it defaults to `\"children\"`.\n\n<Note>\n\nEach node gets a `nodePath` property, which is the array with the ids of all the parent nodes leading down to the current node. The node path includes the id of the current node\n\n</Note>\n\n\n```tsx {2} title=\"Node path vs row id\"\nconst data = [\n  { id: '1', name: 'Documents',                // path: ['1']\n    children: [\n      { id: '10', name: 'Private',             // path: ['1', '10']\n        children: [\n          { id: '100', name: 'Report.docx' },  // path: ['1', '10', '100'] \n          { id: '101', name: 'Vacation.docx' },// path: ['1', '10', '101']\n        ],\n      },\n    ]\n  },\n  {\n    id: '2',\n    name: 'Downloads',                        // path: ['2']\n    children: [\n      {\n        id: '20',\n        name: 'cat.jpg',                      // path: ['2', '20']\n      },\n    ],\n  },\n];\n```\n\n<Sandpack title=\"Using a custom nodesKey prop\">\n\n```ts file=\"tree-nodesKey-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"defaultTreeExpandState\" type=\"TreeExpandStateValue\">\n\n> Specifies the expand/collapse state of the tree nodes. See <TypeLink name=\"TreeExpandStateValue\" /> for the shape of this object. For the controlled version, see <DPropLink name=\"treeExpandState\" />.\n\n\n\n<Sandpack title=\"Using uncontrolled tree expand state\" size=\"large\">\n\n```ts file=\"tree-uncontrolled-expandstate-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n\n\n<Prop name=\"isRowDisabled\" type=\"(rowInfo: InfiniteTableRowInfo<T>) => boolean\">\n\n> This function ultimately decides the disabled state of a row. It overrides both <DPropLink name=\"defaultRowDisabledState\" />/<DPropLink name=\"rowDisabledState\" /> props.\n\nIt's called with a single argument - the <TypeLink name=\"InfiniteTableRowInfo\">row info object</TypeLink> for the row in question.\n\nIt should return `true` if the row is disabled, and `false` otherwise.\n\n<Note>\n\nWhen this prop is used, <DPropLink name=\"onRowDisabledStateChange\" /> will not be called.\n\n</Note>\n\n</Prop>\n\n\n<Prop name=\"defaultRowDisabledState\" type=\"{enabledRows,disabledRows}\">\n\n> The uncontrolled prop for managing row enabled/disabled state. For the controlled version see <DPropLink name=\"rowDisabledState\" />. For listening to row disabled state changes, see <DPropLink name=\"onRowDisabledStateChange\" />.\n\nThe value for this prop is an object with two properties:\n\n- `enabledRows` - either `true` or an array of row ids that are enabled. When `true` is passed, `disabledRows` should be an array of row ids that are disabled.\n- `disabledRows` - either `true` or an array of row ids that are disabled. When `true` is passed, `enabledRows` should be an array of row ids that are enabled.\n\n<Note>\n\nThe values in the `enabledRows`/`disabledRows` arrays are row ids, and not indexes.\n\n</Note>\n\n\n<Note>\n\nThis prop can be overriden by using the <DPropLink name=\"isRowDisabled\" /> prop.\n\n</Note>\n\nHere's an example of how to use the `defaultRowDisabledState` prop:\n\n<Sandpack title=\"Using uncontrolled row disabled state\">\n\n<Description>\n\nRows with ids `1`, `3`, `4` and `5` are disabled.\n\n</Description>\n\n```ts file=\"defaultRowDisabledState-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"rowDisabledState\" type=\"{enabledRows,disabledRows}\">\n\n> Manages row enabled/disabled state. For the uncontrolled version see <DPropLink name=\"defaultRowDisabledState\" />. For listening to row disabled state changes, see <DPropLink name=\"onRowDisabledStateChange\" />.\n\nThe value for this prop is an object with two properties:\n\n- `enabledRows` - either `true` or an array of row ids that are enabled. When `true` is passed, `disabledRows` should be an array of row ids that are disabled.\n- `disabledRows` - either `true` or an array of row ids that are disabled. When `true` is passed, `enabledRows` should be an array of row ids that are enabled.\n\n<Note>\nWhen using this controlled prop, you will need to update the `rowDisabledState` prop by using the <DPropLink name=\"onRowDisabledStateChange\" /> callback.\n</Note>\n\n<Note>\n\nThis prop can be overriden by using the <DPropLink name=\"isRowDisabled\" /> prop.\n\n</Note>\n\n<Sandpack title=\"Using controlled row disabled state\">\n\n<Description>\n\nRows with ids `1`, `3`, `4` and `5` are disabled initially.\n\nRight click rows and use the context menu to enable/disable rows.\n\n</Description>\n\n```ts file=\"rowDisabledState-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"treeSelection\" type=\"TreeSelectionValue\">\n\n> Determines what nodes are selected and deselected. For the uncontrolled version see <DPropLink name=\"defaultTreeSelection\" />.\n\nThe value of this prop determines if a node is selected or not.\n\nSee <TypeLink name=\"TreeSelectionValue\" /> for details on the shape of this object.\n\n\n<Sandpack title=\"Using controlled tree selection\" size=\"lg\">\n\n```ts file=\"tree-controlled-selectedstate-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onTreeSelectionChange\" type=\"(treeSelection: TreeSelectionValue, context) => void\">\n\n> Called when the tree selection changes. See <DPropLink name=\"treeSelection\" />.\n\n<Sandpack title=\"Reacting to tree selection changes\" size=\"lg\">\n\n```ts file=\"tree-controlled-selectedstate-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nWhen using `multi-row` <DPropLink name=\"selectionMode\" />, the signature of this callback is:\n\n - `treeSelection` - the new <TypeLink name=\"TreeSelectionValue\">tree selection state</TypeLink>\n - `context` - an object with the following properties:\n   - `selectionMode` - will be `\"multi-row\"`\n   - `lastUpdatedNodePath` - the path of the node that was last updated (either via user action or api call). Will be `null` of the action that triggered this callback was <TreeApiLink name=\"selectAll\" /> or <TreeApiLink name=\"deselectAll\" />.\n   - `dataSourceApi` - the [DataSource API](/docs/reference/datasource-api) instance\n\n</Prop>\n\n<Prop name=\"defaultTreeSelection\" type=\"TreeSelectionValue\">\n\n> Determines what nodes are selected and deselected. For the controlled version see <DPropLink name=\"treeSelection\" />.\n\nThe value of this prop determines if a node is selected or not.\n\nSee <TypeLink name=\"TreeSelectionValue\" /> for details on the shape of this object.\n\n\n<Sandpack title=\"Using uncontrolled tree selection\" size=\"lg\">\n\n```ts file=\"tree-uncontrolled-selectedstate-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onRowDisabledStateChange\" type=\"(rowDisabledState) => void\">\n\n> Called when the row disabled state changes.\n\nIt's called with just 1 argument (`rowDisabledState`), which is an instance of the `RowDisabledState` class. To get a literal object that represents the row disabled state, call the `rowDisabledState.getState()` method.\n\n```tsx {3,19}\nimport {\n  DataSource,\n  RowDisabledStateObject,\n} from '@infinite-table/infinite-react';\nfunction App() {\n  const [rowDisabledState, setRowDisabledState] = React.useState<\n    RowDisabledStateObject<number>\n  >({\n    enabledRows: true,\n    disabledRows: [1, 3, 4, 5],\n  });\n  return (\n    <>\n      <DataSource<Developer>\n        data={data}\n        primaryKey=\"id\"\n        rowDisabledState={rowDisabledState}\n        onRowDisabledStateChange={(rowState) => {\n          setRowDisabledState(rowState.getState());\n        }}\n      />\n    </>\n  );\n}\n```\n\n<Note>\nWhen using the controlled <DPropLink name=\"rowDisabledState\" /> prop, you will need to update the `rowDisabledState` by using this callback.\n</Note>\n\n<Sandpack title=\"Using the onRowDisabledStateChange callback to update row disabled state\">\n\n<Description>\n\nRows with ids `1`, `3`, `4` and `5` are disabled initially.\n\nRight click rows and use the context menu to enable/disable rows.\n\n</Description>\n\n```ts file=\"rowDisabledState-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n\n\n<Prop name=\"aggregationReducers\" type=\"Record<string, DataSourceAggregationReducer>\">\n\n> Specifies the functions to use for aggregating data. The object is a map where the keys are ids for aggregations and values are object of the shape described below.\n\nThe `DataSourceAggregationReducer` type can have the following properties\n\n- `initialValue` - type `any`, mandatory for client-side aggregations. It can be a function, in which case, it will be called to compute the initial value for the aggregation. Otherwise, the initial value will be used as is.\n- `field` - the field to aggregate on. Optional - if not specified, make sure you specify `getter`\n- `getter`: `(data:T)=> any` - a getter function, called with the current `data` object.\n- `reducer`: `string | (accumulator, value, data: T) => any` - either a string (for server-side aggregations) or a mandatory aggregation function for client-side aggregations.\n- `done`: `(accumulator, arr: T[]) => any` - a function that is called to finish the aggregation after all values have been accumulated. The function should return the final value of the aggregation. Only used for client-side aggregations.\n- `name` - useful especially in combination with <DataSourcePropLink name=\"pivotBy\" />, as it will be used as the pivot column header.\n- `pivotColumn` - if specified, will configure the pivot column generated for this aggregation. This object has the same shape as a normal <PropLink name=\"columns\">column</PropLink>, but supports an extra `inheritFromColumn` property, which can either be a `string` (a column id), or a `boolean`. The default behavior for a pivot column is to inherit the configuration of the initial column that has the same `field` property. `inheritFromColumn` allows you to specify another column to inherit from, or, if `false` is passed, the pivot column will not inherit from any other column.\n\n<Sandpack title=\"Aggregation demo - see `salary` column\">\n\n```ts files=[\"groupBy-example.page.tsx\",\"columns.ts\"]\n\n```\n\n</Sandpack>\n\nAggregation reducers can be used in combination with grouping and pivoting. The example below shows aggregations used with server-side pivoting\n\n<Sandpack title=\"Aggregations used together with server-side pivoting\">\n\n```ts file=\"$DOCS/learn/grouping-and-pivoting/pivoting/remote-pivoting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nPivot columns generated for aggregations will inehrit from initial columns - the example shows how to leverage this behavior and how to extend it\n\n<Sandpack title=\"Pivot columns inherit from original columns bound to the same field\">\n\n```ts file=\"$DOCS/learn/grouping-and-pivoting/pivoting/pivot-column-inherit-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"data\" type=\"DATA_TYPE[]|Promise<DATA_TYPE[]|(params:DataSourceDataParams) => DATA_TYPE[]|Promise<DATA_TYPE[]>\">\n\n> Specifies the data the component is bound to.\n\nCan be one of the following:\n\n- an array of the bound type - eg: `Employee[]`\n- a Promise tha resolves to an array like the above\n- a function that returns an any of the above\n\n<Note>\n\nIf the `data` prop is a function, it will be called with an object of type <TypeLink name=\"DataSourceDataParams\" />. <TypeLink name=\"DataSourceDataParams\" code={false}>Click to see more details.</TypeLink>\n\n</Note>\n\n<Sandpack title=\"Data loading example with promise\">\n\n```ts file=\"data-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIt's important to note you can re-fetch data by changing the reference you pass as the `data` prop to the `<DataSource/>` component. Passing another `data` function, will cause the component to re-execute the function and thus load new data.\n\n</Note>\n\n<Sandpack title=\"Re-fetching data\">\n\n```ts files=[\"$DOCS/learn/working-with-data/refetch-example.page.tsx\",\"$DOCS/learn/working-with-data/columns.ts\"]\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"defaultFilterValue\" type=\"{field?, id?, filter: {type, operator, value}[]\">\n\n> Uncontrolled prop used for filtering. Can be used for both [client-side](/docs/learn/filtering/filtering-client-side) and [server-side](/docs/learn/filtering/filtering-server-side) filtering.\n\nIf you want to show the column filter editors, you have to either specify this property, or the controlled <DPropLink name=\"filterValue\" /> - even if you have no initial filters. For no initial filters, use `defaultFilterValue=[]`.\n\nFor the controlled version, and more details on the shape of the objects in the array, see <DPropLink name=\"filterValue\" />.\n\n<Sandpack  title=\"Initial filtering applied via defaultFilterValue\">\n\n```ts file=\"defaultFilterValue-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nYou can control the visibility of the column filters by using the <PropLink name=\"showColumnFilters\" /> prop.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"defaultRowSelection\" type=\"string|number|null|object\">\n\n> Describes the selected row(s) in the `DataSource`\n\nSee more docs in the controlled version of this prop, <PropLink name=\"rowSelection\" />\n\nFor single selection, the prop will be of type: `number | string | null`. Use `null` for empty selection in single selection mode.\n\nFor multiple selection, the prop will have the following shape:\n\n```ts\nconst rowSelection = {\n  selectedRows: [3, 6, 100, 23], // those specific rows are selected\n  defaultSelection: false, // all rows deselected by default\n};\n\n// or\nconst rowSelection = {\n  deselectedRows: [3, 6, 100, 23], // those specific rows are deselected\n  defaultSelection: true, // all other rows are selected\n};\n\n// or, for grouped data - this example assumes groupBy=continent,country,city\nconst rowSelection = {\n  selectedRows: [\n    45, // row with id 45 is selected, no matter the group\n    ['Europe', 'France'], // all rows in Europe/France are selected\n    ['Asia'], // all rows in Asia are selected\n  ],\n  deselectedRows: [\n    ['Europe', 'France', 'Paris'], // all rows in Paris are deselected\n  ],\n  defaultSelection: false, // all other rows are selected\n};\n```\n\nFor using group keys in the selection value, see related <DPropLink name=\"useGroupKeysForMultiRowSelection\" />\n\n<Sandpack  title=\"Uncontrolled, multiple row selection with checkbox column\">\n\n```ts file=\"$DOCS/reference/uncontrolled-multiple-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"defaultSortInfo\" type=\"DataSourceSingleSortInfo<T>|DataSourceSingleSortInfo<T>[]|null\">\n\n> Information for sorting the data. This is an uncontrolled prop.\n\nFor detailed explanations, see <DataSourcePropLink name=\"sortInfo\" /> (controlled property).\n\n<Note>\n\nWhen you provide a `defaultSortInfo` prop and the sorting information uses a custom <DataSourcePropLink name=\"sortTypes\">sortType</DataSourcePropLink>, make sure you specify that as the `type` property of the sorting info object.\n\n```tsx\ndefaultSortInfo={{\n  field: 'color',\n  dir: 1,\n  // note this custom sort type\n  type: 'color',\n}}\n```\n\nYou will need to have a property for that type in your <DataSourcePropLink name=\"sortTypes\"/> object as well.\n\n```tsx\nsortTypes={{\n  color: (a, b) => //...\n}}\n```\n\n</Note>\n\n<Sandpack title=\"Local uncontrolled single sorting\">\n\n```ts file=\"$DOCS/learn/sorting/local-uncontrolled-single-sorting-example-with-remote-data.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack  title=\"Custom sort by color - magenta will come first\">\n\n```ts file=\"./customSortType-with-uncontrolled-sortInfo-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"filterDelay\" type=\"number\" defaultValue={200}>\n\n> The delay in milliseconds before the filter is applied. This is useful when you want to wait for the user to finish typing before applying the filter.\n\nThis is especially useful in order to reduce the number of requests sent to the server, when <DPropLink name=\"filterMode\">remote filtering</DPropLink> is used.\n\nIf not specified, defaults to `200` milliseconds. This means, any changes to the column filters, that happen inside a 200ms window (or the current value of <DPropLink name=\"filterDelay\"/>), will be debounced and only the last value will be sent to the server.\n\n<Note>\n\nIf you want to prevent debouncing/batching filter values, you can set <DPropLink name=\"filterDelay\"/> to `0`.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"batchOperationDelay\" type=\"number\">\n\n> The delay in milliseconds to wait before mutations are applied. This is useful to batch multiple mutations together.\n\nIf not specified, a `requestAnimationFrame` will be used to batch mutations.\n\nThe following mutative operations are batched:\n \n - <DApiLink name=\"addData\" />\n - <DApiLink name=\"addDataArray\" />\n - <DApiLink name=\"insertData\" />\n - <DApiLink name=\"insertDataArray\" />\n - <DApiLink name=\"updateData\" />\n - <DApiLink name=\"updateDataArray\" />\n - <DApiLink name=\"removeData\" />\n - <DApiLink name=\"removeDataArray\" />\n - <DApiLink name=\"removeDataByPrimaryKey\" />\n - <DApiLink name=\"removeDataArrayByPrimaryKeys\" />\n - <DApiLink name=\"replaceAllData\" />\n - <DApiLink name=\"clearAllData\" />\n\n</Prop>\n\n<Prop name=\"treeFilterFunction\" type=\"({ data, filterTreeNode, primaryKey }) => DATA_TYPE | boolean\">\n\n> A function to be used for filtering a `TreeDataSource`.\n\nThe function should return a boolean value or a data object.\n\n- when returning `false` the current data object will be filtered out.\n- when returning `true`, the current data object will be included in the filtered data, with no changes.\n- when returning a data object, the object will be used instead of the current data object for the row. This means that you can modify the data object to only include some of its children (which match a specific criteria)\n\n<Note>\n\nThe `treeFilterFunction` is called with an object that has a `filterTreeNode` function property. This function is a helper function you can use to continue the filtering further down the tree on the current (non-leaf) node.\n\nThis function will call the filtering function for each child of the current node. If all the children are filtered out, the current node will be filtered out as well. If there are any children that match the criteria, a clone of the current node will be returned with only the matching children.\n\nYou can opt to not use this helper function, and instead implement your own filtering logic. In this case, make sure you don't mutate data objects but rather return cloned versions of them.\n\n</Note>\n\n<Sandpack title=\"Tree filtering via treeFilterFunction\">\n\n```ts file=tree-filter-function-example.page.tsx\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"filterFunction\" type=\"({ data, dataArray, index, primaryKey }) => boolean\">\n\n> A function to be used for client-side filtering.\n\nUsing this function will not show any special filtering UI for columns.\n\n<Note>\n\nFor filtering when using a `TreeGrid`, see <DPropLink name=\"treeFilterFunction\" />.\n\n</Note>\n\n<Sandpack title=\"Custom filterFunction example\">\n\n<Description>\n\nLoads data from remote location but will only show rows that have `id > 100`.\n\n</Description>\n\n```ts file=\"custom-filter-function-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"shouldReloadData.filterValue\" type=\"boolean\">\n\n> Explicitly configures where filtering will take place and if changes in the <DataSourcePropLink name=\"filterValue\" /> should trigger a reload of the data source - applicable when <DPropLink name=\"data\" /> is a function.\n Replaces the deprecated <DPropLink name=\"filterMode\" />\n\n- `false` (the default) - filtering will be done on the client side and the <DPropLink name=\"data\" /> function will not be invoked again.\n- `true` - filtering will be done on the server side - the <DPropLink name=\"data\" /> function will be called with an object that includes the `filterValue` property, so it can be sent to the server\n\n</Prop>\n\n<Prop name=\"filterMode\" type=\"'local'|'remote'\" deprecated>\n\n> Explicitly configures where filtering will take place. Update to use the <DPropLink name=\"shouldReloadData.filterValue\" /> prop.\n\n- `'local'` - filtering will be done on the client side\n- `'remote'` - filtering will be done on the server side - the <DPropLink name=\"data\" /> function will be called with an object that includes the `filterValue` property, so it can be sent to the server\n\n</Prop>\n\n<Prop name=\"filterTypes\" type=\"Record<string,{operators,emptyValues, defaultOperator}>\">\n\n> Specifies the available types of filters for the columns.\n\nA filter type is a concept that defines how a certain type of data is to be filtered.\nA filter type will have a key, used to define the filter in the `filterTypes` object, and also the following properties:\n\n- `label`\n- `emptyValues` - an array of values considered to be empty values - when any of these values is used in the filter, the filter will match all records.\n- `operators` - an array of operator this filter type supports\n- `defaultOperator` - the default operator for the filter type\n- `components` - an object that describes the custom components to be used for the filter type\n  - `FilterEditor` - a custom filter editor component for this filter type\n  - `FilterOperatorSwitch` - a custom component that is displayed at the left of the `FilterEditor` and can be used for switching between operators - only needed for very very advanced use-cases.\n\nLet's imagine you have a `DataSource` with developers, each with a `salary` column, and for that column you want to allow `>`, `>=`, `<` and `<=` comparisons (operators).\n\nFor this, you would define the following filter type:\n\n```tsx\nconst filterTypes = {\n  income: {\n    label: 'Income',\n    emptyValues: ['', null, undefined],\n    defaultOperator: 'gt',\n    operators: [\n      {\n        name: 'gt',\n        label: 'Greater than',\n        fn: ({ currentValue, filterValue }) => {\n          return currentValue > filterValue;\n        },\n      },\n      {\n        name: 'gte',\n        //...\n      },\n      {\n        name: 'lt',\n        //...\n      },\n      {\n        name: 'lte',\n        //...\n      },\n    ],\n  },\n};\n```\n\n<Note>\n\nEach operator for a certain filter type needs to at least have a `name` and `fn` defined. The `fn` property is a function that will be called when client-side filtering is enabled, with an object that has the following properties:\n\n- `currentValue` - the cell value of the current row for the column being filtered\n- `filterValue` - the value of the filter editor\n- `emptyValues` - the array of values considered to be empty values for the filter type\n- `data` - the current row data object - `typeof DATA_TYPE`\n- `index` - the index of the current row in the table - `number`\n- `dataArray` - the array of all rows originally in the table - `typeof DATA_TYPE[]`\n- `field?` - the field the current column is bound to (can be undefined if the column is not bound to a field)\n\n</Note>\n\n<Sandpack title=\"Custom filter type used for the salary column\">\n\n<Description>\n\nThe `salary` column has a custom filter type, with the following operators: `gt`, `gte`, `lt` and `lte`.\n\n</Description>\n\n```ts file=\"filter-types-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nBy default, the `string` and `number` filter types are available. You can import the default filter types like this:\n\n```ts\nimport { defaultFilterTypes } from '@infinite-table/infinite-react';\n```\n\nIf you want to make all your instances of `InfiniteTable` have new operators for those filter types, you can simply mutate the exported `defaultFilterTypes` object.\n\n<Sandpack title=\"Enhanced string filter type - new 'Not includes' operator\">\n\n<Description>\n\nThe `string` columns have a new `Not includes` operator.\n\n</Description>\n\n```ts file=\"default-filter-types-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Note>\n\n<Note>\n\nWhen you specify new <DPropLink name=\"filterTypes\"/>, the default filter types of `string` and `number` are still available - unless the new object contains those keys and overrides them explicitly.\n\n</Note>\n\nThe current implementation of the default filter types is the following:\n\n```tsx\nexport const defaultFilterTypes: Record<string, DataSourceFilterType<T>> = {\n    string: {\n      label: 'Text',\n      emptyValues: [''],\n      defaultOperator: 'includes',\n      components: {\n        FilterEditor: StringFilterEditor,\n      },\n      operators: [\n        {\n          name: 'includes',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          label: 'includes',\n          fn: ({ currentValue, filterValue }) => {\n            return (\n              typeof currentValue === 'string' &&\n              typeof filterValue == 'string' &&\n              currentValue.toLowerCase().includes(filterValue.toLowerCase())\n            );\n          },\n        },\n        {\n          label: 'Equals',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          name: 'eq',\n          fn: ({ currentValue: value, filterValue }) => {\n            return typeof value === 'string' && value === filterValue;\n          },\n        },\n        {\n          name: 'startsWith',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          label: 'Starts With',\n          fn: ({ currentValue: value, filterValue }) => {\n            return value.startsWith(filterValue);\n          },\n        },\n        {\n          name: 'endsWith',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          label: 'Ends With',\n          fn: ({ currentValue: value, filterValue }) => {\n            return value.endsWith(filterValue);\n          },\n        },\n      ],\n    },\n    number: {\n      label: 'Number',\n      emptyValues: ['', null, undefined],\n      defaultOperator: 'eq',\n      components: {\n        FilterEditor: NumberFilterEditor,\n      },\n      operators: [\n        {\n          label: 'Equals',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          name: 'eq',\n          fn: ({ currentValue, filterValue }) => {\n            return currentValue == filterValue;\n          },\n        },\n        {\n          label: 'Not Equals',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          name: 'neq',\n          fn: ({ currentValue, filterValue }) => {\n            return currentValue != filterValue;\n          },\n        },\n        {\n          name: 'gt',\n          label: 'Greater Than',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          fn: ({ currentValue, filterValue, emptyValues }) => {\n            if (emptyValues.includes(currentValue)) {\n              return true;\n            }\n            return currentValue > filterValue;\n          },\n        },\n        {\n          name: 'gte',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          label: 'Greater Than or Equal',\n          fn: ({ currentValue, filterValue, emptyValues }) => {\n            if (emptyValues.includes(currentValue)) {\n              return true;\n            }\n            return currentValue >= filterValue;\n          },\n        },\n        {\n          name: 'lt',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          label: 'Less Than',\n          fn: ({ currentValue, filterValue, emptyValues }) => {\n            if (emptyValues.includes(currentValue)) {\n              return true;\n            }\n            return currentValue < filterValue;\n          },\n        },\n        {\n          name: 'lte',\n          components: {\n            Icon: // custom icon as a React component ...\n          },\n          label: 'Less Than or Equal',\n          fn: ({ currentValue, filterValue, emptyValues }) => {\n            if (emptyValues.includes(currentValue)) {\n              return true;\n            }\n            return currentValue <= filterValue;\n          },\n        }\n      ],\n    },\n  };\n```\n\n</Prop>\n\n<Prop name=\"filterTypes.components.FilterEditor\">\n\n> A custom React component to be used as an editor for the current filter type\n\nEvery filter type can define the following `components`\n\n- `FilterEditor` - a React component to be used as an editor for the current filter type\n- `FilterOperatorSwitch` - a custom component that is displayed at the left of the `FilterEditor` and can be used for switching between operators - only needed for very very advanced use-cases.\n\n<Note>\n\nFilter type operators can override the `FilterEditor` component - they can specify the following components:\n\n- `FilterEditor` - if specified, it overrides the `FilterEditor` of the filter type\n- `Icon` - a React component to be used as an icon for the operator - displayed by the menu triggered when clicking on the `FilterOperatorSwitch` component\n\n</Note>\n\n<Sandpack title=\"Demo of a custom filter editor\">\n\n<Description>\n\nThe `canDesign` column is using a custom `bool` filter type with a custom filter editor.\n\nThe checkbox has indeterminate state, which will match all values in the data source.\n\n</Description>\n\n```ts file=\"$DOCS/reference/hooks/custom-filter-editor-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"filterValue\" type=\"{field?, id?, filter: {type, operator, value}[]\">\n\n> Controlled prop used for filtering. Can be used for both [client-side](/docs/learn/filtering/filtering-client-side) and [server-side](/docs/learn/filtering/filtering-server-side) filtering.\n\nFor the uncontrolled version, see <DPropLink name=\"defaultFilterValue\" />\n\nIf you want to show the column filter editors, you have to either specify this property, or the uncontrolled <DPropLink name=\"defaultFilterValue\" /> - even if you have no initial filters. For no initial filters, use `filterValue=[]`.\n\nThe objects in this array have the following shape:\n\n- `filter` - an object describing the filter\n  - `filter.value` - the value to filter by\n  - `filter.type` - the current type of the filter (eg: `string`, `number` or another custom type you specify in the <DPropLink name=\"filterTypes\">filterTypes</DPropLink> prop)\n  - `filter.operator` - the name of the operator being applied\n- `field` - the field being filtered - generally matched with a column. This is optional, as some columns can have no field.\n- `id` - the id of the column being filtered. This is optional - for columns bound to a field, the `field` should be used instead of the `id`.\n- `disabled` - whether this filter is applied or not\n\n<Sandpack  title=\"Controlled filters with onFilterValueChange\">\n\n```ts file=\"onFilterValueChange-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nYou can control the visibility of the column filters by using the <PropLink name=\"showColumnFilters\" /> prop.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"lazyLoad\" type=\"boolean|{batchSize:number}\" defaultValue={false}>\n\n> Whether the datasource will load data lazily - useful for server-side grouping and pivoting. If set to `true` or to an object (with `batchSize` property), the <DataSourcePropLink name=\"data\" /> prop must be a function that returns a promise.\n\n<Sandpack title=\"Server-side pivoting with full lazy load\">\n\n```ts file=\"$DOCS/learn/grouping-and-pivoting/pivoting/remote-pivoting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"groupRowsState\" type=\"{collapsedRows:true|[][], expandedRows:true|[][]}\">\n\n> Controls the expand/collapse state of group rows, when <DPropLink name=\"groupBy\" /> is used\n\n\nSee related <DPropLink name=\"defaultGroupRowsState\" />, <DPropLink name=\"onGroupRowsStateChange\" /> and <DPropLink name=\"groupBy\" />\n\n\n```tsx title=\"Specifying the state for group rows\"\nconst groupRowsState: DataSourcePropGroupRowsStateObject = {\n  collapsedRows: true,\n  expandedRows: [['Mexico'], ['Mexico', 'backend'], ['India']],\n};\n```\n\nThe two properties in this object are `collapsedRows` and `expandedRows`, and each can have the following values:\n - `true` - meaning that all groups have this state\n - an array of arrays - representing the exceptions to the default value\n\n\nSo if you have `collapsedRows` set to `true` and then `expandedRows` set to `[['Mexico'], ['Mexico', 'backend'], ['India']]` then all rows are collapsed by default, except the rows specified in the `expandedRows`.\n\n<Sandpack title=\"Using controlled expanded/collapsed state for group rows\">\n\n```ts file=\"./group-rows-state-controlled-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onGroupRowsStateChange\" type=\"(state: GroupRowsState) => void\">\n\n> Callback prop when the <DPropLink name=\"groupRowsState\" /> changes.\n\nSee related <DPropLink name=\"groupRowsState\" /> and <DPropLink name=\"groupBy\" />\n\nThis function is called with an object that's an instance of <TypeLink name=\"GroupRowsState\" />, when the user interacts with group rows and expands/collapses them.\n\nIf you want to get a plain object from this instance, call the `.getState()` method.\n\nSee <TypeLink name=\"GroupRowsState\" /> reference to find out all the utility methods this instance gives you.\n\n</Prop>\n\n<Prop name=\"defaultGroupRowsState\" type=\"{collapsedRows:true|[][], expandedRows:true|[][]}\">\n\n> Specifies the initial expand/collapse state of group rows, when <DPropLink name=\"groupBy\" /> is used\n\n\nFor the controlled version, see related <DPropLink name=\"groupRowsState\" />.\n\n\n```tsx title=\"Specifying the initial state for group rows\"\nconst defaultGroupRowsState: DataSourcePropGroupRowsStateObject = {\n  expandedRows: true,\n  collapsedRows: [['Mexico'], ['Mexico', 'backend'], ['India']],\n};\n```\n\nThe two properties in this object are `collapsedRows` and `expandedRows`, and each can have the following values:\n - `true` - meaning that all groups have this state\n - an array of arrays - representing the exceptions to the default value\n\n\nSo if you have `expandedRows` set to `true` and then `collapsedRows` set to `[['Mexico'], ['Mexico', 'backend'], ['India']]` then all rows are expanded by default, except the rows specified in the `collapsedRows`.\n\n<Sandpack title=\"Specifying initial expanded/collapsed state for group rows\">\n```ts file=\"./group-rows-initial-state-example.page.tsx\"\n```\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"groupBy\">\n\n> An array of objects with `field` properties, that control how rows are being grouped.\n\nEach item in the array can have the following properties:\n\n- field - `keyof DATA_TYPE`\n- column - config object for the group <PropLink name=\"column\">column</PropLink> - see <DPropLink name=\"groupBy.column\" />.\n\n<Note>\n\nWhen using <PropLink name=\"groupRenderStrategy\" code={false}>groupRenderStrategy=\"multi-column\"</PropLink>, it can be very useful for each group to configure it's own column - use <DPropLink name=\"groupBy.column\" /> for this.\n</Note>\n\nSee <TypeLink name=\"DataSourcePropGroupBy\" /> for the type definition.\n\n<Sandpack>\n\n```ts files=[\"groupBy-example.page.tsx\",\"columns.ts\"]\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"pivotBy\" type=\"DataSourcePivotBy<DATA_TYPE>[]\">\n\n> An array of objects with `field` properties that control how pivoting works. Pivoting is very often associated with aggregations, so see related <DPropLink name=\"aggregationReducers\" /> for more details.\n\nEach item in the array can have the following properties:\n\n- field - `keyof DATA_TYPE`\n- column - config object or function for generated pivot columns.\n\n<Note>\n\nFor more details on the type of the items in this array prop, see <TypeLink name=\"DataSourcePivotBy\" />.\n\n</Note>\n\n<Sandpack title=\"Pivoting with customized pivot column\">\n\n```ts file=\"$DOCS/learn/grouping-and-pivoting/pivoting/pivoting-customize-column-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n \n<Prop name=\"groupBy.column\" type=\"Partial<InfiniteTableColumn<T>>\">\n\n> An object that configures how the column for the current group should look like\n\nIf <PropLink name=\"groupColumn\"/> is specified, it overrides this property (the objects actually get merged, with `groupColumn` having higher priority and being merged last).\n\n<Note>\n\nIf you are using a <PropLink name=\"groupRenderStrategy\" code={false}>groupRenderStrategy=\"single-column\"</PropLink>, then using `groupBy.column` should not be used, as you could have many groups with conflicting column configuration.\n\nIn this case, use the <PropLink name=\"groupColumn\"/> prop.\n\n</Note>\n\n<Sandpack>\n\n<Description>\n\nThis example uses `groupBy.column` to configure the generated columns corresponding to each group.\n\n</Description>\n\n```ts files=[\"groupBy-multi-with-column-example.page.tsx\",\"columns.ts\"]\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"livePagination\" type=\"boolean\">\n\n> Whether the component should use live pagination.\n\nUse this in combination with <DataSourcePropLink name=\"livePaginationCursor\" /> and <DataSourcePropLink name=\"onDataParamsChange\" />\n\n<Sandpack  title=\"Live pagination - with react-query\">\n\n```ts file=\"$DOCS/learn/working-with-data/live-pagination-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onDataMutations\" type=\"({ mutations, dataArray, primaryKeyField }) => void\">\n\n> Callback prop to be called when the data changes via the DataSource API.\n\nCalled when any of the following methods have been called in the `DataSource` api\n\n- <DApiLink name=\"updateData\" />\n- <DApiLink name=\"updateDataArray\" />\n\n- <DApiLink name=\"removeData\" />\n- <DApiLink name=\"removeDataArray\" />\n\n- <DApiLink name=\"removeDataByPrimaryKey\" />\n- <DApiLink name=\"removeDataArrayByPrimaryKeys\" />\n\n- <DApiLink name=\"insertData\" />\n- <DApiLink name=\"insertDataArray\" />\n\n- <DApiLink name=\"addData\" />\n- <DApiLink name=\"addDataArray\" />\n\nThis callback is called with an object that has the following properties:\n\n- `primaryKeyField` - the field configured as the primary key for the `<DataSource />`\n- `mutations` - a `Map` with mutations. The keys in the map are primary keys of the mutated data\n\nThe values in the mutations are object descriptors of mutations, that have the following shape:\n\n- `type`: `'insert'|'update'|'delete'`\n- `originalData`: `DATA_TYPE | null` - the original data before the mutation. In case of `insert`, it will be `null`\n- `data`: `Partial<DATA_TYPE>` - the updates to be performed on the data. In case of `delete`, it will be `undefined`. This is an object that will contain the primary key, and the updated values for the data (not necessarily the full object, except for `insert`, where it will be of type `DATA_TYPE`).\n\n</Prop>\n\n<Prop name=\"livePaginationCursor\" type=\"string|number|((params) =>string|number)\" defaulValue={undefined}>\n\n> A cursor value for live pagination. A good value for this is the id of the last item in the <DataSourcePropLink name=\"data\" /> array. It can also be defined as a function\n\nUse this in combination with <DataSourcePropLink name=\"livePagination\" /> and <DataSourcePropLink name=\"onDataParamsChange\" />\n\n<Note>\n\nWhen this is a function, it is called with a parameter object that has the following properties:\n\n- `array` - the current array of data\n- `lastItem` - the last item in the array\n- `length` - the length of the data array\n\n</Note>\n\n<Sandpack  title=\"Live pagination - with react-query\" deps=\"react-query\">\n\n```ts file=\"$DOCS/learn/working-with-data/live-pagination-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onDataParamsChange\" type=\"(dataParams: DataSourceDataParams<DATA_TYPE:>)=>void\">\n\n> A function to be called when data-related state changes.\n\nCan be used to implement <DataSourcePropLink name=\"livePagination\" />\n\nThe function is called with an object that has the following properties:\n\n- `sortInfo` - current sort information - see <DataSourcePropLink name=\"sortInfo\" /> for details\n- `groupBy` - current grouping information - see <DataSourcePropLink name=\"groupBy\" /> for details\n- `filterValue` - current filtering information - see <DataSourcePropLink name=\"filterValue\" /> for details\n- `livePaginationCursor` - the value for the live pagination cursor - see <DataSourcePropLink name=\"livePaginationCursor\" /> for details\n- `changes` - an object that can help you figure out what change caused `onDataParamsChange` to be called.\n\n<Sandpack  title=\"Live pagination - with react-query\" deps=\"react-query\">\n\n```ts file=\"$DOCS/learn/working-with-data/live-pagination-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"onFilterValueChange\" type=\"({field?, id?, filter: {type, operator, value}[]) => void\">\n\n> Callback prop called when the <DPropLink name=\"filterValue\" /> changes.\n\nThis might not be called immediately, as there might be a <DPropLink name=\"filterDelay\"/> set.\n\n<Sandpack  title=\"Controlled filters with onFilterValueChange\">\n\n```ts file=\"onFilterValueChange-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onLivePaginationCursorChange\" type=\"(cursor)=> void\">\n\n> A function to be called when the <DataSourcePropLink name=\"livePaginationCursor\" /> changes.\n\nAlso see related <DataSourcePropLink name=\"onDataParamsChange\" />.\n\n</Prop>\n\n<Prop name=\"onReady\" type=\"(dataSourceApi: DataSourceApi<DATA_TYPE>) => void\">\n\n> The callback that is called when the `DataSource` is ready. The [`dataSourceApi`](/docs/reference/datasource-api) is passed as the first argument.\n\n</Prop>\n\n<Prop name=\"onCellSelectionChange\" type=\"(cellSelection, selectionMode='multi-cell') => void\">\n\n> A function to be called when the <DPropLink name=\"cellSelection\" /> changes.\n\n<Sandpack  title=\"Controlled cell selection with onCellSelectionChange\" size=\"lg\">\n\n<Description>\n\nUse your mouse to select/deselect cells.\n\n</Description>\n\n```ts file=\"$DOCS/learn/selection/controlled-cell-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"onRowSelectionChange\" type=\"(rowSelection, selectionMode='single-row'|'multi-row') => void\">\n\n> A function to be called when the <DPropLink name=\"rowSelection\" /> changes.\n\n<Sandpack  title=\"Controlled row selection with onRowSelectionChange\">\n\n<Description>\n\nUse your mouse or keyboard (press the spacebar) to select/deselect a single row.\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-single-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Sandpack title=\"Multi row checkbox selection with grouping\" >\n\n<Description>\n\nThis example shows how you can use multiple row selection with a predefined controlled value.\n\nGo ahead and select some groups/rows and see the selection value adjust.\n\nThe example also shows how you can use the `InfiniteTableApi` to retrieve the actual ids of the selected rows.\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-multi-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n</Prop>\n\n<Prop name=\"onSortInfoChange\" type=\"(sortInfo | null) => void\">\n\n> Called when sorting changes on the DataSource.\n\nThe sorting can change either via a user interaction or by calling an API method (from the [root API](api) or the [Column API](column-api)).\n\nSee related <DataSourcePropLink name=\"sortInfo\" /> for controlled sorting and <DataSourcePropLink name=\"defaultSortInfo\" /> for uncontrolled sorting.\n\n</Prop>\n\n<Prop name=\"refetchKey\" type=\"string|number|object\">\n\n> A value that can be used to trigger a re-fetch of the data.\n\nBy updating the value of this prop (eg: you can use it as a counter, and increment it) the `<DataSource />` component reloads it's <DPropLink name=\"data\" /> if it's defined as a function. More specifically, the `data` function is called again and the result will replace the current data.\n\n<Sandpack title=\"Re-fetching data via refetchKey updates\" >\n\n<Description>\n\nThis example shows how you can use the `refetchKey` to trigger reloading the data\n\n</Description>\n\n```ts file=\"refetchKey-example.page.tsx\"\n\n```\n\n</Sandpack>\n \n</Prop>\n\n<Prop name=\"rowSelection\" type=\"string|number|null|object\">\n\n> Describes the selected row(s) in the `DataSource`\n\nFor single selection, the prop will be of type: `number | string | null`. Use `null` for empty selection in single selection mode.\n\nFor multiple selection, the prop will have the following shape:\n\n```ts\nconst rowSelection = {\n  selectedRows: [3, 6, 100, 23], // those specific rows are selected\n  defaultSelection: false, // all rows deselected by default\n};\n\n// or\nconst rowSelection = {\n  deselectedRows: [3, 6, 100, 23], // those specific rows are deselected\n  defaultSelection: true, // all other rows are selected\n};\n\n// or, for grouped data - this example assumes groupBy=continent,country,city\nconst rowSelection = {\n  selectedRows: [\n    45, // row with id 45 is selected, no matter the group\n    ['Europe', 'France'], // all rows in Europe/France are selected\n    ['Asia'], // all rows in Asia are selected\n  ],\n  deselectedRows: [\n    ['Europe', 'France', 'Paris'], // all rows in Paris are deselected\n  ],\n  defaultSelection: false, // all other rows are selected\n};\n```\n\nFor using group keys in the selection value, see related <DPropLink name=\"useGroupKeysForMultiRowSelection\" />\n\n<Sandpack  title=\"Single row selection (controlled) with onRowSelectionChange\">\n\n<Description>\n\nUse your mouse or keyboard (press the spacebar) to select/deselect a single row.\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-single-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nWhen <DPropLink name=\"lazyLoad\" /> is being used - this means not all available groups/rows have actually been loaded yet in the dataset - we need a way to allow you to specify that those possibly unloaded rows/groups are selected or not. In this case, the `rowSelection.selectedRows`/`rowSelection.deselectedRows` arrays should not have row primary keys as strings/numbers, but rather rows/groups specified by their full path (so <DPropLink name=\"useGroupKeysForMultiRowSelection\" /> should be set to `true`).\n\n```ts {6}\n// this example assumes groupBy=continent,country,city\nconst rowSelection = {\n  selectedRows: [\n    // row with id 45 is selected - we need this because in the lazyLoad scenario,\n    // not all parents might have been made available yet\n    ['Europe','Italy', 'Rome', 45],\n    ['Europe','France'], // all rows in Europe/France are selected\n    ['Asia'] // all rows in Asia are selected\n  ]\n  deselectedRows: [\n    ['Europe','Italy','Rome'] // all rows in Rome are deselected\n    // but note that row with id 45 is selected, so Rome will be rendered with an indeterminate selection state\n  ],\n  defaultSelection: false // all other rows are selected\n}\n```\n\nIn the example above, we know that there are 3 groups (`continent`, `country`, `city`), so any item in the array that has a 4th element is a fully specified leaf node. While lazy loading, we need this fully specified path for specific nodes, so we know which group rows to render with indeterminate selection.\n\n</Note>\n\n<Note>\n\nThe <DPropLink name=\"useGroupKeysForMultiRowSelection\" /> prop can be used for both lazy and non-lazy `DataSource` components.\n\n</Note>\n\n<Sandpack title=\"Multi row checkbox selection with grouping\" >\n\n<Description>\n\nThis example shows how you can use multiple row selection with a predefined controlled value.\n\nGo ahead and select some groups/rows and see the selection value adjust.\n\nThe example also shows how you can use the `InfiniteTableApi` to retrieve the actual ids of the selected rows.\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-multi-row-selection-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"selectionMode\" type=\"'single-row'|'multi-row'|'multi-cell'|false\">\n\n> Specifies the type of selection that should be enabled.\n\n<HeroCards>\n<YouWillLearnCard title=\"Row Selection Docs\" path=\"/docs/learn/selection/row-selection\">\n\nRead more on row selection (`multi-row` and `single-row`).\n\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"Cell Selection Docs\" path=\"/docs/learn/selection/cell-selection\">\n\nRead more on cell selection (`multi-cell` and `single-cell`).\n\n</YouWillLearnCard>\n\n</HeroCards>\n\n<Sandpack title=\"Choose your selection mode between multi cell or multi row\">\n\n```ts file=\"selectionMode-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"sortFunction\" type=\"(sortInfo:DataSourceSingleSortInfo<T>[], arr: T[]) => T[]\">\n\n> Custom sorting function to replace the `multisort` function used by default.\n\nThe function specified in the <DPropLink name=\"sortFunction\" /> prop is called with the <DPropLink name=\"sortInfo\" /> as the first argument and the data array as the second. It should return a sorted array, as per the <DPropLink name=\"sortInfo\" /> it was called with.\n\n<Note>\n\nWhen <DPropLink name=\"sortFunction\" /> is specified, <DPropLink name=\"shouldReloadData.sortInfo\" /> will be forced to `false`, as the sorting is done in the browser.\n</Note>\n\n<Note>\n\nThe `@infinite-table/infinite-react` package exports a `multisort` function - this is the default function used for local sorting.\n\n```ts\nimport { multisort } from '@infinite-table/infinite-react';\n\nconst arr: Developer[] = [\n  /*...*/\n];\nconst sortInfo = [\n  {\n    field: 'age',\n    dir: -1,\n  },\n  {\n    field: 'name',\n    dir: 1,\n  },\n];\nmultisort(sortInfo, arr);\n```\n\nIf you want to implement your own custom sort function, the `multisort` fn is a good starting point you can use.\n\n</Note>\n\n<Sandpack  title=\"Using a custom sortFunction\">\n\n```ts file=\"$DOCS/reference/datasource-props/local-sortFunction-single-sorting-example-with-local-data-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"sortInfo\" type=\"DataSourceSingleSortInfo<T>|DataSourceSingleSortInfo<T>[]|null\">\n\n> Information for sorting the data. This is a controlled prop.\n\nAlso see related <DataSourcePropLink name=\"defaultSortInfo\" /> (uncontrolled version), <DataSourcePropLink name=\"shouldReloadData.sortInfo\" />, <PropLink name=\"sortable\" /> and <PropLink name=\"columns.sortable\" />.\n\nSorting can be single (only one field/column can be sorted at a time) or multiple (multiple fields/columns can be sorted at the same time). Therefore, this property an be an array of objects or a single object (or null) - the shape of the objects (of type `DataSourceSingleSortInfo<T>`)is the following.\n\n- `dir` - `1 | -1` - the direction of the sorting\n- `field`? - `keyof DATA_TYPE` - the field to sort\n- `id`? - `string` - if you don't sort by a field, you can specify an id of the column this sorting is bound to. Note that columns have a <PropLink name=\"columns.valueGetter\">valueGetter</PropLink>, which will be used when doing local sorting and the column is not bound to an exact field.\n- `type` - the sort type - one of the keys in <DataSourcePropLink name=\"sortTypes\"/> - eg `\"string\"`, `\"number\"` - will be used for local sorting, to provide the proper comparison function.\n\nWhen you want to use multiple sorting, but have no default sort order/information, use `[]` (the empty array) to denote multiple sorting should be enabled.\n\nIf no `sortInfo` is provided, by default, when clicking a sortable column, single sorting will be applied.\n\n<Note>\n\nFor configuring if a column is sortable or not, see <PropLink name=\"columns.sortable\" /> and <PropLink name=\"sortable\" />. By default, all columns are sortable.\n\n</Note>\n\n<Sandpack title=\"Remote + controlled multi sorting\">\n\n```ts file=\"$DOCS/learn/sorting/remote-controlled-multi-sorting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n\n\n<Prop name=\"shouldReloadData.sortInfo\" type=\"boolean\">\n\n> Specifies if changes in the <DataSourcePropLink name=\"sortInfo\" /> should trigger a reload of the data source - applicable when <DPropLink name=\"data\" /> is a function. Replaces the deprecated <DPropLink name=\"sortMode\" />.\n\nSee related <DataSourcePropLink name=\"sortInfo\" /> and <DataSourcePropLink name=\"defaultSortInfo\" />.\n\nWhen set to `false` (the default), the data is sorted locally (in the browser) after the data-source is loaded. When set to `true`, the data should be sorted by the server (or by the data-source function that serves the data).\n\nSee [the Sorting page](/docs/learn/sorting/overview) for more details.\n\nFor configuring the sorting behavior when multiple sorting is enabled, see <PropLink name=\"multiSortBehavior\" />.\n\n</Prop>\n\n<Prop name=\"shouldReloadData\" type=\"{ sortInfo, groupBy, filterValue, pivotBy }\">\n\n> Specifies which changes in the data-related props should trigger a reload of the data source - applicable when <DPropLink name=\"data\" /> is a function.\n\nSee <DPropLink name=\"shouldReloadData.sortInfo\" />.\nSee <DPropLink name=\"shouldReloadData.groupBy\" />.\nSee <DPropLink name=\"shouldReloadData.filterValue\" />.\nSee <DPropLink name=\"shouldReloadData.pivotBy\" />.\n\n</Prop>\n\n\n<Prop name=\"sortMode\" type=\"'local'|'remote'\" deprecated>\n\n> Specifies where the sorting should be done. Use <DPropLink name=\"shouldReloadData.sortInfo\" /> instead.\n\nSee related <DPropLink name=\"sortInfo\" /> and <DPropLink name=\"defaultSortInfo\" />.\n\nWhen set to `'local'`, the data is sorted locally (in the browser) after the data-source is loaded. When set to `'remote'`, the data should be sorted by the server (or by the data-source function that serves the data).\n\nSee [the Sorting page](/docs/learn/sorting/overview) for more details.\n\nFor configuring the sorting behavior when multiple sorting is enabled, see <PropLink name=\"multiSortBehavior\" />.\n\n</Prop>\n\n<Prop name=\"sortTypes\" type=\"Record<string, ((a,b) => number)>\">\n\n> Describes the available sorting functions used for local sorting. The object you provide will be merged into the default sort types.\n\nCurrently there are two `sortTypes` available:\n\n- `\"string\"`\n- `\"number\"`\n- `\"date\"`\n\nThose values can be used for the <PropLink name=\"columns.sortType\">column.sortType</PropLink> and <PropLink name=\"columns.sortType\">column.dataType</PropLink> properties.\n\n```ts\n// default implementation\nconst sortTypes = {\n  string: (a, b) => a.localeCompare(b),\n  number: (a, b) => a - b,\n  date: (a, b) => a - b,\n};\n```\n\nWhen a column does not explicitly specify the <PropLink name=\"columns.sortType\">column.sortType</PropLink>, the <PropLink name=\"columns.dataType\">column.dataType</PropLink> will be used instead. And if no <PropLink name=\"columns.dataType\">column.dataType</PropLink> is defined, it will default to `string`.\n\nYou can add new sort types to the DataSource and InfiniteTable components by specifying this property - the object will be merged into the default sort types.\n\n<Sandpack  title=\"Custom sort by color - magenta will come first\">\n\n```ts file=\"./sortTypes-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nIn this example, for the `\"color\"` column, we specified <PropLink name=\"columns.sortType\">column.sortType=\"color\"</PropLink> - we could have passed that as `column.dataType` instead, but if the grid had filtering, it wouldn't know what filters to use for \"color\" - so we used<PropLink name=\"columns.sortType\">column.sortType</PropLink> to only change how the data is sorted.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"useGroupKeysForMultiRowSelection\" type=\"boolean\" defaultValue={false}>\n\n> Specifies whether <DPropLink name=\"rowSelection\" /> contains group keys or only row ids/primary keys.\n\nWhen this is `true`, you might want to use the [getSelectedPrimaryKeys](./selection-api#getSelectedPrimaryKeys) method.\n\n<Sandpack title=\"Multi row checkbox selection using group keys\" >\n\n<Description>\n\nThis example shows how you can use have row selection with group keys instead of just the primary keys of rows.\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-multi-row-selection-example-with-group-keys.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n</PropTable>\n"
    },
    "/docs/reference/hooks/": {
      "filePath": "/docs/reference/hooks/index",
      "routePath": "/docs/reference/hooks/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/hooks/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/hooks/",
      "frontmatter": {
        "title": "Infinite Table Hooks",
        "layout": "API",
        "description": "Hooks Reference page for Infinite Table - with complete examples"
      },
      "excerpt": "Infinite Table exposes a few custom hooks that can be used to customize the component and its behavior. Most of the hooks will be useful when you want to implement custom components for `InfiniteTable` - like custom cells, headers, cell editors, etc.",
      "readingTime": "4 min read",
      "content": "\nInfinite Table exposes a few custom hooks that can be used to customize the component and its behavior. Most of the hooks will be useful when you want to implement custom components for `InfiniteTable` - like custom cells, headers, cell editors, etc.\n\nSee below for the full list of hooks exposed by `InfiniteTable`, each with examples and code snippets.\n\n<PropTable sort searchPlaceholder=\"Type to filter hooks\">\n\n<Prop name=\"useMasterRowInfo\" returnTypeLink=\"InfiniteTableRowInfo\">\n\n> Gives you access to the master row info in the current <PropLink name=\"components.RowDetail\" code={false} >RowDetail</PropLink> component.\n\n\n<Sandpack title=\"Basic master detail DataGrid example\" size=\"lg\">\n\n<Description>\n\nThis example shows a master DataGrid with cities & countries.\n\nThe details for each city shows a DataGrid with developers in that city.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-component-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n</Prop>\n<Prop name=\"useInfiniteColumnCell\" returnTypeLink=\"InfiniteColumnEditorContextType\">\n\n> Use it inside the <PropLink name=\"columns.render\" /> or <PropLink name=\"column.components.ColumnCell\" /> (or <PropLink name=\"columns.renderValue\" code={false}>other</PropLink> rendering functions) to retrieve information about the cell that is being rendered.\n\n```ts\nimport { useInfiniteColumnCell } from '@infinite-table/infinite-react';\n```\n\nFor custom column header components, see related <HookLink name=\"useInfiniteHeaderCell\" />.\n\nWhen using this hook inside a <PropLink name=\"columns.components.ColumnCell\" code={false}>custom column cell component</PropLink>, make sure you get `domRef` from the hook result and pass it on to the final `JSX.Element` that is the DOM root of the component.\n\n```tsx\nconst CustomCellComponent = (props: React.HTMLProps<HTMLDivElement>) => {\n  const { domRef, ...other } = useInfiniteColumnCell<Developer>();\n\n  return (\n    <div ref={domRef} {...props} style={{ ...props.style, color: 'red' }}>\n      {props.children}\n    </div>\n  );\n};\n```\n\nYou should not pass the `domRef` along when using the hook inside the <PropLink name=\"columns.render\" /> or <PropLink name=\"columns.renderValue\" /> function.\n\n<Sandpack title=\"Column with render & useInfiniteColumnCell\">\n\n```tsx file=\"$DOCS/reference/column-render-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"useInfiniteColumnEditor\" >\n\n> Allows you to write a custom editor to be used for [editing](/docs/learn/editing/overview). The hook returns an <TypeLink name=\"InfiniteColumnEditorContextType\" /> object shape.\n\nInside this hook, you can also call <HookLink name=\"useInfiniteColumnCell\" /> to get access to the cell-related information.\n\nSee related <PropLink name=\"columns.components.Editor\" />\n\n<Note>\n\nWhen writing a custom editor, it's probably good to stop the propagation of the `KeyDown` event, so that the table doesn't react to the key presses (and do navigation and other stuff).\n\n</Note>\n\n<Sandpack title=\"Column with custom editor\">\n\n<Description>\n\nTry editing the `salary` column - it has a custom editor\n\n</Description>\n\n```tsx file=\"custom-editor-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"useInfiniteColumnFilterEditor\" type=\"() => ({ column, value, setValue, className, filtered,... })\">\n\n> Used to write custom filter editors for columns.\n\nThe return value of this hook is an object with the following properties:\n\n- `value` - the value that should be passed to the filter editor\n- `setValue(value)` - the functon you have to call to update the filtering for the current column\n- `column` - the current column\n- `operatorName`: `string` - the name of the operator currently being applied\n- `className` - a CSS class name to apply to the filter editor, for default styling\n- `filtered` - a boolean indicating whether the column is currently filtered or not\n- `disabled` - a boolean indicating whether the filter editor should be rendered as disabled or not\n- `filterTypeKey`: `string` - the key of the filter type\n- `filterType` - the filter type object for the current column\n- `filterTypes` - a reference to the <DPropLink name=\"filterTypes\" /> object as configured in the `DataSource`\n\n<Sandpack title=\"Demo of a custom filter editor\">\n\n<Description>\n\nThe `canDesign` column is using a custom `bool` filter type with a custom filter editor.\n\nThe checkbox has indeterminate state, which will match all values in the data source.\n\n</Description>\n\n```ts file=\"custom-filter-editor-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"useInfiniteHeaderCell\" >\n\n> Used inside <PropLink name=\"columns.header\" /> or <PropLink name=\"column.components.HeaderCell\" />\n\n```ts\nimport { useInfiniteHeaderCell } from '@infinite-table/infinite-react';\n```\n\nFor custom column cell components, see related <HookLink name=\"useInfiniteColumnCell\" />.\n\nWhen using this hook inside a <PropLink name=\"columns.components.HeaderCell\" code={false}>custom column header component</PropLink>, make sure you get `domRef` from the hook result and pass it on to the final `JSX.Element` that is the DOM root of the component.\n\n```tsx\nconst CustomHeaderComponent = (props: React.HTMLProps<HTMLDivElement>) => {\n  const { domRef, ...other } = useInfiniteHeaderCell<Developer>();\n\n  return (\n    <div ref={domRef} {...props} style={{ ...props.style, color: 'red' }}>\n      {props.children}\n    </div>\n  );\n};\n```\n\nYou should not pass the `domRef` along when using the hook inside the\n<PropLink name=\"columns.header\" /> function.\n\n<Sandpack title=\"Column with custom header & useInfiniteHeaderCell\">\n\n```tsx file=\"$DOCS/reference/column-header-hooks-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n</PropTable>\n"
    },
    "/docs/reference/keyboard-navigation-api/": {
      "filePath": "/docs/reference/keyboard-navigation-api/index",
      "routePath": "/docs/reference/keyboard-navigation-api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/keyboard-navigation-api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/keyboard-navigation-api/",
      "frontmatter": {
        "title": "Infinite Table Keyboard Navigation API",
        "layout": "API"
      },
      "excerpt": "Available starting with version `6.1.1`.",
      "readingTime": "3 min read",
      "content": "\nAvailable starting with version `6.1.1`.\n\nSee the [Keyboard Navigation](/docs/learn/keyboard-navigation/navigating-cells) page for more details.\n\n```tsx title=\"Configuring the keyboard navigation to be 'cell'\"\n<InfiniteTable keyboardNavigation=\"cell\" />\n\n// can be \"cell\" (default), \"row\" or false\n```\n\nYou can retrieve the keyboard navigation api by reading it from the `api.keyboardNavigationApi` property.\n\n```tsx {4}\n\nconst onReady = ({api}: {api:InfiniteTableApi<DATA_TYPE>}) => {\n  // do something with it\n  api.keyboardNavigationApi.gotoCell({direction: 'top'})\n}\n\n<InfiniteTable<DATA_TYPE>\n  columns={[...]}\n  onReady={onReady}\n/>\n```\n\nSee the [Infinite Table API page](/docs/reference/api) for the main API.\nSee the [Infinite Table Cell Selection API page](/docs/reference/cell-selection-api) for the row selection API.\nSee the [Infinite Table Row Selection API page](/docs/reference/row-selection-api) for the row selection API.\nSee the [Infinite Table Column API page](/docs/reference/column-api) for the column API.\n\n<PropTable sort searchPlaceholder=\"Type to filter API methods\">\n\n<Prop name=\"setKeyboardNavigation\" type=\"(keyboardNavigation: 'cell'|'row'|false) => void\">\n\n> Sets the keyboard navigation mode. See <PropLink name=\"keyboardNavigation\" />\n\nThe sole argument is of the same type as the <PropLink name=\"keyboardNavigation\" />\n\nSee the [Keyboard Navigation](/docs/learn/keyboard-navigation/navigating-cells) page for more details.\n\n<Note>\n\nIf you are using controlled <PropLink name=\"activeCellIndex\" /> or <PropLink name=\"activeRowIndex\" />, make sure you update the values by using the <PropLink name=\"onActiveCellIndexChange\" /> and <PropLink name=\"onActiveRowIndexChange\" /> callbacks respectively.\n\n</Note>\n\n</Prop>\n\n\n<Prop name=\"setActiveCellIndex\" type=\"(activeCellIndex: [number, number]) => void\">\n\n> Sets the value for <PropLink name=\"defaultActiveCellIndex\" />/<PropLink name=\"activeCellIndex\" />\nSee related <KeyNavApiLink name=\"gotoCell\" />\n\n\n<Note>\n\nIf you are using controlled <PropLink name=\"activeCellIndex\" /> make sure you update the controlled value by using the <PropLink name=\"onActiveCellIndexChange\" /> callback prop.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"setActiveRowIndex\" type=\"(activeRowIndex: number) => void\">\n\n> Sets the value for <PropLink name=\"defaultActiveRowIndex\" />/<PropLink name=\"activeRowIndex\" />\n\n\n<Note>\n\nIf you are using controlled <PropLink name=\"activeRow\" />, make sure you update the values by using the <PropLink name=\"onActiveRowIndexChange\" /> callback prop.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"gotoNextRow\" type=\"()=> number | false\">\n\n> Changes the active row index to the next row. See related <KeyNavApiLink name=\"gotoPreviousRow\" />, <KeyNavApiLink name=\"setActiveRowIndex\" />\n\nReturns `false` if the action was not successful (eg: already at the last row), otherwise the new active row index.\n\nThis sets the value for <PropLink name=\"activeCellIndex\" />\n\n</Prop>\n\n\n<Prop name=\"gotoPreviousRow\" type=\"()=> number | false\">\n\n> Changes the active row index to the prev row. See related <KeyNavApiLink name=\"gotoNextRow\" />, <KeyNavApiLink name=\"setActiveRowIndex\" />\n\nReturns `false` if the action was not successful (eg: already at the first row), otherwise the new active row index.\n\nThis sets the value for <PropLink name=\"activeCellIndex\" />\n\n</Prop>\n\n<Prop name=\"gotoCell\" type=\"({direction: 'top' | 'bottom' | 'left' | 'right' }) => [number, number] | false\">\n\n> Changes the active cell index, by navigating to the specified direction (equivalent to pressing the arrow keys).\nSee related <KeyNavApiLink name=\"setActiveCellIndex\" />\n\n<Sandpack title=\"Using KeyboardNavigationApi.gotoCell\">\n\n```tsx file=\"goto-cell-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n\n</Prop>\n\n</PropTable>\n"
    },
    "/docs/reference/row-detail-api/": {
      "filePath": "/docs/reference/row-detail-api/index",
      "routePath": "/docs/reference/row-detail-api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/row-detail-api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/row-detail-api/",
      "frontmatter": {
        "title": "Infinite Table Row Details API",
        "layout": "API"
      },
      "excerpt": "This API can be used when [master-detail](/docs/learn/master-detail/overview) is configured in the DataGrid.",
      "readingTime": "2 min read",
      "content": "\nThis API can be used when [master-detail](/docs/learn/master-detail/overview) is configured in the DataGrid.\n\nYou can retrieve the row details api by reading it from the `api.rowDetailApi` property.\n\n```tsx {4}\n\nconst onReady = ({api}: {api:InfiniteTableApi<DATA_TYPE>}) => {\n  // do something with it\n  api.rowDetailApi.collapseAllDetails()\n}\n\n<InfiniteTable<DATA_TYPE>\n  columns={[...]}\n  onReady={onReady}\n/>\n```\n\nSee the [Infinite Table API page](/docs/reference/api) for the main API.\nSee the [Infinite Table Cell Selection API page](/docs/reference/cell-selection-api) for the row selection API.\nSee the [Infinite Table Row Selection API page](/docs/reference/row-selection-api) for the row selection API.\nSee the [Infinite Table Column API page](/docs/reference/column-api) for the column API.\n\n<PropTable sort searchPlaceholder=\"Type to filter API methods\">\n\n<Prop name=\"collapseAllDetails\" type=\"() => void\">\n\n> Collapses all row details.\n\n<Sandpack title=\"Master detail DataGrid with collapse all button\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nSome of the rows in the master DataGrid are expanded by default.\n\nYou can collapse them via the Row Detail API.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-api-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"expandAllDetails\" type=\"() => void\">\n\n> Expands all row details.\n\n<Sandpack title=\"Master detail DataGrid with expand all button\" size=\"lg\" viewMode=\"preview\">\n\n<Description>\n\nClick the `Expand All` button to expand all row details.\n\n</Description>\n\n```ts file=\"$DOCS/learn/master-detail/master-detail-api-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"isRowDetailCollapsed\" type=\"(rowId: any)=> boolean\">\n\n> Checks if the row detail is collapsed for the row with the specified primary key.\n\n</Prop>\n\n<Prop name=\"isRowDetailExpanded\" type=\"(rowId: any)=> boolean\">\n\n> Checks if the row detail is expanded for the row with the specified primary key.\n\n</Prop>\n\n<Prop name=\"collapseRowDetail\" type=\"(rowId: any) => void\">\n\n> Collapses the detail for the row with the specified primary key.\n\n</Prop>\n\n<Prop name=\"expandRowDetail\" type=\"(rowId: any)=> boolean\">\n\n> Expands the detail for the row with the specified primary key.\n\n</Prop>\n\n<Prop name=\"toggleRowDetail\" type=\"(rowId: any)=> boolean\">\n\n> Toggles the expand/collapse state of the row detail, for the row with the specified primary key.\n\n</Prop>\n\n</PropTable>\n"
    },
    "/docs/reference/row-selection-api/": {
      "filePath": "/docs/reference/row-selection-api/index",
      "routePath": "/docs/reference/row-selection-api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/row-selection-api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/row-selection-api/",
      "frontmatter": {
        "title": "Infinite Table Row Selection API",
        "layout": "API"
      },
      "excerpt": "```tsx title=\"Configuring the selection mode to be 'multi-row'\"",
      "readingTime": "7 min read",
      "content": "\n```tsx title=\"Configuring the selection mode to be 'multi-row'\"\n<DataSource selectionMode=\"multi-row\" />\n\n// can be \"single-row\", \"multi-row\", \"multi-cell\" or false\n```\n\n<Note>\n\nTo enable multi-row selection, you need to specify <DPropLink name=\"selectionMode\">selectionMode=\"multi-row\"</DPropLink> on the `<DataSource />` component.\n\n</Note>\n\nYou can retrieve the row selection api by reading it from the `api.rowSelectionApi` property.\n\n```tsx {4}\n\nconst onReady = ({api}: {api:InfiniteTableApi<DATA_TYPE>}) => {\n  // do something with it\n  api.rowSelectionApi.selectGroupRow(['USA'])\n}\n\n<InfiniteTable<DATA_TYPE>\n  columns={[...]}\n  onReady={onReady}\n/>\n```\n\nSee the [Infinite Table API page](/docs/reference/api) for the main API.\nSee the [Infinite Table Cell Selection API page](/docs/reference/cell-selecti-api) for the cell selection API.\nSee the [Infinite Table Column API page](/docs/reference/column-api) for the column API.\nSee the [Infinite Table Row Detail API page](/docs/reference/row-detail-api) for the row detail API (when master-detail is configured).\n\n<PropTable sort searchPlaceholder=\"Type to filter API methods\">\n\n<Prop name=\"allRowsSelected\" type=\"boolean\">\n\n> Boolean getter to report whether all the rows are selected or not\n\n</Prop>\n\n<Prop name=\"deselectGroupRow\" type=\"(groupKeys: any[]) => void\">\n\n> Deselects the group row that is identified by the given group keys. Only makes sense when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor selecting a group row, see related [selectGroupRow](#selectGroupRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting group rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to exclude the group row from the selection.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"deselectRow\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Deselects the specified row. Optionally provide the group keys, if you have access to them.\n\nSee note from [isRowSelected](#isRowSelected) for whether you need to provide the `groupKeys` or not.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor selecting the row, see related [selectRow](#selectRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of deselecting rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to remove the row you want from the selection.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"deselectAll\" type=\"() => void\">\n\n> Deselects all the rows in the DataSource.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor selecting all rows, see related [selectAll](#selectAll).\n\n<Note>\n\nMost often, you don't need to use this imperative way of deselecting all rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> (when multiple row selection is enabled) to a value of\n\n```tsx\n{ defaultSelection: false, selectedRows: []}\n```\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getGroupRowSelectionState\" type=\"(groupKeys: any[], rowSelection?: DataSourceRowSelection) => true|false|null\">\n\n> Returns the state of a group row - only applicable when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>\n\nThe returned values can be:\n\n- `true` - the group row and all its children are selected, at any level of nesting\n- `false` - the group row and all its children are deselected, at any level of nesting\n- `null` - the group row has some (not all) children selected, at any level of nesting\n\nBaiscally, `true` means the group row and all children are selected, `false` means the group row is not selected and doesn't have any selected children, while `null` is the indeterminate state, where just some (but not all) of the children of the group are selected.\n\nIf you provide a the value of a `rowSelection`, it will be used as the source of truth for selection. If no value for `rowSelection` is provided, it will use the current row selection.\n\n<Note>\n\nIf you don't provide a value for the `rowSelection` and are calling this method in the <DPropLink name=\"onRowSelectionChange\" /> callback prop, you might be one step behind the selection. In such a case, make sure you pass to this function the value you receive in the <DPropLink name=\"onRowSelectionChange\" /> callback.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getSelectedPrimaryKeys\" type=\"(rowSelection?: DataSourceRowSelection) => (string|number)[]\">\n\n> Retrieves the ids (primary keys) of the selected rows, when the selection contains group keys instead of primary keys (so when <DPropLink name=\"useGroupKeysForMultiRowSelection\" /> is `true` and the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>).\n\nIf you provide a the value of a `rowSelection`, it will be used as the source of truth for retrieving the row ids. If no value for `rowSelection` is provided, it will use the current row selection.\n\n<Note>\n\nThis will not work properly when the `DataSource` is configured with <DPropLink name=\"lazyLoad\" code={false}>lazy loading</DPropLink>, since it cannot give you primary keys of rows not yet loaded.\n\n</Note>\n\n<Note>\n\nIf you don't provide a value for the `rowSelection` and are calling this method in the <DPropLink name=\"onRowSelectionChange\" /> callback prop, you might be one step behind the selection. In such a case, make sure you pass to this function the value you receive in the <DPropLink name=\"onRowSelectionChange\" /> callback.\n\n</Note>\n\n<Sandpack title=\"Using getSelectedPrimaryKeys in multi row checkbox selection with grouping\" >\n\n<Description>\n\nThis example shows how you can use getSelectedPrimaryKeys with multiple row selection to retrieve the actual ids of the selected rows.\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-multi-row-selection-example-with-group-keys.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"isRowSelected\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Checks if a row specified by its primary key is selected or not. Optionally provide the group keys, if you have access to them.\n\n<Note>\nThe group keys are not mandatory, and they are useful only when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>.\n\nEven if you don't pass them, the component will try to retrieve them from its internal state - note though that in lazy-load scenarios, not all rows/groups may have been loaded, so in this case, you have to make sure you provide the `groupKeys` when calling this method.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"isRowDeselected\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Checks if a row specified by its primary key is deselected or not. Optionally provide the group keys, if you have access to them.\n\nSee note from [isRowSelected](#isRowSelected)\n\n</Prop>\n\n<Prop name=\"selectAll\" type=\"() => void\">\n\n> Selects all the rows in the DataSource.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting all rows, see related [deselectAll](#deselectAll).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> (when multiple row selection is enabled) to a value of\n\n```tsx\n{ defaultSelection: true, deselectedRows: []}\n```\n\n</Note>\n\n</Prop>\n\n<Prop name=\"selectGroupRow\" type=\"(groupKeys: any[]) => void\">\n\n> Selects the group row that is identified by the given group keys. Only makes sense when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting a group row, see related [deselectGroupRow](#deselectGroupRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting group rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to include the group row you want to select.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"selectRow\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Selects the specified row. Optionally provide the group keys, if you have access to them.\n\nSee note from [isRowSelected](#isRowSelected) for whether you need to provide the `groupKeys` or not.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting the row, see related [deselectRow](#deselectRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to include the row you want in the selection.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"toggleGroupRowSelection\" type=\"(groupKeys: any[]) => void\">\n\n> Toggles the selection of the group row that is identified by the given group keys. Only makes sense when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting a group row, see related [deselectGroupRow](#deselectGroupRow).\nFor selecting a group row, see related [selectGroupRow](#selectGroupRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting group rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to include the group row you want to select.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"toggleRowSelection\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Toggles the selection of the specified row. Optionally provide the group keys, if you have access to them.\n\nSee note from [isRowSelected](#isRowSelected) for whether you need to provide the `groupKeys` or not.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting the row, see related [deselectRow](#deselectRow).\nFor selecting the row, see related [selectRow](#selectRow).\nFor toggling the selection for a group row, see related [toggleGroupRowSelection](#toggleGroupRowSelection).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to include or exclude the given row.\n\n</Note>\n\n</Prop>\n\n</PropTable>\n"
    },
    "/docs/reference/selection-api/": {
      "filePath": "/docs/reference/selection-api/index",
      "routePath": "/docs/reference/selection-api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/selection-api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/selection-api/",
      "frontmatter": {
        "title": "Infinite Table Selection API",
        "layout": "API",
        "redirect_to": "/docs/reference/row-selection-api"
      },
      "excerpt": "When rendering the `InfiniteTable` component, you can get access to the [API](./api/) by getting it from the <PropLink name=\"onReady\" /> callback prop. You can retrieve the selection api by reading it from the `api.selectionApi` property.",
      "readingTime": "7 min read",
      "content": "\nWhen rendering the `InfiniteTable` component, you can get access to the [API](./api/) by getting it from the <PropLink name=\"onReady\" /> callback prop. You can retrieve the selection api by reading it from the `api.selectionApi` property.\n\n```tsx {4}\n\nconst onReady = ({api}: {api:InfiniteTableApi<DATA_TYPE>}) => {\n  // do something with it\n  api.selectionApi.selectGroupRow(['USA'])\n}\n\n<InfiniteTable<DATA_TYPE>\n  columns={[...]}\n  onReady={onReady}\n/>\n```\n\nFor the root API, see the [Infinite Table API page](/docs/reference/api).\nFor column API, see the [Infinite Table Column API page](/docs/reference/column-api).\n\n<PropTable searchPlaceholder=\"Type to filter API methods\">\n\n<Prop name=\"allRowsSelected\" type=\"boolean\">\n\n> Boolean getter to report whether all the rows are selected or not\n\n</Prop>\n\n<Prop name=\"deselectGroupRow\" type=\"(groupKeys: any[]) => void\">\n\n> Deselects the group row that is identified by the given group keys. Only makes sense when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor selecting a group row, see related [selectGroupRow](#selectGroupRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting group rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to exclude the group row from the selection.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"deselectRow\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Deselects the specified row. Optionally provide the group keys, if you have access to them.\n\nSee note from [isRowSelected](#isRowSelected) for whether you need to provide the `groupKeys` or not.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor selecting the row, see related [selectRow](#selectRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of deselecting rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to remove the row you want from the selection.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"deselectAll\" type=\"() => void\">\n\n> Deselects all the rows in the DataSource.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor selecting all rows, see related [selectAll](#selectAll).\n\n<Note>\n\nMost often, you don't need to use this imperative way of deselecting all rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> (when multiple row selection is enabled) to a value of\n\n```tsx\n{ defaultSelection: false, selectedRows: []}\n```\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getGroupRowSelectionState\" type=\"(groupKeys: any[], rowSelection?: DataSourceRowSelection) => true|false|null\">\n\n> Returns the state of a group row - only applicable when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>\n\nThe returned values can be:\n\n- `true` - the group row and all its children are selected, at any level of nesting\n- `false` - the group row and all its children are deselected, at any level of nesting\n- `null` - the group row has some (not all) children selected, at any level of nesting\n\nBaiscally, `true` means the group row and all children are selected, `false` means the group row is not selected and doesn't have any selected children, while `null` is the indeterminate state, where just some (but not all) of the children of the group are selected.\n\nIf you provide a the value of a `rowSelection`, it will be used as the source of truth for selection. If no value for `rowSelection` is provided, it will use the current row selection.\n\n<Note>\n\nIf you don't provide a value for the `rowSelection` and are calling this method in the <DPropLink name=\"onRowSelectionChange\" /> callback prop, you might be one step behind the selection. In such a case, make sure you pass to this function the value you receive in the <DPropLink name=\"onRowSelectionChange\" /> callback.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"getSelectedPrimaryKeys\" type=\"(rowSelection?: DataSourceRowSelection) => (string|number)[]\">\n\n> Retrieves the ids (primary keys) of the selected rows, when the selection contains group keys instead of primary keys (so when <DPropLink name=\"useGroupKeysForMultiRowSelection\" /> is `true` and the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>).\n\nIf you provide a the value of a `rowSelection`, it will be used as the source of truth for retrieving the row ids. If no value for `rowSelection` is provided, it will use the current row selection.\n\n<Note>\n\nThis will not work properly when the `DataSource` is configured with <DPropLink name=\"lazyLoad\" code={false}>lazy loading</DPropLink>, since it cannot give you primary keys of rows not yet loaded.\n\n</Note>\n\n<Note>\n\nIf you don't provide a value for the `rowSelection` and are calling this method in the <DPropLink name=\"onRowSelectionChange\" /> callback prop, you might be one step behind the selection. In such a case, make sure you pass to this function the value you receive in the <DPropLink name=\"onRowSelectionChange\" /> callback.\n\n</Note>\n\n<Sandpack title=\"Using getSelectedPrimaryKeys in multi row checkbox selection with grouping\" >\n\n<Description>\n\nThis example shows how you can use getSelectedPrimaryKeys with multiple row selection to retrieve the actual ids of the selected rows.\n\n</Description>\n\n```ts file=\"$DOCS/reference/controlled-multi-row-selection-example-with-group-keys.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"isRowSelected\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Checks if a row specified by its primary key is selected or not. Optionally provide the group keys, if you have access to them.\n\n<Note>\nThe group keys are not mandatory, and they are useful only when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>.\n\nEven if you don't pass them, the component will try to retrieve them from its internal state - note though that in lazy-load scenarios, not all rows/groups may have been loaded, so in this case, you have to make sure you provide the `groupKeys` when calling this method.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"isRowDeselected\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Checks if a row specified by its primary key is deselected or not. Optionally provide the group keys, if you have access to them.\n\nSee note from [isRowSelected](#isRowSelected)\n\n</Prop>\n\n<Prop name=\"selectAll\" type=\"() => void\">\n\n> Selects all the rows in the DataSource.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting all rows, see related [deselectAll](#deselectAll).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> (when multiple row selection is enabled) to a value of\n\n```tsx\n{ defaultSelection: true, deselectedRows: []}\n```\n\n</Note>\n\n</Prop>\n\n<Prop name=\"selectGroupRow\" type=\"(groupKeys: any[]) => void\">\n\n> Selects the group row that is identified by the given group keys. Only makes sense when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting a group row, see related [deselectGroupRow](#deselectGroupRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting group rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to include the group row you want to select.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"selectRow\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Selects the specified row. Optionally provide the group keys, if you have access to them.\n\nSee note from [isRowSelected](#isRowSelected) for whether you need to provide the `groupKeys` or not.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting the row, see related [deselectRow](#deselectRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to include the row you want in the selection.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"toggleGroupRowSelection\" type=\"(groupKeys: any[]) => void\">\n\n> Toggles the selection of the group row that is identified by the given group keys. Only makes sense when the DataSource is <DPropLink name=\"groupBy\" code={false}>grouped</DPropLink>.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting a group row, see related [deselectGroupRow](#deselectGroupRow).\nFor selecting a group row, see related [selectGroupRow](#selectGroupRow).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting group rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to include the group row you want to select.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"toggleRowSelection\" type=\"(primaryKey: any, groupKeys?: any[]) => boolean\">\n\n> Toggles the selection of the specified row. Optionally provide the group keys, if you have access to them.\n\nSee note from [isRowSelected](#isRowSelected) for whether you need to provide the `groupKeys` or not.\n\nCalling this method triggers a call to <DPropLink name=\"onRowSelectionChange\" >DataSource.onRowSelectionChange</DPropLink>.\n\nFor deselecting the row, see related [deselectRow](#deselectRow).\nFor selecting the row, see related [selectRow](#selectRow).\nFor toggling the selection for a group row, see related [toggleGroupRowSelection](#toggleGroupRowSelection).\n\n<Note>\n\nMost often, you don't need to use this imperative way of selecting rows. Simply update the <DPropLink name=\"rowSelection\">DataSource.rowSelection</DPropLink> to include or exclude the given row.\n\n</Note>\n\n</Prop>\n\n</PropTable>\n"
    },
    "/docs/reference/tree-api/": {
      "filePath": "/docs/reference/tree-api/index",
      "routePath": "/docs/reference/tree-api/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/tree-api/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/tree-api/",
      "frontmatter": {
        "title": "Tree API",
        "layout": "API"
      },
      "excerpt": "When rendering the `TreeDataSource` component, you can get access to the Tree API by reading it from the [DataSource API](/docs/reference/datasource-api) <DApiLink name=\"treeApi\" /> property.",
      "readingTime": "3 min read",
      "content": "\nWhen rendering the `TreeDataSource` component, you can get access to the Tree API by reading it from the [DataSource API](/docs/reference/datasource-api) <DApiLink name=\"treeApi\" /> property.\n\n```tsx {3}\n<DataSource<DATA_TYPE>\n  onReady={(api: DataSourceApi<DATA_TYPE>) => {\n    api.treeApi // <----\n    // treeApi is accessible here\n    // you may want to store a reference to it in a ref or somewhere in your app state\n    \n  }}\n/>\n```\n\nFor updating tree nodes, see the following methods:\n\n- <DApiLink name=\"updateDataByNodePath\" />\n- <DApiLink name=\"removeDataByNodePath\" />\n\n<PropTable sort searchPlaceholder=\"Type to filter API methods\">\n\n<Prop name=\"expandAll\" type=\"() => void\">\n\n> Expands all the nodes in the tree. See related <TreeApiLink name=\"collapseAll\" /> prop.\n\n<Sandpack title=\"Expanding all nodes\" size=\"lg\">\n\n```tsx file=\"tree-expandall-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"selectAll\" type=\"() => void\">\n\n> Selects all the nodes in the tree. See related <TreeApiLink name=\"deselectAll\" /> prop.\n\nThis works if the tree has selection enabled. See [tree selection](/docs/learn/tree-grid/tree-selection) for more details.\n\n<Sandpack title=\"Selecting all nodes via Tree API\" size=\"lg\">\n\n```tsx file=\"tree-selectall-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"selectNode\" type=\"(nodePath: NodePath) => void\">\n\n> Selects the node with the given node path. See related <TreeApiLink name=\"deselectNode\" /> and <TreeApiLink name=\"toggleNodeSelection\" /> methods.\n\n\n<Sandpack title=\"Selecting a node via Tree API\" size=\"lg\">\n\n```tsx file=\"tree-selectnode-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"deselectNode\" type=\"(nodePath: NodePath) => void\">\n\n> Deselects the node with the given node path. See related <TreeApiLink name=\"selectNode\" /> and <TreeApiLink name=\"toggleNodeSelection\" /> methods.\n\n<Sandpack title=\"Deselecting a node via Tree API\" size=\"lg\">\n\n```tsx file=\"tree-selectnode-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n\n<Prop name=\"toggleNodeSelection\" type=\"(nodePath: NodePath) => void\">\n\n> Toggles the selection state of the node with the given node path. See related <TreeApiLink name=\"selectNode\" /> and <TreeApiLink name=\"deselectNode\" /> methods.\n\n<Sandpack title=\"Toggling a node's selection state via Tree API\" size=\"lg\">\n\n```tsx file=\"tree-selectnode-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"deselectAll\" type=\"() => void\">\n\n> Deselects all the nodes in the tree. See related <TreeApiLink name=\"selectAll\" /> prop.\n\n\nThis works if the tree has selection enabled. See [tree selection](/docs/learn/tree-grid/tree-selection) for more details.\n\n<Sandpack title=\"Deselecting all nodes via Tree API\" size=\"lg\">\n\n```tsx file=\"tree-selectall-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"collapseAll\" type=\"() => void\">\n\n> Collapses all the nodes in the tree. See related <TreeApiLink name=\"expandAll\" /> prop.\n\n<Sandpack title=\"Collapsing all nodes\" size=\"lg\">\n\n```tsx file=\"tree-expandall-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n</Prop>\n\n\n<Prop name=\"isNodeExpanded\" type=\"(nodePath: NodePath) => boolean\">\n\n> Returns `true` if the node is expanded, `false` otherwise.\n\n<Sandpack title=\"Checking if a node is expanded\" size=\"lg\">\n\n```tsx file=\"tree-toggleNodeExpandState-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Prop>\n\n<Prop name=\"toggleNode\" type=\"(nodePath: NodePath, options?: {force?: boolean}) => void\">\n\n> Toggles the node with the give node path.\n\nIf the node at the given path is expanded, it will be collapsed and vice versa.\n\nSee related <TreeApiLink name=\"expandNode\" /> and <TreeApiLink name=\"collapseNode\" /> methods.\n\n</Prop>\n\n<Prop name=\"expandNode\" type=\"(nodePath: NodePath, options?: {force?: boolean}) => void\">\n\n> Expands the node with the given node path. See related <TreeApiLink name=\"collapseNode\" /> and <TreeApiLink name=\"toggleNode\" /> methods.\n\nExpands the node. Does not affect other child nodes.\n\n<Sandpack title=\"Expanding a node\" size=\"lg\">\n\n```tsx file=\"tree-toggleNodeExpandState-example.page.tsx\"\n```\n\n</Sandpack>\n\n<Note>\n\nIf `options.force` is `true`, the node will be expanded even if <DPropLink name=\"isNodeReadOnly\" /> is `true` for the given node.\n\n</Note>\n</Prop>\n\n<Prop name=\"collapseNode\" type=\"(nodePath: NodePath, options?: {force?: boolean}) => void\">\n\n> Collapses the node with the given node path. See related <TreeApiLink name=\"expandNode\" /> and <TreeApiLink name=\"toggleNode\" /> methods.\n\nCollapses the node. Does not affect other child nodes.\n\n<Sandpack title=\"Collapsing a node\" size=\"lg\">\n\n```tsx file=\"tree-toggleNodeExpandState-example.page.tsx\"\n```\n\n</Sandpack>\n\n<Note>\n\nIf `options.force` is `true`, the node will be collapsed even if <DPropLink name=\"isNodeReadOnly\" /> is `true` for the given node.\n\n</Note>\n</Prop>\n\n</PropTable>\n"
    },
    "/docs/reference/type-definitions/": {
      "filePath": "/docs/reference/type-definitions/index",
      "routePath": "/docs/reference/type-definitions/",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/reference/type-definitions/index.page.md",
      "fileName": "index.page.md",
      "folderPath": "/docs/reference/type-definitions/",
      "frontmatter": {
        "title": "Infinite Table Type Definitions",
        "description": "TypeScript type definitions for Infinite Table"
      },
      "excerpt": "These are the public type definitions for `InfiniteTable` and related components, that you can import with named imports from the `@infinite-table/infinite-react` package.",
      "readingTime": "20 min read",
      "content": "\nThese are the public type definitions for `InfiniteTable` and related components, that you can import with named imports from the `@infinite-table/infinite-react` package.\n\n```tsx title=\"Importing the type for rowInfo\"\nimport type { InfiniteTableRowInfo } from '@infinite-table/infinite-react';\n```\n\n<Note title=\"Naming convention ‚ö†Ô∏è\">\n\nThe types of all properties in the `InfiniteTable` and `DataSource` components respect the following naming convention: `<ComponentName>Prop<PropName>`\n\nSo, for example, the type for <DPropLink name=\"groupBy\" /> is <TypeLink name=\"DataSourcePropGroupBy\" />\n\n</Note>\n\n<PropTable searchPlaceholder=\"Type to filter type definitions\" sort>\n\n<Prop name=\"TreeSelectionValue\">\n\n> Represents the selection state of the tree nodes. See <DPropLink name=\"treeSelection\" /> for more details.\n\n```ts\nimport type { TreeSelectionValue } from '@infinite-table/infinite-react';\n```\n\nThe selection value is an object with the following properties:\n\n- `defaultSelection`: `boolean` - whether the tree nodes are selected by default or not.\n- `selectedPaths?`: `NodePath[]` - the paths of the selected nodes. Mandatory if `defaultSelection` is `false`.\n- `deselectedPaths`: `NodePath[]` - the paths of the deselected nodes. Mandatory if `defaultSelection` is `true`.\n\n```tsx title=\"Example of tree selection value\"\nconst treeSelection: TreeSelectionValue = {\n  defaultSelection: false,\n  selectedPaths: [['1'], ['2', '20']],\n  deselectedPaths: [['1','10']],\n};\n// node ['1'] will be selected but indeterminate\n// since ['1','10'] is in the deselectedPaths\n// node ['2','20'] will be fully selected\n```\n\n</Prop>\n\n<Prop name=\"TreeExpandStateValue\">\n\n> Represents the expand/collapse state of the tree nodes. See <DPropLink name=\"treeExpandState\" /> for more details.\n\n```ts\nimport type { TreeExpandStateValue } from '@infinite-table/infinite-react';\n```\n\nYou can specify the expand/collapse state of the tree nodes in two ways:\n\n1. With node paths (recommended)\n\nWhen using node paths, the object should have the following properties:\n\n- `defaultExpanded`: `boolean` - whether the tree nodes are expanded by default or not.\n- `collapsedPaths`: `string[]` - when `defaultExpanded` is `true`, this is a mandatory prop.\n- `expandedPaths`: `string[]` - when `defaultExpanded` is `false`, this is a mandatory prop.\n\n```tsx title=\"Example of treeExpandState with node paths\"\nconst treeExpandState = {\n  defaultExpanded: true,\n  collapsedPaths: [\n    ['1', '10'],\n    ['2', '20'],\n    ['5']\n  ],\n  expandedPaths: [\n    ['1', '4'],\n    ['5','nested node in 5'],\n  ],\n};\n```\n\n2. With node ids\n\nWhen using node ids, the object should have the following properties:\n\n- `defaultExpanded`: `boolean` - whether the tree nodes are expanded by default or not.\n- `collapsedIds`: `string[]` - when `defaultExpanded` is `true`, this is a mandatory prop.\n- `expandedIds`: `string[]` - when `defaultExpanded` is `false`, this is a mandatory prop.\n\n\n```tsx title=\"Example of treeExpandState with node ids\"\nconst treeExpandState = {\n  defaultExpanded: true,\n  collapsedIds: ['1', '2', '5'],\n  expandedIds: ['10', '20', 'nested node in 5'],\n};\n```\n\n</Prop>\n\n<Prop name=\"RowDetailState\">\n\n> Represents the collapse/expand state of row details - when [master-detail is configured](/docs/learn/master-detail/overview). Also see <PropLink name=\"rowDetailRenderer\" /> for the most important property in the master-detail configuration.\n\nThis class can be instantiated and the value passed to the <PropLink name=\"rowDetailState\" /> prop (or its uncontrolled variant, <PropLink name=\"defaultRowDetailState\" />).\n\n```tsx title=\"Passing an instance of RowDetailState to the InfiniteTable\"\nconst rowDetailState = new RowDetailState({\n  collapsedRows: true,\n  expandedRows: [2, 3, 4],\n});\n\n<InfiniteTable<DATA_TYPE> rowDetailState={rowDetailState} />;\n```\n\n```tsx title=\"Passing an object literal to the InfiniteTable\"\n<InfiniteTable<DATA_TYPE>\n  rowDetailState={{\n    collapsedRows: true,\n    expandedRows: [2, 3, 4],\n  }}\n/>\n```\n\n<Note>\n\nThe instance is only useful if you want to interrogate the object, with methods like `areAllCollapsed()`, `areAllExpanded()`, `isRowDetailsExpanded(rowId)` and so on.\n\nWhen using the <PropLink name=\"onRowDetailStateChange\" /> callback, it's called with an instance of this class - if you want to use the object literal, make sure you call `rowDetailState.getState()` to get the plain object.\n</Note>\n\nThe <PropLink name=\"rowDetailState\"/> and <PropLink name=\"defaultRowDetailState\"/> accept both an object literal and an instance of this class.\n\nThe object literal has the following properties:\n\n- `collapsedRows`: `boolean | any[]` - if `true`, all row details are collapsed. If an array, it contains the row ids of the rows that are collapsed.\n- `expandedRows`: `boolean | any[]` - if `true`, all row details are expanded. If an array, it contains the row ids of the rows that are expanded.\n\nYou can create an instance using the object literal notation and you can get the object literal from the instance using the `getState` method:\n\n```tsx\nconst rowDetailState = new RowDetailState({\n  collapsedRows: true,\n  expandedRows: [2, 3, 4],\n});\nconst clone = new RowDetailState(rowDetailState);\n\nconst state = rowDetailState.getState();\n```\n\nYou can mark rows as expanded/collapsed even after creating the instance:\n\n```tsx\nconst rowDetailState = new RowDetailState({\n  collapsedRows: true,\n  expandedRows: [2, 3, 4],\n});\nrowDetailState.expandRowDetails(5);\nrowDetailState.collapseRowDetails(2);\n\n// now you can pass this instance back to the InfiniteTable component\n```\n\n</Prop>\n\n<Prop name=\"DataSourceDataParams\" generic>\n\n> The type for the object passed into the <DPropLink name=\"data\" /> function prop of the `DataSource` component.\n\nWhen the <DPropLink name=\"data\" /> function is called, it will be called with an object of this type.\n\nThe following properties are available on this object:\n\n- `sortInfo?` - <TypeLink name=\"DataSourcePropSortInfo\" /> - the current sort info for the grid.\n- `groupBy?` - an array of <TypeLink name=\"DataSourceGroupBy\" /> - the current group by for the grid.\n- `pivotBy?` - an array of <TypeLink name=\"DataSourcePivotBy\" /> - the current pivot by for the grid.\n- `filterValue?` - an array of <TypeLink name=\"DataSourceFilterValueItem\" /> - the current filter value for the grid.\n- `masterRowInfo?` - <TypeLink name=\"InfiniteTableRowInfo\" /> - only available if the DataSource is a detail DataSource - meaning there is a master DataGrid, and the DataSource is used to load the detail DataGrid.\n\n</Prop>\n\n<Prop name=\"DataSourceFilterValueItem\">\n\n> The type for the items in the <DPropLink name=\"filterValue\" /> array prop of the `DataSource` component.\n\n</Prop>\n\n<Prop name=\"GroupRowsState\">\n\n> Describes the collapse/expand state for group rows, when [grouping is used](/docs/learn/grouping-and-pivoting/grouping-rows). \n\nThis is a class, and instances of it can be used as a value for the <PropLink name=\"groupRowsState\" />/<PropLink name=\"defaultGroupRowsState\" /> props.\n\nIt's the sole argument available in the <DPropLink name=\"onGroupRowsStateChange\" /> callback.\n\nIt gives you the following additional utility methods:\n\n - `getState()`\n - `areAllExpanded()`\n - `areAllCollapsed()`\n - `expandAll()`\n - `collapseAll()`\n - `isGroupRowExpanded(keys: any[][])`\n - `isGroupRowCollapsed(keys: any[][])`\n - `expandGroupRow(keys: any[][])`\n - `collapseGroupRow(keys: any[][])`\n - `toggleGroupRow(keys: any[][])`\n\n\nTo create an instance, pass a plain object that describes the <PropLink name=\"groupRowsState\" />/<PropLink name=\"defaultGroupRowsState\" /> value:\n\n\n```tsx\nconst state = new GroupRowsState({\n  expandedRows: true,\n  collapsedRows: [\n    ['Europe']\n    ['Europe','France'],\n    ['Italy']\n  ]\n})\n\nconsole.log(state.getState())\n// will log the above object that was used \n// as the sole argument for the constructor\n\n```\n\n<Note>\n\nWhen you call those methods, be aware you're not updating the React state! So you'll have to clone the object, call the method on the clone and then update the React state - in the code below, notice the `onClick` code for the `Expand all`/`Collapse all` buttons.\n\n<Sandpack title=\"Using the expandAll/collapseAll methods with cloning the GroupRowsState instance\">\n\n```ts file=\"using-group-rows-state-controlled-example.page.tsx\"\n```\n\n</Sandpack>\n\n</Note>\n</Prop>\n\n\n<Prop name=\"DataSourcePivotBy\" generic>\n\n> Describes a pivot value for the grid.\n\nThis is the type for the items in the <DPropLink name=\"pivotBy\" /> array prop of the `DataSource` component.\n\nThe most important property in this type is the `field` - which will be `keyof DATA_TYPE` - the field to pivot by.\n\nAnother important property in this type is the `column`. It will be used to configure the generated pivot columns:\n\n- if it's an object literal, it will be applied to all generated columns\n- if it's a function, it will be called for each generated column, and the return value will be used to configure the column.\n\n```tsx\nconst pivotBy: DataSourcePivotBy<Developer>[] = [\n  { field: 'country' },\n  {\n    field: 'canDesign',\n    column: ({ column: pivotCol }) => {\n      const lastKey =\n        pivotCol.pivotGroupKeys[pivotCol.pivotGroupKeys.length - 1];\n\n      return {\n        header: lastKey === 'yes' ? 'üíÖ Designer' : 'üíª Non-designer',\n      };\n    },\n  },\n];\n```\n\n</Prop>\n\n<Prop name=\"InfiniteTableColumnHeaderParam\" generic>\n\n> Represents runtime information passed to rendering and styling functions called when rendering the column headers\n\nThis object is passed to <PropLink name=\"headerClassName\" />, <PropLink name=\"headerStyle\" />, <PropLink name=\"header\" /> and <PropLink name=\"renderHeader\" /> functions.\n\nIt is an object with the following properties:\n\n- `column` - see <TypeLink name=\"InfiniteTableComputedColumn\" /> for details\n- `columnSortInfo` - the current sort info for the column. it will be an object of type <TypeLink name=\"DataSourceSingleSortInfo\" /> or `null`.\n- `filtered: boolean` - if the column is currently filtered or not\n- `api` - [`InfiniteTableApi`](/docs/reference/api) - the api object.\n- `columnApi` - [`InfiniteTableColumnApi`](/docs/reference/column-api) - the column api object.\n- `renderBag` - an object with various JSX values, the default elements rendered by the Infinite Table for the column header. It contains the following properties:\n  - `header` - the default column header text\n  - `sortIcon` - the default sort icon\n  - `menuIcon` - the default column menu icon\n  - `filterIcon` - the default column filter icon\n  - `selectionCheckBox` - the default column selection checkbox\n\n```tsx title=\"Example column.renderHeader function\"\nconst renderHeader = ({ renderBag }) => {\n  return (\n    <b style={{ display: 'flex', color: 'tomato', alignItems: 'center' }}>\n      ({renderBag.header}) {renderBag.sortIcon}\n    </b>\n  );\n};\nconst columns = {\n  salary: {\n    field: 'salary',\n    type: 'number',\n    renderHeader,\n  },\n};\n```\n\n</Prop>\n\n<Prop name=\"InfiniteTableColumnStylingFnParams\" generic>\n\n> Represents runtime information passed to many styling functions called when rendering the column cells\n\nThis object is passed at runtime during the rendering of column cells.\n\nIt is an object with the following properties:\n\n- `column` - see <TypeLink name=\"InfiniteTableComputedColumn\" /> for details\n- `rowInfo` - see <TypeLink name=\"InfiniteTableRowInfo\" /> for details\n- `data` - the data object for the current row. The type of this object is `DATA_TYPE | Partial<DATA_TYPE> | null`. For regular rows, it will be of type `DATA_TYPE`, while for group rows it will be `Partial<DATA_TYPE>`. For rows not yet loaded (because of batching being used), it will be `null`.\n- `value` - the underlying value of the current cell - will generally be `data[column.field]`, if the column is bound to a `field` property\n- `inEdit`: `boolean`\n- `editError`: `Error`\n- `rowSelected`: `boolean | null;`\n- `rowActive`: `boolean | null`\n- `rowHasSelectedCells`: `boolean` - if the current row has selected cells or not\n\n<Note>\n\nThe following functions all have this as first argument:\n\n- <PropLink name=\"columns.style\" />\n- <PropLink name=\"columns.className\" />\n\n</Note>\n\n</Prop>\n<Prop name=\"InfiniteTableStylingFnParams\" generic>\n\n> Represents runtime information passed to many styling functions called when rendering rows/cells\n\nThis object is passed at runtime during the rendering of grid rows/cells.\n\nIt is an object with the following properties:\n\n- `rowInfo` - see <TypeLink name=\"InfiniteTableRowInfo\" /> for details\n- `rowIndex`: `number` - the index of the row\n- `rowHasSelectedCells`: `boolean` - if the current row has selected cells or not\n\n<Note>\n\nThe following functions all have this as first argument:\n\n- <PropLink name=\"rowStyle\" />\n- <PropLink name=\"rowClassName\" />\n- <PropLink name=\"rowProps\" />\n\n</Note>\n</Prop>\n\n<Prop name=\"DataSourceSingleSortInfo\" generic>\n\n> Represents information on a specific sort. Contains info about the field to sort by, the sort direction, and the sort type.\n\nThis is the referenced by the <DPropLink name=\"sortInfo\" /> prop.\n\nBasically the <DPropLink name=\"sortInfo\" /> prop can be either an array of <TypeLink name=\"DataSourceSingleSortInfo\" /> objects, or a single <TypeLink name=\"DataSourceSingleSortInfo\" /> object (or null).\n\nThese are the type properties:\n\n- `dir`: `1 | -1` - 1 means ascending sort order; -1 means descending sort order.\n- `field?`: `keyof DATA_TYPE` - the field to sort by.\n- `id?`: `string` - an id for the sort info. When a column is not bound to a `field`, use the column id as the `id` property of the sort info, if you need to specify a default sort order by that column. Note that columns have a <PropLink name=\"columns.valueGetter\">valueGetter</PropLink>, which will be used when doing local sorting and the column is not bound to an exact field.\n- `type?`: `string` - the sort type to apply. See <DPropLink name=\"sortType\" /> for more details. For example, you can use `\"string\"` or `\"number\"` or `\"date\"`\n\n</Prop>\n\n<Prop name=\"DataSourcePropSortInfo\" generic>\n\n> The type of the <DPropLink name=\"sortInfo\" /> DataSource prop.\n\nValid types for this prop are:\n\n- `null`\n- <TypeLink name=\"DataSourceSingleSortInfo\" />\n- <TypeLink name=\"DataSourceSingleSortInfo\" />[]\n\n</Prop>\n\n<Prop name=\"DataSourcePropGroupBy\" generic>\n\n> The type of the <DPropLink name=\"groupBy\" /> prop. Basically this type is an array of <TypeLink name=\"DataSourceGroupBy\" />.\n\n</Prop>\n\n<Prop name=\"InfiniteTableComputedColumn\" generic>\n\n> This represents an enhanced column definition for a column. A computed column is basically a column with more information computed at runtime, based on everything Infinite Table can aggregate about it.\n\nThis type also includes the properties of the `InfinteTableColumn` type: <PropLink name=\"columns.id\" />, <PropLink name=\"columns.field\" />, <PropLink name=\"columns.valueGetter\" />, etc.\n\nAdditional type properties:\n\n- `id`: `string` - the id of the column. This is the same as the <PropLink name=\"columns.id\" /> prop.\n- `computedEditable`: `boolean| Function` - whether this column is ediable or not. See <PropLink name=\"columns.defaultEditable\" /> for more details.\n- `computedWidth`: `number` - the actual calculated width of the column (in pixels) that will be used for rendering. This is computed based on the <PropLink name=\"columns.defaultWidth\" />, <PropLink name=\"columns.defaultFlex\" /> and other min/max constraints.\n- `computedPinned`: `false | \"start\" | \"end\"`\n- `computedSortInfo`: <TypeLink name=\"DataSourceSingleSortInfo\" /> or null - the sort info for this column.\n- `computedSorted`: `boolean` - whether this column is currently sorted or not.\n- `computedSortedAsc`: `boolean` - whether this column is currently sorted ascending or not.\n- `computedSortedDesc`: `boolean` - whether this column is currently sorted descending or not.\n- `computedFiltered`: `boolean` - whether this column is currently filtered or not.\n- ... and more (docs coming soon)\n\n</Prop>\n\n<Prop  name=\"InfiniteTableColumnCellContextType\" generic>\n\n> The type for the parameter of <PropLink name=\"columns.renderValue\"/> (and related rendering functions) and also for the object you get back when you call <HookLink name=\"useInfiniteColumnCell\" />\n\nThese are the type properties:\n\n- `isGroupRow`: `boolean` - whether the current row is a group row or not.\n- `data`: `DATA_TYPE` | `Partial<DATA_TYPE>` | `null` - the data object for the current row.\n  Because the DataSource can be grouped, the `data` object can be either the original data object, or a partial data object (containing the aggregated values - in case of a group row), or null. You can use `isGroupRow` to discriminate between these cases. If `isGroupRow` is `false`, then `data` is of type `DATA_TYPE`.\n- `rowInfo`: <TypeLink name=\"InfiniteTableRowInfo\" />. See that type for more details.\n- `rawValue`: `string` | `number` | other - the raw value for the cell - as computed from the <PropLink name=\"columns.field\" code={false}>column field</PropLink> or <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> function.\n- `value`: `Renderable` - the current value to render for the cell. This is based on the `rawValue`, but if a <PropLink name=\"columns.valueFormatter\" code={false}>column valueFormatter</PropLink> exists, it will be the result of that.\n- `column`: <TypeLink name=\"InfiniteTableComputedColumn\" /> - the (computed) column definition for the current cell.\n- `columnsMap`: a map collection of <TypeLink name=\"InfiniteTableComputedColumn\" /> objects, keyed by column id.\n- `fieldsToColumn`: a map collection of <TypeLink name=\"InfiniteTableComputedColumn\" /> objects, keyed by the column field. If a column is not bound to a field, it will not be included in this map.\n- `align`: the computed value of the <PropLink name=\"columns.align\">align</PropLink> prop for the current cell. This will be `\"start\"`, `\"center\"` or `\"end\"`.\n- `api`: [`InfiniteTableApi`](/docs/reference/api) - the api object.\n- `rowInfo`: <TypeLink name=\"InfiniteTableRowInfo\" /> - the row info for the current row.\n- `rowIndex`: `number` - the index of the current row.\n- `renderBag`: See [column rendering](/docs/learn/columns/column-rendering#rendering-pipeline) for more details.\n- `toggleCurrentGroupRow`: `() => void` - a function that can be used to toggle the current row, if it's a group row.\n- `toggleCurrentTreeNode`: `() => void` - a function that can be used to toggle the expand/collapse state of the current tree node (only available when rendering [a tree grid](/docs/learn/tree-grid/overview)).\n- `rootGroupBy`: <TypeLink name=\"DataSourceGroupBy\" /> - the group by specified in the <DPropLink name=\"groupBy\" /> prop of the `DataSource`.\n- `groupByForColumn`: available for group columns. When <PropLink name=\"groupRenderStrategy\" /> is `\"multi-column\"`, this will be a single <TypeLink name=\"DataSourcePropGroupBy\" />, for each of the generated group columns. When <PropLink name=\"groupRenderStrategy\" /> is `\"single-column\"`, this will be an array of <TypeLink name=\"DataSourcePropGroupBy\" /> objects - it will be available only in the single group column that will be generated.\n\n</Prop>\n\n<Prop  name=\"InfiniteColumnEditorContextType\" generic>\n\n> The type for the object you get back when you call <HookLink name=\"useInfiniteColumnEditor\" />\n\nThese are the type properties:\n\n- `api`: [`InfiniteTableApi`](/docs/reference/api) - the api object.\n- `initialValue`: `any` - the initial value for the editor.\n- `value`: `any` - the current value for the editor. Initially will be the same as `initialValue`. If you use this value, then your editor is \"controlled\", so make sure that when the editor is changed, you call the `setValue` function with the new value.\n- `setValue`: `(value: any) => void` - should be called to update the value in the cell editor. Calling this does not complete the edit.\n- `confirmEdit`: a reference to <ApiLink name=\"confirmEdit\"  code={false}>InfiniteTableApi.confirmEdit</ApiLink>. If you have called `setValue` while editing (meaning your editor was controlled), you don't have to pass any parameters to this function. - the last value of the editor will be used. If your editor is uncontrolled and you haven't called `setValue`, you need to call `confirmEdit` with the value that you want to confirm for the edit.\n\n- `cancelEdit`: a reference to <ApiLink name=\"cancelEdit\" code={false}>InfiniteTableApi.cancelEdit</ApiLink>. Call this to cancel the edit and close the editor. Doesn't require any parameters.\n- `rejectEdit`: a reference to <ApiLink name=\"rejectEdit\" code={false}>InfiniteTableApi.rejectEdit</ApiLink>. Call this to reject the edit and close the editor. You can pass an `Error` object when calling this function to specify the reason for the rejection.\n- `readOnly`: `boolean` - whether the cell is read-only or not.\n\n<Note>\n\nInside the <HookLink name=\"useInfiniteColumnEditor\" /> hook, you can still call <HookLink name=\"useInfiniteColumnCell\" /> to get access to the cell-related information.\n\n</Note>\n\n</Prop>\n\n<Prop name=\"DataSourceGroupBy\" generic>\n\n> The type for the objects in the <DPropLink name=\"groupBy\" /> array. See related <TypeLink name=\"DataSourcePropGroupBy\" />\n\n<Note>\n\nThe type is generic, and the generic type parameter is the type of the data in the grid. In this documentation, either `DATA_TYPE` or `T` will be used to refer to the generic type parameter.\n\n</Note>\n\nThese are the type properties:\n\n- `field` - `keyof DATA_TYPE`. The field to group by.\n- `column`: `Partial<InfiniteTableColumn>`\n- `toKey?`: `(value: any, data: DATA_TYPE) => any` - a function that can be used to decide the bucket where each data object from the data set will be placed. If not provided, the `field` value will be used.\n\n</Prop>\n\n<Prop name=\"InfiniteTableRowInfo\" generic>\n\n> Type for `rowInfo` object representing rows in the table. See [Using RowInfo](/docs/learn/rows/using-row-info) for more details.\n\n<Note>\n\nThe type is generic, and the generic type parameter is the type of the data in the grid. In this documentation, either `DATA_TYPE` or `T` will be used to refer to the generic type parameter.\n\n</Note>\n\nMany methods in Infinite Table are called with `rowInfo` objects that are typed to <TypeLink name=\"InfiniteTableRowInfo\" />. (see <PropLink name=\"columns.style\" />, <PropLink name=\"rowStyle\" />, <PropLink name=\"rowClassName\" />, <PropLink name=\"persistEdit\" />, <PropLink name=\"onEditAccepted\" /> and many others)\n\nThis is a discriminated type, based on the `dataSourceHasGrouping` boolean property and the `isGroupRow` boolean property. This means that the type of the object will change based on the value of those properties.\n\n```ts\n\nexport type InfiniteTableRowInfo<T> =\n  // dataSourceHasGrouping = false, isGroupRow = false\n  | InfiniteTable_NoGrouping_RowInfoNormal<T>;\n\n  // dataSourceHasGrouping = true, isGroupRow = false\n  | InfiniteTable_HasGrouping_RowInfoNormal<T>\n\n   // dataSourceHasGrouping = true, isGroupRow = true\n  | InfiniteTable_HasGrouping_RowInfoGroup<T>\n\n  // tree scenarios - leaf node\n  | InfiniteTable_Tree_RowInfoLeafNode<T>\n\n  // tree scenarios - parent node\n  | InfiniteTable_Tree_RowInfoParentNode<T>;\n\n```\n\nThe common properties of the type (in all discriminated cases) are:\n\n- `id` - the primary key of the row, as retrieved using the <DPropLink name=\"idProperty\" /> prop.\n- `indexInAll` - the index in all currently visible rows.\n- `rowSelected` - whether the row is selected or not - `boolean | null`.\n- `rowDisabled` - whether the row is disabled or not - `boolean`.\n\n### InfiniteTable_NoGrouping_RowInfoNormal\n\nThis type has `dataSourceHasGrouping` set to `false` and `isGroupRow` set to `false`.\n\nAdditional properties to the ones already mentioned above:\n\n- `data` - the data for the underlying row, of type `DATA_TYPE`.\n- `isGroupRow` - `false`\n- `isTreeNode` - `false`\n- `dataSourceHasGrouping` - `false`\n- `selfLoaded` - `boolean` - useful when lazy loading is configured.\n\n### InfiniteTable_HasGrouping_RowInfoNormal\n\nThis type has `dataSourceHasGrouping` set to `true` and `isGroupRow` set to `false`. So we're in a scenario where grouping is configured via <DPropLink name=\"groupBy\" />, but the current row is not a group row.\n\nAdditional properties this type exposes:\n\n- `data` - the data for the underlying row, of type `DATA_TYPE`.\n- `dataSourceHasGrouping` - `true`\n- `isGroupRow` - `false`\n- `isTreeNode` - `false`\n- `indexInGroup` - type: `number`. The index of the row in its parent group.\n- `groupKeys` - type: `any[]`, but usually it's actually `string[]`. For normal rows, the group keys will have all the keys starting from the topmost parent down to the last group row in the hierarchy (the direct parent of the current row).\n- `groupBy` - type `(keyof T)[]`. Has the same structure as groupKeys, but it will contain the fields used to group the rows.\n- `rootGroupBy` - type `(keyof T)[]`. The groupBy value of the DataSource component, mapped to the `groupBy.field`\n- `parents` - a list of `rowInfo` objects that are the parents of the current row.\n- `indexInParentGroups[]` - type: `number[]`. See below for an example\n- `groupCount` - type: `number`. The count of leaf rows that the current group (in this case, the parent group) contains\n- `groupNesting` - type `number`. The nesting of the parent group.\n- `collapsed` - type `boolean`.\n- `selfLoaded` - type: `boolean`. Useful in lazy-loading scenarios, when there is batching present. If you're not in such a scenario, the value will be `false`.\n\n### InfiniteTable_HasGrouping_RowInfoGroup\n\nThis type has `dataSourceHasGrouping` set to `true` and `isGroupRow` set to `true`. So we're in a scenario where grouping is configured via <DPropLink name=\"groupBy\" /> and the current row is a group row.\n\nAdditional properties this type exposes:\n\n- `data` - the data for the underlying row, of type `Partial<DATA_TYPE> | null`. If there are [aggregations configured](/docs/learn/grouping-and-pivoting/group-aggregations), then `data` will be an object that contains those aggregated values (so the shape of the object will be `Partial<DATA_TYPE>`). When no aggregations, `data` will be `null`\n- `dataSourceHasGrouping` - `true`\n- `isGroupRow` - `true`\n- `isTreeNode` - `false`\n- `error` - type: `string?`. If there was an error while loading the group (when the group row is expanded), this will contain the error message. If the group row was loaded with the `cache: true` flag sent in the server response, the error will remain on the `rowInfo` object even when you collapse the group row, otherwise, if `cache: true` was not present, the `error` property will be removed on collapse.\n- `indexInGroup` - type: `number`. The index of the row in the its parent group.\n- `deepRowInfoArray` - an array of `rowInfo` objects. This array contains all the (uncollapsed, so visible) row infos under this group, at any level of nesting, in the order in which they are visible in the table.\n- `reducerResults` - type `Record<string, AggregationReducerResult>`. The result of the <DataSourcePropLink name=\"aggregationReducers\">aggregation reducers</DataSourcePropLink> for each field in the <DataSourcePropLink name=\"aggregationReducers\" /> prop.\n- `groupCount` - type: `number`. The count of leaf rows that the current group (in this case, the parent group) contains\n- `groupData` - type: `DATA_TYPE[]`. The array of the data of all leaf nodes (normal nodes) that are inside this group.\n\n### InfiniteTable_Tree_RowInfoBase\n\nThe base type for row nodes when using the `<TreeDataSource />` component.\n\n- `nodePath`: `any[]` - the path for the current row info\n- `isTreeNode`: `true`\n- `isParentNode`: `boolean`\n- `indexInParent`: `number`\n- `treeNesting`: `number` - the nesting level of the current node.\n\n### InfiniteTable_Tree_RowInfoParentNode\n\nThe type used for parent nodes in tree scenarios.\n\nIn addition to the properties already available via `InfiniteTable_Tree_RowInfoBase`,  it adds the following properties:\n\n- `isParentNode` - `true`\n- `isTreeNode` - `true`\n- `totalLeafNodesCount` - `number`\n- `collapsedLeafNodesCount` - `number`\n\n### InfiniteTable_Tree_RowInfoLeafNode\n\nThe type used for leaf nodes in tree scenarios.\n\nIn addition to the properties already available via `InfiniteTable_Tree_RowInfoBase`,  it adds the following properties:\n\n- `isParentNode` - `false`\n- `isTreeNode` - `true`\n\n</Prop>\n\n</PropTable>\n"
    },
    "/blog/2021/12/10/infinite-launch": {
      "filePath": "/blog/2021/12/10/infinite-launch",
      "routePath": "/blog/2021/12/10/infinite-launch",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2021/12/10/infinite-launch.page.md",
      "fileName": "infinite-launch.page.md",
      "folderPath": "/blog/2021/12/10/",
      "frontmatter": {
        "title": "Infinite Table Alpha Launch üöÄ",
        "author": [
          "admin"
        ],
        "date": "2021-12-10T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "Today we are announcing the alpha version (`0.0.7`) of `Infinite Table` ready to be used by early adopters - you can take it from npm",
      "readingTime": "1 min read",
      "content": "\nToday we are announcing the alpha version (`0.0.7`) of `Infinite Table` ready to be used by early adopters - you can take it from npm\n\n<TerminalBlock>\nnpm i @infinite-table/infinite-react\n</TerminalBlock>\n\nWe're thrilled by the work done by the whole team and this is the result of years of their combined experience and passion üéâ!\n\n### Future plans\n\nWe have big plans for the future of `Infinite Table` - first we want to finish the current react implementation and see it widely used and wildly successful and then we can move on to other frontend libraries/frameworks.\n\nThe **virtualization engine** we've built for this component is library agnostic so we'll have to port the **rendering** part to other platforms - which could prove to be a not-so-difficult task with all the experience we have in building this.\n\n# üöÄ\n"
    },
    "/blog/2023/01/26/filtering-data-with-infinite-table-for-react": {
      "filePath": "/blog/2023/01/26/filtering-data-with-infinite-table-for-react",
      "routePath": "/blog/2023/01/26/filtering-data-with-infinite-table-for-react",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2023/01/26/filtering-data-with-infinite-table-for-react.page.md",
      "fileName": "filtering-data-with-infinite-table-for-react.page.md",
      "folderPath": "/blog/2023/01/26/",
      "frontmatter": {
        "title": "Filtering Data with Infinite Table for React",
        "description": "Learn how to filter data both client-side and server-side with Infinite Table for React",
        "author": [
          "admin"
        ],
        "date": "2023-01-26T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "_Today we shipped cutting-edge column filtering functionality, that enables intuitive client-side and server-side filtering_",
      "readingTime": "5 min read",
      "content": "\n_Today we shipped cutting-edge column filtering functionality, that enables intuitive client-side and server-side filtering_\n\n<Note title=\"Why use Infinite Table filters?\">\n\n1Ô∏è‚É£ Narrow down your data with your own filter types and operators\n\n2Ô∏è‚É£ Works both client-side and server-side\n\n3Ô∏è‚É£ Easy customization of filters and filter editors\n\n4Ô∏è‚É£ Optimized for performance\n\n5Ô∏è‚É£ Easy to use across multiple columns\n\n</Note>\n\nFilters were, by far, the most requested feature to add to Infinite Table after our initial launch.\n\nThe recently-released version `1.1.0` of Infinite Table for React introduces support for column filters, which work both client-side and server-side.\n\nIn order to enable filtering - specify the <DPropLink name=\"defaultFilterValue\"/> property on the `<DataSource />` component, as shown below:\n\n```tsx {4} title=\"Enabling_filters_on_the_DataSource\"\n<DataSource<Developer> data={/* ... */} primaryKey=\"id\" defaultFilterValue={[]}>\n  <InfiniteTable<Developer> columns={columns} />\n</DataSource>\n```\n\nThis configures the `<DataSource />` component with an empty array of filters; columns will pick this up and each will display a filter editor in the column header.\n\nOf course, you can define some initial filters:\n\n```tsx title=\"Initial_filters:_filter_by_age_greater_than_40\"\ndefaultFilterValue={[\n  {\n    field: 'age',\n    filter: {\n      type: 'number',\n      operator: 'gt',\n      value: 40\n    }\n  }\n]}\n```\n\nYou can see how all of this looks like when we put it all together in the examples below.\n\n## Local and Remote Filtering\n\nBecause the `<DataSource />` <DPropLink name=\"data\" /> prop is a function that returns a `Promise` with remote data, the filtering will happen server-side by default.\n\n<CSEmbed title=\"Server-side filtering 10k records\" id=\"infinite-table-with-remote-filters-i8b4wx\" />\n\nWhen using remote filtering, it's your responsability to send the DataSource <DPropLink name=\"filterValue\"/> to the backend (you get this object as a parameter in your <DPropLink name=\"data\"/> function). This value includes for each column the value in the filter editor, the column filter type and the operator in use. In this case, the frontend and the backend need to agree on the operator names and what each one means.\n\n<Note title=\"Data reloads when filters change\">\n\nWhenever filters change, when remote filtering is configured, the <DPropLink name=\"data\" /> function prop is called again, with an object that has the `filterValue` correctly set to the current filters (together with `sortInfo` and other data-related props like `groupBy`, etc).\n</Note>\n\nHowever, we can use the <DPropLink name=\"filterMode\"/> to force client-side filtering:\n\n```tsx\n<DataSource<Developer> filterMode=\"local\" filterDelay={0} />\n```\n\nWe also specify the <DPropLink name=\"filterDelay\">filterDelay=0</DPropLink> in order to perform filtering immediately, without debouncing and batching filter changes, for a quicker response ‚ö°Ô∏è üèé\n\n<CSEmbed title=\"Client-side filtering 10k records\" id=\"infinite-table-with-client-side-filters-sqbdbu\" />\n\n<Note title=\"Using local filtering\">\n\nEven if your data is loaded from a remote source, using `filterMode=\"local\"` will perform all filtering on the client-side - so you don't need to send the `filterValue` to the server in your `data` function.\n\n</Note>\n\n## Defining Filter Types and Custom Filter Editors\n\nCurrently there are 2 filter types available in Infinite Table:\n\n- `string`\n- `number`\n\nConceptually, you can think of filter types similar to data types - generally if two columns will have the same data type, they will display the same filter.\n\nEach filter type supports a number of operators and each operator has a name and can define it's own filtering function, which will be used when local filtering is used.\n\n<CSEmbed title=\"Custom filter type and filter editor for canDesign column\" id=\"infinite-table-filters-with-custom-editor-and-filter-type-ptlq2v\"/>\n\nThe example above, besides showing how to define <DPropLink name=\"filterTypes\" code={false}>a custom filter type</DPropLink>, also shows how to define a custom filter editor.\n\n<Note title=\"Providing a Custom Filter Editor\">\n\nFor defining a custom filter editor to be used in a filter type, we need to write a new React component that uses the <HookLink name=\"useInfiniteColumnFilterEditor\" /> hook.\n\n```tsx\nimport { useInfiniteColumnFilterEditor } from '@infinite-table/infinite-react';\n\nexport function BoolFilterEditor() {\n  const { value, setValue } = useInfiniteColumnFilterEditor<Developer>();\n  return <>{/* ... */}</>;\n}\n```\n\nThis custom hook allows you to get the current `value` of the filter and also to retrieve the `setValue` function that we need to call when we want to update filtering.\n\nRead more about this [in the docs - how to provide a custom editor](/docs/learn/filtering/providing-a-custom-filter-editor).\n\n</Note>\n\n## Customise Filterable Columns and Filter Icons\n\nMaybe you don't want all your columns to be filterable.\n\nFor controlling which columns are filterable and which are not, use the <PropLink name=\"columns.defaultFilterable\" /> property.\n\nThis overrides the global <PropLink name=\"columnDefaultFilterable\" /> prop.\n\nWe have also made it easy for you to customize the filter icon that is displayed in the column header.\n\n<CSEmbed title=\"Custom filter icons for firstName and salary columns\" id=\"infinite-table-custom-filter-icon-jc7jr8\" />\n\nYou change the filter icon by using the <PropLink name=\"columns.renderFilterIcon\" /> prop - for full control, it's being called even when the column is not filtered, but you have a `filtered` property on the argument the function is called with.\n\nIn the example above, the `salary` column is configured to render no filter icon, but the `header` is customized to be bolded when the column is filtered.\n\n## Ready for Your Challenge!\n\nWe listened to your requests for advanced filtering.\n\nAnd we believe that we've come up with something that's really powerful and customizable.\n\nNow it's your turn to try it out and show us what you can build with it! üöÄ\n\nIf you have any questions, feel free to reach out to us on [Twitter](https://twitter.com/infinite_table) or in the [GitHub Discussions](https://github.com/infinite-table/infinite-react/discussions).\n\nMake sure you try out filtering in Infinite Table for yourself ([and consult our extensive docs](/docs/learn/filtering) if required).\n\n<HeroCards>\n<YouWillLearnCard title=\"Client-side filtering\" path=\"/docs/learn/filtering/filtering-client-side\">\nLearn how to use filtering in the browser.\n</YouWillLearnCard>\n<YouWillLearnCard title=\"Server-side filtering\" path=\"/docs/learn/filtering/filtering-server-side\">\nFigure out how to use filtering with server-side integration.\n</YouWillLearnCard>\n</HeroCards>\n"
    },
    "/blog/2023/02/16/using-menus-in-infinite-table": {
      "filePath": "/blog/2023/02/16/using-menus-in-infinite-table",
      "routePath": "/blog/2023/02/16/using-menus-in-infinite-table",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2023/02/16/using-menus-in-infinite-table.page.md",
      "fileName": "using-menus-in-infinite-table.page.md",
      "folderPath": "/blog/2023/02/16/",
      "frontmatter": {
        "title": "Using Menus in Infinite Table",
        "description": "Find out how to use menus in Infinite Table to customise the DataGrid to fit your needs: custom context menus, column menus and more.",
        "author": [
          "admin"
        ],
        "date": "2023-02-16T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "_With version 1.1.0, our DataGrid now includes support for context menus, which are fully configurable so you can create custom menus for any cell in the table._",
      "readingTime": "7 min read",
      "content": "\n_With version 1.1.0, our DataGrid now includes support for context menus, which are fully configurable so you can create custom menus for any cell in the table._\n\n<Note title=\"Context menus in Infinite Table\">\n\n1Ô∏è‚É£ are fully configurable\n\n2Ô∏è‚É£ adjust their position based on the available space\n\n3Ô∏è‚É£ can be used to create custom menus for any cell in the table\n\n4Ô∏è‚É£ give you full access to the information in the cell or the whole DataGrid\n\n</Note>\n\n## How it works\n\nIn Infinite Table you can configure a context menu to be displayed when you right-click a cell by using the <PropLink name=\"getCellContextMenuItems\" /> prop. Simply specify a function that returns an array of objects, each with `label` and `key` properties. Each object in the array is a row in the context menu - with the `label` being the displayed content and the `key` being a unique identifier for the menu row.\n\n```tsx title=\"Configuring_a_context_menu\"\nconst getCellContextMenuItems = ({ column, data, value }) => {\n  if (column.id === 'currency') {\n    return [\n      {\n        label: `Convert ${value}`,\n        key: 'currency-convert',\n        onAction: (key, item) => {\n          alert('clicked ' + item.key);\n        },\n      },\n    ];\n  }\n\n  if (column.id === 'age') {\n    return null;\n  }\n\n  return [\n    {\n      label: `Welcome ${value}`,\n      key: 'hi',\n    },\n  ];\n};\n\n<DataSource<Developer> data={data} primaryKey=\"id\">\n  <InfiniteTable<Developer>\n    getCellContextMenuItems={getCellContextMenuItems}\n    columns={columns}\n  />\n</DataSource>;\n```\n\nIn the <PropLink name=\"getCellContextMenuItems\" /> function prop, you have access to all the information you need, in the first argument of the function:\n\n- `column` - the column on which the user right-clicked\n- `data` - the data object for the row the user right-clicked\n- `value` - the value of the cell on which the context menu has been triggered. This is generally `data[column.field]`, but it can be different if the column has a <PropLink name=\"columns.valueGetter\" /> or <PropLink name=\"columns.valueFormatter\" />\n- `rowInfo` - an object that contains more information about the row, like the `id` (the primary key) and the row index\n- `isGroupRow`\n- and more\n\n<Note>\n\nIf <PropLink name=\"getCellContextMenuItems\" /> is specified and returns `null`, no custom context menu will be displayed, instead the default browser context menu will be shown (in this case, we do not call `preventDefault()` on the event object).\n\nIf <PropLink name=\"getCellContextMenuItems\" /> returns an empty array, the default browser context menu will not be shown (in this case, we are calling `preventDefault()` on the event object), but also no custom context menu will be displayed, as there are no menu items to show.\n\n</Note>\n\n<Note title=\"Responding to user actions\">\n\nEach item on the context menu can specify an `onAction` function, which will be called when the user clicks on the menu item. The function will receive the `key` and the `item` as arguments.\n\nIn addition, since the menu items are returned from inside the `getCellContextMenuItems` function, the `onAction` callback has access to the same information as the `getCellContextMenuItems` function.\n</Note>\n\n<CSEmbed title=\"Context menu for all cells\" id=\"cell-context-menus-ibtnn0\" />\n\n## Configuring the context menu to have multiple columns\n\nIn the above example, notice each context menu item has only one cell, where the `label` property is displayed.\n\nHowever, Infinite Table for React allows you to create more complex menus, with multiple columns.\n\nIn order to do this, use the same <PropLink name=\"getCellContextMenuItems\"/> prop, but return an object, with `columns` and `items`\n\n```tsx\nconst getCellContextMenuItems = () => {\n  return {\n    columns: [{ name: 'label' }, { name: 'lcon' }],\n    items: [\n      {\n        label: 'Welcome',\n        icon: 'üëã',\n        key: 'hi',\n      },\n      {\n        label: 'Convert',\n        icon: 'üîÅ',\n        key: 'convert',\n      },\n    ],\n  };\n};\n```\n\n<Note>\n\nWhen <PropLink name=\"getCellContextMenuItems\"/> is used to configure the column menus, each column `name` should have a corresponding property in the objects returned in the `items` array (each object also needs to keep the `key` property).\n\nAlso, we recommend keeping a column named `label`.\n\n</Note>\n\n<CSEmbed id=\"custom-columns-for-context-menus-hcsz9e\" title=\"Customising columns in the context menu\n\" />\n\n## Smart positioning\n\nContext menus in Infinite Table are smart enough to adjust their position based on the available space relative to the mouse-click coordinates. The menu will always try to fit inside the grid viewport and to look for the best position that will not cause the menu to be cut off or overflow outside the DataGrid.\n\nThe same algorithm is applied to column menus and also to filter menus (the menu displayed when a filter is shown and the user wants to change the filter operator).\n\n## Context menus outside cells, for the table body\n\nThere are scenarios when you want to display a context menu even when you right-click outside a cell, but inside the table body - for those cases, you can use <PropLink name=\"getContextMenuItems\" /> (in fact, you can use the <PropLink name=\"getContextMenuItems\" /> prop for all context menus).\n\nThe signature of <PropLink name=\"getContextMenuItems\" /> is almost identical with that of <PropLink name=\"getCellContextMenuItems\"/>, with the exception that cell-related information can be undefined - if the user didn't right-click a cell, but somewhere else in the table body.\n\n<CSEmbed id=\"table-context-menus-0h2qzf\" title=\"Context menus outside cells, for the table body\"/>\n\nIn the example above, if you click outside a cell, a menu with a single item will be displayed - `Add Item`. If you click on a cell, the menu will be different, and will show information about the clicked cell.\n\n## Column menus\n\nBesides context menus, the DataGrid also supports menus for columns, that allow you to sort/unsort, pin/unpin, clear filtering and toggle column visibility.\n\nJust like context menus, the column menus can also be fully customised, by using the <PropLink name=\"getColumnMenuItems\" /> prop.\n\n```tsx title=\"Customizing-column-menu\"\nfunction getColumnMenuItems(items, { column }) {\n  if (column.id === 'firstName') {\n    // you can adjust the default items for a specific column\n    items.splice(0, 0, {\n      key: 'firstName',\n      label: 'First name menu item',\n      onClick: () => {\n        console.log('Hey there!');\n      },\n    });\n  }\n\n  // or for all columns\n  items.push({\n    key: 'hello',\n    label: 'Hello World',\n    onClick: () => {\n      alert('Hello World from column ' + column.id);\n    },\n  });\n  return items;\n}\n```\n\n<Note>\n\nThe first argument passed to the <PropLink name=\"getColumnMenuItems\" /> prop is the array of items that is displayed by default in the column menu.\n\nYou can either modify this array and return it or you can return another totally different array.\n\n</Note>\n\n<CSEmbed id=\"custom-column-menus-93jsyb\" />\n\nAs with context menus, positioning column menus is also smart - the menu will always try to fit inside the grid viewport, so it will align to the right or the left of the column, depending on the available space.\n\n## Conclusion\n\nIn this article, we've explained just some of the scenarios that are now possible with Infinite Table for React, by using the new context and column menus.\n\n<HeroCards>\n<YouWillLearnCard title=\"Working with Context Menus\" path=\"/docs/learn/context-menus/using-context-menus\">\nLearn more about working with context menus.\n</YouWillLearnCard>\n<YouWillLearnCard title=\"Using Column Menus\" path=\"/docs/learn/columns/column-menus\">\nConfiguring column menus to fit your needs - read more.\n</YouWillLearnCard>\n</HeroCards>\n\nWe hope you'll use these functionalities to build amazing DataGrids for your applications, that are fully tailored to your needs.\n\nIf you find any issues or have any questions, please reach out to us on [Twitter](https://twitter.com/infinite_table) or in the [GitHub Discussions](https://github.com/infinite-table/infinite-react/discussions) or [issues](https://github.com/infinite-table/infinite-react/issues).\n\nWe're happy to help and improve how you work with the component - we want to make it very easy and straight-forward to use it and are looking for ways to simplify our APIs to **achieve more with less**.\n"
    },
    "/blog/2023/07/14/version-2-0-0": {
      "filePath": "/blog/2023/07/14/version-2-0-0",
      "routePath": "/blog/2023/07/14/version-2-0-0",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2023/07/14/version-2-0-0.page.md",
      "fileName": "version-2-0-0.page.md",
      "folderPath": "/blog/2023/07/14/",
      "frontmatter": {
        "title": "Infinite Table DataGrid for React reaches version 2.0.0",
        "description": "With version 2.0.0 InfiniteTable DataGrid for React brings lots of fixes and enhancements including support for sorting group columns, better APIs, improved pivoting, smarter column menus and more.",
        "author": [
          "admin"
        ],
        "date": "2023-07-14T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "Version `2.0.0` is a release that allowed us to polish many areas of the component and consolidate its existing features and APIs.",
      "readingTime": "4 min read",
      "content": "\nVersion `2.0.0` is a release that allowed us to polish many areas of the component and consolidate its existing features and APIs.\n\nWe hope this makes your experience with Infinite Table as your React DataGrid of choice even better.\n\nThough it doesn't add major new features, this version does improve the overall experience of using the component. In this article we're detailing the most important improvements this release brings.\n\n<Note title=\"Version 2.0.0 highlights üéâ\">\n\n1Ô∏è‚É£ [better support for sorting group columns](#1-better-support-for-sorting-group-columns)\n2Ô∏è‚É£ [allows configuring the behavior when multiple sorting is enabled](#2-multi-sort-behavior)\n3Ô∏è‚É£ [smarter column menus](#3-smarter-column-menus)\n4Ô∏è‚É£ [improved support for boolean pivot columns](#4-improved-support-for-boolean-pivot-columns)\n5Ô∏è‚É£ [better and more exhaustive APIs](#5-better-and-more-exhaustive-apis)\n\n</Note>\n\n<YTEmbed url=\"https://www.youtube.com/embed/rhoj66cPzYM\" />\n\n## 1Ô∏è‚É£ Better support for sorting group columns\n\nBefore version `2.0.0`, group columns were sortable, but only if the configured `groupBy` fields were bound to actual columns.\n\nThis release enables you to make group columns sortable even when other columns are not defined. For this to work, you have to specify a <PropLink name=\"columns.sortType\">sortType</PropLink> as an array, so the column knows how to sort the group values.\n\n```tsx title=\"Configuring sortType for group columns\"\n<InfiniteTable<Developer>\n  groupColumn={{\n    sortType: ['string', 'number'],\n    field: 'firstName',\n    defaultWidth: 150,\n  }}\n  groupRenderStrategy=\"single-column\"\n  columns={columns}\n  columnDefaultWidth={120}\n/>\n```\n\n<CSEmbed title=\"Sorting group columns is now possible\" id=\"sorting-group-columns-forked-gv5n3z\" />\n\n## 2Ô∏è‚É£ Multi sort behavior\n\nWe have introduced <PropLink name=\"multiSortBehavior\" /> to allow you to configure how the component behaves when multiple sorting is enabled. Two options are available:\n\n- `append` - when this behavior is used, clicking a column header adds that column to the alredy existing sort. If the column is already sorted, the sort direction is reversed. In order to remove a column from the sort, the user needs to click the column header in order to toggle sorting from ascending to descending and then to no sorting.\n\n- `replace` - the default behavior - a user clicking a column header removes any existing sorting and sets that column as sorted. In order to add a new column to the sort, the user needs to hold the `Ctrl/Cmd` key while clicking the column header.\n\n<PropLink name=\"multiSortBehavior\">multiSortBehavior=\"replace\"</PropLink> is the new default behavior, and also a more natural one, so we recommend using it.\n\n<CSEmbed title=\"Click column headers to see multi sort behavior in action - try clicking 'preferredLanguage' and 'salary'\" id=\"spring-snowflake-mh6wpl\" />\n\n## 3Ô∏è‚É£ Smarter column menus\n\nColumn menus are now smarter - in previous versions of Infinite Table, users were able to hide the column that had the menu opened, and the menu would hang in its initial position.\n\nWhen this happens, in version `2.0.0`, the menu realigns itself to other existing columns, thus providing a better user experience.\n\n## 4Ô∏è‚É£ Improved support for boolean pivot columns\n\nIt's pretty common to pivot by boolean columns, and this is now fully supported in Infinite Table. Previous to version `2.0.0`, the column headers for boolean pivot columns were not rendered correctly.\n\n<CSEmbed title=\"Boolean pivot columns are now supported\" id=\"lively-microservice-xtyyk7\" />\n\n## 5Ô∏è‚É£ Better and more exhaustive APIs\n\nWe have improved our APIs, with new methods and fixes. Among other things, we've polished our [Column API](/docs/reference/column-api) to offer you the ability to do more with your columns. Previously there were things that were only possible to do if you had access to the internal state of the component, but now we've moved more things to the API.\n\nFor example, our column sorting code is now centralised, and using <ColumnApiLink name=\"toggleSort\" /> gives you the same action as clicking a column header (this was not the case previously).\n\nWe've added quite a few more methods to our APIs, here's some of the most important ones:\n\n- ColumnAPI.<ColumnApiLink name=\"toggleSort\" />\n- ColumnAPI.<ColumnApiLink name=\"setSort\" />\n- ColumnAPI.<ColumnApiLink name=\"getSortDir\" />\n- ColumnAPI.<ColumnApiLink name=\"clearSort\" />\n- ColumnAPI.<ColumnApiLink name=\"isSortable\" />\n\n## Conclusion\n\nWe've been working on version `2.0.0` for a few months now and we hope you'll enjoy all the little details that make this version a better product, with all the improvements it brings in various areas of the component.\n\nWe'd love to hear your feedback, so please reach out to us via email at <a href=\"mailto:admin@infinite-table.com\" className=\" text-glow \" > admin@infinite-table.com </a> or follow us [@get_infinite](https://twitter.com/get_infinite) to keep up-to-date with news about the product.\n\nThank you üôå\n"
    },
    "/blog/2023/01/16/infinite-table-is-here": {
      "filePath": "/blog/2023/01/16/infinite-table-is-here",
      "routePath": "/blog/2023/01/16/infinite-table-is-here",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2023/01/16/infinite-table-is-here.page.md",
      "fileName": "infinite-table-is-here.page.md",
      "folderPath": "/blog/2023/01/16/",
      "frontmatter": {
        "title": "üì£ Infinite Table is Here üéâ",
        "description": "Infinite Table is ready for prime time. With version 1.0.0 we're releasing a DataGrid that's feature packed and ready to be used in enterprise-grade apps",
        "author": [
          "admin"
        ],
        "date": "2023-01-16T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "_Infinite Table React is ready for prime time._",
      "readingTime": "7 min read",
      "content": "\n_Infinite Table React is ready for prime time._\n\n_With version 1.0.0 we're releasing a DataGrid that's feature packed and ready to be used in the wild!_\n\n<Note title=\"Why use Infinite Table?\">\n\n1Ô∏è‚É£ seriously fast\n\n2Ô∏è‚É£ no empty or white rows while scrolling\n\n3Ô∏è‚É£ packed with features\n\n4Ô∏è‚É£ built from the ground up for React\n\n5Ô∏è‚É£ clear, concise and easily composable props & API\n\n</Note>\n\nWe think you'll love Infinite Table.\n\nThis is the DataGrid we would have loved to use more than 15 years ago when [we started working with tables in the browser](/blog/2022/11/08/why-another-datagrid).\n\nAnd now it's finally here üéâ.\n\n### Built from the Ground Up with React & TypeScript\n\n#### React all the Way\n\nInfinite Table feels native to React, not as a after-thought, but built with React fully in mind.\n\nIt's declarative all the way and exposes everything as props, both controlled and uncontrolled.\n\nIf you don't like the default behavior of a prop, use the controlled version and implement your own logic and handling - see for example the [following props related to column order](/docs/reference/infinite-table-props#search=columnorder):\n\n- <PropLink name=\"columnOrder\" /> - controlled property for managing order of columns\n- <PropLink name=\"defaultColumnOrder\" /> - uncontrolled version of the above\n- <PropLink name=\"onColumnOrderChange\" /> - callback prop for notifications and for updating controlled column order\n\n#### Fully Controlled\n\nReact introduced controlled components to the wider community and we've been using them for years.\n\nIt's where the power of React lies - giving the developer the flexibility to fully control (when needed) every input point of an app or component.\n\nAll the props which Infinite Table exposes, have both controlled and uncontrolled versions. This allows you to start using the component very quickly and without much effort, but also with the all-important flexibility to fully control the component when needed, as your app grows and you need more control over the DataGrid.\n\n#### TypeScript & Generic Components\n\nInfinite Table is also built with TypeScript, giving you all the benefits of a great type system.\n\nIn addition, the exposed components are exported as generic components, so you can specify the type of the data you're working with, for improved type safety.\n\n```tsx\nimport { InfiniteTable, DataSource } from '@infinite-table/infinite-react'\n\ntype Person = { id: number, name: string, age: number}\n\nconst data: Person[] = [\n  { id: 1, name: 'John', age: 25 },\n  //...\n];\nconst columns = {\n  id: { field: 'id' },\n  name: { field: 'name' },\n}\n\n// ready to render\n<DataSource<Person> data={data} primaryKey=\"id\">\n  <InfiniteTable<Person> columns={columns} />\n</DataSource>\n```\n\n### Why Use Infinite Table, cont.\n\n#### Fast - virtualization\n\nInfinite Table is fast by leveraging **virtualization** both **vertically** (for rows) and **horizontally** (for columns).\n\nThis means DOM nodes are created only for the visible cells, thus reducing the number of DOM nodes and associated memory strain and improving performance.\n\n#### No white space while scrolling - clever layout & rendering\n\nIn addition to virtualization, we use clever layout & rendering techniques to avoid white space while scrolling.\n\nWhen you scroll, the table will not show any empty rows or white space - no matter how fast you're scrolling!\n\n<Note>\n\nWe think this is one of the features that sets us apart from other components.\n\nWe've spent a lot of time and effort making sure no whitespace is visible while scrolling the table.\n\n</Note>\n\n### Batteries Included\n\nWe want you to be productive immediately and stop worrying about the basics. Infinite Table comes with a lot of features out of the box, so you can focus on the important stuff.\n\nIt helps you display huge datasets and get the most out of your data by providing you the right tools to enjoy these features:\n\n- [<img src=\"/icons/sorting.svg\" style={{display: 'inline-block'}} /> sorting](/docs/learn/sorting/overview)\n- [<img src=\"/icons/row-grouping.svg\" style={{display: 'inline-block'}} /> row grouping](/docs/learn/grouping-and-pivoting/grouping-rows) - both server-side and client-side\n- [<img src=\"/icons/pivoting.svg\" style={{display: 'inline-block'}} /> pivoting](/docs/learn/grouping-and-pivoting/pivoting/overview) - both server-side and client-side\n- [<img src=\"/icons/aggregations.svg\" style={{display: 'inline-block'}} /> aggregations](/docs/learn/grouping-and-pivoting/grouping-rows#aggregations)\n- [<img src=\"/icons/live-pagination.svg\" style={{display: 'inline-block'}} /> live pagination](/docs/learn/working-with-data/live-pagination)\n- [<img src=\"/icons/lazy-loading.svg\" style={{display: 'inline-block'}} /> lazy loading](/docs/learn/working-with-data/lazy-loading)\n- [<img src=\"/icons/keyboard-navigation.svg\" style={{display: 'inline-block'}} /> keyboard navigation](/docs/learn/keyboard-navigation/navigating-cells)\n- [<img src=\"/icons/fixed-flex-cols.svg\" style={{display: 'inline-block'}} /> fixed and flexible columns](/docs/learn/columns/fixed-and-flexible-size)\n- [<img src=\"/icons/column-grouping.svg\" style={{display: 'inline-block'}} /> column grouping](/docs/learn/column-groups)\n- [<img src=\"/icons/theming.svg\" style={{display: 'inline-block'}} /> theming](/docs/learn/theming)\n- ... and many others\n\nInfinite Table is built for companies and individuals who want to ship ‚Äî faster üèé!\n\n### (Almost) No External Dependencies\n\nWe've implemented everything from scratch and only directly depend on 2 packages (we'll probably get rid of them as well in the future) - all our dependecy graph totals a mere 3 packages.\n\n<Note>\n\nWe've reduced external dependencies for 2 main reasons:\n\n- avoid security issues with dependencies (or dependencies of dependencies...you know it) - remember left-pad?\n- keep the bundle size small\n\n</Note>\n\n### Composable API - with a small surface\n\nWhen building a component of this scale, there are two major opposing forces:\n\n- adding functionality\n- keeping the component (and the API) simple\n\nWe're continually trying to reconcile both with Infinite Table, so we've built everything with composition in mind.\n\n<Note>\n\nA practical example of composition is favouring function props instead of boolean flags or objects. Why implement a feature under a boolean flag or a static object when you can expose a functionality via a function prop? The function prop can be used to handle more cases than any boolean flag could ever handle!\n\n</Note>\n\nA good example of composability is the <PropLink name=\"groupColumn\" /> prop which controls the columns that are generated for grouping.\n\nIt can be either a column object or a function:\n\n- when it's a column object, it makes the table render a single column for grouping (as if <PropLink name=\"groupRenderStrategy\" /> was set to `\"single-column\"`)\n- when it's a function, it behaves like <PropLink name=\"groupRenderStrategy\" /> is set to `\"multi-column\"` and it's being called for each of the generated columns.\n\n```tsx title=\"Group_column_as_an_object\"\n<InfiniteTable\n  //...\n  groupColumn={{\n    header: 'Groups',\n  }}\n/>\n```\n\nvs\n\n```tsx title=\"Group_column_as_a_function\"\n<InfiniteTable\n  //...\n  groupColumn={() => {\n    // this allows you to affect all generated group columns in a single place\n    // especially useful when the generated columns are dynamic or generated via a pivot\n    return {...}\n  }}\n/>\n```\n\nOur experience with other DataGrid components taught us that the more features you add, the more complex your API becomes.\n\nSo we tried to keep the API surface as small as possible, while still offering a rich set of declarative props as building blocks that can be composed to accomplish more complex functionalities.\n\n### Built for the community, available on NPM\n\nWe're thrilled to share Infinite Table with the world.\n\nWe wanted to make it very easy for everyone to [get started](/docs/learn/getting-started) with it, so all you require is just an npm install:\n\n<TerminalBlock>\nnpm i @infinite-table/infinite-react\n</TerminalBlock>\n\nThe component will show a footer with a [Powered by Infinite Table](https://infinite-table.com) link displayed. However, all the functionalities are still available and fully working. So if you keep the link visible, you can use the component for free in any setup!\n\nAlthough you can use Infinite Table for free, we encourage you to [purchase a license](/pricing) - buying a license will remove the footer link. This will help us keep delivering new features and improvements to the component and support you and your team going forward!\n\n<HeroCards>\n<YouWillLearnCard title=\"Start right now!\" path=\"/docs/learn/getting-started\">\nGet started with Infinite Table and learn how to use it in your project.\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"Get a license\" path=\"/pricing\" buttonLabel=\"Buy a License\">\nGet Infinite Table for your project and team!\n</YouWillLearnCard>\n</HeroCards>\n"
    },
    "/blog/2023/10/05/building-a-datagrid-with-the-right-tools": {
      "filePath": "/blog/2023/10/05/building-a-datagrid-with-the-right-tools",
      "routePath": "/blog/2023/10/05/building-a-datagrid-with-the-right-tools",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2023/10/05/building-a-datagrid-with-the-right-tools.page.md",
      "fileName": "building-a-datagrid-with-the-right-tools.page.md",
      "folderPath": "/blog/2023/10/05/",
      "frontmatter": {
        "title": "Building a DataGrid with the right tools",
        "author": "admin",
        "date": "2023-10-05T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "Building for the browser has historically been very tedious. In the old days you had to resort to all sorts of hacks for getting the right layout - anyone remembers conditional comments targeting IE6-9? üòÖ",
      "readingTime": "8 min read",
      "content": "\nBuilding for the browser has historically been very tedious. In the old days you had to resort to all sorts of hacks for getting the right layout - anyone remembers conditional comments targeting IE6-9? üòÖ\n\nYeah, we don't miss those days either.\n\nThings have evolved in the last few years, and the amount of goodies JS/CSS/HTML/layout goodies we now take for granted is staggering. New CSS features like flex/grid/custom properties really make a difference. Also browser performance has improved a LOT, and today we can do things in the browser that were unthinkable just a few years ago.\n\nHowever, not everything is easier now than it was back in the browser-war days. Handling all kinds of devices, managing changing dependencies, configuring build tools, choosing the right styling approach, proper E2E testing, keeping a small bundle size, CI pipelines, etc. are all things that can (and will) go wrong if you don't have the right tools.\n\n## TypeScript\n\nIt's obvious today to just go with `TypeScript`, but a few years ago, it was not as obvious. We've been using TypeScript for quite a few years now, and we're very happy with it. We can never imagine going back to plain JS.\n\n## React\n\nBuilding on top of `React` has given us an amazing component model that's very composable and easy to reason about - and the ecosystem is huge.\n\nRead about our journey in the [Why another DataGrid?](/blog/2022/11/08/why-another-datagrid) blog post. Back when React was launching, many of our team members were writing DataGrids - either in vanilla JS or using some libraries (`jQuery` anyone? - we don't miss browser incompatibilities).\n\n## CSS Variables and Vanilla Extract\n\nAs a `DataGrid` Infinite Table is built on top of CSS variables - we're going all in with CSS variables. They have a few gotchas in very advanced cases, but all-in-all they're amazing - and especially for performance.\n\nWe're not short of [CSS variables that we expose - see the full list](/docs/learn/theming/css-variables).\n\nUsing them has been pivotal not only to the ease of theming, but also to the performance of the DataGrid.\nBeing able to change a CSS custom property on a single DOM element and then reuse it across many elements that are children of the first one is a huge performance win. Our DataGrid performance would not be the same without CSS variables.\n\n### Vanilla Extract\n\nThe single tool that has made our life a lot easier working with CSS is [Vanilla Extract](https://vanilla-extract.style/). If you're developing a component library, you should definitely use it! Not so much for simple & static apps - there are other styling solutions that are easier to use, like [tailwindCSS](https://tailwindcss.com/). But for component libraries, **Vanilla Extract is amazing**!\n\nDid we mention it's amazing? üòÖ\nThe fact that you can use TypeScript with it, can use \"Find All References\", see where everything is used is a huge win. You're not writing readonly CSS anymore - because that tends to be the case with most CSS. People are afraid to change it or remove old CSS code, just in case those rules are still being used or referenced somehow. This way, CSS only grows with time, and this is a code smell.\n\nWith Vanilla Extract, you get to forget about that. You know what's being used and what's not.\n\nAlso, hashing class names to avoid collisions is nice - and something now very common in the modern JS ecosystem. It all started with CSS modules, and now it's everywhere, Vanilla Extract included.\n\nOther great features we use extensively are:\n\n- public facing CSS variables - their names are stable\n- private CSS variables - their names are hashed\n- sharing CSS values with the TS codebase is a dream come true.\n- Vanilla Extract recipes - generating and applying CSS classes based on a combination of properties. It's enough that you have 2-3 properties, each with a few values, and managing their combinations can be a pain. Vanilla Extract recipes manage this in a very elegant way.\n\n## End-to-end testing with Playwright and NextJS\n\nRemember the days of Selenium? All those flaky tests, the slow execution, the hard to debug issues? They're gone!\n\n[Playwright](https://playwright.dev/) all the way! 300+ tests and going strong! Yes, you read that right! We have more than 300 tests making sure the all the DataGrid features are working as expected. Sorting, filtering, row grouping, column groups, pivoting, aggregations, lazy loading, live pagination, keyboard navigation, cell and row selection, theming - they're all tested! And we're not talking about unit tests, but end-to-end tests. We're testing the DataGrid in the browser, with real data just like real users would.\n\nPlaywright is an amazing tool, but we're not using it standalone. Paired with a [NextJS](https://nextjs.org/) app, with file-system based routing, we've created files/routes for each functionality. Each NextJS file in turn has a Playwright test file with the same name, but a different extension.\n\nThis has the benefit that it's always very obvious which test is running against which page. The test and the route always have the same file name, just the extension is different. The test source-code doesn't explicitly contain code that navigates to a specific page, all this is done under the hood, using this simple convention.\n\nThis way, we have a very clear separation of concerns, and it's very easy to add new tests. We just create a new file in the `pages` folder, and a new test file sibling to it. Another amazing benefit is that we can start the NextJS app and point our browser to whatever page we want to see or debug and it's there. We can very easily do the actions the test is doing and see if we get the expected results. This is a huge win for debugging.\n\n## A tailored state management\n\nWe've built a very simple yet highly effective state management solution for our DataGrid. It's built to make updating the internal state of the DataGrid as easy as possible - we want a simple API, with clear actions. Our actions map almost 1-to-1 to the DataGrid properties, which makes it very obvious to know who changed what.\n\nWe can't overstate how important it is to have a clear data flow through the DataGrid. This is because the DataGrid is by far the most complex UI component you'll ever use (and we'll ever build). You can't possibly go beyond that - at least not in common business apps, where you have the normal UI controls you can expect, like inputs, buttons, dropdowns, etc. Just the ComboBox can come near the complexity of the DataGrid, but it's still far behind.\n\nIt's important to be able to tame all this complexity - otherwise it can slow down the development process and bring it to a halt, making it difficult to add new features or fix bugs. With our current model, even though the DataGrid grew in complexity and features, we never felt our velocity dropping! We enjoy that!\n\n## No dependencies\n\nWe're very proud of the fact that we have no dependencies in our DataGrid. When you install our package, you only install our package - and nothing else. Nothing that can go wrong due to version conflicts, missing dependencies, npm issues ([remember left-pad](https://www.davidhaney.io/npm-left-pad-have-we-forgotten-how-to-program/)?).\n\nYes, we still depend on packages in our dev process, but we're striving to keep that small as well. It's already complex enough to keep TS, React, NextJS, npm (with workspaces), aliases, esbuild, tsup, playwright all working together in harmony. But we've got through it, and we're very happy with the result. It was worth it!\n\n## Separating concerns\n\nWe've separated our DataGrid into 2 main parts:\n\n- the `<DataSource />` component - handles data loading and processing\n- the `<InfiniteTable />` component - handles the rendering\n\nThis was a brilliant idea! It's new? No! It's not our invention, but we're happy we decided to apply it.\n\nIt adds a better separation between the two big parts of the DataGrid. This also helps tame some of the complexity, while adding clarity to the codebase. It's easier to reason about the code when you know that the `<DataSource />` component is responsible for data loading and processing, while the `<InfiniteTable />` component is ONLY responsible for rendering.\n\n## Conclusion\n\nWe're not sorry for choosing any of the above tools or approaches when building the InfiniteTable DataGrid component.\n\nOur developer velocity is high, and we're able to add new features and fix bugs at a fast pace. We're happy with the result and we're confident that we'll be able to keep this pace in the future.\n\nThe right tools get the right job done! They make a lot easier. Looking back, we only regret we didn't have those tools 5 years ago - but hey, things are moving in the right direction, and we're happy to be part of this journey.\n\nWhat are your tools for developer productivity?\n"
    },
    "/blog/2023/12/11/quick-guide-filtering-the-datagrid": {
      "filePath": "/blog/2023/12/11/quick-guide-filtering-the-datagrid",
      "routePath": "/blog/2023/12/11/quick-guide-filtering-the-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2023/12/11/quick-guide-filtering-the-datagrid.page.md",
      "fileName": "quick-guide-filtering-the-datagrid.page.md",
      "folderPath": "/blog/2023/12/11/",
      "frontmatter": {
        "title": "Quick Guide - Filtering the DataGrid",
        "author": "admin",
        "draft": true,
        "date": "2023-12-11T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "This is the first article in a series of quick guides that will help you get started with the DataGrid, each focusing on a specific feature. In this article, we will learn how to use filtering in the DataGrid.",
      "readingTime": "1 min read",
      "content": "\nThis is the first article in a series of quick guides that will help you get started with the DataGrid, each focusing on a specific feature. In this article, we will learn how to use filtering in the DataGrid.\n\n### Applying Filters on the DataSource\n\nYou apply filters on the `DataSource` component\n\n```tsx {4-11} title=\"Specifying an initial filter value for the DataSource\"\n<DataSource<Developer>\n  data={...}\n  primaryKey=\"id\"\n  defaultFilterValue={[\n    field: 'salary',\n    filter: {\n      operator: 'gt',\n      value: 50000,\n      type: 'number',\n    },\n  ]}\n/>\n```\n"
    },
    "/blog/2022/06/15/infinite-launch-beta": {
      "filePath": "/blog/2022/06/15/infinite-launch-beta",
      "routePath": "/blog/2022/06/15/infinite-launch-beta",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2022/06/15/infinite-launch-beta.page.md",
      "fileName": "infinite-launch-beta.page.md",
      "folderPath": "/blog/2022/06/15/",
      "frontmatter": {
        "title": "Infinite Table Beta Launch üöÄ",
        "author": [
          "admin"
        ],
        "date": "2022-06-15T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "Today we are announcing the beta version (`0.3.12`) of `Infinite Table` ready to be used by early adopters.",
      "readingTime": "1 min read",
      "content": "\nToday we are announcing the beta version (`0.3.12`) of `Infinite Table` ready to be used by early adopters.\n\n## What the version offers\n\n- improved performance\n- improved light and dark themes\n- keyboard navigation for cells and rows\n- support for custom sorting\n- support for custom column rendering\n- and lots more!\n\n### Future plans\n\nWe intend to publish regular beta versions of `Infinite Table` in preparation for our formal launch planned for **September 2022**.\n\n# üöÄ\n"
    },
    "/blog/2022/06/24/navigating-your-datagrid": {
      "filePath": "/blog/2022/06/24/navigating-your-datagrid",
      "routePath": "/blog/2022/06/24/navigating-your-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2022/06/24/navigating-your-datagrid.page.md",
      "fileName": "navigating-your-datagrid.page.md",
      "folderPath": "/blog/2022/06/24/",
      "frontmatter": {
        "title": "DataGrid Keyboard Navigation",
        "author": [
          "admin"
        ],
        "excerpt": "With version `0.3.6` Infinite Table added keyboard navigation to your favorite React DataGrid component.",
        "date": "2022-06-24T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "With version `0.3.6` Infinite Table added keyboard navigation to your favorite React DataGrid component.",
      "readingTime": "4 min read",
      "content": "\nUsing your keyboard to navigate around an app is crucial to moving fast and being productive.\n\nWith version `0.3.6` Infinite Table added keyboard navigation to your favorite React DataGrid component.\n\n## Navigating table cells\n\nBy default, navigation is enabled for table cells - that means, as soon as the user clicks a cell, it becomes active and from that point on-wards, the user can use **arrow keys**, **page up/down** and **home/end** keys to navigate.\n\nCheck out our [documentation for keyboard navigation](/docs/learn/keyboard-navigation/navigating-cells) to see more demos and a complete reference guide.\n\n<Note>\n\nPro tip: when in cell navigation mode, you can use the **`Shift` key** to navigate horizontally in combination with **page up/down** and **home/end keys**.\n\n</Note>\n\nIn the example below, click a table cell and then use arrow keys to see keyboard navigation in action\n\n<CSEmbed id=\"cell-keyboard-navigation-d3qrx1\" title=\"Keyboard navigation is enabled by default\">\n\n<Description>\n\nClick any cell in the grid and start navigating around using arrow keys.\n\n</Description>\n</CSEmbed>\n\nAnother nice feature of keyboard navigation for cells is that you can specify a default active cell - you do so by using `defaultActiveCell=[2,0]` - meaning the cell on row 2 and column 0 should be active initially.\n\n<CSEmbed title=\"Default cell selection\" id=\"infinite-table-default-cell-selection-ohx8e3\">\n<Description>\n\nIn this example, the cell at position `[1, 1]` (so second row and second column) is selected by default.\n\n</Description>\n\n</CSEmbed>\n\n## Navigating table rows\n\nBesides cell navigation, row navigation is also available. Switch to row navigation mode by specifying `keyboardNavigation=\"row\"` - the rest is similar: user clicks a row, which becomes the active row. Using arrow keys, page up/down and home/end works as expected.\n\nHaving a default row set as active is also possible, via <PropLink name=\"defaultActiveRowIndex\">defaultActiveRowIndex={2}</PropLink> - this means the row at index `2` should be initially rendered as active.\n\n<CSEmbed id=\"infinite-table-keyboard-navigation-for-rows-with-default-selection-ve1nbk\" title=\"Keyboard navigation for rows with default selection\">\n\n<Description>\n\nIn this example, keyboard navigation for rows is enabled, with row at index 2 being active by default.\n\n</Description>\n\n</CSEmbed>\n\n## Controlling active row/cell\n\nBoth cell and row navigation can be used as React uncontrolled and controlled behaviors.\n\nIn the controlled version, you have to use <PropLink name=\"onActiveCellIndexChange\" /> (or <PropLink name=\"onActiveRowIndexChange\"/>) to respond to navigation changes and update the corresponding index.\n\nThe example below demoes controlled cell navigation - initially starting with no active cell, and it updates the active cell as a result to user changes. This means you as a developer are responsible for updating the value when needed, as you no longer wish to leave this update to happen internally in the table. This makes controlled behavior excellent for advanced use-cases when you want to implement custom navigation logic.\n\n<CSEmbed id=\"infinite-table-controlled-cell-navigation-kjl4qx\" title=\"Controlled cell navigation\">\n\n</CSEmbed>\n\n## Turning off keyboard navigation\n\nDisabling keyboard navigation is done by specifying <PropLink name=\"keyboardNavigation\">keyboardNavigation=false</PropLink> - this ensures the user can no longer interact with the table rows or cells via the keyboard.\n\n## Theming\n\nThere are a number of ways to customise the appearance of the element that highlights the active cell.\n\nThe easiest is to override those three CSS variables:\n\n- `--infinite-active-cell-border-color--r` - the red component of the border color\n- `--infinite-active-cell-border-color--g` - the green component of the border color\n- `--infinite-active-cell-border-color--b` - the blue component of the border color\n\nThe initial values for those are 77, 149 and215 respectively, so the border color is `rgb(77, 149, 215)`.\nIn addition, the background color of the active cell highlight element is set to the same color as the border color (computed based on the above r, g and b variables), but with an opacity of `0.25`, configured via the `--infinite-active-cell-background-alpha` CSS variable.\n\nWhen the table is not focused, the opacity for the background color is set to `0.1`, which is the default value of the `--infinite-active-cell-background-alpha--table-unfocused` CSS variable.\n\nTo summarize, use:\n\n- `--infinite-active-cell-border-color--r`\n- `--infinite-active-cell-border-color--g`\n- `--infinite-active-cell-border-color--b`\n  to control border and background color of the active cell highlight element.\n\nSee below a demo on how easy it is to customize the colors for the active element highlighter\n\n<CSEmbed id=\"infinite-table-theming-keyboard-navigation-htukio\" title=\"Theming keyboard navigation\">\n\n</CSEmbed>\n\n## Enjoy\n\nThanks for following us thus far - we appreciate feedback, so please to let us know if keyboard navigation is useful for you or how we could make it better.\n\nPlease follow us [@get_infinite](https://twitter.com/get_infinite) to keep up-to-date with news about the product. Thank you.\n"
    },
    "/blog/2023/10/02/version-3-0-0": {
      "filePath": "/blog/2023/10/02/version-3-0-0",
      "routePath": "/blog/2023/10/02/version-3-0-0",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2023/10/02/version-3-0-0.page.md",
      "fileName": "version-3-0-0.page.md",
      "folderPath": "/blog/2023/10/02/",
      "frontmatter": {
        "title": "Infinite Table React DataGrid version 3.0.0 released",
        "description": "InfiniteTable DataGrid for React version 3.0.0 brings many small fixes and enhancements, along with a major new feature: cell selection",
        "author": [
          "admin"
        ],
        "date": "2023-10-02T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "Version `3.0.0` is a release that brings a long awaited feature: cell selection. This allows the user to perform fined-grained cell selection, either via the <DPropLink name=\"cellSelection\"/> prop or via the [Cell Selection API](/docs/reference/cell-selection-api).",
      "readingTime": "4 min read",
      "content": "\nVersion `3.0.0` is a release that brings a long awaited feature: cell selection. This allows the user to perform fined-grained cell selection, either via the <DPropLink name=\"cellSelection\"/> prop or via the [Cell Selection API](/docs/reference/cell-selection-api).\n\n<Note title=\"Version 3.0.0 highlights üéâ\">\n\n1Ô∏è‚É£ [support for single and multiple cell selection](#1-support-for-single-and-multiple-cell-selection)\n2Ô∏è‚É£ [cell selection using wildcards](#2-cell-selection-using-wildcards)\n3Ô∏è‚É£ [cell selection API](#3-cell-selection-api)\n\n</Note>\n\n## 1Ô∏è‚É£ Support for single and multiple cell selection\n\nIt's been a [long-requested feature to implement cell selection](https://github.com/infinite-table/infinite-react/issues/120).\n\nWe knew we needed to implement it, but we wanted to do it right while keeping it easy to understand.\n\nIn fact, we prepared some things in advance - namely <DPropLink name=\"selectionMode\" /> was there, it just needed to accept a new value: `\"multi-cell\"`.\n\n```tsx title=\"Configuring multi-cell selection\"\n<DataSource<Developer>\n  selectionMode=\"multi-cell\" // <--- THIS\n  primaryKey=\"id\"\n  data={[...]}\n/>\n```\n\nThe line above is all you need to do to enable cell selection. This allows the user to `Click` or `Cmd/Ctrl+Click` to select a specific cell and `Shift+Click` to select a range of cells. It's exactly the behavior you'd expect from a spreadsheet application.\n\nTry `Cmd/Ctrl+Click`ing in the DataGrid cells below to see multiple cell selection in action.\n\n<CSEmbed title=\"SelectionMode set to 'multi-cell' to allow cell selection\" id=\"sorting-group-columns-forked-qnvwwh\" />\n\n### Using a default selection\n\nIf you want to render the DataGrid with a default selection, you can use the <DPropLink name=\"defaultCellSelection\" /> prop.\n\n```tsx\nconst defaultCellSelection = {\n  defaultSelection: false,\n  selectedCells: [\n    [3, 'hobby'],\n    [4, 'firstName'],\n    [4, 'hobby'],\n    [4, 'preferredLanguage'],\n    [4, 'salary'],\n  ],\n};\n```\n\nThe format for the uncontrolled <DPropLink name=\"defaultCellSelection\" /> (and also for the controlled <DPropLink name=\"cellSelection\" />) is an object with two properties:\n\n- `defaultSelection` - `boolean` - whether or not cells are selected by default.\n- and either\n  - `selectedCells` - `[string|number, string][]` - only needed when `defaultSelection` is `false`\n- or\n  - `deselectedCells` - `[string|number, string][]` - only needed when `defaultSelection` is `true`\n\nThe value for `selectedCells` and `deselectedCells` should be an array of `[rowId, colId]` tuples.\n\nThe `rowId` is the `id` of the row (<DPropLink name=\"primaryKey\" code={false}>the primary key</DPropLink>), and the `colId` is the `id` of the column (the identifier of the column in the <PropLink name=\"columns\" /> prop).\n\nThis object shape for the <DPropLink name=\"defaultCellSelection\" />/<DPropLink name=\"cellSelection\" /> props allows you full flexibility in specifying the selection. You can specify a single cell, a range of cells, or even a non-contiguous selection. You can default to everything being selected, or everything being deselected and then enumerate your specific exceptions.\n\n<CSEmbed title=\"Specifying a default cell selection in Infinite Table\" id=\"cell-selection-with-default-value-in-infinite-table-fzdhwr\" />\n\n## 2Ô∏è‚É£ Cell Selection using wildcards\n\nThe above examples show how to select specific cells, but what if you want to select all cells in a column, or all cells in a row?\n\nWell, that turns out to be straightforward as well. You can use the `*` wildcard to select all cells in a column or all cells in a row.\n\n```tsx title=\"All cells in row with id rowId3 and all cells in hobby column are selected\"\nconst defaultCellSelection = {\n  defaultSelection: false,\n  selectedCells: [\n    ['*', 'hobby'],\n    ['rowId3', '*'],\n  ],\n}\n<DataSource selectionMode=\"multi-cell\" defaultCellSelection={defaultCellSelection} />\n```\n\n<CSEmbed title=\"Cell selection using wildcards\" id=\"cell-selection-with-wildcards-in-infinite-table-48rs75\" />\n\nWildcard selection is really powerful and it allows you to select lots of cells without the need to enumerate them all.\n\nFor example, you can easily select all cells except a few.\n\n### Listening to selection changes\n\nYou can listen to selection changes by using the <DPropLink name=\"onCellSelectionChange\" /> prop.\n\nIf you're using controlled cell selection, you have to update the <DPropLink name=\"cellSelection\" /> prop yourself in response to user interaction - so <DPropLink name=\"onCellSelectionChange\" /> will be your way of listening to selection changes.\n\n## 3Ô∏è‚É£ Cell Selection API\n\nIn addition to managing cell selection declaratively, which we encourage, you can also use the [Cell Selection API](/docs/reference/cell-selection-api) to imperatively update the current selection.\n\nWe offer the following methods:\n\n- <CellApiLink name=\"selectCell\" /> - selects a single cell, while allowing you to keep or to clear previous selection\n- <CellApiLink name=\"deselectCell\" /> - deselects the specified cell\n- <CellApiLink name=\"selectColumn\" /> - selects a whole column in the DataGrid\n- <CellApiLink name=\"deselectColumn\" /> - deselects the specified column\n- <CellApiLink name=\"selectRange\" /> - selects a range of cells\n- <CellApiLink name=\"deselectRange\" /> - deselects the specified range of cells\n- <CellApiLink name=\"selectAll\" /> - selects all cells in the DataGrid\n- <CellApiLink name=\"clear\" /> - clears selection (deselects all cells in the DataGrid)\n- <CellApiLink name=\"isCellSelected\" /> - checks if the specified cell is selected or not\n\n## Conclusion\n\nWe'd love to hear your feedback - what do you think we've got right and what's missing. Please reach out to us via email at <a href=\"mailto:admin@infinite-table.com\" className=\" text-glow \" > admin@infinite-table.com </a> or follow us [@get_infinite](https://twitter.com/get_infinite) to keep up-to-date with news about the product.\n\nTalk soon üôå\n"
    },
    "/blog/2022/09/01/infinite-table-monthly-update-august-2022": {
      "filePath": "/blog/2022/09/01/infinite-table-monthly-update-august-2022",
      "routePath": "/blog/2022/09/01/infinite-table-monthly-update-august-2022",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2022/09/01/infinite-table-monthly-update-august-2022.page.md",
      "fileName": "infinite-table-monthly-update-august-2022.page.md",
      "folderPath": "/blog/2022/09/01/",
      "frontmatter": {
        "title": "Quarterly Update - Summer 2022",
        "description": "Infinite Table update for Summper 2022 - row selection, column rendering, group columns",
        "author": [
          "admin"
        ],
        "date": "2022-09-01T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "Over the summer, we continued our work on preparing for our official release, focusing mainly on adding new functionalities and documenting them thoroughly, together with enhancements to existing features.",
      "readingTime": "7 min read",
      "content": "\nOver the summer, we continued our work on preparing for our official release, focusing mainly on adding new functionalities and documenting them thoroughly, together with enhancements to existing features.\n\n## Summary\n\nWe have implemented a few new functionalities, including:\n\n- [row selection is now available üéâ](#row-selection)\n- [column rendering pipeline](#column-rendering-pipeline)\n- [group columns are now sortable üîÉ](#sortable-group-columns)\n\nAnd we have updated some of the existing features:\n\n- [group columns inherit](#enhanced-group-columns) styles and configuration\n- [column hiding when grouping](#column-hiding-when-grouping)\n- [group columns can be bound to a field](#group-columns-bound-to-a-field)\n- [using the column valueGetter in sorting](#column-valuegetter-in-sorting)\n\n<Note title=\"Coming soon\">\n\nWe started working on column and context menus.\nWe will first release fully customizable **column** menus to show/hide columns and to easily perform other operations on columns.\nThis will be followed by **context** menus where you will be able to define your own custom actions on rows/cells in the table.\n\n---\n\nDon't worry, the menus will be fully customizable, the menu items are fully replaceable with whatever you need, or you will be able to swap our menu component with a custom one of your own.\n\n</Note>\n\n## New Features\n\nHere's what we shipped over the summer:\n\n### Row Selection\n\nRow selection can be single or multiple, with or without a checkbox, with or without grouping and for a lazy or non-lazy `DataSource` - üòÖ that was a long enumeration, but seriously, we think we got something great out there.\n\nYou can specify the selection via the <DPropLink name=\"rowSelection\" /> (controlled) or <DPropLink name=\"defaultRowSelection\" /> (uncontrolled) props, and listen to changes via the <DPropLink name=\"onRowSelectionChange\" /> callback prop.\n\n<CSEmbed id=\"infinite-table-multi-row-checkbox-selection-with-grouping-i9wi88\" title=\"Multi row checkbox selection with grouping\" >\n\n<Description>\n\n- Example shows how you can use multiple row selection with a predefined controlled value.\n\n- Go ahead and select some groups/rows and see the selection value adjust.\n\n- Example also shows how you can use the [InfiniteTableApi](/docs/reference/api) to retrieve the actual ids of the selected rows.\n\n</Description>\n\n</CSEmbed>\n\n<YouWillLearnCard inline title=\"Find out more on row selection\" path=\"/docs/learn/selection/row-selection\">\n\nSingle vs multiple selection, grouped or ungrouped data, checkbox selection, lazy selection - read about all the possible combinations you can use to fit your needs.\n\n</YouWillLearnCard>\n\n### Column Rendering Pipeline\n\nThe rendering pipeline for columns is a series of functions defined on the column that are called while rendering.\n\n<Note>\n\nAll the functions that have the word `render` in their name will be called with an object that has a `renderBag` property, which contains values that will be rendered.\n\n</Note>\n\nThe default <PropLink name=\"columns.render\" /> function (the last one in the pipeline) ends up rendering a few things:\n\n- a `value` - generally comes from the <PropLink name=\"columns.field\">field</PropLink> the column is bound to\n- a `groupIcon` - for group columns\n- a `selectionCheckBox` - for columns that have <PropLink name=\"columns.renderSelectionCheckBox\" /> defined (combined with row selection)\n\nWhen the rendering process starts for a column cell, all the above end up in the `renderBag` object.\n\nFor example:\n\n```tsx {3,12}\nconst column: InfiniteTableColumn<T> = {\n  valueGetter: () => 'world',\n  renderValue: ({ value, renderBag, rowInfo }) => {\n    // at this stage, `value` is 'world' and `renderBag.value` has the same value, 'world'\n    return <b>{value}</b>;\n  },\n\n  render: ({ value, renderBag, rowInfo }) => {\n    // at this stage `value` is 'world'\n    // but `renderBag.value` is <b>world</b>, as this was the value returned by `renderValue`\n    return <div>Hello {renderBag.value}!</div>;\n  },\n};\n```\n\n<YouWillLearnCard  title=\"Find out more on column rendering\" path=\"/docs/learn/columns/column-rendering#rendering-pipeline\">\n\nRead about how using the rendering pipeline helps your write less code.\n\n</YouWillLearnCard>\n\nHere is the full list of the functions in the rendering pipeline, in order of invocation:\n\n1.<PropLink name=\"columns.valueGetter\" /> - doesn't have access to `renderBag` 2.<PropLink name=\"columns.valueFormatter\" /> - doesn't have access to `renderBag` 3.<PropLink name=\"columns.renderGroupIcon\" /> - can use all properties in `renderBag` 4.<PropLink name=\"columns.renderSelectionCheckBox\" /> - can use all properties in `renderBag` 5.<PropLink name=\"columns.renderValue\" /> - can use all properties in `renderBag` 6.<PropLink name=\"columns.renderGroupValue\" /> - can use all properties in `renderBag` 7.<PropLink name=\"columns.renderLeafValue\" /> - can use all properties in `renderBag` 8.<PropLink name=\"columns.render\" /> - can use all properties in `renderBag`\n\nAdditionally, the <PropLink name=\"columns.components.ColumnCell\" /> custom component has access to the `renderBag` via <HookLink name=\"useInfiniteColumnCell\" />\n\n### Sortable Group Columns\n\nWhen <PropLink name=\"groupRenderStrategy\">groupRenderStrategy=\"single-column\"</PropLink> is used, the group column is sortable by default if all the columns that are involved in grouping are sortable.\n\nSorting the group column makes the `sortInfo` have a value that looks like this:\n\n```ts\nconst sortInfo = [{ field: ['stack', 'age'], dir: 1, id: 'group-by' }];\n```\n\nWhen <PropLink name=\"groupRenderStrategy\">groupRenderStrategy=\"multi-column\"</PropLink>, each group column is sortable by default if the column with the corresponding field is sortable.\n\n <Note>\n\nIn both single and multi group column render strategy, you can use the <PropLink name=\"columns.sortable\" /> property to override the default behavior.\n\n </Note>\n\n## Updated Features\n\nHere‚Äôs a list of Infinite Table functionalities that we enhanced in the last month:\n\n### Enhanced Group Columns\n\nGroup columns now inherit configuration from the columns bound to the field they are grouped by - if such columns exist.\n\n<CSEmbed id=\"infinite-table-group-column-inherits-style-from-related-column-v16qfg\" title=\"Group column inherits style from related column\">\n\n<Description>\n\nIn this example, the group column inherits the styling of the `country` column, because the `country` field is used for grouping.\n\n</Description>\n\n</CSEmbed>\n\n<Note>\n\nThe generated group column(s) - can be one for all groups or one for each group - will inherit the `style`/`className`/renderers from the columns corresponding to the group fields themselves (if those columns exist).\n\nAdditionally, there are other ways to override those inherited configurations, in order to configure the group columns:\n\n- use <DPropLink name=\"groupBy.column\" /> to specify how each grouping column should look for the respective field (in case of <PropLink name=\"groupRenderStrategy\">groupRenderStrateg=\"multi-column\"</PropLink>)\n- use <PropLink name=\"groupColumn\" /> prop\n  - can be used as an object - ideal for when you have simple requirements and when <PropLink name=\"groupRenderStrategy\">groupRenderStrateg=\"single-column\"</PropLink>\n  - as a function that returns a column configuration - can be used like this in either single or multiple group render strategy\n\n</Note>\n\n### Column Hiding when Grouping\n\nWhen grouping is enabled, you can choose to hide some columns. Here are the two main ways to do this:\n\n- use <PropLink name=\"hideColumnWhenGrouped\" /> - this will make columns bound to the group fields be hidden when grouping is active\n- use <PropLink name=\"columns.defaultHiddenWhenGroupedBy\" /> (also available on the column types, as <PropLink name=\"columnTypes.defaultHiddenWhenGroupedBy\" />) - this is a column-level property, so you have more fine-grained control over what is hidden and when.\n\nValid values for <PropLink name=\"columns.defaultHiddenWhenGroupedBy\" /> are:\n\n- `\"*\"` - when any grouping is active, hide the column that specifies this property\n- `true` - when the field this column is bound to is used in grouping, hides this column\n- `keyof DATA_TYPE` - specify an exact field that, when grouped by, makes this column be hidden\n- `{[k in keyof DATA_TYPE]: true}` - an object that can specify more fields. When there is grouping by any of those fields, the current column gets hidden.\n\n<CSEmbed id=\"infinite-table-hide-columns-when-grouping-41o64x\" title=\"Hide columns when grouping\">\n\n<Description>\n\nIn this example, the column bound to `firstName` field is set to hide when any grouping is active, since the group column is anyways found to the `firstName` field.\n\nIn addition, <PropLink name=\"hideColumnWhenGrouped\" /> is set to `true`, so the `stack` and `preferredLanguage` columns are also hidden, since they are grouped by.\n\n</Description>\n\n</CSEmbed >\n\n### Group Columns Bound to a Field\n\nGroup columns can now be bound to a field, by leveraging the (obviously ...) <PropLink name=\"columns.field\" /> property. This will make the group column render the value of that field for non-group rows.\n\n<CSEmbed id=\"infinite-table-group-column-bound-to-field-6mjpzr\" title=\"Group columns with field\">\n\n</CSEmbed>\n\nIn addition, you can now use <PropLink name=\"columns.renderGroupValue\" /> and <PropLink name=\"columns.renderLeafValue\" /> for configuring the rendered value for grouped vs non-grouped rows.\n\n### Column valueGetter in Sorting\n\nColumns allow you to define a <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> to change the value they are rendering (e.g. useful when the `DataSet` has nested objects).\n\nPreviously, this value returned by <PropLink name=\"columns.valueGetter\" /> was not used when sorting the table. With the latest update, the value returned by <PropLink name=\"columns.valueGetter\">valueGetter</PropLink> is correctly used when sorting the grid locally.\n"
    },
    "/blog/2022/08/01/infinite-table-monthly-update-july-2022": {
      "filePath": "/blog/2022/08/01/infinite-table-monthly-update-july-2022",
      "routePath": "/blog/2022/08/01/infinite-table-monthly-update-july-2022",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2022/08/01/infinite-table-monthly-update-july-2022.page.md",
      "fileName": "infinite-table-monthly-update-july-2022.page.md",
      "folderPath": "/blog/2022/08/01/",
      "frontmatter": {
        "title": "Quarterly Update - Spring 2022",
        "description": "Infinite Table update for Spring 2022",
        "author": [
          "admin"
        ],
        "excerpt": "Infinite Table update for Spring 2022",
        "date": "2022-08-01T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "Infinite Table update for Spring 2022",
      "readingTime": "4 min read",
      "content": "\nThis spring, we've been hard at work preparing for our Autumn release.\n\nWe have implemented a few new functionalities:\n\n- [column resizing](#column-resizing) is now available\n- [column reordering](#column-reordering) can be achieved via drag & drop\n- [keyboard navigation](#keyboard-navigation) with support for both row and cell navigation\n\nAnd we have updated some of the existing features:\n\n- [lazy grouping](#lazy-grouping)\n  - expands lazy loaded rows correctly and\n  - also the server response can contain multiple levels of `children`, which basically allows the backend to send more data for groups you don't want to load lazily\n- [column groups](#column-grouping) are now improved with support for proportional column resizing\n- [pivot columns](#pivoting) are now easier to style and customize\n\n<Note title=\"Coming soon\">\n\nAt the end of the spring, we started working on row and cell selection and we've made good progress on it.\n\nRow selection is already implemented for non-lazy group data and we're working on integrating it with lazy group data (e.g groups lazily loaded from the server). Of course, it will have integration with checkbox selection.\n\nMultiple row selection will have 2 ways to select data:\n\n- via mouse/keyboard interaction - we've emulated the behavior you're used to from your Finder in MacOS.\n- via checkbox - this is especially useful when the table is configured with grouping.\n\n</Note>\n\n## New Features\n\n### Column Resizing\n\nBy default columns are now resizable. You can control this at column level via <PropLink name=\"columns.resizable\">column.resizable</PropLink> or at grid level via <PropLink name=\"resizableColumns\" />.\n\n<YouWillLearnCard inline title=\"Find out more on column resizing\" path=\"/docs/learn/columns/fixed-and-flexible-size\">\n\nRead more about how you can configure column resizing to fit your needs.\n\n</YouWillLearnCard>\n\n<CSEmbed id=\"infinite-table-resizable-columns-example-gq0fnv\" title=\"Resizable columns example\">\n\n<Description>\nFor resizable columns, hover the mouse between column headers to grab & drag the resize handle.\n\nHold SHIFT when grabbing in order to **share space on resize**.\n</Description>\n\n</CSEmbed>\n\nA nice feature is support for SHIFT resizing - which will share space on resize between adjacent columns - try it in the example above.\n\n### Column Reordering\n\n<YouWillLearnCard inline title=\"Read more on column order\" path=\"/docs/learn/columns/column-order\">\n\nColumn order is a core functionality of `InfiniteTable` - read how you can leverage it in your app.\n\n</YouWillLearnCard>\n\nThe default column order is the order in which columns appear in the columns object, but you can specify a <PropLink name=\"defaultColumnOrder\" /> or tightly control it via the controlled property <PropLink name=\"columnOrder\" /> - use <PropLink name=\"onColumnOrderChange\" /> to get notifications when columns are reordered by the user.\n\n<CSEmbed title=\"Column order\" id=\"infinite-table-column-order-advanced-example-ro12mu\">\n\n</CSEmbed>\n\n### Keyboard Navigation\n\nBoth cell and row navigation is supported - use <PropLink name=\"keyboardNavigation\" /> to configure it. By default, cell navigation is enabled.\n\n<CSEmbed title=\"Keyboard navigation\" id=\"infinite-table-keyboard-navigating-cells-uncontrolled-tvwkmq\">\n\n<Description>\n\nThis example starts with cell `[2,0]` already active.\n\n</Description>\n\n</CSEmbed>\n\n## Updated Features\n\n### Lazy grouping\n\nServer side grouping has support for lazy loading - `InfiniteTable` will automatically load lazy rows that are configured as expanded.\n\n<CSEmbed id=\"infinite-table-lazy-grouping-with-expanded-rows-pkihtt\" title=\"Lazy loaded rows are properly expanded\">\n\n<Description>\n\nIn this example, `France` is specified as expanded, so as soon as it is rendered, `InfiniteTable` will also request its children.\n\n</Description>\n\n</CSEmbed>\n\nAnother nice feature is the ability for a group node to also contain its direct children in the server response, which basically allows the backend to eagerly load data for certain groups.\n\n<YouWillLearnCard inline title=\"More on lazy grouping\" path=\"/docs/learn/grouping-and-pivoting/grouping-rows#server-side-grouping-with-lazy-loading\">\n\nLazy grouping (with or without batching) is an advanced feature that allows you to integrate with huge datasets without loading them into the browser.\n\n</YouWillLearnCard>\n\n### Column grouping\n\nColumn grouping was enhanced with support for pinned columns. Now you can use them in combination.\n\n<YouWillLearnCard inline title=\"More on column groups\" path=\"/docs/learn/columns/column-grouping\">\n\nColumn groups is a powerful way to arrange columns to fit your business requirements - read how easy it is to define them.\n\n</YouWillLearnCard>\n\n<CSEmbed id=\"infinite-table-column-groups-with-pinning-ks16dp\" title=\"Column groups with pinning\">\n\n<Description>\n\nNote the `country` column is pinned at the start of the table but is also part of a column group\n\n</Description>\n\n</CSEmbed>\n\n### Pivoting\n\nPivot columns are now easier to style and benefit from piped rendering to allow maximum customization.\n\n<YouWillLearnCard inline title=\"Pivoting docs\" path=\"/docs/learn/grouping-and-pivoting/pivoting/overview\">\n\nPivoting is probably our most advanced use-case. We offer full support for server-side pivoting and aggregations.\n\n</YouWillLearnCard>\n\n<CSEmbed id=\"infinite-table-custom-rendering-for-pivot-p2ern7\" title=\"Customized pivot columns\">\n\n<Description>\n\nPivot columns for the `canDesign` field are customized.\n\n</Description>\n\n</CSEmbed>\n"
    },
    "/blog/2022/11/01/infinite-table-monthly-update-october-2022": {
      "filePath": "/blog/2022/11/01/infinite-table-monthly-update-october-2022",
      "routePath": "/blog/2022/11/01/infinite-table-monthly-update-october-2022",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2022/11/01/infinite-table-monthly-update-october-2022.page.md",
      "fileName": "infinite-table-monthly-update-october-2022.page.md",
      "folderPath": "/blog/2022/11/01/",
      "frontmatter": {
        "title": "Quarterly Update - Autumn 2022",
        "description": "Infinite Table update for Autumn 2022 - grid menus and new website",
        "author": [
          "admin"
        ],
        "date": "2022-11-01T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "_In the autumn our focus was implementing a dedicated Menu component so it can be used for column menus and row context menu._",
      "readingTime": "2 min read",
      "content": "\n_In the autumn our focus was implementing a dedicated Menu component so it can be used for column menus and row context menu._\n\n_In addition to that, we've been working on a new design for our website and getting everything ready for the release._\n\n## Summary\n\nSome new functionalities we added to InfiniteTable include:\n\n- column menus\n- support for tab navigation\n\n<Note title=\"Get a free license\">\n\nWe redesigned our website in preparation for our **v1** release and public launch.\n\nTo receive your free 3-month license, please email us at [admin@infinite-table.com](mailto:admin@infinite-table.com) while we're still working our way through to `1.0.0`\n\n</Note>\n\n## New Features\n\nHere's what we worked on in the last two months:\n\n### Menu component\n\nWe've built a brand new Menu component for Infinite Table, which we're using as a column menu and in the very near future will be used for row context menus.\n\n![Grid with menu](/blogs/grid-with-menu.png)\n\nOur policy is to develop all our components in-house and own them in order not to introduce third-party dependencies and vulnerabilities. It also helps us keep the overall bundle size small (since we're sharing some utilities) so your apps are leaner.\n\nWe have to confess menus are tricky - we made ours support any level of nesting. They're tricky because of the nesting, the smart alignment and containment they need to provide in order to be truly useful. The Infinite Menu can be aligned to different targets and using a multitude of anchoring positions, always taking into account the position with the most available space in relation to a container or a specified area. This makes it really flexible and powerful - we think you'll want to use it as standalone as well once it's documented.\n\n### Tab navigation\n\nPrevious versions of Infinite Table did not have support for tab navigation due to our heavy virtualized rendering (the visual order of the cells was not the same as the DOM order). With the latest release, Infinite Table can now handle tab navigation correctly. Column cells that render `<input />` fields or any other focusable elements can now be reached with tab navigation if the column specifies a <PropLink name=\"columns.contentFocusable\" /> prop.\n"
    },
    "/blog/2022/11/08/why-another-datagrid": {
      "filePath": "/blog/2022/11/08/why-another-datagrid",
      "routePath": "/blog/2022/11/08/why-another-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2022/11/08/why-another-datagrid.page.md",
      "fileName": "why-another-datagrid.page.md",
      "folderPath": "/blog/2022/11/08/",
      "frontmatter": {
        "title": "Why Another React DataGrid?",
        "description": "Why is another DataGrid needed? A short history of datagrids and why Infinite Table is different",
        "author": [
          "admin"
        ],
        "date": "2022-11-08T00:00:00.000Z",
        "authorData": {
          "label": [
            "admin"
          ]
        }
      },
      "excerpt": "We've been working on finding better ways to display tabular data for over 2 decades now and collectively we have 35+ years of experience working on this.",
      "readingTime": "18 min read",
      "content": "\nWe've been working on finding better ways to display tabular data for over 2 decades now and collectively we have 35+ years of experience working on this.\n\nIt all began on the desktop with a great range of DataGrids and then we moved to the web and the `<table />` component - yeah, we've been around for quite some while - all the while dealing with the same problems and requirements again and again.\n\nThis is the story of how we got to where we are today....\n\n## A (personal) History of DataGrids\n\n<Note >\n\nThis article is not meant to be a complete history of DataGrids.\n\nRather, it's personal reflections on the long journey the Infinite Table team have experienced while using and building components for displaying tabular data, culminating in Infinite Table, the modern declarative DataGrid for React.\n\n</Note>\n\n## Desktop Components\n\nDataGrids have been around as long as any of us can remember.\n\nThey are a vital tool which allows business users to visualise, edit, manage and personalise their data.\n\nBefore Tim Berners-Lee and his colleagues changed the world for ever (and for a couple of decades after), \"serious\" business applications lived on the desktop.\n\nThis was accompanied and facilitated by a plethora of great DataGrids from the likes of DevExpress, Telerik, Syncfusion, Infragistics and others.\n\nThese products defined the feature-set that users came to expect in a DataGrid - row grouping, formatting, multiple sorting, pivoting etc.\n\nAnd which any DataGrid worth its salt today needs to offer today.\n\nFor 2 decades and more these DataGrid repeatedly proved their worth in multiple changing desktop formats - MFC, WinForms, WPF and others.\n\n## Enter the Browser\n\nAnd then the browser came along and, in time, everything changed.\n\nWhile it really took until HTML5 to convince most power users to move from the desktop to the web, the need to display tabular data in the browser was there right from the start.\n\nInitially the only way to show tabular data in the browser was to use the `<table />` component, and it was this piece of code that made it happen:\n\n```css\ntable-layout: fixed;\n```\n\nthis is telling the browser ([see MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout#values)) that it shouldn't compute the space available for all rows & cells in the table before rendering but instead size the columns based on the content of the first row. This is speeding up the rendering time by quite a lot, and it's the early solution to the problem of rendering large data-sets.\n\nHowever, it was not perfect, and rendering **large** datasets was still a **huge** problem. Also, no fancy resizable / reorderable / stackable columns were available - at least not by default.\n\nThese shortcomings were obvious to developers dealing with massive datasets, so various groups and companies started coming up with solutions. One such solution came from Yahoo! as part of their larger widget library called `YUI` (it was back in the days when Y! was a big deal).\n\n### YUI DataTable\n\nEnter YUI era - launched in 2006, the Yahoo! User Interface Library was a step forward in reusability and component architecture. With the release of YUI 3, it received a modernized set of components, and the [YUI DataTable](https://clarle.github.io/yui3/yui/docs/datatable/) was probably the most advanced DataGrid solution out there. The component had a templating engine under the hood and allowed developers to customize some parts of the table. For its time, it was packed with functionality and was a great solution for many use-cases.\n\nIt had a rich API, exposing lots of events, callbacks and methods for things like moving columns around, getting the data record for a given row, adding rows and columns, etc - all imperative code. The API was powerful and allowed developers to build complex solutions, but it was all stateful and imperative - something very normal for its epoch, but something we've learned to avoid in the last few years.\n\nHere's some code showcasing the YUI DataTable\n\n```js {6} title=\"YUI DataTable with sorting\"\nvar table = new Y.DataTable({\n  columns: [\n    { key: 'item', width: '125px' },\n    {\n      key: 'cost',\n      formatter: '¬£: {value}',\n      sortable: true,\n    },\n  ],\n  sortable: true,\n  data: data,\n}).render('#example');\n\n// to programatically sort\ntable.sort({ cost: 'asc' });\n```\n\nNotice in the code above, the component had support for custom formatters via a template (in the style of Mustache templates). YUI DataTable was a great component, certainly lacking some features by modern standards, but it was amazingly rich for its time. In some respects, it's still better than some of the modern DataGrids out there. The major missing piece is virtualization for both rows and columns in the table.\n\nA nice feature YUI DataTable had was the ability to separate the DataSource component and the data loading into a separate abstraction layer, so it would be somewhat decoupled from the main UI component.\n\n```js\nvar dataSource = new Y.DataSource.IO({\n  source: '/restaurants/fetch.php?',\n});\n\ndataSource.plug(Y.Plugin.DataSourceXMLSchema, {\n  schema: {\n    resultListLocator: 'Result',\n    resultFields: [{ key: 'Title' }, { key: 'Phone' }, { key: 'Rating' }],\n  },\n});\nvar table = new Y.DataTable({\n  columns: ['Title', 'Phone', 'Rating'],\n  summary: 'Chinese restaurants near 98089',\n});\n\ntable.plug(Y.Plugin.DataTableDataSource, {\n  datasource: dataSource,\n  initialRequest: 'zip=94089&query=chinese',\n});\n```\n\nInfinite Table is getting this a step further and splitting the data loading and the rendering into two separate components - `<DataSource />` and `<InfiniteTable />`:\n\n- the `<DataSource />` component is responsible for managing the data - fetching it, sorting, grouping, pivoting, filtering, etc and making it available via the React context to the UI component.\n- the `<InfiniteTable />` component is responsible only for rendering the data. This means you can even use the `<DataSource />` component with another React component and implement your own rendering and virtualization.\n\n```tsx\n<DataSource<DataEntity> primaryKey=\"id\" data={...}>\n  {/* if you wanted to, you can replace\n   <InfiniteTable/> with your own custom component */}\n\n  <InfiniteTable<DataEntity> columns={...}>\n</DataSource>\n```\n\nThis level of separation allows us to iterate more rapidly on new features and also makes testing üß™ easier.\n\n### ExtJS 3\n\nThe next solution we've worked with was [ExtJS version 3](https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.grid.GridPanel), which was built on the legacy of YUI 3. At the time, back in 2010, it was the most advanced DataGrid solution out there - used for some of the most complex applications in the enterprise world, from CMSs to ERP systems.\n\nThe ExtJS 3 DataGrid brought excellent product execution in a few areas:\n\n- the [documentation](https://docs.sencha.com/extjs/3.4.0/) was excellent for its time - very rich, easy to navigate and search, with useful examples. As a bonus, from the docs you had access to the source-code of all components, which was a nice addition.\n- it came together with a rich set of components for building complex UIs - grids, trees, combo-boxes, form inputs, menus, dialogs, etc. Powerful layout components were available, which allowed developers to build complex app layouts by composing components together - and everything felt like it was part of the same story, which it was.\n- enthusiastic community - the forums were very active and the community was writing lots of good plugins.\n\n```js title=\"ExtJS 3 DataGrid code snippet\"\nvar grid = new Ext.grid.GridPanel({\n  // data fetching abstracted in a \"Store\" component\n  store: new Ext.data.Store({\n    // ...\n  }),\n  // columns abstracted in a ColumnModel\n  colModel: new Ext.grid.ColumnModel({\n    defaults: {\n      width: 120,\n      sortable: true,\n    },\n    columns: [\n      {\n        id: 'company',\n        header: 'Company',\n        width: 200,\n        sortable: true,\n        dataIndex: 'company',\n      },\n      {\n        header: 'Price',\n        renderer: Ext.util.Format.usMoney,\n        dataIndex: 'price',\n      },\n      { header: 'Change', dataIndex: 'change' },\n      { header: '% Change', dataIndex: 'pctChange' },\n      {\n        header: 'Last Updated',\n        width: 135,\n        dataIndex: 'lastChange',\n        xtype: 'datecolumn',\n        format: 'M d, Y',\n      },\n    ],\n  }),\n  viewConfig: {\n    forceFit: true,\n    // Return CSS class to apply to rows depending upon data values\n    getRowClass: function (record, index) {\n      var c = record.get('change');\n      if (c < 0) {\n        return 'price-fall';\n      } else if (c > 0) {\n        return 'price-rise';\n      }\n    },\n  },\n  sm: new Ext.grid.RowSelectionModel({ singleSelect: true }),\n  // size need if not inside a layout\n  width: 600,\n  height: 300,\n});\n```\n\nBuilding on the legacy of YUI 3, the ExtJS added virtualization to make the DataGrid perform well for large datasets - it really made the component fly - since there was no framework overhead, and ExtJS was working directly with the DOM, the scrolling experience was pretty smooth.\n\nAlso ExtJS tried to make things declarative and you could describe most of your UI by nesting JavaScript objects into a root object. The idea was clever, but it was only applicable for the initial rendering and you had to write imperative code as soon as you wanted some changes after the initial render.\n\n<Note title=\"What If...\">\n\nIt was while working on a project with ExtJS 3 and exploring everything it had to offer that we had the great idea üòÖ that we should start writing a DataGrid component.\n\nWe were digging deep into ExtJS source code, wrote a few plugins for it and then decided to take the challenge and build a brand new DataGrid üò±.\n\nIt was supposed to take us just a few short months üòÖ...\n\n</Note>\n\n## The React Revolution\n\nWe were quite far in building the DataGrid component, with a dedicated templating engine under the hood (by the way, it was really good in comparison to similar solutions at that time), virtualization implemented and major functionalities finished ... when JSConf EU 2013 happened.\n\n### JSConf EU 2013\n\nWe vividly remember [watching Pete Hunt talk about ReactJS and rethinking best practices](https://www.youtube.com/watch?v=x7cQ3mrcKaY) at JSConf EU 2013.\n\n<YTEmbed url=\"https://www.youtube.com/embed/x7cQ3mrcKaY?start=25\" />\n\nBy the time the presentation was finished we knew we had to do something.\n\nThis declarative way of describing the UI got us hooked and we knew we had to **drop what we were doing and adopt React** for anything going forward. It proved to be the right decision and we were early adopters of [React](https://reactjs.org/). It was astonishing to us how easy it was to learn React at the time - only taking a few hours to fully grasp the mental model and start building reusable components.\n\n<Note title=\"The move to React\">\n2013 was the year we switched trajectory and went full-React with all our new projects. We went back to the drawing board and started our first experiments with a DataGrid component in React. \n</Note>\n\nWhile we were building the DataGrid in React we got side-tracked with other projects but we saw the same pattern again and again - people trying to implement the grid component again and again, in various projects. Most of those attempts either failed terribly or at best they were good-enough for a simple use-case.\n\n### AG Grid\n\nIt was around this time, in 2015, that [AG Grid](https://www.ag-grid.com/) was launched.\n\nAnd, wow, it was good - very good.\n\nWe immediately adopted it in all kind of projects while still trying to find time on the side to build our own DataGrid solution, the React way, with a fully declarative API.\n\nWe were inspired üôè by AG Grid, seeing the breadth of features it offers and its expansive growth.\n\nIt is a feat of engineering which illustrates just how much the browser can be pushed by extensive use of virtualization - being able to render millions of rows and thousands of columns is no small feat.\n\nAll this while keeping the performance similar as if it was rendering just a few rows and columns.\n\n<CodeSandboxEmbed src=\"https://codesandbox.io/embed/infallible-waterfall-csjcns?fontsize=14&module=%2Findex.js&theme=dark\" />\n\nIn the code above ([taken from AG Grid getting started page](https://www.ag-grid.com/javascript-data-grid/getting-started/#copy-in-application-code)), note that AG Grid is exposing its [API](https://www.ag-grid.com/javascript-data-grid/grid-api/) on the `gridOptions` object.\n\nThe API is huge and allow you to do pretty much anything you want with the grid - in an imperative way, which is what you're probably looking for if you're not integrating with a library/framework like Angular or React.\n\nAfter vanilla JavaScript and Angular versions of AG Grid, a React version was finally released.\n\nIt was a step in the right direction - to make AG Grid more declarative - though it was a thin wrapper around React, with all the renderers and API still being imperative and not feeling like the best fit inside a React app.\n\nA few years later, AG Grid finally released a `reactUI` [version](https://blog.ag-grid.com/react-ui-overview/), with tighter integration with React and a more declarative API ‚ù§Ô∏è\n\nAll this time other solutions popped up in the React community.\n\n### React Table\n\nOne such solution that got massive adoption from the community was [React Table](https://tanstack.com/table/v8/) - now rebranded as TanStack Table.\n\nIt's growth began around 2018, around the time when headless UI components started to gain traction.\n\nReact Table was one of the first popular headless UI components to be released - in the same category it's worth mentioning [Downshift](https://www.downshift-js.com/) (initially launched and popularized by [Kent C. Dodds](https://kentcdodds.com/)), which helped push headless UI components to the community.\n\nReact Table is a great solution for people who want to build their own UI on top of it.\n\nSome of the benefits of headless UI approach you get from React Table are:\n\n- full control over markup and styles\n- supports all styling patterns (CSS, CSS-in-JS, UI libraries, etc)\n- smaller bundle-sizes.\n\nThis flexibility and total control come with a cost of needing more setup, more code and more maintainance over time. Also complex features that might already be implemented in a full-featured DataGrid will need to be implemented again from scratch.\n\nHowever, we do think it's a great üíØ fit for some use-cases - we've used it ourselves successfully in some projects üôè. But it's not for everyone, as in our experience, most teams today want to ship faster üèé and not spend time and mental energy on building their own UI.\n\n<CSEmbed src=\"https://codesandbox.io/embed/github/tanstack/table/tree/main/examples/react/column-groups?fontsize=14&hidenavigation=1&module=%2Fsrc%2Fmain.tsx&theme=dark\" />\n\nNotice in the code above how you're responsible for creating the markup for the table, the headers, column groups,the cells, etc. You have TOTAL control over every aspect of the component, but this means you have to own it!\n\nAt the other end of the spectrum is AG Grid a full-featured DataGrid that offers all this out of the box.\n\nWith Infinite Table, we're trying to strike a balance between these 2 very different approaches - by offering a declarative API that is easy to use and get started with, while still giving you the flexibility to customize the UI and the behavior of the component, via both controlled and uncontrolled props.\n\nLet's take a look at an example of a similar UI, this time built with Infinite Table.\n\n<CSEmbed id=\"infinite-table-with-column-groups-2nn8zc\" />\n\n## Infinite Table\n\nAll this time we kept an eye on other components out there to get inspired. We got fresh ideas from various teams and projects - either enterprise or open source - either full-fledged or headless components like [react-table](https://tanstack.com/table/v8/).\n\nWe've learned a lot from all these projects we've worked with and we've put all the best ideas in Infinite Table.\n\nInfinite is the fruit of years of iteration, experimentation, failures and sweat on a product that we've poured our hearts in over the course of so many years. We've agonized over all our APIs and design decisions in order to make Infinite Table the best React DataGrid component out there.\n\nWe're aware we're not there yet, but we're here to stay üëã and keep getting better. We want to work closely with the community at large and get fresh ideas from other projects and teams. We can all be winners when we work together and respect each-other ‚ù§Ô∏è\n\nIt's amazing what happens when you focus on a problem for such a long time (yeah, we know üò±). We wanted to give up several times but kept pushing for over a decade. The result is a component that we're proud of and is already starting to be used by enterprise clients across many industries (more on that in a later blogpost).\n\nHere are some of the key areas where we believe Infinite Table shines:\n\n### Ready to Use\n\nInfinite Table is ready to use out of the box - namely it's not headless. We target companies and individuals who want to ship ‚Äî faster üèé! We're aware you don't want to re-invent the wheel nor do you want to invest 6 months of your team to build a poor implementation of a DataGrid component that will be hard to maintain and will be a source of bugs and frustration. **You want to ship ‚Äî and soon!**. If this is you and you are already using React then Infinite Table is written for you!\n\n### Feels like React - Declarative API\n\nWe want Infinite Table to feel at home in any React app. Everything about the DataGrid should be declarative - when you want to update the table, change a prop and the table will respond. No imperative API calls - we want you to be able to use Infinite Table in a way that feels natural to you and your team, so you can stay productive and use React everywhere in your frontend.\n\nLet's take for example how you would switch a column from a column group to another:\n\n```tsx {35} title=\"Fully declarative way to update columns\"\nfunction getColumns() {\n  return {\n    firstName: {\n      field: 'firstName',\n      width: 200,\n      columnGroup: 'personalInfo',\n    },\n    address: {\n      field: 'address',\n      width: 200,\n      columnGroup: 'personalInfo',\n    },\n    age: {\n      field: 'age',\n      columnGroup: 'about'\n    }\n  } as InfiniteTablePropColumns<DataType>\n}\n\nconst columnGroups = {\n  personalInfo: { header: \"Personal info\" },\n  about: { header: \"About\" }\n};\n\nfunction App() {\n  const [columns, setColumns] = useState<InfiniteTablePropColumns<DataType>>(getColumns)\n  const [colGroupForAddress, setColGroupForAddress] = useState('personalInfo')\n\n  const toggle = () => {\n    const cols = getColumns()\n\n    const newColGroup = colGroupForAddress === 'personalInfo' ? 'about' : 'personalInfo'\n    cols.address.columnGroup = newColGroup\n\n    setColumns(cols)\n    setColGroupForAddress(newColGroup)\n  }}\n  const btn = <button onClick={toggle}> Toggle group for address </button>\n\n  return <>\n    {btn}\n    <DataSource<DataType> data={...} primaryKey=\"id\">\n      <InfiniteTable columns={columns} columnGroups={columnGroups}/>\n    </DataSource>\n  </>\n}\n```\n\nNote in the code above that in order to update the column group for the `address` column, we simply change the `columnGroup` prop of the column and then we update the state of the component. The table will automatically re-render and update the column group for the `address` column. This is a fully declarative way to update the table. You don't need to call any imperative API to update it - change the props and the table will reflect the changes.\n\n### Fully Controlled\n\nReact introduced controlled components to the wider community and we've been using them for years. It's were the power of React lies - it gives the developer the flexibility to fully control (when needed) every input point of an app or component.\n\nAll the props Infinite Table is exposing have both controlled and uncontrolled versions. This allows you to start using the component very quickly and without much effort, but also gives you the flexibility to fully control the component when needed, as your app grows and you need more control over the DataGrid.\n\n### Composable API with small API surface\n\nWhen building a complex component, there are two major opposing forces:\n\n- adding functionality and\n- keeping the component (and the API) simple.\n\nWe're trying to reconcile both with Infinite Table so we've built everything with composition in mind.\n\nA practical example of composition is favoring function props instead of boolean flags or objects. Why implement a feature under a boolean flag or a static object when you can expose a functionality via a function prop? The function prop can be used to handle more cases than any boolean flag could ever handle!\n\nA good example of composability is the <PropLink name=\"groupColumn\" /> prop - it can be a column object or a function. It control the columns that are generated for grouping:\n\n- when it's a column object, it makes the table render a single column for grouping (as if <PropLink name=\"groupRenderStrategy\" /> was set to `\"single-column\"`)\n- when it's a function, it behaves like <PropLink name=\"groupRenderStrategy\" /> is set to `\"multi-column\"` and it's being called for each of the generated columns.\n\n```tsx title=\"Group column as an object\"\n<InfiniteTable\n  //...\n  groupColumn={{\n    header: 'Groups',\n  }}\n/>\n```\n\nvs\n\n```tsx title=\"Group column as a function\"\n<InfiniteTable\n  //...\n  groupColumn={() => {\n    // this allows you to affect all generated group columns in a single place\n    // especially useful when the generated columns are dynamic or generated via a pivot\n    return {...}\n  }}\n/>\n```\n\nWe've learned from our experience with other DataGrid components that the more features you add, the more complex your API becomes. So we tried to keep the API surface as small as possible, while still offering a rich set of declarative props as building blocks that can be composed to accomplish more complex functionalities.\n\n## Conclusion\n\nWe're very excited to share our Infinite Table journey with you ‚ù§Ô∏è ü§©\n\nAfter years in the DataGrid space and working and agonizing on this component, we're happy to finally ship it üõ≥ üöÄ.\n\nWe're looking forward to receiving [your feedback](https://github.com/infinite-table/infinite-react/issues) and suggestions.\n\nWe're here to stay and we're committed to improving Infinite Table and to make it your go-to React DataGrid component to help you ship ‚Äî faster! All the while staying true to the community!\n"
    },
    "/blog/2024/02/02/how-to-configure-default-sorting": {
      "filePath": "/blog/2024/02/02/how-to-configure-default-sorting",
      "routePath": "/blog/2024/02/02/how-to-configure-default-sorting",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/02/02/how-to-configure-default-sorting.page.md",
      "fileName": "how-to-configure-default-sorting.page.md",
      "folderPath": "/blog/2024/02/02/",
      "frontmatter": {
        "title": "How to customise the DataGrid default sorting",
        "author": "admin",
        "date": "2024-02-02T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "In this article, we'll show you how easy it is to configure the default sorting for the React DataGrid.",
      "readingTime": "3 min read",
      "content": "\nIn this article, we'll show you how easy it is to configure the default sorting for the React DataGrid.\n\n## Using the `defaultSort` prop on the DataSource\n\nSorting is configured on the DataGrid `<DataSource />` component. For this, you use the <PropLink name=\"defaultSortInfo\" /> prop, as either an object, for sorting by a single column, or an array of objects, for sorting by multiple columns.\n\n```tsx title=\"Specifying a default sort order\"\n// sort by country DESC and salary ASC\nconst defaultSortInfo={[\n  { field: \"country\", dir: -1 },\n  { field: \"salary\", dir: 1 },\n]}\n\n<DataSource defaultSortInfo={defaultSortInfo} />\n```\n\nThat's it! Now, when the DataGrid is first rendered, it will be sorted by the `country` column in descending order, and then by the `salary` column in ascending order.\n\n<Note>\n\nFor sorting to work properly for numeric columns, don't forget to specify `type: \"number\"` in the <PropLink name=\"columns.type\" code={false}>column configuration</PropLink>.\n\n</Note>\n\n<CSEmbed id=\"default-sort-order-react-datagrid-54dzny\" />\n\n<Note>\n\nWhen the <PropLink name=\"defaultSortInfo\" /> is an array, the DataGrid will know you want to allow sorting by multiple columns.\n\nSee our page on [multiple sorting](/docs/learn/sorting/multiple-sorting) for more details.\n\n</Note>\n\n## Local vs remote sorting\n\nThe above example uses local sorting. If you don't explicitly specify a that changes in the <PropLink name=\"sortInfo\" /> should trigger a reload (via the <PropLink name=\"shouldReloadData.sortInfo\" /> prop), the sorting will be done locally, in the browser.\n\nHowever, you can also have remote sorting - for this scenario, make sure you use <PropLink name=\"shouldReloadData.sortInfo\">shouldReloadData.sortInfo=true</PropLink>.\n\n<Note>\n\nIn this case, it's your responsability to send the `sortInfo` to your backend using the <DPropLink name=\"data\" /> prop of the DataSource - your `data` function will be called by the DataGrid whenever sorting changes. The arguments the function is called with will include the sort information (along with other details like filtering, grouping, aggregations, etc).\n\n```tsx\nconst dataSource: DataSourceData<Developer> = ({ sortInfo }) => {\n  if (sortInfo && !Array.isArray(sortInfo)) {\n    sortInfo = [sortInfo];\n  }\n  const args = [\n    sortInfo\n      ? 'sortInfo=' +\n        JSON.stringify(\n          sortInfo.map((s) => ({\n            field: s.field,\n            dir: s.dir,\n          })),\n        )\n      : null,\n  ]\n    .filter(Boolean)\n    .join('&');\n\n  return fetch('https://your-backend.com/fetch-data?' + args)\n    .then((r) => r.json())\n    .then((data: Developer[]) => data);\n};\n```\n\n</Note>\n\n<CSEmbed id=\"vigilant-lena-shs2td\" title=\"Remote sorting example\"/>\n\n## Responding to sorting changes\n\nWhen the user changes the sorting in the React DataGrid UI, the DataSource <DPropLink name=\"data\" /> function is called for you, with the new sort information.\n\nHowever, you might want to respond in other ways - for this, you can use <DPropLink name=\"onSortInfoChange \"/> callback prop.\n\n<Note>\n\nIf you use the controlled <DPropLink name=\"sortInfo\" /> instead of the uncontrolled <DPropLink name=\"defaultSortInfo\" />, you will need to configure the <DPropLink name=\"onSortInfoChange\" /> callback to respond to sorting changes and update the UI.\n\n</Note>\n\n## Using the column sort info for rendering\n\nAt runtime, you have access to the column sort information, both in the column header - see <PropLink name=\"columns.renderHeader\" /> and in the column cells - see <PropLink name=\"columns.renderValue\" />.\n\n<CSEmbed id=\"heuristic-butterfly-v5k6v7\" title=\"Customising the column header depending on the sort info\"/>\n\nFor example, you can customise the icon that is displayed in the column header to indicate the sort direction.\n\nVia the <PropLink name=\"columns.renderHeader\" /> you have full access to how the column header is rendered and can use the sorting/filtering/grouping/aggregation/pivoting information of that column to customise the rendering.\n"
    },
    "/blog/2024/02/26/master-detail-now-available-in-react-datagrid": {
      "filePath": "/blog/2024/02/26/master-detail-now-available-in-react-datagrid",
      "routePath": "/blog/2024/02/26/master-detail-now-available-in-react-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/02/26/master-detail-now-available-in-react-datagrid.page.md",
      "fileName": "master-detail-now-available-in-react-datagrid.page.md",
      "folderPath": "/blog/2024/02/26/",
      "frontmatter": {
        "title": "Master detail is now available in the Infinite React DataGrid",
        "author": "admin",
        "date": "2024-02-26T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "Today is a big day for the Infinite React DataGrid - we're excited to announce that the master detail feature is now available!",
      "readingTime": "4 min read",
      "content": "\nToday is a big day for the Infinite React DataGrid - we're excited to announce that the master detail feature is now available!\n\nWith this addition, our DataGrid is now enterprise-ready! We know master-detail scenarios are needed in many business applications, and we're happy to provide this feature to our users starting today!\n\n<Note title=\"Master-detail highlights üéâ\">\n\n1Ô∏è‚É£ [support for multiple levels of master-detail & rendering custom content](#what-can-you-do-with-master-detail)\n2Ô∏è‚É£ [configurable detail height](#configurable-detail-height)\n3Ô∏è‚É£ [control over expand/collapse state](#configurable-expandcollapse-state)\n4Ô∏è‚É£ [caching mechanism for detail DataGrids](#master-detail-caching)\n\n</Note>\n\n## What can you do with master-detail?\n\nMaster-detail allows you to have rows in the DataGrid that expand to show more details. This can be used to show more information about the row, or even to show another DataGrid with related data.\n\nYou can render basically anything in the detail row - it doesn't need to be another DataGrid. However, if you do want to show another DataGrid, you can, and you can do that at any level of depth.\n\nIn the detail `<DataSource />` component, you have access to the master row, so it will be very easy to load related data based on the master row the user expands.\n\n<CSEmbed id=\"tender-cdn-9cpznx\" code={false} size=\"md\" title=\"Basic master detail DataGrid example\"/>\n\n## Configurable detail height\n\nOur master-detail implementation is very configurable - you can control the height of the row details, the expand/collapse state, and much more.\n\nThe height of the row details is fully adjustable - see the <PropLink name=\"rowDetailHeight\" /> prop to learn about all the options you have.\n\n<CSEmbed id=\"beautiful-sammet-3gkwn9\" code={false} size=\"md\" title=\"Master detail with custom row detail height and custom content\" />\n\nAs seen in the snippet above, it's also really easy to control the expand/collapse state of the row details. You can choose to have some rows expanded by default so details of those rows will be visible from the start.\n\n## Configurable expand/collapse state\n\nUsing the <PropLink name=\"rowDetailState\" />, you can control (in a declarative way) which rows are expanded and which are collapsed. In addition, if you prefer the imperative approach, we also have an [API to work with row details](/docs/reference/row-detail-api).\n\nIf you have some rows with details and some without, that's also covered. Use the <PropLink name=\"isRowDetailEnabled\" /> to control which rows will have details and which will not.\n\n<Note>\n\nAnother important configuration is choosing the column that has the row detail expand/collapse icon. Use the <PropLink name=\"columns.renderRowDetailIcon\" /> prop on the column that needs to display the expand/collapse icon. If this prop is a function, it can be used to customize the icon rendered for expanding/collapsing the row detail.\n\n</Note>\n\n## Master detail caching\n\nBy far the most common scenario will be to render another DataGrid in the detail row.\n\nFor such cases we offer a caching mechanism that will keep the state of the detail DataGrid when the user collapses and then expands the row again.\n\n<Note>\n\nTo enable caching, use the <PropLink name=\"rowDetailCache\" /> prop.\n\nIt can be one of the following:\n\n- `false` - caching is disabled - this is the default\n- `true` - enables caching for all detail DataGrids\n- `number` - the maximum number of detail DataGrids to keep in the cache. When the limit is reached, the oldest detail DataGrid will be removed from the cache.\n\n</Note>\n\n<CSEmbed id=\"thirsty-browser-xxf6wf\" code={false} size=\"md\" title=\"Master detail DataGrid with caching for 5 detail DataGrids\">\n\n<Description>\n\nThis example will cache the last 5 detail DataGrids - meaning they won't reload when you expand them again.\nYou can try collapsing a row and then expanding it again to see the caching in action - it won't reload the data.\nBut when you open up a row that hasn't been opened before, it will load the data from the remote location.\n\n</Description>\n\n</CSEmbed>\n\nRead our docs on [caching detail DataGrids](/docs/learn/master-detail/caching-detail-datagrid) to learn more how you can use this feature to improve the user experience.\n"
    },
    "/blog/2024/01/23/how-to-customise-datagrid-loading-state": {
      "filePath": "/blog/2024/01/23/how-to-customise-datagrid-loading-state",
      "routePath": "/blog/2024/01/23/how-to-customise-datagrid-loading-state",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/01/23/how-to-customise-datagrid-loading-state.page.md",
      "fileName": "how-to-customise-datagrid-loading-state.page.md",
      "folderPath": "/blog/2024/01/23/",
      "frontmatter": {
        "title": "How to customise the DataGrid loading state",
        "author": "admin",
        "date": "2024-01-23T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "We're starting a series of short `\"How to\"` articles that are very focused and show how to achieve a specific thing with the Infinite Table DataGrid.",
      "readingTime": "2 min read",
      "content": "\nWe're starting a series of short `\"How to\"` articles that are very focused and show how to achieve a specific thing with the Infinite Table DataGrid.\n\nIn this article, we'll document how to customise the DataGrid loading state.\n\n## Customising the loading text\n\nFirst off, you can customise the text that is displayed when the DataGrid is loading data. By default, the DataGrid displays a `\"Loading\"` text, but you can customise it to anything you want (even JSX, not only string values).\n\n```tsx title=\"Customising the loading text\" {9}\nconst developers: Developer = [\n  { id: '1', firstName: 'Bob' },\n  { id: '2', firstName: 'Bill' },\n]\n\n// make sure to add \"loading\" to the DataSource so you see the loading state\n<DataSource<Developer> loading data={developers} primaryKey=\"id\">\n  <InfiniteTable<Developer>\n    loadingText={\n      <span>Loading your data ...</span>\n    }\n    columns={{\n      firstName: {\n        field: 'firstName',\n      },\n      id: {\n        field: 'id',\n      }\n    }}\n    {...props}\n  />\n</DataSource>\n```\n\n<Note>\nFor the value of <PropLink name=\"loadingText\" /> you can use JSX, not only strings.\n</Note>\n\n<CSEmbed id=\"infinite-table-datagrid-custom-loading-text-yzqlsj\" />\n\n## Customising the loading component - the `LoadMask`\n\nIn addition to the loading text, you can also customise the `LoadMask` component. This is the component that is displayed when the DataGrid is loading data. By default, it's a `<div />` with `width: 100%; height: 100%; zIndex: 1; display: flex` that contains the loading text.\n\nYou do this by overriding the <PropLink name=\"components.LoadMask\" /> prop in your Infinite Table configuration.\n\n```tsx title=\"Customising the LoadMask component\" {7,15}\n// make sure to add \"loading\" to the DataSource so you see the loading state\nexport default function App() {\n  return (\n    <DataSource<Developer> loading data={developers} primaryKey=\"id\">\n      <InfiniteTable<Developer>\n        components={{\n          LoadMask,\n        }}\n        columns={columns}\n      />\n    </DataSource>\n  );\n}\n\nfunction LoadMask() {\n  return (\n    <div\n      style={{\n        width: '100%',\n        height: '100%',\n        zIndex: 100,\n        background: 'tomato',\n        opacity: 0.3,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <div\n        style={{\n          padding: 20,\n          background: 'white',\n          color: 'black',\n          borderRadius: 5,\n        }}\n      >\n        Loading App ...\n      </div>\n    </div>\n  );\n}\n```\n\n<CSEmbed id=\"infinite-table-datagrid-custom-loading-text-forked-vpqps3\" />\n"
    },
    "/blog/2024/03/06/setting-up-master-detail-datagrid": {
      "filePath": "/blog/2024/03/06/setting-up-master-detail-datagrid",
      "routePath": "/blog/2024/03/06/setting-up-master-detail-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/03/06/setting-up-master-detail-datagrid.page.md",
      "fileName": "setting-up-master-detail-datagrid.page.md",
      "folderPath": "/blog/2024/03/06/",
      "frontmatter": {
        "title": "Setting up a master-detail DataGrid with Infinite Table for React",
        "author": "admin",
        "hide_in_homepage": true,
        "date": "2024-03-06T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "We recently [announced the release of master-detail in the Infinite React DataGrid](/blog/2024/02/26/master-detail-now-available-in-react-datagrid), so we also made a video tutorial to follow along, if video is your preferred learning method.",
      "readingTime": "1 min read",
      "content": "\nWe recently [announced the release of master-detail in the Infinite React DataGrid](/blog/2024/02/26/master-detail-now-available-in-react-datagrid), so we also made a video tutorial to follow along, if video is your preferred learning method.\n\nThis shows the very basics of configuring the Infinite React DataGrid with master-detail, and it's a great starting point for more advanced configurations.\n\n<YTEmbed code=\"5-T2tSEM96I\" />\n\nYou can find the full source code for the tutorial in the code sandbox below.\n\nThis example is two levels deep, but the Infinite React DataGrid supports any number of levels of master-detail.\n\n<CSEmbed id=\"elegant-feynman-y3hfcx\"/>\n"
    },
    "/blog/2024/03/08/how-to-select-cells-and-use-cell-selection": {
      "filePath": "/blog/2024/03/08/how-to-select-cells-and-use-cell-selection",
      "routePath": "/blog/2024/03/08/how-to-select-cells-and-use-cell-selection",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/03/08/how-to-select-cells-and-use-cell-selection.page.md",
      "fileName": "how-to-select-cells-and-use-cell-selection.page.md",
      "folderPath": "/blog/2024/03/08/",
      "frontmatter": {
        "title": "How to use multiple cell selection in the DataGrid",
        "author": "admin",
        "date": "2024-03-08T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "The article will cover some popular cell-selection scenarios in Infinite React DataGrid.",
      "readingTime": "3 min read",
      "content": "\nThe article will cover some popular cell-selection scenarios in Infinite React DataGrid.\n\n## Multiple cell selection\n\nBy far, the most common use-case for cell selection is multiple cell selection.\nFor this, you need to configure the <DPropLink name=\"selectionMode\" /> prop on the `<DataSource />` component to use `\"multi-cell\"`.\n\n<Note>\n\nIn addition, if you want to specify a default value for cell selection, you can use the <DPropLink name=\"defaultCellSelection\" /> prop - or the controlled alternative <DPropLink name=\"cellSelection\" />, in which case also make sure you update the value when <DPropLink name=\"onCellSelectionChange\" /> is called.\n\n</Note>\n\n```tsx\n<DataSource selectionMode=\"multi-cell\" />\n```\n\n<CSEmbed code={20} id=\"little-wood-55dysw\" />\n\nWhen multiple cell selection is configured in the React DataGrid, the user can select cells by `CMD`/`CTRL` clicking to add a single cell to the selection or by `SHIFT` clicking to select a range of cells.\n\n## Showing a chart based on selected cells\n\nLet's implement a common use-case for multiple cell selection - showing charts based on the selected cells, for example, a bar chart, with names on the x axis and ages on the y axis.\n\n<CSEmbed code={20} id=\"funny-silence-2v9r2t\" />\n\nIn this example, to retrieve the values from the selected cells, we used the <CellApiLink name=\"mapCellSelectionPositions\" /> from the [cell selection API](/docs/reference/cell-selection-api).\n\n## Cell selection format\n\nThe <DPropLink name=\"cellSelection\" /> prop is an object with the following shape:\n\n- `defaultSelection` - `boolean` - whether or not cells are selected by default.\n- either:\n  - `selectedCells`: `[rowId, colId][]` - an array of cells that should be selected (this is combined with `defaultSelection: false`)\n- or\n  - `deselectedCells`: `[rowId, colId][]` - an array of cells that should be deselected (this is combined with `defaultSelection: true`)\n\n<Note>\n\nWhen `defaultSelection` is `true`, you will only need to specify the `deselectedCells` prop.\n\nAnd when `defaultSelection` is `false`, you will only need to specify the `selectedCells` prop.\n\n</Note>\n\nIn this way, you can either specify which cells should be selected or which cells should be deselected - and have a default that matches the most common case.\n\n<Note>\n\nThe `selectedCells`/`deselectedCells` are arrays of `[rowId, colId]` tuples. The `rowId` is the `id` of the row (<DPropLink name=\"primaryKey\" code={20}>the primary key</DPropLink>), and the `colId` is the `id` of the column (the identifier of the column in the <PropLink name=\"columns\" /> prop).\n\n</Note>\n\n## Using include-lists and exclude-lists for specifying cell selection\n\nAs already demonstrated in the previous snippet, you can pass a <DPropLink name=\"defaultCellSelection\" code={20}>default value for cell selection</DPropLink>.\n\nIn addition to listing or excluding specific cells from selection, you can use wildcards:\n\n```tsx title=\"Include-list: selecting all cells in a column\"\nconst defaultCellSelection = {\n  defaultSelection: false, // all cells are deselected by default\n  selectedCells: [\n    // all cells in the stack column\n    ['*', 'stack'],\n    // also this specific cell\n    ['row2', 'firstName'],\n  ],\n};\n```\n\n```tsx title=\"Include-list: selecting all cells in a row\"\nconst defaultCellSelection = {\n  defaultSelection: false, // all cells are deselected by default\n  selectedCells: [\n    // all cells in the row\n    ['row1', '*'],\n    // also this specific cell\n    ['row2', 'firstName'],\n  ],\n};\n```\n\n```tsx title=\"Exclude-list: selecting everything except a column\"\nconst defaultCellSelection = {\n  defaultSelection: true, // all cells are selected by default\n  deselectedCells: [['*', 'stack']],\n};\n```\n\n<CSEmbed code={20} id=\"throbbing-platform-s9jtd4\" title=\"Using wildcard selection to select whole cell or row\"/>\n\n## Single cell selection\n\nSingle cell selection is not common - what you probably want to use in this case is the <PropLink name=\"activeCellIndex\" /> prop to emulate single cell selection - but that's basically cell navigation.\n"
    },
    "/blog/2024/04/18/the-best-testing-setup-for-frontends-playwright-nextjs": {
      "filePath": "/blog/2024/04/18/the-best-testing-setup-for-frontends-playwright-nextjs",
      "routePath": "/blog/2024/04/18/the-best-testing-setup-for-frontends-playwright-nextjs",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/04/18/the-best-testing-setup-for-frontends-playwright-nextjs.page.md",
      "fileName": "the-best-testing-setup-for-frontends-playwright-nextjs.page.md",
      "folderPath": "/blog/2024/04/18/",
      "frontmatter": {
        "title": "The best testing setup for frontends, with Playwright and NextJS",
        "author": "admin",
        "date": "2024-04-18T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "We want to share with you the best testing setup we've experienced - and this includes using [Playwright](https://playwright.dev/) and [NextJS](https://nextjs.org/). It's a setup we've come up with for Infinite React DataGrid, which is a complex component, with lots of things to test, but this configuration has helped us ship with more confidence and speed.",
      "readingTime": "13 min read",
      "content": "\nWe want to share with you the best testing setup we've experienced - and this includes using [Playwright](https://playwright.dev/) and [NextJS](https://nextjs.org/). It's a setup we've come up with for Infinite React DataGrid, which is a complex component, with lots of things to test, but this configuration has helped us ship with more confidence and speed.\n\n## What you should expect from a testing setup\n\n### Fast feedback \n\n‚ö°Ô∏è Quick ‚ö°Ô∏è feedback is a no-brainer, since without a fast turnaround, devs will not have the patience to run the tests and will move on to the next \"burning\" issue or to the next cup of coffee.\n\nAlso, you can't run all the test suite at once, so you need to be able to run only the tests that are relevant to the changes you've made. This has long been available in unit-testing frameworks, but it's not so common in end-to-end testing, when loading a webpage and rendering an actual component is involved.\n\nIn this article we want to show you how we achieved fast feedback that allows rapid developer iterations.\n\n### Stability and predictability\n\nYou don't need flaky tests that fail randomly - it's the last thing you want when doing a release, or even during development.\nWaiting for an element to appear on page or an animation to finish or an interaction to complete is a common source of flakiness in end-to-end tests, but Playwright gives you the tools to address these issues - thank you [Playwright locators](https://playwright.dev/docs/locators) üôè and other playwright testing framework features.\n\n### Ease of maintenance and debugging\n\nAnother crucial point when you setup a testing framework and start writing tests is how easy is to write a new test, to inspect what is being tested and to reproduce failing tests. All these should be as easy as opening loading a URL in a browser - this is exactly what this setup gives you, with NextJS and Playwright playing very well together.\nWhen one of your tests fails, Playwright outputs a command you can run to reproduce the exact failure and actually see the UI at the moment of the failure, with the ability to navigate through the test timeline and see what happened before the failure.\n\n## Setting up NextJS and Playwright\n\n### Step 1 - creating the NextJS app\n```sh\n$ npx create-next-app@latest\n```\n\nYou're being asked a few questions. For `Would you like to use src/ directory?` we chose `Yes`. Also, we're using TypeScript.\n\nWhen you run this command, make sure for this question `Would you like to use App Router?` you reply `No`, as you want to use file-system routing to make it very easy and intuitive to add new pages and tests.\n\n<Note>\nCheck out our repo for this stage of the setup - [Step 1 - setting up NextJS](https://github.com/infinite-table/testing-setup-nextjs-playwright/tree/01-setup-nextjs).\n</Note>\n\n<Note>\n\nBefore you go to the next step, you can configure your `next.config.mjs` to use the `.page` extension for your pages.\n\n```js\nconst nextConfig = {\n  reactStrictMode: true,\n  pageExtensions: [\"page.tsx\", \"page.ts\", \"page.js\"],\n};\nexport default nextConfig\n```\n\nThis is useful so NextJS will only compile those files as pages that your tests will be targeting, and not all the files in the `pages` folder, which will also contain your tests.\n\nSo you know all your `.page` files are pages that your tests will be run against and all your `.spec` files are tests (see next step).\n\n</Note>\n\n### Step 2 - setting up Playwright\n\n```sh\n$ npm init playwright@latest\n```\n\nAgain a few questions about your setup.\n\n`Where to put your end-to-end tests?` - choose `src/pages` - which makes your NextJS pages folder the place where you put your end-to-end tests.\n\nThis script installs `@playwright/test` and creates a `playwright.config.ts` file with the default configuration. Most importantly, the `testDir` is configured to `./src/pages`.\n\nBy default, all `.spec` files in the `testDir` (which is set to `src/pages`) will be run as tests.\n\n<Note>\nCheck out our repo for this stage of the setup - [Step 2 - setting up Playwright](https://github.com/infinite-table/testing-setup-nextjs-playwright/tree/02-setup-playwright).\n</Note>\n\nThere are some additional configurations you might want to do in this step.\nYou probably want to change the default `reporter` from `'html'` to `'list'` in your `playwright.config.ts` - the `'html'` reporter will open a browser window with the test results, which you might not prefer. You'd rather see the results in the terminal.\n\n ```ts {3} title=\"Configure the reporter in playwright.config.ts\"\nexport default defineConfig({\n  testDir: \"./src/pages\",\n  reporter: \"list\", // the 'html' reporter will open a browser window with the test results\n  // ...\n})\n ```\n\n<Note>\n\nFor now, you might want to only run your tests in one browser, so comment out any additional entries in the `projects` array in your `playwright.config.ts` file - that controls the devices that will be used in your tests.\n\n</Note>\n\nThe last piece of the puzzle before running your first test with Playwright is defining the `test` script in your `package.json`.\n\n```json {4} title=\"package.json\"\n{\n  \"name\": \"testing-setup-nextjs-playwright\",\n  \"scripts\": {\n    \"test\": \"npx playwright test\",\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n  },\n}\n```\n\nExecuting the `npm run test` command will run the tests in the `src/pages` folder - for now, you should have a single file, `example.spec.ts`, which was generated by the `npm init playwright` command.\n\n![Playwright test output](/blog-images/step-2-initial-results.png)\n\nYour initial test file was something very basic. This file is importing the `test` (and `expect`) function from `@playwright/test` - and this is what you're using to define tests (and write assertions).\n\n```ts {1} title=\"example.spec.ts\"\nimport { test, expect } from \"@playwright/test\";\n\ntest(\"has title\", async ({ page }) => {\n  await page.goto(\"https://playwright.dev/\");\n\n  // Expect a title \"to contain\" a substring.\n  await expect(page).toHaveTitle(/Playwright/);\n});\n```\n\n### Step 3 - configuring the naming convention in Playwright to open the right pages\n\nThis step is probably the most important one in your configuration. Normally your tests will open webpages before you start testing - but this is not something you want to do explicitly in your project. Rather, you want your tests to automatically navigate to the corresponding page for the test. This is what this step is achieving - and we're using [Playwright fixtures](https://playwright.dev/docs/test-fixtures) to do this.\n\nThink of a fixture as some code that's configuring the testing environment for each of your tests.\nA fixture will extend the `test` function from `@playwright/test` with additional functionalities. Mainly, we want before every test to open the correct page, without writing this explicitly in every test. Based on the location of the test file in the file system, we want to navigate to a webpage for it and we assume it will have the same path as the test file. This is possible because NextJS is configured to use file-system routing.\n\n```ts {1,3-5} title=\"Defining the fixture file - test-fixtures.ts\"\nimport {\n  test as base,\n  expect,\n  PlaywrightTestArgs,\n  PlaywrightTestOptions,\n  Page,\n} from \"@playwright/test\";\n\nexport * from \"@playwright/test\";\n\nexport const test = base.extend<\n  PlaywrightTestArgs &\n    PlaywrightTestOptions\n>({\n  //@ts-ignore\n  page: async ({ baseURL, page }, use, testInfo) => {\n    const testFilePath = testInfo.titlePath[0];\n    const fileName = testFilePath.replace(\".spec.ts\", \"\");\n    const url = `${baseURL}${fileName}`;\n\n    // navigate to the corresponding page for this test\n    await page.goto(url);\n\n    await use(page);\n  },\n});\n```\n\nWe'll give this fixture file the name `test-fixtures.ts` and put it in the root of the project.\n\nNow instead of importing the `test` function from `@playwright/test` we want to import it from the `test-fixtures.ts` file - we'll do this in all our tests. To make this easier, let's also define a path alias in the `tsconfig.json` file.\n\n```json {4} title=\"tsconfig.json\"\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@playwright/test\": [\"test-fixtures.ts\"],\n    }\n  }\n}\n```\n\nWe're ready to write our first test page in NextJS and use the new fixture in the Playwright test.\n\n```tsx title=\"src/pages/example.page.tsx\"\nexport default function App() {\n  return <div>Hello world</div>;\n}\n```\n\n```ts {1} title=\"src/pages/example.spec.ts\"\nimport { test, expect } from \"@testing\"; // notice the import\n\ntest(\"Main example has corrent content\", async ({ page }) => {\n  // notice we don't need to navigate to the page, this is done by the fixture\n  await expect(await page.innerText(\"body\")).toContain(\"Hello world\");\n});\n```\n\nFor our tests against the NextJS app, we obviously need to start the app.\n\nLet's configure a custom port of `5432` in the package.json `dev` script.\n```json {3} title=\"package.json\"\n{\n  \"scripts\": {\n    \"dev\": \"next dev --port 5432\",\n    \"test\": \"npx playwright test\"\n  }\n  //...\n}\n```\nWe need to use the same port in the Playwright configuration file.\nAlso we'll use a smaller test `timeout` (the default is 30s).\n\n```ts {9,11} title=\"playwright.config.ts\"\nimport { defineConfig } from \"@playwright/test\";\n/**\n * See https://playwright.dev/docs/test-configuration.\n */\nexport default defineConfig({\n  testDir: \"./src/pages\",\n  reporter: \"list\",\n  use: {\n    baseURL: \"http://localhost:5432/\",\n  },\n  timeout: process.env.CI ? 10000 : 4000,\n  // ... more options\n});\n\n```\n\nWe're now ready to roll!\n\n`npm run dev` will run NextJS and `npm run test` will run the tests against your NextJS app.\n\n<Note>\n\nTo make the setup easier, avoid using `index.page.tsx` pages in NextJS - give your pages another name, to avoid issues with directory index pages in tests. This can easily be solved in the test fixture, but for the sake of clarity and brevity we're not doing it now.\n\n</Note>\n\n\n<Note>\n\nCheck out our repo for this stage of the setup - [Step 3 - configuring the Playwright fixture and naming convention](https://github.com/infinite-table/testing-setup-nextjs-playwright/tree/03-configure-naming-convention).\n\n</Note>\n\n### Step 4 - adding watch mode\n\nAs we mentioned initially, no testing setup is great unless it gives you very fast feedback. For this, we obviously need watch mode.\n\nWe want to be able to re-run tests when our test code has changed, but even better, when our NextJS page has changed - so the page the test is running against.\nNextJS has watch mode built-in in dev mode, so whenever a page is changed, it's recompiled and the browser is served the updated page. We'll use this in our advantage, so tests will always see the latest version of the page.\nThis means the last piece of the puzzle is to make Playwright re-run the tests when the page has changed or the test itself has changed.\n\nFor this, we'll use [`chokidar`](https://www.npmjs.com/package/chokidar)  - more specifically the [`chokidar-cli`](https://www.npmjs.com/package/chokidar-cli) package. `chokidar` is probably the most useful file watching library for the nodejs ecosystem and it will serve us well.\n\n```json {4} title=\"package.json\"\n{\n  \"scripts\": {\n    \"test\": \"npx playwright test\",\n    \"test:watch\": \"chokidar '**/*.spec.ts' '**/*.page.tsx' -c 'test_file_path=$(echo {path} | sed s/page.tsx/spec.ts/) && npm run test -- --retries=0 ${test_file_path}'\"\n  }\n}\n```\n\nThe `test:watch` script is watching for changes in `.spec.ts` files and `.page.tsx` files and whenever there's a change in one of those files, it's re-running the respective test. (When a change was found in a `.page.tsx` file, we're using `sed` to replace the `.page.tsx` extension with `.spec.ts`, because we want to pass the test file to the `npm run test` command so it knows what test to re-run.)\n\n<Note>\n\nThe above `test:watch` script was written for MacOS (and Unix-like systems). If you're using Windows, you might need to adjust the command to achieve the same result.\n\n</Note>\n\n<Note>\n\nDon't forget to run `npm run dev` before running `npm run test` or `npm run test:watch` - you need the NextJS app running to be able to run the tests. After all, that's what you're testing üòÖ.\n\n</Note>\n\n### Step 5 - running tests on production build\n\nIn the last step, we want to build a production build of the NextJS app and run the tests against it. \n\nSo first let's configure the `next.config.mjs` file to build a static site when `npm run build` is run.\n\n```js {3} title=\"next.config.mjs - configured to export a static site\"\nconst nextConfig = {\n  reactStrictMode: true,\n  output: \"export\",\n  pageExtensions: [\"page.tsx\", \"page.ts\", \"page.js\"],\n};\n\nexport default nextConfig;\n```\nNotice the `\"output\": \"export\"` property. Having configured this, the `npm run build` will create an `/out` folder with the compiled assets and pages of the app.\n\nNext we need an NPM script to serve the compiled app with a static server.\n\n```json {3,4} title=\"package.json - serve script\"\n{\n  \"scripts\": {\n    \"serve\": \"npx http-server --port 5432 out\",\n    \"//...\": \"// other scripts\"\n  },\n}\n```\n\nWe could either run this `serve` script ourselves to start the webserver before running our tests or even better, we can instruct Playwright to [use this webserver automatically](https://playwright.dev/docs/test-webserver#configuring-a-web-server). So let's do that in our `playwright.config.ts` file.\n\n```ts {3,5} title=\"playwright.config.ts - configured to use a custom server\"\nexport default defineConfig({\n  //... other options\n\n  // on CI, run the static server to serve the built app\n  webServer: process.env.CI\n    ? {\n        command: \"npm run serve\",\n        url: \"http://localhost:5432\",\n        reuseExistingServer: true,\n        timeout: 120 * 1000,\n      }\n    : undefined,\n})\n```\n\n<Note>\n\nIn order for Playwright to correctly detect the webserver is running ok, we need to make sure we have a valid index page at that address, so we need to add a `index.page.tsx` file in the `pages` folder.\n\n```tsx title=\"src/pages/index.page.tsx\"\nexport default function App() {\n  return <div>Index page</div>;\n}\n```\n\nThis is just useful in the CI environment so that Playwright can detect the server is running and the app is served correctly.\n\n</Note>\n\nNext, in order to run our tests as if we're in the CI environment, let's add a `test:ci` script, which is basically calling the `test` script but setting the `CI` environment variable to `true`.\n\n```json {3,4} title=\"package.json - test:ci script\"\n{\n  \"scripts\": {\n    \"test:ci\": \"CI=true npm run test\",\n    \"test\": \"npx playwright test\",\n    \"serve\": \"npx http-server --port 5432 out\",\n    \"//...\": \"// other scripts\"\n  },\n}\n```\n\n\nWe're now ready to run our tests against the production build of the NextJS app.\n\n```sh\nnpm run build && npm run test:ci\n```\n\n\nThis script first builds the NextJS static app and then runs the tests against it.\n\n## Configuring CI github actions \n\nWe're now ready to integrate our [testing workflow into CI via Github actions](https://playwright.dev/docs/ci-intro).\n\nCreate a YAML file `.github/workflows/test.yml` in the root of your project with the following content.\n\n```yaml {19,23} title=\".github/workflows/test.yml\"\nname: Playwright Tests\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: lts/*\n      - name: Install dependencies\n        run: npm ci\n      - name: Build app\n        run: npm run build\n      - name: Install Playwright Browsers\n        run: npx playwright install --with-deps\n      - name: Run Playwright tests\n        run: npm run test\n      - uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: playwright-report\n          path: playwright-report/\n          retention-days: 30\n```\n\nWith this, you're ready to go! Push your changes to the main branch and see your tests running and passing in the CI environment. Go green! üü¢\n\n## Demo repository\n\nYou can find the full setup in our [testing-setup-nextjs-playwright repo](https://github.com/infinite-table/testing-setup-nextjs-playwright/tree/main?tab=readme-ov-file). Check it out and give it a star if you find it useful.\n\n## Profit üöÄ\n\nWith this setup, you have a very convenient way to write your tests against real pages, loaded in a real browser, just like the end user experiences. And with the watch mode giving you instant feedback, you no longer have an excuse to not write tests.\n\nThis is the same setup we've been using for developing and testing the [Infinite Table React DataGrid](https://infinite-table.com) and it has been serving us really well.\n\nDataGrids are some of the most complex UI components one can build, so having a reliable tool that allowed us to iterate very quickly was crucial to us. This helped us add new features, while being confident that all of the existing core functionalities like row/column grouping, filtering, sorting, pagination, pivoting still work as expected.\n\nThe setup was a pivotal point in our development process and it's what gives us and our enterprise customers the peace of mind that the product is stable and reliable, both now and in the future.\n\n\n"
    },
    "/blog/2024/04/22/the-best-testing-strategies-for-frontends": {
      "filePath": "/blog/2024/04/22/the-best-testing-strategies-for-frontends",
      "routePath": "/blog/2024/04/22/the-best-testing-strategies-for-frontends",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/04/22/the-best-testing-strategies-for-frontends.page.md",
      "fileName": "the-best-testing-strategies-for-frontends.page.md",
      "folderPath": "/blog/2024/04/22/",
      "frontmatter": {
        "title": "The best testing strategies for frontends",
        "author": "admin",
        "date": "2024-04-22T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "In our previous article, we focused on documenting [the best testing setup for frontends](https://infinite-table/blog/2024/04/18/the-best-testing-setup-for-frontends-playwright-nextjs), which used Playwright and Next.js. You can check out the repository [here](https://github.com/infinite-table/testing-setup-nextjs-playwright) where you can find the full setup.",
      "readingTime": "5 min read",
      "content": "\nIn our previous article, we focused on documenting [the best testing setup for frontends](https://infinite-table/blog/2024/04/18/the-best-testing-setup-for-frontends-playwright-nextjs), which used Playwright and Next.js. You can check out the repository [here](https://github.com/infinite-table/testing-setup-nextjs-playwright) where you can find the full setup.\n\nWe consider the combination described above, Playwright + NextJS being the best combo around for testing frontends. Ok, you can switch out NextJS with other meta-framework that offers file-system routing, but the idea is the same: every test is made of 2 sibling files, with the same name but different extension.\n\nIn the test files, Playwright is configured to navigate automatically to the page being tested, so no need for adjustments if you move files around. This saves you a lot of time and hustle and makes your tests more robust and focused.\n\nBut in addition to end-to-end testing with Playwright and NextJS, there are other forms of testing out there which are available and can be used to complement your testing strategy. In this article, we'll focus on what we think are the best testing strategies for frontends. So here are a few options:\n\n - E2E testing\n - Component testing \n - Visual regression testing\n - Unit testing\n\nFor each of those options there are plenty of tools you can use, each with its own pros and cons.\n\n## E2E testing\n\nWith the advent of tools like [Puppeteer](https://pptr.dev/) and now [Playwright](https://playwright.dev/), end-to-end testing has become much easier and more reliable. For anyone who's used Selenium in the past, you know what I'm talking about. \nPuppeteer has opened the way in terms of E2E tooling, but Playwright has taken it to the next level and made it easier to await for certain selectors or conditions to be fulfilled (via [locators](https://playwright.dev/docs/locators)), thus making tests more reliable and less flaky.\nAlso, it's a game changer that it introduced a test-runner - this made the integration between the headless browser and the actual test code much smoother.\n\n### Reasons to use E2E\n\nEnd to end testing is actually a real browser, so the closest possible environment to what your app will be using.\n\nNo need to fake the page with JSDOM, no need to only do shallow rendering in React. Just use the platform!\n\n## Component testing\n\nProbably [Enzyme](https://enzymejs.github.io/enzyme/) was the first to popularize component testing in React by doing shallow rendering and expecting some things to be there in the React component tree. Then [React Testing library](https://testing-library.com/) came and took component testing to a whole new level.\n\nThe tools are great for what they're doing, but with the advent of better tooling, we should move on to better ways of testing. With the tools we have now in 2024, there's no more need to use JSDOM and simulate a browser enviroment. It used to be very cumbersome to start a headless browser back in the day, but now with Playwright/Puppeteer, it's a breeze.\n\n## Visual regression testing\n\nAlso in the days before Playwright was around, there was much hype about visual regression testing. It was very very tempting to use it - who wouldn't want to have a tool that automatically checks if the UI has (mistakenly) changed? It might fit a few use-cases, but in general, it's not worth the effort of maintaining all those tests for any little change in the UI. True, you can set thresholds for the differences, but it's still a lot of work to maintain it, especially in highly dynamic frontends and teams.\n\nWith better CSS approaches like [TailwindCSS](https://tailwindcss.com/) and [Vanilla Extract](https://vanilla-extract.style/) (which we're heavily using) it's much easier to maintain the UI and make sure it doesn't change unexpectedly. No more conflicting CSS classes, much less CSS specificity issues and much less CSS code in general.\n\nOne of the troubles in large and tangled CSS codebases is that it's write-only. Well, not write-only per se, but teams are generally afraid to remove a line of CSS cause it might break someone else's code or it might still be used.\n\nWith [Vanilla Extract](https://vanilla-extract.style/) you can be sure that if you remove a CSS class, it's not used anywhere else in the codebase. It's been a game changer in terms of CSS maintainability and productivity for us at [Infinite Table](https://infinite-table.com/).\n\nSo with all those tools to make styling easier, the need for visual regression testing has dropped significantly.\n\n\n## Unit testing\n\nUnit testing will be here to stay - at least if besides your UI, your app has some significant business logic. We're using it in combination with E2E testing to make sure complex use-cases work as expected.\n\nFor example, our [logic for row grouping](https://infinite-table.com/docs/learn/grouping-and-pivoting/grouping-rows) is fully tested with unit tests. We do have E2E tests for it, but with unit tests we can have full coverage of all the nitty-gritty details of the grouping logic. We do the same for pivoting and aggregating. Column sizing and column grouping are also covered with unit tests.\n\nWe think there's always going to be a place for unit testing to ensure robustness and reliability of the app under even the most complex use-cases and user inputs.\n\n## Conclusion\n\nIn our experience, the best testing strategy for modern frontends is a combination of E2E testing (using Playwright+NextJS), and unit testing. Visual regression testing is not worth the effort in our opinion, especially with the advent of better CSS tooling like TailwindCSS and [Vanilla Extract](https://vanilla-extract.style/).\n\nThough we used shallow component testing in the past, we're not going back to it - mocking the DOM and the browser is no longer worth it when you can use a real browser with Playwright.\n\nWe hope this article has been helpful in guiding you towards the best testing strategy for your frontend. If you have any questions or comments, feel free to reach out to us at [admin@infinite-table.com](mailto:admin@infinite-table.com). We're always happy to help! \n"
    },
    "/blog/2024/05/27/minimalist-theme-for-react-datagrid": {
      "filePath": "/blog/2024/05/27/minimalist-theme-for-react-datagrid",
      "routePath": "/blog/2024/05/27/minimalist-theme-for-react-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/05/27/minimalist-theme-for-react-datagrid.page.md",
      "fileName": "minimalist-theme-for-react-datagrid.page.md",
      "folderPath": "/blog/2024/05/27/",
      "frontmatter": {
        "title": "A minimalist theme for your favorite React DataGrid",
        "author": "admin",
        "date": "2024-05-27T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "We implemented a minimalist theme for the Infinite React DataGrid - it's designed to be simple and clean, with a focus on readability and performance.",
      "readingTime": "2 min read",
      "content": "\nWe implemented a minimalist theme for the Infinite React DataGrid - it's designed to be simple and clean, with a focus on readability and performance.\n\nBuilding a second theme forced us think about dark/light mode support and how to make the theme more customizable.\n\n<CSEmbed id=\"react-datagrid-infinite-table-theme-switching-666xq7\" code={false} />\n\n<Note>\n\nRead more about the [available themes in our React DataGrid](/docs/learn/theming#available-themes).\n\n</Note>\n\n\n## Available themes\n\n### Default theme\n\nThe `default` theme is applied when you don't specify any explicit theme by default.\n\n### Minimalist theme\n\nThe `minimalist` theme is inspired from minimalistic designs and is a good choice if you want to keep the UI simple and clean.\n\n## Applying the theme\n\nA theme is applied by using the `\"infinite-theme-name--THEME_NAME\"` CSS className in any parent element of the `<InfiniteTable />` component (or even on the component element).\n\nYou will want to apply the theme name and theme mode classNames to the same element, so you'll end up with a className like `\"infinite-theme-name--minimalist infinite-theme-mode--dark\"`.\n\n```tsx title=\"Applying the minimalist theme with dark mode explicitly\"\n<body className=\"infinite-theme-mode--dark infinite-theme-name--minimalist\">\n  <DataSource {...dataSouceProps}>\n    <InfiniteTable {...props} />\n  </DataSource>\n</body>\n```\n\n\n\n## Using theme mode\n\nThere are two theme modes available in Infinite: `light` and `dark`. Unless otherwise explicitly configured, the theme mode is applied based on the user OS settings for the [preferred color scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme).\n\nHowever, the theme mode can be enforced, by having a parent element with a CSS className of `\"infinite-theme-mode--light\"` or `\"infinite-theme-mode--dark\"`\n\n```tsx title=\"Applying light mode via container className\"\n<div className=\"infinite-theme-mode--light\">\n  <DataSource {...dataSouceProps}>\n    <InfiniteTable {...props} />\n  </DataSource>\n</div>\n```\n\n```tsx title=\"Explicitly applying dark theme via container className\"\n<body className=\"infinite-theme-mode--dark\">\n  <div>\n    <DataSource {...dataSouceProps}>\n      <InfiniteTable {...props} />\n    </DataSource>\n  </div>\n</body>\n```"
    },
    "/blog/2024/10/10/new-themes-available": {
      "filePath": "/blog/2024/10/10/new-themes-available",
      "routePath": "/blog/2024/10/10/new-themes-available",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/10/10/new-themes-available.page.md",
      "fileName": "new-themes-available.page.md",
      "folderPath": "/blog/2024/10/10/",
      "frontmatter": {
        "title": "New DataGrid themes available - ocean and balsam",
        "author": "admin",
        "date": "2024-10-10T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "With the release of `<InfiniteTable />` <b>v5.0.0</b> we've added two new themes: `ocean` and `balsam`.",
      "readingTime": "1 min read",
      "content": "\nWith the release of `<InfiniteTable />` <b>v5.0.0</b> we've added two new themes: `ocean` and `balsam`.\n\nNow you have a selection of themes to choose from: `default`, `minimalist`, `ocean` and `balsam`.\n\nTo apply a theme, you have to set the className `\"infinite-theme-name--THEME_NAME\"` to any parent element of the `<InfiniteTable />` component (or even on the component itself).\n\n<CSEmbed id=\"infinite-theme-demo-35f9l2?workspaceId=cf52b898-10a5-4d0b-833f-96a3a9220dc5\" code={false} size=\"lg\" />\n\n\n\n<HeroCards>\n<YouWillLearnCard title=\"Theming\" path=\"/docs/learn/theming\">\n\nLearn how to theme Infinite Table to match your brand\n\n\n</YouWillLearnCard>\n</HeroCards>"
    },
    "/blog/2024/10/15/how-do-i-flash-cells": {
      "filePath": "/blog/2024/10/15/how-do-i-flash-cells",
      "routePath": "/blog/2024/10/15/how-do-i-flash-cells",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/10/15/how-do-i-flash-cells.page.md",
      "fileName": "how-do-i-flash-cells.page.md",
      "folderPath": "/blog/2024/10/15/",
      "frontmatter": {
        "title": "Flashing column cells in Infinite Table",
        "author": "admin",
        "date": "2024-10-15T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "Flashing cells is an important feature that has been requested by some of our users - both [in public](https://github.com/infinite-table/infinite-react/issues/250) and private conversations.",
      "readingTime": "3 min read",
      "content": "\nFlashing cells is an important feature that has been requested by some of our users - both [in public](https://github.com/infinite-table/infinite-react/issues/250) and private conversations.\n\nIt's also a very useful addition for DataGrids users that work in the financial industry. Version `5.0.0` of `<InfiniteTable />` shipped flashing and in this blogpost we want to show how to use it.\n\n## Configuring a flashing column.\n\nIn order to configure a column to flash its cells when the data changes, you need to specify a custom `ColumnCell` component.\n\n```tsx {14}\n\nimport { FlashingColumnCell } from '@infinite-table/infinite-react';\n\nconst columns: InfiniteTablePropColumns<Developer> = {\n  id: {\n    field: 'id',\n  },\n  firstName: {\n    field: 'firstName',\n  },\n  salary: {\n    field: 'salary',\n    components: {\n      ColumnCell: FlashingColumnCell,\n    }\n  },\n};\n```\n\n`@infinite-table/infinite-react` exports a `FlashingColumnCell` React component that you can pass to the `components.ColumnCell` prop of any column you want to flash.\n\n\n<CSEmbed id=\"infinite-flashing-lnf83g\" code={false} />\n\n<Note>\n\nThe default flashing duration is `1000` milliseconds.\n\n</Note>\n\n## Customizing the flashing duration\n\nIf you want to customize the flashing duration, you need to pass a different `components.ColumnCell` to the column. You can very easily do this by calling `createFlashingColumnCellComponent` and passing the `flashDuration` option.\n\n```tsx\n\nimport { createFlashingColumnCellComponent } from '@infinite-table/infinite-react';\n\nconst FlashingColumnCell = createFlashingColumnCellComponent({\n  flashDuration: 500,\n  flashClassName: 'my-flash-class',\n});\n\nconst columns: InfiniteTablePropColumns<Developer> = {\n  salary: {\n    field: 'salary',\n    components: {\n      ColumnCell: FlashingColumnCell,\n    }\n  }\n}\n```\n\n<Note>\n\nWhen calling `createFlashingColumnCellComponent`, besides the `flashDuration` option, you can also pass a `flashClassName`, which is a CSS class name that will be applied to the flashing cell for the duration of the flash.\n\n</Note>\n\n## Customizing the flash colors\n\nIf you want to customize the flash colors, you have three CSS variables available: \n\n- `--infinite-flashing-background`: background color to be used when non-numeric cells flash.\n- `--infinite-flashing-up-background`: background color to use for flashing numeric cells, when the value goes up.\n- `--infinite-flashing-down-background`: background color to use for flashing numeric cells, when the value goes down.\n\nThe example below is configured to use the following colors:\n - flash up - yellow\n - flash down - magenta\n - flash non-numeric - blue\n\nAlso, the flashing duration is configured to take 2 seconds.\n\n<Note>\n\nBesides clicking the \"start updates\" button, you can also edit the salary value in any cell. When you confirm the edit, the salary value will flash.\n\n</Note>\n\n<CSEmbed title=\"Flashing takes 2s and has custom colors\" id=\"infinite-flashing-forked-fpjrsg?workspaceId=cf52b898-10a5-4d0b-833f-96a3a9220dc5\" code={false} />\n\n## Taking it further\n\nInfinite Table implements flashing by passing in a custom `ColumnCell` component. However, you're not limited to using our [default implementation](https://github.com/infinite-table/infinite-react/blob/master/source/src/components/InfiniteTable/components/InfiniteTableRow/FlashingColumnCell.tsx). You can very easily create your own component and apply your own custom logic.\n\nMaybe you want display both the new and the old values in the cell - this can be implemented quite easily. It's up to you to extend the cell rendering to suit your business requirements.\n\nThe current flashing implementation is flashing on any change in a cell, but you might be interested only in some of the changes. You can definitely use <PropLink name=\"onEditPersistSuccess\" /> to detect when a cell edit is persisted and then decide whether to flash the cell or not. The possibilities are very diverse.\n\nWe're keen to see what you build!\n\n\n\n"
    },
    "/blog/2024/10/16/shadcn-ui-theme-available": {
      "filePath": "/blog/2024/10/16/shadcn-ui-theme-available",
      "routePath": "/blog/2024/10/16/shadcn-ui-theme-available",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/10/16/shadcn-ui-theme-available.page.md",
      "fileName": "shadcn-ui-theme-available.page.md",
      "folderPath": "/blog/2024/10/16/",
      "frontmatter": {
        "title": "shadcn/ui theme available for the InfiniteTable React DataGrid",
        "author": "admin",
        "date": "2024-10-16T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "We've all come to know and love ‚ù§Ô∏è [shadcn/ui](https://ui.shadcn.com/). It comes with a consistent look and feel for all the components in the UI kit, and it's built on top of Tailwind, so people feel at home using it. As React developers, we're thankful for all the hard work happening in the React ecosystem, and we're happy to see more and more UI libraries focusing on providing great developer experience.",
      "readingTime": "2 min read",
      "content": "\nWe've all come to know and love ‚ù§Ô∏è [shadcn/ui](https://ui.shadcn.com/). It comes with a consistent look and feel for all the components in the UI kit, and it's built on top of Tailwind, so people feel at home using it. As React developers, we're thankful for all the hard work happening in the React ecosystem, and we're happy to see more and more UI libraries focusing on providing great developer experience.\n\nAfter recently building [a few other themes](/blog/2024/10/10/new-themes-available), we knew we had to build a shadcn/ui theme for `<InfiniteTable />`.\n\nSo we built one! It's simply called `shadcn`. For it to work, you'll need to make sure the shadcn/ui CSS variables are available, as the `<InfiniteTable />` theme variables will rely on the values of those CSS variables. Other than that, simply import the `<InfiniteTable />` CSS file and you're good to go.\n\n```tsx\nimport '@infinite-table/infinite-react/index.css';\n\n<div className=\"infinite-theme-name--shadcn dark\">\n  <DataSource  {...}>\n    <InfiniteTable {...} />\n  </DataSource>\n</div>\n```\n\nYou'll have to include the `infinite-theme-name--shadcn` class name on a parent element of `<InfiniteTable />` (or even on the `<InfiniteTable />` component itself). Additionally, for dark mode, you'll have to use the `dark` class name (on the body element for example) to put the shadcn/ui CSS variables in dark mode, and then `<InfiniteTable />` will pick that up. This means that for this theme, using the `infinite-theme-mode--dark` class name is optional.\n\n\n<CSEmbed id=\"lucid-water-fmj7zx\" code={false} size=\"lg\" />\n\n\nEnjoy!"
    },
    "/blog/2025/03/20/async-context-menus": {
      "filePath": "/blog/2025/03/20/async-context-menus",
      "routePath": "/blog/2025/03/20/async-context-menus",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2025/03/20/async-context-menus.page.md",
      "fileName": "async-context-menus.page.md",
      "folderPath": "/blog/2025/03/20/",
      "frontmatter": {
        "title": "Async Context Menus",
        "description": "Learn how to use async context menus in Infinite Table.",
        "date": "2025-03-20T00:00:00.000Z"
      },
      "excerpt": "Infinite Table 6.1.0 introduces support for lazy loading context menus. This is useful when you need to load your context menu items conditionally, from the backend, based on the cell's value or other conditions.",
      "readingTime": "1 min read",
      "content": "\nInfinite Table 6.1.0 introduces support for lazy loading context menus. This is useful when you need to load your context menu items conditionally, from the backend, based on the cell's value or other conditions.\n\n## How it works\n\nStarting with version `6.1.0`, the <PropLink name=\"getCellContextMenuItems\" /> and <PropLink name=\"getContextMenuItems\" /> props can now return a `Promise` that resolves to an array of `MenuItem` objects (or an object with `items` and `columns` properties, if you need to also configure the columns).\n\n<CSEmbed title=\"Async Context Menus\" id=\"nostalgic-borg-qg8q7r\" code={false}>\n\n<Description>\nRight click any cell in the DataGrid - the context menu will be displayed with a delay of `400ms`.\n</Description>\n\n</CSEmbed>\n\n<Note>\n\nThe <PropLink name=\"getCellContextMenuItems\" /> is called with an object that gives you access to all the info regarding the current right-clicked cell - both the row information and the current column. You can use that to decide whether you want to return a menu immediately or to fetch some data from the server and display the context menu after the server response comes in.\n\n</Note>"
    },
    "/blog/2024/06/05/master-detail-datagrid-with-charts": {
      "filePath": "/blog/2024/06/05/master-detail-datagrid-with-charts",
      "routePath": "/blog/2024/06/05/master-detail-datagrid-with-charts",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/06/05/master-detail-datagrid-with-charts.page.md",
      "fileName": "master-detail-datagrid-with-charts.page.md",
      "folderPath": "/blog/2024/06/05/",
      "frontmatter": {
        "title": "Master Detail React DataGrid with Charts",
        "author": "admin",
        "date": "2024-06-05T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "In this demo, we show you how easy it is to leverage the master-detail support in our React DataGrid in order to toggle between a table and a chart view in the row detail.",
      "readingTime": "3 min read",
      "content": "In this demo, we show you how easy it is to leverage the master-detail support in our React DataGrid in order to toggle between a table and a chart view in the row detail.\n\n\n<CSEmbed id=\"master-detail-with-charts-gg7h4f\" code={false} size=\"lg\" title=\"It's very easy to change between an InfiniteTable or a chart in the row detail\"/>\n\nIn the <PropLink name=\"components.RowDetail\" code={false}>RowDetail</PropLink> component, we render a `<DataSource />`, which in turn will render either an `<InfiniteTable />` component or a chart.\n\nThe `<DataSource />` in InfiniteTable is very powerful and does all the data processing the grid needs. All the row grouping, sorting, filtering, aggregations, pivoting are done in the `<DataSource />` - so you can use it standalone, or with InfiniteTable - it's totally up to you.\n\nIn practice, this means that you can use the `<DataSource />` to process your data and then simply pass that to a charting library like `ag-charts-react`.\n\n```tsx\nconst detailGroupBy: DataSourcePropGroupBy<Developer> = [{ field: \"stack\" }];\nconst detailAggregationReducers: DataSourcePropAggregationReducers<Developer> =\n  {\n    salary: {\n      field: \"salary\",\n      initialValue: 0,\n      reducer: (acc, value) => acc + value,\n      done: (value, arr) => Math.round(arr.length ? value / arr.length : 0),\n    },\n  };\n\nfunction RowDetail() {\n  const rowInfo = useMasterRowInfo<City>()!;\n  const [showChart, setShowChart] = React.useState(rowInfo.id % 2 == 1);\n\n  return (\n    <div style={{...}}>\n      <button onClick={() => setShowChart((showChart) => !showChart)}>\n        Click to see {showChart ? \"grid\" : \"chart\"}\n      </button>\n\n      {/**\n       * In this example, we leverage the DataSource aggregation and grouping feature to\n       * calculate the average salary by stack for the selected city.\n       */}\n      <DataSource<Developer>\n        data={detailDataSource}\n        primaryKey=\"id\"\n        groupBy={detailGroupBy}\n        aggregationReducers={detailAggregationReducers}\n      >\n        {/**\n         * Notice here we're not rendering an InfiniteTable component\n         * but rather we use a render function to access the aggregated data.\n         */}\n        {(params) => {\n          // here we decide if we need to show the chart or the grid\n          if (!showChart) {\n            return (\n              <InfiniteTable\n                columns={detailColumns}\n                domProps={{\n                  style: { paddingTop: 30 },\n                }}\n              />\n            );\n          }\n\n          // the dataArray has all the aggregations and groupings done for us, \n          // so we need to retrieve the correct rows and pass it to the charting library\n          const groups = params.dataArray.filter((rowInfo) => rowInfo.isGroupRow);\n          const groupData = groups.map((group) => ({ stack: group.data?.stack, avgSalary: group.reducerData?.salary }));\n\n          return (\n            <AgChartsReact\n              options={{\n                autoSize: true,\n                title: {\n                  text: `Avg salary by stack in ${rowInfo.data?.name}, ${rowInfo.data?.country}`,\n                },\n                data: groupData,\n                series: [\n                  {\n                    type: \"bar\",\n                    xKey: \"stack\",\n                    yKey: \"avgSalary\",\n                    yName: \"Average Salary\",\n                  },\n                ],\n              }}\n            />\n          );\n        }}\n      </DataSource>\n    </div>\n  );\n}\n```\n\nThe demo above is using the `ag-charts-react` package to render the charts.\n\n<Note>\n\nRead more about the [rendering custom content in a master-detail setup](/docs/learn/master-detail/custom-row-detail-content).\n\n</Note>\n\n\n"
    },
    "/blog/2025/05/12/the-first-devtools-for-a-datagrid": {
      "filePath": "/blog/2025/05/12/the-first-devtools-for-a-datagrid",
      "routePath": "/blog/2025/05/12/the-first-devtools-for-a-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2025/05/12/the-first-devtools-for-a-datagrid.page.md",
      "fileName": "the-first-devtools-for-a-datagrid.page.md",
      "folderPath": "/blog/2025/05/12/",
      "frontmatter": {
        "title": "The First DataGrid with a DevTools Extension",
        "description": "We've launched a Chrome DevTools Extension for Infinite Table",
        "author": "admin",
        "date": "2025-05-12T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "We're happy to announce that [Infinite Table DevTools extension](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa) is now live!",
      "readingTime": "3 min read",
      "content": "\nWe're happy to announce that [Infinite Table DevTools extension](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa) is now live!\n\nInfinite Table is the first DataGrid with a Chrome DevTools extension. Starting with version `7.0.0` of Infinite, you can specify the `debugId` property on the `<InfiniteTable />` instance and it will be picked up by the devtools.\n\n<Note>\n\nTo see the extension on a live demo, head to the [chrome webstore](https://chromewebstore.google.com/detail/infinite-table-devtools-e/jpipjljbfffijmgiecljadbogfegejfa) to download the extension.\n\nThen visit [our live demo page](/full-demo) and open your browser devtools - you should see the \"Infinite Table\" devtool tab. Click it and enjoy interacting with the DataGrid!\n</Note>\n\n\n```tsx {16}\nconst columns = {\n  name: {\n    field: 'firstName',\n  },\n  lastName: {\n    field: 'lastName',\n  },\n  age: {\n    field: 'age',\n  },\n}\n\nconst App = () => {\n  return <DataSource primaryKey={'id'} data={[...]}>\n    <InfiniteTable\n      debugId=\"simple\"\n      columns={columns}\n    />\n  </DataSource>\n}\n```\n\n<Note>\n\nIf you have multiple instances, each with a unique `debugId` property, they will all show up\n</Note>\n\n<img src=\"https://raw.githubusercontent.com/infinite-table/infinite-react/refs/heads/master/devtools/screenshots/main.jpg\" alt=\"Infinite Table DevTools Extension\" width=\"100%\" style={{minWidth: \"100%\"}} />\n\n\n## Current features\n\nThe Devtools extension was launched with an initial feature-set, which will expand as we grow and as we get user feedbak - so be sure to tell us what you'd like to see in the devtools.\n\nCurrently, it offers the ability to do the following:\n - see the list of all columns and adjust which are visible\n - see timings of the following data operations: sorting, filtering, group/pivot/tree.\n    This always show how much the last operation of that type took.\n - interact with the grouping and sorting information in the `<DataSource />` - and revert it to user-values at any time\n - see and clear the logs\n - see various warning messages and performance-related issues.\n\n## Planned features\n\nAs we already mentioned, we're planning to expand the devtools, as we're just getting a taste of what's possible. It took us some time to figure our our best workflow in developing the devtools, and we're now confident we can iterate much faster.\n\nHaving said this, we're looking for feedback from you on what insights you'd like to see in the InfiniteTable DataGrid via the devtools. We have our own list of things we want to work on, but we plan to incorporate user-feedback asap. So here's our wishlist for the devtools:\n\n - ability to see more timings on various operations - including a chart with historical values during the lifetime of a DataGrid instance - something similar to how React DevTools shows render operations and their durations.\n - add the ability to filter logs via channel\n - show more performance tips&tricks that can make your DataGrid faster\n - allow you to interact with many props of the DataGrid - row and cell selection, keyboard navigation, filters, column state, sorting, pivoting, pivot result columns, aggregations, column groups, lazy loading, theming and more.\n - give you a full state of the DataGrid, and the ability to apply and restore it at any time.\n - show you the details of your license key and remind you if it's close to the expiration date.\n\n\n## Your turn\n\nIt's your turn to give us feedback on the Infinite Table DevTools Extension!\n\nLet us know what you think and how you'd like to use it in order to enhance your interaction with the DataGrid. "
    },
    "/blog/2024/06/13/how-to-use-excel-like-editing-in-datagrid": {
      "filePath": "/blog/2024/06/13/how-to-use-excel-like-editing-in-datagrid",
      "routePath": "/blog/2024/06/13/how-to-use-excel-like-editing-in-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/06/13/how-to-use-excel-like-editing-in-datagrid.page.md",
      "fileName": "how-to-use-excel-like-editing-in-datagrid.page.md",
      "folderPath": "/blog/2024/06/13/",
      "frontmatter": {
        "title": "How to use Excel-like editing in your DataGrid",
        "author": "admin",
        "date": "2024-06-13T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "Excel-like editing is a very popular request we had. In this short article, we show you how to configure Excel-like editing in the Infinite React DataGrid.",
      "readingTime": "3 min read",
      "content": "\nExcel-like editing is a very popular request we had. In this short article, we show you how to configure Excel-like editing in the Infinite React DataGrid.\n\n<CSEmbed title=\"Click a cell and start typing\" code={false} id=\"excel-like-editing-infinite-datagrid-y6xtw6\" />\n\nThis behavior is achieved by using the [Instant Edit keyboard shorcut](/docs/learn/keyboard-navigation/keyboard-shortcuts#instant-edit).\n\n\n## Configuring keyboard shortcuts\n\n```ts {4,12}\nimport {\n  DataSource,\n  InfiniteTable,\n  keyboardShortcuts\n} from '@infinite-table/infinite-react';\n\n function App() {\n  return <DataSource<Developer> primaryKey=\"id\" data={dataSource}>\n    <InfiniteTable<Developer>\n      columns={columns}\n      keyboardShortcuts={[\n        keyboardShortcuts.instantEdit\n      ]}\n    />\n  </DataSource>\n}\n```\n\nThe `instantEdit` [keyboard shorcut](/docs/learn/keyboard-navigation/keyboard-shorcuts) is configured (by default) to respond to any key (via the special `*` identifier which matches anything) and will start editing the cell as soon as a key is pressed. This behavior is the same as in Excel, Google Sheets, Numbers or other spreadsheet software.\n\n<Note>\n\n\nTo enable editing globally, you can use the <PropLink name=\"columnDefaultEditable\" /> boolean prop on the `InfiniteTable` DataGrid component. This will make all columns editable.\n\nOr you can be more specific and choose to make individual columns editable via the <PropLink name=\"columns.defaultEditable\">column.defaultEditable</PropLink> prop. This overrides the global <PropLink name=\"columnDefaultEditable\" />.\n\n</Note>\n\n\n<HeroCards>\n<YouWillLearnCard title=\"Column Editors\" path=\"/docs/learn/editing/column-editors\">\nRead about how you can configure various editors for your columns.\n</YouWillLearnCard>\n\n<YouWillLearnCard title=\"Editing Flow Chart\" path=\"/docs/learn/editing/inline-edit-flow\">\nA picture is worth a thousand words - see a chart for the editing flow.\n</YouWillLearnCard>\n\n</HeroCards>\n\n\n## Finishing an Edit\n\nAn edit is generally finished by user interaction - either the user confirms the edit by pressing the `Enter` key or cancels it by pressing the `Escape` key.\n\nAs soon as the edit is confirmed by the user, `InfiniteTable` needs to decide whether the edit should be accepted or not.\n\nIn order to decide (either synchronously or asynchronously) whether an edit should be accepted or not, you can use the global <PropLink name=\"shouldAcceptEdit\"/> prop or the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> alternative.\n\n<Note>\n\nWhen neither the global <PropLink name=\"shouldAcceptEdit\"/> nor the column-level <PropLink name=\"columns.shouldAcceptEdit\">column.shouldAcceptEdit</PropLink> are defined, all edits are accepted by default.\n\n</Note>\n\n<Note>\n\nOnce an edit is accepted, the <PropLink name=\"onEditAccepted\"/> callback prop is called, if defined.\n\nWhen an edit is rejected, the <PropLink name=\"onEditRejected\"/> callback prop is called instead.\n\nThe accept/reject status of an edit is decided by using the `shouldAcceptEdit` props described above. However an edit can also be cancelled by the user pressing the `Escape` key in the cell editor - to be notified of this, use the <PropLink name=\"onEditCancelled\"/> callback prop.\n\n</Note>\n\nUsing shouldAcceptEdit to decide whether a value is acceptable or not\n\n<Description>\n\nIn this example, the `salary` column is configured with a <PropLink name=\"columns.shouldAcceptEdit\">shouldAcceptEdit</PropLink> function property that rejects non-numeric values.\n\n</Description>\n<CSEmbed code={false} id=\"infinite-table-editing-custom-edit-value-2x7nrw\"/>\n\n## Persisting an Edit\n\nBy default, accepted edits are persisted to the `DataSource` via the <DApiLink name=\"updateData\">DataSourceAPI.updateData</DApiLink> method.\n\nTo change how you persist values (which might include persisting to remote locations), use the <PropLink name=\"persistEdit\"/> function prop on the `InfiniteTable` component.\n\n<Note>\n\nThe <PropLink name=\"persistEdit\"/> function prop can return a `Promise` for async persistence. To signal that the persisting failed, reject the promise or resolve it with an `Error` object.\n\nAfter persisting the edit, if all went well, the <PropLink name=\"onEditPersistSuccess\" /> callback prop is called. If the persisting failed (was rejected), the <PropLink name=\"onEditPersistError\" /> callback prop is called instead.\n\n</Note>"
    },
    "/blog/2024/06/18/how-to-configure-datagrid-to-maximise-screen-real-estate": {
      "filePath": "/blog/2024/06/18/how-to-configure-datagrid-to-maximise-screen-real-estate",
      "routePath": "/blog/2024/06/18/how-to-configure-datagrid-to-maximise-screen-real-estate",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2024/06/18/how-to-configure-datagrid-to-maximise-screen-real-estate.page.md",
      "fileName": "how-to-configure-datagrid-to-maximise-screen-real-estate.page.md",
      "folderPath": "/blog/2024/06/18/",
      "frontmatter": {
        "title": "How to configure the DataGrid to maximise screen real estate",
        "author": "admin",
        "date": "2024-06-18T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "Many modern apps rely heavily on white-space to make the user interface easy to read and follow. However, there are financial apps or data-heavy apps where you need to display a lot of information in a small space.",
      "readingTime": "3 min read",
      "content": "\nMany modern apps rely heavily on white-space to make the user interface easy to read and follow. However, there are financial apps or data-heavy apps where you need to display a lot of information in a small space.\nIn this blogpost, we want to show you how to tweak the theming of the Infinite React DataGrid to make it more dense and maximise screen real estate.\n\n## Configuring the spacing in the DataGrid cells\n\nThe CSS variable you want to target is `--infinite-cell-padding` - it's used to set the padding of the cells in the DataGrid. By default, the padding is set to `var(--infinite-space-2) var(--infinite-space-3)`. This means that the padding is set to `4px 8px` for a root font size of `16px`.\n\n```css {2} title=\"Default definition for --infinite-cell-padding\"\n:root {\n  --infinite-cell-padding: var(--infinite-space-2) var(--infinite-space-3); /* vertical horizontal */\n\n  --infinite-space-2: .25rem; /* 4px - for a root font size of 16px */\n  --infinite-space-3: .5rem; /* 8px */\n}\n```\n\nYou can override this variable in your CSS to make the padding smaller. For example, you can set the padding to `2px 4px` by setting the variable like this:\n\n```css {2} title=\"Override the --infinite-cell-padding variable\"\nbody {\n  --infinite-cell-padding: 2px 4px;\n}\n```\n\n<Note>\n\nIt's important to understand that cell height is not given by the padding, but by the <PropLink name=\"rowHeight\" /> prop.\n\nSo if you want to make the DataGrid more dense, you should also consider setting the <PropLink name=\"rowHeight\" /> prop to a smaller value.\n\n</Note>\n\n<CSEmbed id=\"react-datagrid-infinite-table-theme-switching-forked-psnzfr\" title=\"Using rowHeight and cell padding to configure a dense mode in DataGrid cells\" code={false} />\n\n## Configuring the spacing in the column headers\n\nFor configuring padding inside column headers, you need to use the ```--infinite-header-cell-padding``` CSS var.\n\n```css {2} title=\"Default definition for --infinite-header-cell-padding\"\n:root {\n  --infinite-header-cell-padding: var(--infinite-header-cell-padding-y) var(--infinite-header-cell-padding-x);\n  --infinite-header-cell-padding-x: var(--infinite-space-3);\n  --infinite-header-cell-padding-y: var(--infinite-space-3);\n}\n```\n\nYou can make the padding smaller for example give it a value of `2px 4px` by setting the variable like this:\n\n```css {2} title=\"Override the --infinite-header-cell-padding variable\"\nbody {\n  --infinite-header-cell-padding: 2px 4px;\n}\n```\n\n<CSEmbed id=\"react-datagrid-dense-mode-forked-tz3gft\" title=\"Dense mode in both cells and column headers\" code={false}/> \n\nThe above demo also uses the <PropLink name=\"headerOptions.alwaysReserveSpaceForSortIcon\" /> prop to make sure that the column headers don't reserve a space for the sort icon when the respective column is not sorted.\n\n<Note>\n\nAnother option would be to override the CSS spacing scale that InfiniteTable defines - but that affects more than just the padding of the cells and headers.\n\n```CSS title=\"Default values for the spacing scale\"\n:root {\n  --infinite-space-1: .125rem;\n  --infinite-space-2: .25rem;\n  --infinite-space-3: .5rem;\n  --infinite-space-4: 0.75rem;\n  --infinite-space-5: 1rem;\n}\n```\n\nYou're encouraged to experiment with these variables to find the right balance for your app.\n\n</Note>"
    },
    "/blog/2025/08/16/grouping-toolbar-now-available-in-the-datagrid": {
      "filePath": "/blog/2025/08/16/grouping-toolbar-now-available-in-the-datagrid",
      "routePath": "/blog/2025/08/16/grouping-toolbar-now-available-in-the-datagrid",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/blog/2025/08/16/grouping-toolbar-now-available-in-the-datagrid.page.md",
      "fileName": "grouping-toolbar-now-available-in-the-datagrid.page.md",
      "folderPath": "/blog/2025/08/16/",
      "frontmatter": {
        "title": "Using drag-and-drop to update row grouping via the Grouping Toolbar",
        "description": "We've enhanced the InfiniteTable DataGrid with a Grouping Toolbar, which allows you to drag and drop columns to group/ungroup",
        "author": "admin",
        "date": "2025-08-16T00:00:00.000Z",
        "authorData": {
          "label": "admin"
        }
      },
      "excerpt": "",
      "readingTime": "3 min read",
      "content": "\n\nWith version `7.2.0`, we added another component to make your interaction with the DataGrid easier - namely the `GroupingToolbar`.\n\nThis toolbar allows users to interact with row grouping very easily, via drag and drop. Drag column headers on the GroupingToolbar component and off you go, grouping is updated. Additionally, you can drag items on the GroupingToolbar in order to change the order of the row grouping.\n\n```tsx {3} title=\"Base structure for using the grouping toolbar\"\n<DataSource>\n  <InfiniteTable>\n    <InfiniteTable.GroupingToolbar />\n    <InfiniteTable.Header />\n    <InfiniteTable.Body />\n  </InfiniteTable>\n</DataSource>\n```\n\nSimply reference the component via `InfiniteTable.GroupingToolbar` and nest it under `<InfiniteTable />`.\n\n<Note>\n\nIn the above and below examples, for simplicity, we're not showing the whole configuration of the `<DataSource />` and `<InfiniteTable />` components - for full code examples, see further below.\n\n</Note>\n\nThe good part is that you can very easily add additional elements to your structure and have the grouping toolbar displayed on the side, vertically.\n\n```tsx {8} title=\"Example structure for vertical grouping toolbar\"\n<DataSource>\n  <InfiniteTable>\n    <div className=\"flex flex-1 flex-row\">\n      <div className=\"flex-1 flex flex-col\">\n        <InfiniteTable.Header />\n        <InfiniteTable.Body />\n      </div>\n      <InfiniteTable.GroupingToolbar orientation=\"vertical\" />\n    </div>\n  </InfiniteTable>\n</DataSource>\n```\n\n<CSEmbed id=\"wandering-leftpad-2zxwxr\" code={false} title=\"Using the GroupingToolbar\" />\n\n<Note>\n\nIn the example above, try dragging the header of the `hobby` column onto the GroupingToolbar to add grouping by `hobby`.\n\n</Note>\n\n\n## Horizontal and vertical layout\n\nAs shown above, you can use the `GroupingToolbar` both horizontally and vertically. This is configured via the `orientation` prop - either `\"horizontal\"` (the default) or `\"vertical\"`.\n\nMake sure you configure this to match your desired layout.\n\n<CSEmbed id=\"still-bird-td2rgc\" code={false} title=\"Vertical layout demo\" />\n\n## Customizing and Extending the GroupingToolbar\n\nWhen building this, we were sure you will want to customize almost everything about the toolbar. So we prepared a simple way to do this, via the `components` prop of the `GroupingToolbar`.\n\nThe following components are available:\n - `Placeholder` - controls the placeholder that's visible when there are no row groups available.\n - `ToolbarItem` - used to replace the toolbar items - corresponding to the row groups.\n - `Host` - the component itself - useful to override when you want to add some other React elements before or after the toolbar items.\n\nIn the example below, we demo how you can display a custom placeholder for the GroupingToolbar.\n\n<CSEmbed id=\"sad-rubin-6kx2v6\" code={false} title=\"Using a custom placeholder in the GroupingToolbar\" />\n\nWith all these ways to hook into the component, there are no limits to the styling and structure of your layout.\n\nGive it a try and let us know (via github issues or [twitter](https://x.com/get_infinite)) if there's anything you'd like to see improved or have questions about!\n\n## Summary\n\nThe new `GroupingToolbar` component brings an intuitive drag-and-drop interface to row grouping in `InfiniteTable`. Whether you prefer horizontal or vertical layouts, the toolbar provides a seamless way to manage grouping while maintaining the flexibility to customize its appearance and behavior.\n\nWe're excited to see how you'll use this new feature in your applications. Happy coding!\n\n"
    },
    "/docs/learn/grouping-and-pivoting/pivoting/customizing-pivot-columns": {
      "filePath": "/docs/learn/grouping-and-pivoting/pivoting/customizing-pivot-columns",
      "routePath": "/docs/learn/grouping-and-pivoting/pivoting/customizing-pivot-columns",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/grouping-and-pivoting/pivoting/customizing-pivot-columns.page.md",
      "fileName": "customizing-pivot-columns.page.md",
      "folderPath": "/docs/learn/grouping-and-pivoting/pivoting/",
      "frontmatter": {
        "title": "Customizing Pivot Columns"
      },
      "excerpt": "There are a number of ways to customize the generated pivot columns and we'll cover each of them in this page",
      "readingTime": "2 min read",
      "content": "\nThere are a number of ways to customize the generated pivot columns and we'll cover each of them in this page\n\n## Inheriting from initial columns\n\nPivoting is all about aggregations, so you need to specify the <DataSourcePropLink name=\"aggregationReducers\">reducers</DataSourcePropLink> that will aggregate your data. Each reducer can have a `field` property that specifies the field that will be used for aggregation.\n\nIf the table <PropLink name=\"columns\"/> collection already has a column bound to the `field` used in the aggregation, the column configuration will be inherited by the generated pivot column.\n\n```ts\nconst columns: InfiniteTablePropColumns<Developer> = {\n  preferredLanguage: {\n    field: 'preferredLanguage',\n    style: { color: 'blue' },\n  },\n  age: {\n    field: 'age',\n    style: {\n      color: 'magenta',\n      background: 'yellow',\n    },\n  },\n  salary: {\n    field: 'salary',\n    type: 'number',\n    style: {\n      color: 'red',\n    },\n  },\n  canDesign: { field: 'canDesign' },\n  country: { field: 'country' },\n  firstName: { field: 'firstName' },\n  id: { field: 'id' },\n};\n\nconst avgReducer: InfiniteTableColumnAggregator<Developer, any> = {\n  initialValue: 0,\n  reducer: (acc, sum) => acc + sum,\n  done: (sum, arr) => {\n    return Math.floor(arr.length ? sum / arr.length : 0);\n  },\n};\n\nconst aggregationReducers: DataSourceProps<Developer>['aggregationReducers'] = {\n  // will have the same configuration as the `salary` column\n  avgSalary: { field: 'salary', ...avgReducer },\n  avgAge: {\n    field: 'age',\n    ...avgReducer,\n    pivotColumn: {\n      // will have the same configuration as the `preferredLanguage` column\n      inheritFromColumn: 'preferredLanguage',\n      // but specify a custom default width\n      defaultWidth: 500,\n    },\n  },\n};\n```\n\n<Sandpack title=\"Pivot columns inherit from original columns bound to the same field\">\n\n```ts file=\"pivot-column-inherit-example.page.tsx\"\n\n```\n\n</Sandpack>\n"
    },
    "/docs/learn/grouping-and-pivoting/pivoting/overview": {
      "filePath": "/docs/learn/grouping-and-pivoting/pivoting/overview",
      "routePath": "/docs/learn/grouping-and-pivoting/pivoting/overview",
      "fileAbsolutePath": "/Users/radubrehar/code/infinite-table/www/content/docs/learn/grouping-and-pivoting/pivoting/overview.page.md",
      "fileName": "overview.page.md",
      "folderPath": "/docs/learn/grouping-and-pivoting/pivoting/",
      "frontmatter": {
        "title": "Pivoting"
      },
      "excerpt": "An enteprise-level feature `InfiniteTable` provides is the pivoting functionality. Combined with grouping and advanced aggregation, it unlocks new ways to visualize data.",
      "readingTime": "10 min read",
      "content": "\nAn enteprise-level feature `InfiniteTable` provides is the pivoting functionality. Combined with grouping and advanced aggregation, it unlocks new ways to visualize data.\n\nPivoting is first defined at the `DataSource` level, via the <PropLink name=\"pivotBy\" /> prop. It's an array of objects, each with a `field` property bound (so `pivotBy[].field` is keyof `DATA_TYPE`) to the `DataSource`.\n\n<Note>\n\nPivoting generates columns based on the pivoting values, so you have to pass those generated columns into the `<InfiniteTable />` component.\n\nYou do that by using a `function` as a direct child of the `DataSource`, and in that function you have access to the generated `pivotColumns` array. Likewise for `pivotColumnGroups`.\n\n</Note>\n\nFor more pivoting examples, see [our pivoting demos](/docs/learn/examples/dynamic-pivoting-example)\n\n```ts\nconst pivotBy = [{ field: 'team' }]\n // field needs to be keyof DATA_TYPE both in `pivotBy` and `groupBy`\nconst groupBy = [{field: 'department'}, {field: 'country'}]\n\n<DataSource<DATA_TYPE> pivotBy={pivotBy} groupBy={groupBy}>\n{ ({pivotColumns, pivotColumnGroups}) => {\n  return <InfiniteTable<DATA_TYPE>\n    pivotColumns={pivotColumns}\n    pivotColumnGroups={pivotColumnGroups}\n  />\n} }\n</DataSource>\n```\n\n<Sandpack title=\"Pivoting with avg aggregation\">\n\n```ts file=\"pivoting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Customizing Pivot Columns\n\nThere are a number of ways to customize the pivot columns and <DataSourcePropLink name=\"pivotBy.columnGroup\" nocode>pivot column groups</DataSourcePropLink>. This is something you generally want to do, as they are generated and you might need to tweak column headers, size, etc.\n\nThe default behavior for pivot columns generated for aggregations is that they inherit the properties of the original columns bound to the same field as the aggregation.\n\n```ts\nconst avgReducer: InfiniteTableColumnAggregator<Developer, any> = {\n  initialValue: 0,\n  reducer: (acc, sum) => acc + sum,\n  done: (sum, arr) => {\n    return Math.floor(arr.length ? sum / arr.length : 0);\n  },\n};\nconst aggregationReducers: DataSourceProps<Developer>['aggregationReducers'] = {\n  // will have the same configuration as the `salary` column\n  avgSalary: { field: 'salary', ...avgReducer },\n  avgAge: {\n    field: 'age',\n    ...avgReducer,\n    pivotColumn: {\n      // will have the same configuration as the `preferredLanguage` column\n      inheritFromColumn: 'preferredLanguage',\n      // but specify a custom default width\n      defaultWidth: 500,\n    },\n  },\n};\n```\n\n<Sandpack title=\"Pivot columns inherit from original columns bound to the same field\">\n\n```ts file=\"pivot-column-inherit-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nAnother way to do it is to specify <DataSourcePropLink name=\"pivotBy.column\" />, as either an object, or (more importantly) as a function.\nIf you pass an object, it will be applied to all pivot columns in the column group generated for the `field` property.\n\n```tsx\nconst pivotBy: DataSourcePivotBy<DATA_TYPE>[] = [\n  { field: 'country' },\n  { field: 'canDesign', column: { defaultWidth: 400 } },\n];\n\n<DataSource pivotBy={pivotBy} />;\n```\n\nIn the above example, the `column.defaultWidth=400` will be applied to columns generated for all `canDesign` values corresponding to each country. This is good but not good enough as you might want to customize the pivot column for every value in the pivot. You can do that by passing a function to the `pivotBy.column` property.\n\n```tsx\nconst pivotBy: DataSourcePivotBy<DATA_TYPE>[] = [\n  { field: 'country' },\n  {\n    field: 'canDesign',\n    column: ({ column }) => {\n      return {\n        header: column.pivotGroupKey === 'yes' ? 'Designer' : 'Not a Designer',\n      };\n    },\n  },\n];\n```\n\n<Sandpack title=\"Pivoting with customized pivot column\">\n\n```ts file=\"pivoting-customize-column-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n## Total and grand-total columns\n\nIn <DPropLink name=\"pivotBy\" nocode>pivot mode</DPropLink> you can configure both <PropLink name=\"pivotTotalColumnPosition\" nocode>total columns</PropLink> and <PropLink name=\"pivotGrandTotalColumnPosition\" nocode>grand-total columns</PropLink>. By default, grand-total columns are not displayed, so you have to explicitly set the <PropLink name=\"pivotGrandTotalColumnPosition\" /> prop for them to be visible.\n\n<Sandpack title=\"Pivoting with customized position for totals and grand-total columns\">\n\n```ts file=\"$DOCS/reference/pivot-grand-total-column-position-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\n**What are grand-total columns?**\n\nFor each <DPropLink name=\"aggregationReducers\" nocode>aggregation reducer</DPropLink> specified in the `DataSource`, you can have a total column - this is what <PropLink name=\"pivotGrandTotalColumnPosition\" nocode>grand-total columns</PropLink> basically are.\n\n</Note>\n\n## Server-side pivoting\n\nBy default, pivoting is client side. However, if you specify <DataSourcePropLink name=\"lazyLoad\" code>DataSource.lazyLoad</DataSourcePropLink> and provide a function that returns a promise for the <DataSourcePropLink name=\"data\" code>DataSource.data</DataSourcePropLink> prop, the table will use server-pivoted data.\n\nThe <DataSourcePropLink name=\"data\" code>DataSource.data</DataSourcePropLink> function is expected to return a promise that resolves to an object with the following shape:\n\n- `totalCount` - the total number of records in the group we're pivoting on\n- `data` - an array of objects that describes child groups, each object has the following properties:\n  - `keys` - an array of the group keys (usually strings) that uniquely identifies the group, from the root to the current group\n  - `data` - an object that describes the common properties of the group\n  - `aggregations` - an object that describes the aggregations for the current group\n  - `pivot` - the pivoted values and aggregations for each value. This object will have the following properties:\n    - `totals` - an object with a key for each aggregation. The value is the aggregated value for the respective aggregation reducer.\n    - `values` - an object keyed with the unique values for the pivot field. The values of those keys are objects with the same shape as the `pivot` top-level object, namely `totals` and `values`.\n\nIn the example below, let's assume the following practical scenario, with the data-type being a `Developer{country, stack, preferredLanguage, canDesign, age, salary}`.\n\n```tsx\nconst groupBy = [\n  { field: 'country' }, // possible values: any valid country\n  { field: 'stack' }, // possible values: \"backend\", \"frontend\", \"full-stack\"\n];\nconst pivotBy = [\n  { field: 'preferredLanguage' }, // possible values: \"TypeScript\",\"JavaScript\",\"Go\"\n  { field: 'canDesign' }, // possible values: \"yes\" or \"no\"\n];\n\nconst aggregationReducers = {\n  salary: { name: 'Salary (avg)', field: 'salary', reducer: 'avg' },\n  age: { name: 'Age (avg)', field: 'age', reducer: 'avg' },\n};\n```\n\n```tsx\n\nconst dataSource = ({ groupBy, pivotBy, groupKeys, aggregationReducers }) => {\n  // make sure you return a Promise that resolves to the correct structure - see details below\n\n  //eg: groupBy: [{ field: 'country' }, { field: 'stack' }],\n  //    groupKeys: [], - so we're requesting top-level data\n\n  //eg: groupBy: [{ field: 'country' }, { field: 'stack' }],\n  //    groupKeys: [\"Canada\"], - so we're requesting Canada's data\n\n  //eg: groupBy: [{ field: 'country' }, { field: 'stack' }],\n  //    groupKeys: [\"Canada\"], - so we're requesting Canada's data\n\n}\n\n<DataSource lazyLoad data={dataSource}>\n```\n\n```js\n{\n  data: [\n    {\n      aggregations: {\n        // for each aggregation id, have an entry\n        salary: <SALARY_AGGREGATION_VALUE>,\n        age: <AGE_AGGREGATION_VALUE>,\n      },\n      data: {\n        // data is an object with the common group values\n        country: \"Canada\"\n      },\n      // the array of keys that uniquely identify this group, including all parent keys\n      keys: [\"Canada\"],\n      pivot: {\n        totals: {\n          // for each aggregation id, have an entry\n          salary: <SALARY_AGGREGATION_VALUE>,\n          age: <AGE_AGGREGATION_VALUE>,\n        },\n        values: {\n          [for each unique value]: { // eg: for country\n            totals: {\n              // for each aggregation, have an entry\n              salary: <SALARY_AGGREGATION_VALUE>,\n              age: <AGE_AGGREGATION_VALUE>,\n            },\n            values: {\n              [for each unique value]: { // eg: for stack\n                totals: {\n                  salary: <SALARY_AGGREGATION_VALUE>,\n                  age: <AGE_AGGREGATION_VALUE>,\n                }\n\n              }\n            }\n          }\n        }\n      }\n    }\n  ],\n  // the total number of rows in the remote data set\n  totalCount: 10,\n\n  // you can map \"values\" and \"totals\" above to shorter names\n\n  mappings: {\n    values: \"values\",\n    totals: \"totals\"\n  }\n}\n```\n\n<Sandpack title=\"Server-side pivoting example\">\n\n```ts file=\"remote-pivoting-example.page.tsx\"\n\n```\n\n</Sandpack>\n\n<Note>\n\nThe <PropLink name=\"groupRenderStrategy\" /> prop is applicable even to pivoted tables, but `groupRenderStrategy=\"inline\"` is not supported in this case.\n\n</Note>\n\n### Another pivoting example with batching\n\nPivoting builds on the same data response as server-side grouping, but adds the pivot values for each group, as we already showed. Another difference is that in pivoting, no leaf rows are rendered or loaded, since this is pivoting and it only works with aggregated data. This means the `DataSource.data` function must always return the same format for the response data.\n\nJust like server-side grouping, server-side pivoting also supports batching - make sure you specify <DataSourcePropLink name=\"lazyLoad\">lazyLoad.batchSize</DataSourcePropLink>.\n\nThe example below also shows you how to customize the table rows while records are still loading.\n\n<Sandpack title=\"Server side pivoting with lazy loding batching\">\n\n```ts file=\"server-side-pivoting-with-lazy-load-batching-example.page.tsx\"\n\n```\n\n</Sandpack>\n\nHere's another example, that assumes grouping by `country` and `city`, aggregations by `age` and `salary` (average values) and pivot by `preferredLanguage` and `canDesign` (a boolean property):\n\n```tsx\n//request:\ngroupKeys: [] // empty keys array, so it's a top-level group\ngroupBy: [{\"field\":\"country\"},{\"field\":\"city\"}]\nreducers: [{\"field\":\"salary\",\"id\":\"avgSalary\",\"name\":\"avg\"},{\"field\":\"age\",\"id\":\"avgAge\",\"name\":\"avg\"}]\nlazyLoadStartIndex: 0\nlazyLoadBatchSize: 10\npivotBy: [{\"field\":\"preferredLanguage\"},{\"field\":\"canDesign\"}]\n\n//response\n{\n  cache: true,\n  totalCount: 20,\n  data: [\n    {\n      data: {country: \"Argentina\"},\n      aggregations: {avgSalary: 20000, avgAge: 30},\n      keys: [\"Argentina\"],\n      pivot: {\n        totals: {avgSalary: 20000, avgAge: 30},\n        values: {\n          Csharp: {\n            totals: {avgSalary: 19000, avgAge: 29},\n            values: {\n              no: {totals: {salary: 188897, age: 34}},\n              yes: {totals: {salary: 196000, age: 36}}\n            }\n          },\n          Go: {\n            totals: {salary: 164509, age: 36},\n            values: {\n              no: {totals: {salary: 189202, age: 37}},\n              yes: {totals: {salary: 143977, age: 35}}\n            }\n          },\n          Java: {\n            totals: {salary: 124809, age: 32},\n            values: {\n              no: {totals: {salary: 129202, age: 47}},\n              yes: {totals: {salary: 233977, age: 25}}\n            }\n          },\n          //...\n        }\n      }\n    },\n    //...\n  ]\n}\n```\n\nIf we were to scroll down, the next batch of data would have the same structure as the previous one, but with `lazyLoadStartIndex` set to 10 (if `lazyLoad.batchSize = 10`).\n\nNow let's expand the first group and see how the request/response would look like:\n\n```tsx\n//request:\ngroupKeys: [\"Argentina\"]\ngroupBy: [{\"field\":\"country\"},{\"field\":\"city\"}]\nreducers: [{\"field\":\"salary\",\"id\":\"avgSalary\",\"name\":\"avg\"},{\"field\":\"age\",\"id\":\"avgAge\",\"name\":\"avg\"}]\nlazyLoadStartIndex: 0\nlazyLoadBatchSize: 10\npivotBy: [{\"field\":\"preferredLanguage\"},{\"field\":\"canDesign\"}]\n\n//response\n{\n  mappings: {\n    totals: \"totals\",\n    values: \"values\"\n  },\n  cache: true,\n  totalCount: 20,\n  data: [\n    {\n      data: {country: \"Argentina\", city: \"Buenos Aires\"},\n      aggregations: {avgSalary: 20000, avgAge: 30},\n      keys: [\"Argentina\", \"Buenos Aires\"],\n      pivot: {\n        totals: {avgSalary: 20000, avgAge: 30},\n        values: {\n          Csharp: {\n            totals: {avgSalary: 39000, avgAge: 29},\n            values: {\n              no: {totals: {salary: 208897, age: 34}},\n              yes: {totals: {salary: 296000, age: 36}}\n            }\n          },\n          Go: {\n            totals: {salary: 164509, age: 36},\n            values: {\n              no: {totals: {salary: 189202, age: 37}},\n              yes: {totals: {salary: 143977, age: 35}}\n            }\n          },\n          Java: {\n            totals: {salary: 124809, age: 32},\n            values: {\n              no: {totals: {salary: 129202, age: 47}},\n              yes: {totals: {salary: 233977, age: 25}}\n            }\n          },\n          //...\n        }\n      }\n    },\n    //...\n  ]\n}\n```\n\n<Note>\n\nThe response can contain a `mappings` key with values for `totals` and `values` keys - this can be useful for making the server-side pivot response lighter.\n\nIf `mappings` would be `{totals: \"t\", values: \"v\"}`, the response would look like this:\n\n```tsx\n{\n  totalCount: 20,\n  data: {...},\n  pivot: {\n    t: {avgSalary: 10000, avgAge: 30},\n    v: {\n      Go: {\n        t: {...},\n        v: {...}\n      },\n      Java: {\n        t: {...},\n        v: {...}\n      }\n    }\n  }\n\n```\n\nMore-over, you can also give aggregationReducers shorter keys to make the server response even more compact\n\n```tsx\nconst aggregationReducers: DataSourcePropAggregationReducers<Developer> =\n  {\n    s: {\n      name: 'Salary (avg)',\n      field: 'salary',\n      reducer: 'avg',\n    },\n    a: {\n      name: 'Age (avg)',\n      field: 'age',\n      reducer: 'avg',\n    },\n  };\n\n// pivot response\n{\n  totalCount: 20,\n  data: {...},\n  pivot: {\n    t: {s: 10000, a: 30},\n    v: {\n      Go: {\n        t: { s: 10000, a: 30 },\n        v: {...}\n      },\n      Java: {\n        t: {...},\n        v: {...}\n      }\n    }\n  }\n```\n\n</Note>\n\n<Note>\n\nAdding a `cache: true` key to the resolved object in the `DataSource.data` call will cache the value for the expanded group, so that when collaped and expanded again, the cached value will be used, and no new call is made to the `DataSource.data` function. This is applicable for both pivoted and/or grouped data. Not passing `cache: true` will make the function call each time the group is expanded.\n\n</Note>\n"
    }
  }
}